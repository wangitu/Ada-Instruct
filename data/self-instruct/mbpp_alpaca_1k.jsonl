{"instruction": "Write a Python program to check if a number is an Armstrong number or not. Your code should pass these tests:\n\nassert isArmstrong(153) == True\nassert isArmstrong(2) == False\nassert isArmstrong(371) == True", "output": "def isArmstrong(num):  \r\n    order = len(str(num))\r\n    sum = 0\r\n    temp = num\r\n    while temp > 0:  \r\n        digit = temp % 10  \r\n        sum += digit ** order  \r\n        temp //= 10  \r\n    if num == sum:  \r\n        return True\r\n    else:  \r\n        return False", "id": 0, "avg_similarity_score": 0.16146198830409358}
{"instruction": "Write a python program to find the most common element in a list of numbers. Your code should pass these tests:\n\nassert most_common([1,1,2,2,2,3]) == 2\nassert most_common([5,7,3,9,7,3,5,7]) == 7\nassert most_common([4,6,8]) == 4", "output": "def most_common(list): \r\n    counter = 0\r\n    num = list[0]   \r\n    for i in list: \r\n        curr_frequency = list.count(i) \r\n        if(curr_frequency > counter): \r\n            counter = curr_frequency \r\n            num = i\r\n    return num", "id": 1, "avg_similarity_score": 0.22706007442849546}
{"instruction": "Write a function to find the number of ways for making a change given the amount and coins of various denominations. Your code should pass these tests:\n\nassert make_change(10, [1, 2, 5]) == 4\nassert make_change(7, [1, 3, 4, 5]) == 3\nassert make_change(5, [2, 4, 5]) == 2", "output": "def make_change(amount, coins): \r\n    if (amount == 0): \r\n        return 1\r\n  \r\n    if (amount < 0 or len(coins)<=0): \r\n        return 0\r\n  \r\n    return make_change(amount, coins[:-1]) + make_change(amount - coins[-1], coins)", "id": 2, "avg_similarity_score": 0.21133716467049798}
{"instruction": "Write a function to generate all N-bit Gray codes. Your code should pass these tests:\n\nassert NBitGrayCode(2) == ['00','01','11','10']\nassert NBitGrayCode(3) == ['000','001','011','010','110','111','101','100']\nassert NBitGrayCode(4) == ['0000','0001','0011','0010','0110','0111','0101','0100','1100','1101','1111','1110','1010','1011','1001','1000']", "output": "def NBitGrayCode(n): \n      \n    if n == 0: \n        return [] \n    if n == 1: \n        return [\"0\", \"1\"] \n  \n    result_list = NBitGrayCode(n-1) \n    final_result = [] \n  \n    for i in range(0, len(result_list)): \n        final_result.append(\"0\" + result_list[i]) \n  \n    for i in range(len(result_list)-1, -1, -1): \n        final_result.append(\"1\"+ result_list[i]) \n    \n    return final_result", "id": 3, "avg_similarity_score": 0.0059171597633136085}
{"instruction": "Write a python program to find all the common elements in two unsorted arrays. Your code should pass these tests:\n\nassert common_ele([2,3,5,7], [5,2,8]) == [2,5]\nassert common_ele([1,3,5,7], [2,4,5,6]) == [5]\nassert common_ele([1,2,4,5], [2,4]) == [2,4]", "output": "def common_ele(arr1, arr2): \n      \n    a1_len = len(arr1) \n    a2_len = len(arr2) \n    res = []          \n  \n    for i in range(0, a1_len):  \n        for j in range(0, a2_len): \n            if arr1[i] == arr2[j]: \n                res.append(arr1[i]) \n                            \n    return (res)", "id": 4, "avg_similarity_score": 0.14788923992511055}
{"instruction": "Write a function to convert a given string of words into capital letter and remove leading and trailing whitespaces. Your code should pass these tests:\n\nassert Capital_and_Remove(\" python \") == \"PYTHON\"\nassert Capital_and_Remove(\"Python Rocks\") == \"PYTHON ROCKS\"\nassert Capital_and_Remove(\" hello  python \") == \"HELLO PYTHON\"", "output": "def Capital_and_Remove(string):\n  string = string.strip()\n  return string.upper()", "id": 5, "avg_similarity_score": 0.025345782757547463}
{"instruction": "Write a function to reverse a Case String. Your code should pass these tests:\n\nassert reverse_case(\"HeLlO WoRLd\") == \"hElLo wOrlD\"\nassert reverse_case(\"Python Coding\") == \"pYTHON cODING\"\nassert reverse_case(\"AB Ab ba\") == \"ab AB BA\"", "output": "def reverse_case(string):\n  string = list(string)\n  for i in range(len(string)):\n    if string[i].isupper():\n        string[i] = string[i].lower()\n    else:\n        string[i] = string[i].upper()\n            \n  return (\"\".join(string))", "id": 6, "avg_similarity_score": 0.08588980463980464}
{"instruction": "Write a function to calculate Hamming distance. Your code should pass these tests:\n\nassert hamming_dist('karol', 'koral') == 2\nassert hamming_dist('aaba', 'bbaa') == 4\nassert hamming_dist('1011101', '1001001') == 2", "output": "def hamming_dist(s1, s2): \n  \n    diffs = 0\n    for ch1, ch2 in zip(s1, s2): \n        if ch1 != ch2: \n            diffs += 1\n    return diffs", "id": 7, "avg_similarity_score": 0.0}
{"instruction": "Write a function to merge two unsorted list such that the result list will be cluster of sorted sublist. Your code should pass these tests:\n\nassert merge_clusters([3, 2, 5], [1]) == [[1], [2, 3, 5]]\nassert merge_clusters([4, 7, 3, 2], [10, 9 ,1, 5]) == [[1, 2, 3, 4, 5, 7], [9, 10]]\nassert merge_clusters([9, 5], [10, 4, 8]) == [[4, 5, 8], [9, 10]]", "output": "def merge_clusters(list_1, list_2):\r\n    sorted_list = sorted(list_1 + list_2)\r\n\r\n    indices = []\r\n    for i in range(len(sorted_list)-1):\r\n        if sorted_list[i] > sorted_list[i+1]:\r\n            indices.append(i+1)\r\n            \r\n    clusters = []\r\n    start = 0\r\n    for i in indices:\r\n        clusters.append(sorted_list[start:i])\r\n        start = i\r\n    clusters.append(sorted_list[start:])\r\n    return clusters", "id": 8, "avg_similarity_score": 0.09261732229123534}
{"instruction": "Write a function to count the occurrence of particular phrase in string. Your code should pass these tests:\n\nassert count_occurrence('Python is awesome', 'awesome') == 1\nassert count_occurrence('My favorite language is Python', 'Python') == 1\nassert count_occurrence('Python python python', 'python') == 3", "output": "def count_occurrence(string, phrase):\n    return string.count(phrase)", "id": 9, "avg_similarity_score": 0.14086147232465715}
{"instruction": "Write a function to check if a list is sublist of another list starting from particular index. Your code should pass these tests:\n\nassert started_from([1,2,3,4,5], [2,3], 1) == True\nassert started_from([1,2,3,4,5], [2,4], 1) == False\nassert started_from([1,3,2,4,5], [3,2], 1) == True", "output": "def started_from(main_list, sub_list, start_index):\n  if main_list[start_index:start_index+len(sub_list)] == sub_list:\n    return True\n  return False", "id": 10, "avg_similarity_score": 0.131317449245838}
{"instruction": "Write a program to find the second lowest number in a list of numbers. Your code should pass these tests:\n\nassert find_second_lowest([3, 4, 1, 5, 6]) == 3\nassert find_second_lowest([1, 1, 9, 8, 7]) == 1\nassert find_second_lowest([9, 8, 7, 6, 5, 4]) == 5", "output": "def find_second_lowest(nums):\r\n  nums.sort()\r\n  for i in nums:\r\n    if i != nums[0]:\r\n      return i", "id": 11, "avg_similarity_score": 0.22141759966975177}
{"instruction": "Write a function to check if a given number is a power of two. Your code should pass these tests:\n\nassert is_power_of_two(8) == True\nassert is_power_of_two(15) == False\nassert is_power_of_two(2048) == True", "output": "def is_power_of_two(num):\r\n  if num == 0:\r\n    return False\r\n  else:\r\n    while num % 2 == 0:\r\n      num /= 2\r\n  \r\n  return num == 1", "id": 12, "avg_similarity_score": 0.18305592703762041}
{"instruction": "Write a function to create a list of all prime numbers up to a given maximum. Your code should pass these tests:\n\nassert all_primes_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert all_primes_to(10) == [2, 3, 5, 7]\nassert all_primes_to(2) == [2]", "output": "def all_primes_to(max):\r\n  if max < 2:\r\n    return []\r\n  \r\n  primes = [2]\r\n  for i in range(3, max+1, 2):\r\n    for j in range(2, i):\r\n      if i % j == 0:\r\n        break\r\n    else:\r\n      primes.append(i)\r\n  \r\n  return primes", "id": 13, "avg_similarity_score": 0.1325627271279445}
{"instruction": "Write a program to generate a random string of length n. Your code should pass these tests:\n\nassert len(random_string(10)) == 10\nassert random_string(3).isalnum() == True", "output": "import random, string\r\n\r\ndef random_string(n):\r\n  return ''.join(random.choice(string.ascii_letters + string.digits) for x in range(n))", "id": 14, "avg_similarity_score": 0.14489761554712535}
{"instruction": "Write a function to find all possible substrings of a given string. Your code should pass these tests: \n\nassert find_substrings(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"b\", \"bc\", \"bcd\", \"c\", \"cd\", \"d\"]\nassert find_substrings(\"\") == []\nassert find_substrings(\"ah\") == ['a', 'ah', 'h']", "output": "def find_substrings(str1):\r\n  lst = []\r\n  n = len(str1)\r\n  for i in range(n):\r\n    for j in range(i+1, n+1):\r\n      lst.append(str1[i:j])\r\n  return lst", "id": 15, "avg_similarity_score": 0.2053207347355685}
{"instruction": "Write a program to reverse a list of strings. Your code should pass these tests: \n\nassert reverse_list(['cat', 'dog', 'rabbit']) == ['rabbit', 'dog', 'cat']\nassert reverse_list([]) == []\nassert reverse_list(['hello']) == ['hello']", "output": "def reverse_list(lst):\n  return lst[::-1]", "id": 16, "avg_similarity_score": 0.17436738475200014}
{"instruction": "Write a program to check if a given string is palindrome or not. Your code should pass these tests:\n\nassert is_palindrome('anna') == True\nassert is_palindrome('geek') == False\nassert is_palindrome('abcd') == False", "output": "def is_palindrome(str1):\r\n  if str1 == str1[::-1]:\r\n    return True\r\n  else:\r\n    return False", "id": 17, "avg_similarity_score": 0.20526940538980443}
{"instruction": "Write a program to swap the values of two given variables. Your code should pass these tests:\n\nassert variable_swap(3, 4) == (4, 3)\nassert variable_swap(7, 9) == (9, 7)\nassert variable_swap(7, 7) == (7, 7)", "output": "def variable_swap(x, y):\n  return y, x", "id": 18, "avg_similarity_score": 0.16627380750279913}
{"instruction": "Write a function to find the rotated index of an element in the given array. Your code should pass these tests:\n\nassert find_index([10,3,5,20],5) ==2\nassert find_index([4,5,7,1],7) ==2\nassert find_index([5,4,3,6],6) ==3", "output": "def find_index(arr, key): \r\n  \r\n    n = len(arr)  \r\n    low = 0  \r\n    high = n - 1  \r\n  \r\n    while (low <= high): \r\n  \r\n        mid = low + (high - low)//2\r\n        if (arr[mid] == key): \r\n            return mid \r\n        elif (arr[mid] <= arr[high]): \r\n            if (key > arr[mid] and key <= arr[high]): \r\n                low = mid + 1\r\n            else: \r\n                high = mid - 1\r\n        elif (arr[low] <= arr[mid]): \r\n            if (key >= arr[low] and key < arr[mid]): \r\n                high = mid - 1\r\n            else: \r\n                low = mid + 1\r\n  \r\n    return -1", "id": 19, "avg_similarity_score": 0.19759404465071578}
{"instruction": "Write a function to downward rotate an array. The downward rotation should rotate each element towards the right side. The elements should cycle from the right side to the left side after the final rotation. Your code should pass these tests:\n\nassert array_rot([1,3,8,10],1) == [10,1,3,8]\nassert array_rot([4,2,5,7],3) == [2,5,7,4]\nassert array_rot([6,5,4,3],2) == [4,3,6,5]", "output": "def array_rot(an_array, rotate_by): \r\n    for i in range(0, rotate_by): \r\n        j = len(an_array)-1\r\n        shifting_element = an_array[j] \r\n        while (j > 0): \r\n            an_array[j] = an_array[j-1] \r\n            j -= 1\r\n        an_array[0] = shifting_element \r\n    return an_array", "id": 20, "avg_similarity_score": 0.04805194471927347}
{"instruction": "Write a function to get the sublists from the given list by splitting it into two. Your code should pass these tests:\n \nassert sub_lists([1,2,3,4],2) == [[1,2],[3,4]]\nassert sub_lists([3,5,8,7],3) == [[3,5,8],[7]]\nassert sub_lists([2,0,9,4,6],4) == [[2,0,9,4],[6]]", "output": "def sub_lists(list_in,split_point): \r\n    sub_list_1 = list_in[:split_point] \r\n    sub_list_2 = list_in[split_point:] \r\n    return [sub_list_1,sub_list_2]", "id": 21, "avg_similarity_score": 0.024413489736070382}
{"instruction": "Write a function to check if two strings are anagrams. Your code should pass these tests:\n\nassert is_anagram(\"listen\",\"silent\") == True\nassert is_anagram(\"cat\",\"tac\") == True\nassert is_anagram(\"cut\",\"cat\") == False", "output": "def is_anagram(s1, s2):  \r\n    if len(s1) != len(s2): \r\n        return False\r\n  \r\n    for char in s1: \r\n        if char not in s2: \r\n            return False\r\n  \r\n    for char in s2: \r\n        if char not in s1: \r\n            return False\r\n  \r\n    return True", "id": 22, "avg_similarity_score": 0.07324405309602677}
{"instruction": "Write a function to return the unique values of a given list. Your code should pass these tests:\n\nassert unique_items([1,2,2,3,3,3,4,4]) == [1,2,3,4]\nassert unique_items([2,2,3,3,3,3,4,4,4]) == [2,3,4]\nassert unique_items([4,4,4,4,4,4,4,4,4]) == [4]", "output": "def unique_items(item_list): \r\n    unique_list =[] \r\n    for i in item_list: \r\n        if i not in unique_list: \r\n            unique_list.append(i) \r\n    return unique_list", "id": 23, "avg_similarity_score": 0.21683686082406087}
{"instruction": "Write a function to select all elements containing a particular pattern. Your code should pass these tests:\n\nassert filter_pattern([\u2018Robert\u2019, \u2018elephant\u2019, \u2018Lily\u2019, \u2018eternity\u2019], \u2018e\u2019) == [\u2018Robert\u2019, \u2018elephant\u2019, \u2018eternity\u2019]\nassert filter_pattern([12, 13, 15, 17], '1') == [12, 13, 15]\nassert filter_pattern([\u2018apple\u2019, \u2018grand\u2019, \u2018tiger\u2019, \u2019goose\u2019], \u2018go\u2019) == [\u2018grand\u2019, \u2018goose\u2019]", "output": "def filter_pattern(input_list, pattern): \r\n    output_list = [] \r\n    for element in input_list: \r\n        if pattern in str(element): \r\n            output_list.append(element) \r\n    return output_list", "id": 24, "avg_similarity_score": 0.09860946132117139}
{"instruction": "Write a function to split a string into three parts based on the given separator. Your code should pass these tests:\n\nassert split_string(\"Hello world! This is Python\", \" \") == [\"Hello\", \"world!\", \"This is Python\"]\nassert split_string(\"Butterfly Shoes! Taste the joy\", \"!\") == [\"Butterfly Shoes\", \"Taste the joy\"]\nassert split_string(\"Coding,Learning,Building,Creating\", \",\") == [\"Coding\", \"Learning\", \"Building\", \"Creating\"]", "output": "def split_string(string_in, separator): \r\n    return string_in.split(separator)", "id": 25, "avg_similarity_score": 0.0}
{"instruction": "Write a function to search for all the items in a list of dictionaries that have a given key. Your code should pass these tests:\n\nassert search_list_dicts([{\"Name\":\"Judith\",\"age\":24},{\"Name\":\"Sara\",\"age\":20},{\"Name\":\"Will\",\"age\":24}], \"age\") == [24,20,24] \nassert search_list_dicts([{\"Tower\":\"Eiffel\",\"Height\":1063},{\"Tower\":\"CN Tower\",\"Height\":553\u2026\u2026}], \"Tower\") == [\"Eiffel\",\"CN Tower\"]\nassert search_list_dicts([{\"Species\":\"Dog\",\"Number\":101},{\"Species\":\"Cat\",\"Number\":75},{\"Species\":\"Tiger\",\"Number\":20}], \"Number\") == [101,75,20]", "output": "def search_list_dicts(dict_list, key): \r\n    key_list = [] \r\n    for dict_item in dict_list: \r\n        if key in dict_item: \r\n            key_list.append(dict_item[key]) \r\n    return key_list", "id": 26, "avg_similarity_score": 0.18406260716710754}
{"instruction": "Write a python function to filter odd elements from a list. Your code should pass these tests:\n\nassert select_odd_ele([7,8,2,4,5]) == [7,5]\nassert select_odd_ele([2,4,6,8,10]) == []\nassert select_odd_ele([1,3,5,7,9]) == [1,3,5,7,9]", "output": "def select_odd_ele(lst): \r\n    odd_list = [] \r\n    for i in lst: \r\n        if i%2 != 0: \r\n            odd_list.append(i) \r\n    return odd_list", "id": 27, "avg_similarity_score": 0.12523285672058015}
{"instruction": "Write a function to check whether given list is empty or not. Your code should pass these tests:\n\nassert isEmpty([]) == True\nassert isEmpty(['A', 'B']) == False\nassert isEmpty(['', '']) == True", "output": "def isEmpty(array): \r\n    if len(array) == 0: \r\n        return True\r\n    else: \r\n        return False", "id": 28, "avg_similarity_score": 0.1319319977870219}
{"instruction": "Write a function to remove white space from a string. Your code should pass these tests:\n\nassert strip_white_space(\"Hello, world!\") == \"Helloworld!\"\nassert strip_white_space(\"Hello my world   !\") == \"Hellomyworld!\"\nassert strip_white_space(\"   Hello World    !\") == \"HelloWorld!\"", "output": "def strip_white_space(string): \r\n    return \"\".join(string.split())", "id": 29, "avg_similarity_score": 0.11977055726835695}
{"instruction": "Write a python function to find the frequency of elements present in a list using collections library. Your code should pass these tests:\n\nassert find_frequency([2, 4, 3, 6, 3], 3) == 2\nassert find_frequency([2, 2, 3, 1], 1) == 1\nassert find_frequency([2, 2, 3, 1], 4) == 0", "output": "def find_frequency(array, element): \r\n    return array.count(element)", "id": 30, "avg_similarity_score": 0.192297186056895}
{"instruction": "Write a python function to find the number of digits in an integer. Your code should pass these tests:\n\nassert find_num_digits(32) == 2\nassert find_num_digits(888) == 3\nassert find_num_digits(10000) == 5", "output": "def find_num_digits(num): \r\n    return len(str(abs(num)))", "id": 31, "avg_similarity_score": 0.16561512254362296}
{"instruction": "Write a python function to check if a number is a prime number. Your code should pass these tests:\n\nassert is_prime(7) == True\nassert is_prime(8) == False\nassert is_prime(11) == True", "output": "def is_prime(num): \r\n    if num > 1: \r\n        for i in range(2, num): \r\n            if (num % i) == 0: \r\n                return False\r\n        else: \r\n            return True\r\n    else: \r\n        return False", "id": 32, "avg_similarity_score": 0.15212987049486867}
{"instruction": "Write a python function to parse a given string and print a tab separated output. Your code should pass these tests:\n\nassert parse_string(\"25655:john:engineering\") == \"25655 john engineering\"\nassert parse_string(\"abc:123:xyz\") == \"abc 123 xyz\"\nassert parse_string(\"123456:alice:cse\") == \"123456 alice cse\"", "output": "def parse_string(string): \r\n    return \"\\t\".join(string.split(\":\"))", "id": 33, "avg_similarity_score": 0.13106607503826762}
{"instruction": "Write a python function to check whether a word in a given string is a palindrome. Your code should pass these tests:\n\nassert check_palindrome(\"artsa\") == True\nassert check_palindrome(\"artsy\") == False\nassert check_palindrome(\"malayalam\") == True", "output": "def check_palindrome(string): \r\n    word_length = len(string) \r\n    for i in range(0, word_length // 2): \r\n        if string[i] != string[word_length - i - 1]: \r\n            return False\r\n    return True", "id": 34, "avg_similarity_score": 0.1911646571648377}
{"instruction": "Write a python function to find the sum of elements in a given list. Your code should pass these tests:\n\nassert sum_list([2, 4, 6]) == 12\nassert sum_list([1, 6, 8, 10]) == 25\nassert sum_list([9, 3, 12, 6]) == 30", "output": "def sum_list(input_list): \r\n    sum = 0\r\n    for ele in input_list: \r\n        sum += ele\r\n    return sum", "id": 35, "avg_similarity_score": 0.27659414251243725}
{"instruction": "Write a Python program to check if all items of a given list are equal. Your code should pass these tests:\n\nassert check_equal_list([1, 2, 3, 3, 3, 3, 4, 3]) == False\nassert check_equal_list([3, 3, 3, 3, 3]) == True\nassert check_equal_list([2, 7, 5, 8, 5]) == False", "output": "def check_equal_list(list):    \r\n    return (all(x == list[0] for x in list[1:]))", "id": 36, "avg_similarity_score": 0.2162319332917079}
{"instruction": "Write a python function to shuffle a given list of characters. Your code should pass these tests:\n\nassert shuffle_list(['a', 'e', 'i', 'o', 'u']) == ['e', 'o', 'u', 'i', 'a']\nassert shuffle_list(['a1', 'e2', 'i3', 'o4', 'u5']) == ['o4', 'i3', 'u5', 'e2', 'a1']\nassert shuffle_list(list(range(1,6))) == [4, 1, 5, 3, 2]", "output": "import random \r\n  \r\ndef shuffle_list(list): \r\n    random.shuffle(list) \r\n    return list", "id": 37, "avg_similarity_score": 0.20595336894851732}
{"instruction": "Write a Python program to find the first prime number in a given list. Your code should pass these tests:\n\nassert first_prime_number([7, 6, 10, 15, 20]) == 7\nassert first_prime_number([3, 4, 8, 16, 20]) == 3\nassert first_prime_number([5, 12, 11, 16, 20]) == 5", "output": "def first_prime_number(list): \n  for num in list: \n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                break\n        else: \n            return num", "id": 38, "avg_similarity_score": 0.2563609390705179}
{"instruction": "Write a Python program to check whether a given number is even or odd. Your code should pass these tests:\n\nassert check_odd_even(10) == 0\nassert check_odd_even(9) == 1\nassert check_odd_even(7) == 1", "output": "def check_odd_even(n): \n    if (n % 2 == 0): \n        return 0\n    else: \n        return 1", "id": 39, "avg_similarity_score": 0.19098239099344805}
{"instruction": "Write a Python program to remove duplicates from a given list of numbers. Your code should pass these tests:\n\nassert remove_duplicates([1, 2, 5, 2, 6, 7, 9, 2, 3, 5]) == [1, 2, 5, 6, 7, 9, 3]\nassert remove_duplicates([9, 3, 4, 5, 3, 9, 8]) == [9, 3, 4, 5, 8]\nassert remove_duplicates([1, 2, 3, 2, 4, 1, 6, 5]) == [1, 2, 3, 4, 6, 5]", "output": "def remove_duplicates(list): \n    temp = [] \n    for num in list: \n        if num not in temp: \n            temp.append(num) \n    return temp", "id": 40, "avg_similarity_score": 0.21806538704860148}
{"instruction": "Write a python function to calculate the GCD of two given numbers. Your code should pass these tests:\n\nassert gcd(54, 24) == 6\nassert gcd(45,60) == 15\nassert gcd(2,1) == 1", "output": "def gcd(a, b): \r\n    if a == 0: \r\n        return b \r\n    return gcd(b % a, a)", "id": 41, "avg_similarity_score": 0.185178296783651}
{"instruction": "Write a python function to find the harmonic mean of two numbers. Your code should pass these tests:\n\nassert harmonic_mean(4,5) == 4.5\nassert harmonic_mean(3,7) == 4.2\nassert harmonic_mean(2.5,1.5) == 2", "output": "def harmonic_mean(x, y): \r\n    return (2*x*y) / (x+y)", "id": 42, "avg_similarity_score": 0.17357619205082886}
{"instruction": "Write a python function to sort a given list in ascending order. Your code should pass these tests:\n\nassert quick_sort([4,3,5,2,1]) == [1,2,3,4,5]\nassert quick_sort([3,1,2,8,4]) == [1,2,3,4,8]\nassert quick_sort([8,10,3,9,1]) == [1,3,8,9,10]", "output": "def quick_sort(arr): \r\n\r\n    if len(arr) <= 1: \r\n        return arr\r\n    else: \r\n        pivot = arr[0]\r\n        smaller = [item for item in arr[1:] if item<= pivot]\r\n        greater = [item for item in arr[1:] if item> pivot]\r\n        return quick_sort(smaller) + [pivot] + quick_sort(greater)", "id": 43, "avg_similarity_score": 0.17825136533735164}
{"instruction": "Write a python function to convert a string in snake case to camel case. Your code should pass these tests:\n\nassert snake_to_camel(\"hello_world\") == \"HelloWorld\"\nassert snake_to_camel(\"test_function\") == \"TestFunction\"\nassert snake_to_camel(\"sample_program\") == \"SampleProgram\"", "output": "def snake_to_camel(s): \r\n    words = s.split('_')\r\n    camel_case = words[0]\r\n    for i in range(1,len(words)):\r\n        camel_case += words[i].title()\r\n    return camel_case", "id": 44, "avg_similarity_score": 0.006172839506172839}
{"instruction": "Write a python function to get the longest common prefix of two strings. Your code should pass these tests:\n\nassert longest_prefix(\"ABCD\",\"ABEG\") == \"AB\"\nassert longest_prefix(\"ABCE\",\"ABFD\") == \"AB\"\nassert longest_prefix(\"AABC\",\"BBAA\") == \"\"", "output": "def longest_prefix(str1, str2): \n    if not str1 or not str2: \r\n        return \"\" \n    result = \"\" \r\n    i,j=0,0\r\n    while i < len(str1) and j < len(str2) and str1[i] == str2[j]: \r\n            result += str1[i] \r\n            i+=1\r\n            j+=1\r\n    return result", "id": 45, "avg_similarity_score": 0.13542417778748375}
{"instruction": "Write a python function to calculate the angle between two given vectors. Your code should pass these tests:\n\nassert angle([3, 0], [2, 1]) == 45\nassert angle([2, 4], [1, 3]) == 53.13010235421156\nassert angle([2, 3], [2, 0]) == 90", "output": "def angle(v1, v2): \r\n\r\n    dot = 0\r\n    for i in range(len(v1)): \r\n        dot += v1[i] * v2[i] \r\n    v1_modulus = np.sqrt((v1[0]*v1[0]) + (v1[1] * v1[1])) \r\n    v2_modulus = np.sqrt((v2[0]*v2[0]) + (v2[1] * v2[1])) \r\n    cos_angle = dot / (v1_modulus * v2_modulus) \r\n    angle = np.arccos(cos_angle) \r\n    return np.degrees(angle)", "id": 46, "avg_similarity_score": 0.005952380952380953}
{"instruction": "Write a python function to get the count of words in a given string. Your code should pass these tests:\n\nassert word_count(\"hello world\") == 2\nassert word_count(\"a b c d\") == 4\nassert word_count(\"\") == 0", "output": "def word_count(str): \r\n    count = len(str.split()) \r\n    return count", "id": 47, "avg_similarity_score": 0.24481775840535314}
{"instruction": "Write a function to find the unique element in the array. Your code should pass these tests:\n\nassert unique_array([2,2,1,1]) == [2,1]\nassert unique_array([1,2,3,2,1]) == [3]\nassert unique_array([1,1,2,3,4,1,5]) == [2,3,4,5]", "output": "def unique_array(arr):\n    unique = []\r\n    for i in arr:\r\n        if arr.count(i) == 1:\r\n            unique.append(i)\r\n    return unique", "id": 48, "avg_similarity_score": 0.13747314302721583}
{"instruction": "Write a python program to debug a given codebase, in order to upload the codes to Github repository.", "output": "def debug():\r\n  failed_tests = []\r\n  #Go through the list of tests\r\n  for test_function in tests:\r\n    if not test_function():\r\n      #For failed tests, identify the line of code with the bug\r\n      failed_tests.append(test_function.__name__)\r\n\r\n  for failed_test in failed_tests:\r\n    lines = inspect.getframeinfo(inspect.currentframe()).code_context\r\n    for line in lines:\r\n      line = line.strip()\r\n      if \"failed_test\" in line:\r\n        #Print the line of code with the bug to check\r\n        print(line)\r\n\r\n  #Once all the bugs have been fixed, commit the code to Github repository and push\r\n  if len(failed_tests) == 0:\r\n    os.system('git add .')\r\n    os.system('git commit -m \"Fixing all bugs\"')\r\n    os.system('git push')", "id": 49, "avg_similarity_score": 0.1192621772648968}
{"instruction": "Write a Python function to generate the nth fibonacci number. Your code should pass these tests:\n\nassert fibonacci(5) == 5\nassert fibonacci(10) == 55\nassert fibonacci(15) == 610", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "id": 50, "avg_similarity_score": 0.09004611564905683}
{"instruction": "Write a Python function to check if a binary tree is height balanced. Your code should pass these tests:\n\nassert balance_check(3,2,1) == True\nassert balance_check(3,2,4) == False\nassert balance_check(3,2,0) == True", "output": "def balance_check(left_height,right_height,current_height): \n    if abs(left_height - right_height) <= 1 and (left_height==0 or current_height==0): \n        return True\n    else: \n        return False", "id": 51, "avg_similarity_score": 0.12677039530030357}
{"instruction": "Write a Python program to create a string made of the first and last two characters of a given string. Your code should pass these tests:\n\nassert first_last_two('abcd') == 'bcd'\nassert first_last_two('abcde') == 'bcd'\nassert first_last_two('axxbcdes') == 'axx'", "output": "def first_last_two(string): \r\n    n = len(string) \r\n    if n < 2: \r\n        return '' \r\n    return string[0:2] + string[n-2:n]", "id": 52, "avg_similarity_score": 0.18592997942651004}
{"instruction": "Write a Python program to find the longest common prefix of a given list of strings. Your code should pass these tests:\n\nassert longest_common_prefix([\"codex\", \"cod\", \"code\"]) == \"cod\"\nassert longest_common_prefix([\"hello\", \"hell\", \"helloworld\"]) == \"hell\"\nassert longest_common_prefix([\"codex\", \"cap\", \"cool\"]) == \"\"", "output": "def longest_common_prefix(String): \r\n    if not String:  \r\n        return \"\"  \r\n    shortest_string = min(String,key=len)  \r\n    for i, char in enumerate(shortest_string): \r\n        for other_string in String:  \r\n            if other_string[i] != char:  \r\n                return shortest_string[:i]  \r\n    return shortest_string", "id": 53, "avg_similarity_score": 0.2601004029712443}
{"instruction": "Write a Python function to check if two numbers are divisible by each other. Your code should pass these tests:\n\nassert is_divisible(6,2) == True\nassert is_divisible(4,2) == True\nassert is_divisible(3,2) == False", "output": "def is_divisible(a,b): \n    if (a % b == 0): \n        return True\r\n    else: \n        return False", "id": 54, "avg_similarity_score": 0.07146678928645372}
{"instruction": "Write a Python function to find the maximum of three numbers. Your code should pass these tests:\n\nassert max_of_three(3,4,5) == 5\nassert max_of_three(1,5,3) == 5\nassert max_of_three(3,4,2) == 4", "output": "def max_of_three(x, y, z): \r\n    if (x >= y) and (x >= z): \r\n        largest = x \r\n  \r\n    elif (y >= x) and (y >= z): \r\n        largest = y \r\n    else: \r\n        largest = z \r\n      \r\n    return largest", "id": 55, "avg_similarity_score": 0.17557506183152038}
{"instruction": "Write a Python function to get the Fibonacci series. Your code should pass these tests:\n\nassert fibonacci(7) == [0,1,1,2,3,5,8]\nassert fibonacci(4) == [0,1,1,2]\nassert fibonacci(9) == [0,1,1,2,3,5,8,13,21]", "output": "def fibonacci(n):\r\n  \r\n    # Taking 1st two fibonacci nubers as 0 and 1 \r\n    a = 0\r\n    b = 1\r\n      \r\n    if n < 0: \r\n        print(\"Incorrect input\") \r\n  \r\n    elif n == 0: \r\n        return a \r\n      \r\n    elif n == 1: \r\n        return b \r\n    else: \r\n        for i in range(2,n): \r\n            c = a + b \r\n            a = b \r\n            b = c \r\n        return b", "id": 56, "avg_similarity_score": 0.0822001310496948}
{"instruction": "Write a Python function to create a Pascal triangle. Your code should pass these tests:\n\nassert pascal_triangle(5) == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nassert pascal_triangle(3) == [[1],[1,1],[1,2,1]]\nassert pascal_triangle(7) == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]", "output": "def pascal_triangle(n) : \r\n      \r\n    # initializing the list  \r\n    p_triangle = [[1]*(i+1) for i in range(n)] \r\n      \r\n    for i in range(n): \r\n        for j in range(1,i): \r\n              \r\n            # calculating the value  \r\n            # using the previous values \r\n            p_triangle[i][j] = p_triangle[i-1][j-1] + p_triangle[i-1][j]  \r\n      \r\n    # printing the list items  \r\n    return p_triangle", "id": 57, "avg_similarity_score": 0.09543837103908266}
{"instruction": "Write a Python function to find the sum of squares of a given number. Your code should pass these tests:\n\nassert sum_of_squares(4) == 30\nassert sum_of_squares(3) == 14\nassert sum_of_squares(5) == 55", "output": "def sum_of_squares(n): \r\n  \r\n    # Initialize the result variable  \r\n    # with 0 value. \r\n    sum_of_sq = 0       \r\n  \r\n    # Loop for calculating each number \r\n    # square and add them to sum \r\n    for i in range(0, n + 1): \r\n        sum_of_sq += (i * i) \r\n              \r\n    return sum_of_sq", "id": 58, "avg_similarity_score": 0.24562316506363657}
{"instruction": "Write a python function to calculate the area of a triangle given the three sides. The returned value should be approximate to two decimal places. Your code should pass these tests:\n\nassert triangle_area(5, 4, 3) == 6.00\nassert triangle_area(8, 8, 8) == 27.71\nassert triangle_area(2, 4, 6) == 4.34", "output": "def triangle_area(a,b,c): \r\n    s = (a + b + c) / 2\r\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\r\n    return round(area,2)", "id": 59, "avg_similarity_score": 0.14798121869627417}
{"instruction": "Write a python function to check if two strings are anagrams of each other (Containing the same characters but with different order). Your code should pass these tests:\n\nassert anagram(\"listen\", \"silent\") == True\nassert anagram(\"Hello\", \"world\") == False\nassert anagram(\"How are you\", \"You are how\") == True", "output": "def anagram(str1, str2): \r\n    list_str1 = sorted(str1.replace(\" \", \"\").lower()) \r\n    list_str2 = sorted(str2.replace(\" \", \"\").lower()) \r\n    if (list_str1 == list_str2): \r\n        return True  \r\n    else: \r\n        return False", "id": 60, "avg_similarity_score": 0.09832947157941171}
{"instruction": "Write a python function to check if two strings are one edit away from being equal. Your code should pass these tests:\n\nassert one_edit_away(\"hello\",\"helo\") == True\nassert one_edit_away(\"hello\",\"eloh\") == False\nassert one_edit_away(\"Hello\",\"hello\") == True", "output": "def one_edit_away(str1, str2): \r\n    if len(str1) == len(str2): \r\n        count = 0\r\n        for i in range(len(str1)): \r\n            if str1[i] != str2[i]: \r\n                count+=1\r\n        if(count > 1): \r\n            return False\r\n        else: \r\n            return True \r\n    elif len(str1) + 1 == len(str2): \r\n        count = 0\r\n        i = 0\r\n        while i < len(str1): \r\n            if str1[i] != str2[i]: \r\n                str2 = str2[:i] + str2[i+1:] \r\n                count+=1\r\n            i+=1\r\n        if count > 1: \r\n            return False\r\n        else: \r\n            return True \r\n    elif len(str1) - 1 == len(str2): \r\n        count = 0\r\n        i = 0\r\n        while i < len(str2): \r\n            if str1[i] != str2[i]: \r\n                str1 = str1[:i] + str1[i+1:] \r\n                count+=1\r\n            i+=1\r\n        if count > 1: \r\n            return False\r\n        else: \r\n            return True \r\n    else: \r\n        return False", "id": 61, "avg_similarity_score": 0.07743602812340918}
{"instruction": "Write a python function to print all permutations of a given string. Your code should pass these tests:\n\nassert all_permutations('ABC') == ['ABC', 'ACB', 'BAC', 'BCA', 'CBA', 'CAB']\nassert all_permutations('AB') == ['AB', 'BA']\nassert all_permutations('CDE') ==['CDE', 'CED', 'DEC', 'DCE', 'ECC', 'EDC']", "output": "def all_permutations(s): \r\n    Shuffled = [] \r\n    if len(s) == 1: \r\n        Shuffled.append(s) \r\n    else: \r\n        for i,c in enumerate(s): \r\n            for word in all_permutations(s[:i]+s[i+1:]): \r\n                Shuffled.append(c+word) \r\n    return Shuffled", "id": 62, "avg_similarity_score": 0.20203368059942706}
{"instruction": "Write a python function to flatten a given nested list. Your code should pass these tests: \n\nassert flatten([[1,2,3],[4,5,6], [7,8,9]]) == [1,2,3,4,5,6,7,8,9]\nassert flatten([[1,[2,3]], [4,[5,6]], [7,8,9]]) == [1,2,3,4,5,6,7,8,9]\nassert flatten([[1,1],[2,[3,[4,5],6]],7]) == [1,1,2,3,4,5,6,7]", "output": "def flatten(Nest):\r\n    a=[]\r\n    for x in Nest:\r\n        while isinstance(x,list):\r\n            x=[i for sub in x for i in sub]\r\n        a.extend(x)\r\n    return a", "id": 63, "avg_similarity_score": 0.18274306318625416}
{"instruction": "Write a python function to check if a given number is an Armstrong number (Sum of individual digits to the power of number of digits). Your code should pass these tests:\n\nassert is_armstrong(153) == True\nassert is_armstrong(402) == False\nassert is_armstrong(371) == True", "output": "def is_armstrong(num): \r\n    n = len(str(num)) \r\n    sum = 0\r\n    x = num \r\n    while (x != 0): \r\n        d = x % 10\r\n        sum = sum + pow(d, n) \r\n        x = x // 10\r\n    if (num == sum): \r\n       return True; \r\n    else: \r\n       return False;", "id": 64, "avg_similarity_score": 0.14922773402876033}
{"instruction": "Write a python function to calculate the total number of upper case letters and lower case letters in a given sentence. Your code should pass these tests:\n\nassert upper_lower_count('Hello World') == (2,8)\nassert upper_lower_count('NiceDay46') == (0,9)\nassert upper_lower_count('HELLO world') == (5,5)", "output": "def upper_lower_count(s):\r\n    upper_count = 0\r\n    lower_count= 0\r\n    for i in range(len(s)):\r\n        if s[i].isupper():\r\n            upper_count=upper_count+1\r\n        elif s[i].islower(): \r\n            lower_count=lower_count+1\r\n    return upper_count,lower_count", "id": 65, "avg_similarity_score": 0.14924093953228004}
{"instruction": "Write a python function to replace a given character in a sentence with specified new character. Your code should pass these tests:\n\nassert replace_char(\"Hello World\",'o','y') == \"Helly Wyrld\"\nassert replace_char(\"NiceDay46\",'6','7')==\"NiceDay47\"\nassert replace_char(\"Hello wOrld\",'O','2')==\"Hell2 w2rld\"", "output": "def replace_char(s, old, new): \r\n    s1 = \"\" \r\n    for ch in s: \r\n        if ch == old: \r\n            s1 += new \r\n        else: \r\n            s1 += ch \n    return s1", "id": 66, "avg_similarity_score": 0.1223655787144456}
{"instruction": "Write a python function to check if an input is palindrome (A word, phrase, or sequence that reads the same backward as forward). Your code should pass these tests:\n\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"hello\") == False\nassert is_palindrome(\"A man, a plan, a canal, Panama\") == True", "output": "def is_palindrome(string):\n    left_pos = 0\r\n    right_pos = len(string)-1\n    while right_pos >= left_pos:\r\n        if not string[left_pos] == string[right_pos]:\r\n            return False\r\n        left_pos +=1\r\n        right_pos -=1\r\n    return True", "id": 67, "avg_similarity_score": 0.10816844835117276}
{"instruction": "Write a python program to check if a string contains only digits or not. Your code should pass these tests:\n\nassert contains_Only_Digits(\"4567\") == True\nassert contains_Only_Digits(\"a4567\") == False\nassert contains_Only_Digits(\"4567a\") == False", "output": "def contains_Only_Digits(str1): \r\n    for ch in str1: \r\n        if not ch.isdigit(): \r\n            return False\r\n    return True", "id": 68, "avg_similarity_score": 0.14448564630464628}
{"instruction": "Write a python program to count the number of each vowel in a given string. Your code should pass these tests:\n\nassert count_Vowels(\"hello world\") == {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}\nassert count_Vowels(\"sky\") == {'a': 0, 'e': 0, 'i': 1, 'o': 0, 'u': 0}\nassert count_Vowels(\"apple\") == {'a': 1, 'e': 0, 'i': 0, 'o': 0, 'u': 0}", "output": "def count_Vowels(str1): \r\n    vowels = 'aeiou'\r\n    count_Vowels = {}\r\n    for char in str1: \r\n        if char in vowels: \r\n            count_Vowels[char] = count_Vowels.get(char, 0) + 1\r\n    return count_Vowels", "id": 69, "avg_similarity_score": 0.24451842160719003}
{"instruction": "Write a python program to implement bubble sort algorithm. Your code should pass these tests:\n\nassert bubble_Sort([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert bubble_Sort([3, 5, 1, -4, 7]) == [-4, 1, 3, 5, 7]\nassert bubble_Sort([4, 6, 2, 8, 1]) == [1, 2, 4, 6, 8]", "output": "def bubble_Sort(arr):  \r\n    n = len(arr) \r\n    for i in range(n): \r\n        for j in range(0, n-i-1): \r\n            if arr[j] > arr[j+1] : \r\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "id": 70, "avg_similarity_score": 0.0022727272727272726}
{"instruction": "Write a python function to solve the optimal sub array problem. Your code should pass these tests:\n\nassert max_Sub_Array_Sum([-1,-2,-5,2,3,-4,-1,4],8) == 9\nassert max_Sub_Array_Sum([-3,-2,-2,3,3,-1,-2,-1],8) == 6\nassert max_Sub_Array_Sum([1,2,5,6,3,2,7,4],8) == 30", "output": "def max_Sub_Array_Sum(arr,n): \r\n    max_so_far = -float('inf') \r\n    max_ending_here = 0\r\n      \r\n    for i in range(0, n): \r\n        max_ending_here = max_ending_here + arr[i] \r\n        if (max_so_far < max_ending_here): \r\n            max_so_far = max_ending_here \r\n  \r\n        if max_ending_here < 0: \r\n            max_ending_here = 0   \r\n    return max_so_far", "id": 71, "avg_similarity_score": 0.06763417437153496}
{"instruction": "Write a python function to find median of two sorted arrays with different size. Your code should pass these tests:\n\nassert median_of_Two([1,3,5,7],[2,4,6],4,3) == 4.5\nassert median_of_Two([1,2,11,14,17],[3,5,7,9,13,15,18],7,7) == 10\nassert median_of_Two([1,4,7,9],[2,4,6,8],4,4) == 5.5", "output": "def median_of_Two(A,B,n,m): \r\n    i,j,count = 0,0,0\r\n    result = 0\r\n    while count < n + m - 1: \r\n        if i != n and j != m: \r\n            if A[i] < B[j]: \r\n                result = A[i] \r\n                i += 1\r\n            else: \r\n                result = B[j] \r\n                j += 1\r\n        elif i < n: \r\n            result = A[i] \r\n            i += 1\r\n        elif j < m: \r\n            result = B[j] \r\n            j += 1\r\n        count += 1\r\n  \r\n    if(n+m)%2 != 0: \r\n        return float(result) \r\n    else: \r\n        if i != n and j != m: \r\n            result = (result + max(A[i], B[j]))/2\r\n        elif i < n: \r\n            result = (result + A[i])/2\r\n        elif j < m: \r\n            result = (result + B[j])/2\r\n        return result", "id": 72, "avg_similarity_score": 0.1004847383012148}
{"instruction": "Write a python function to check if the given array contains all prime numbers or not. Your code should pass these tests:\n\nassert contains_All_Prime([3,5,11,13,17,23,29]) == True\nassert contains_All_Prime([11,13,15,17,2]) == False\nassert contains_All_Prime([4,7,11,17,19,23]) == True", "output": "def contains_All_Prime(arr): \r\n    for i in range(0,len(arr)): \r\n        if not is_Prime(arr[i]): \r\n            return False\r\n    return True\r\n                \r\ndef is_Prime(n): \r\n    if n <= 1 : \r\n        return False\r\n    for i in range(2, n): \r\n        if n % i == 0: \r\n            return False\r\n    return True", "id": 73, "avg_similarity_score": 0.16041216045147302}
{"instruction": "Write a python function to find the minimum cost to reach the destination while travelling in a maze. Your code should pass these tests:\n\nassert min_Cost_Path([[1, 3, 5, 8], [4, 2, 1, 7], [4, 3, 2, 3]], 0, 0, 2, 3) == 8\nassert min_Cost_Path([[1, 3, 5, 8], [4, 2, 1, 7], [4, 3, 2, 3]], 0, 0, 2, 2) == 7\nassert min_Cost_Path([[1, 3, 5, 8], [4, 2, 1, 7], [4, 3, 2, 3]], 0, 0, 2, 1) == 6", "output": "def min_Cost_Path(grid,row,col,des_row,des_col): \r\n    if (row == des_row and col == des_col):  \r\n        return grid[row][col]  \r\n  \r\n    if (row >= len(grid) or col >= len(grid[0])):  \r\n        return 999 \r\n  \r\n    if (grid[row][col] == 0):  \r\n        return 999 \r\n    \r\n    return  min(min_Cost_Path(grid, row + 1, col, des_row, des_col), min_Cost_Path(grid, row, col + 1, des_row, des_col)) + grid[row][col]", "id": 74, "avg_similarity_score": 0.14516966062516318}
{"instruction": "Write a python function to find the maximum sum of a subsequence with no adjacent elements. Your code should pass these tests:\n\nassert max_Subsequence_Sum([1,2,4,1,7,8,3],7) == 15\nassert max_Subsequence_Sum([1,2,3,4,5],5) == 9\nassert max_Subsequence_Sum([2,6,9,2,1,8,5,6,3],9) == 18", "output": "def max_Subsequence_Sum(arr,n): \r\n    incl = 0\r\n    excl = 0\r\n  \r\n    for i in range(n):  \r\n        temp = incl \r\n        incl = max(incl, excl + arr[i]) \r\n        excl = temp \r\n  \r\n    return max(incl, excl)", "id": 75, "avg_similarity_score": 0.1738264865508793}
{"instruction": "Write a python function to determine whether a string is a palindrome or not. Your code should pass these tests:\n\nassert is_Palindrome('assa') == True\nassert is_Palindrome('regle') == False \nassert is_Palindrome('hannah') == True", "output": "def is_Palindrome(s): \r\n    rev = s[::-1] \r\n    if (s == rev): \r\n        return True\r\n    return False", "id": 76, "avg_similarity_score": 0.13553853780032357}
{"instruction": "Write a python function to generate a list of prime numbers between two given numbers. Your code should pass these tests:\n\nassert prime_list(2,10) == [2, 3, 5, 7]\nassert prime_list(10,40) == [11, 13, 17, 19, 23, 29, 31, 37]\nassert prime_list(16,23) == [17, 19, 23]", "output": "def prime_list(start, end): \r\n    prime_list = []\r\n    for val in range(start, end + 1):  \r\n        if val > 1: \r\n            for n in range(2, val): \r\n                if (val % n) == 0: \r\n                    break\r\n            else: \r\n                prime_list.append(val)\r\n    return prime_list", "id": 77, "avg_similarity_score": 0.17724496808689233}
{"instruction": "Write a python function to find the most frequent letter in a given string. Your code should pass these tests:\n\nassert freq_letter('balloon') == 'l'\nassert freq_letter('forest') == 'r'\nassert freq_letter('alphabet') == 'a'", "output": "def freq_letter(s): \r\n    count = [0] * 256 \r\n    maxx = -1\r\n    c = '' \r\n\r\n    for i in s: \r\n        count[ord(i)]+=1; \r\n  \r\n    for i in s: \r\n        if maxx < count[ord(i)]: \r\n            maxx = count[ord(i)] \r\n            c = i \r\n  \r\n    return c", "id": 78, "avg_similarity_score": 0.23239254382636262}
{"instruction": "Write a python function to parse key value pairs from a given list. Your code should pass these tests:\n\nassert parse_key_value_pairs([(\"a\",1),(\"b\",2)]) == {\"a\":1,\"b\":2}\nassert parse_key_value_pairs([(1,2),(3,4)]) == {1:2,3:4}\nassert parse_key_value_pairs([]) == {}", "output": "def parse_key_value_pairs(list):\r\n  result_dict = {}\r\n  for key,value in list:\r\n    result_dict[key] = value\r\n  return result_dict", "id": 79, "avg_similarity_score": 0.1554728497250817}
{"instruction": "Write a python function to convert a given list of strings to a list of integers. Your code should pass these tests:\n\nassert convert_string_list_to_int_list([\"1\", \"2\", \"3\"]) == [1, 2, 3]\nassert convert_string_list_to_int_list([\"32\", \"21\", \"11\"]) == [32, 21, 11]\nassert convert_string_list_to_int_list([]) == []", "output": "def convert_string_list_to_int_list(str_list):\n  return [int(num) for num in str_list]", "id": 80, "avg_similarity_score": 0.17903366995730255}
{"instruction": "Given a dict of strings and an empty dict, write a function to add the strings in the first dict to the second dict as different keys while setting the corresponding values to True. Your code should pass these tests:\n\nassert strings_to_true({\"a\":1, \"b\":2},{}) == {\"a\":True, \"b\":True}\nassert strings_to_true({\"a\":1}, {\"b\":3}) == {\"a\":True, \"b\":3}", "output": "def strings_to_true(str_dict, target_dict):\r\n    for key,value in str_dict.items():\r\n      target_dict[key] = True\r\n    return target_dict", "id": 81, "avg_similarity_score": 0.08216528143129417}
{"instruction": "Write a python function to calculate the sum of all elements in the given 2-dimensional array. Your code should pass these tests:\n\nassert sum_in_2d_array([[1,2],[3,4]]) == 10\nassert sum_in_2d_array([[1,2,3]]) == 6\nassert sum_in_2d_array([[1], [2]]) == 3", "output": "def sum_in_2d_array(arr):\n  result = 0\r\n  for row in arr:\r\n    for elem in row:\r\n      result += elem\r\n  return result", "id": 82, "avg_similarity_score": 0.1696705850454893}
{"instruction": "Write a python function to output the result of a multiplication table. Your code should pass these tests:\n\nassert multiplication_table(2) == [[1,2],[2,4]]\nassert multiplication_table(4) == [[1,2,3,4],[2,4,6,8],[3,6,9,12],[4,8,12,16]]", "output": "def multiplication_table(num):\r\n  result = []\r\n  for i in range(1,num+1):\r\n    row = []\r\n    for j in range(1,num+1):\r\n      row.append(i*j)\r\n    result.append(row)\r\n  return result", "id": 83, "avg_similarity_score": 0.17647784471812422}
{"instruction": "Write a python function to reverse the order of characters in a given string. Your code should pass these tests:\n\nassert reverse_order(\"Python\") == \"nohtyP\"\nassert reverse_order(\"Hello\") == \"olleH\"\nassert reverse_order(\"\") == \"\"", "output": "def reverse_order(string):\n  return string[::-1]", "id": 84, "avg_similarity_score": 0.2499157092803475}
{"instruction": "Write a python function to remove whitespaces from a given string. Your code should pass these tests:\n\nassert remove_whitespaces(\"Python language \") == \"Pythonlanguage\"\nassert remove_whitespaces(\"  Hello World  \") == \"HelloWorld\"", "output": "def remove_whitespaces(str1):\r\n  return str1.replace(\" \", \"\")", "id": 85, "avg_similarity_score": 0.18378721726512384}
{"instruction": "Write a python function to return the elements in the given list which are divisible by the given number. Your code should pass these tests:\n\nassert filter_by_divisible([3,5,8,10,12,14], 4) == [8,12]\nassert filter_by_divisible([2,3,4,5,6], 3) == [3,6]", "output": "def filter_by_divisible(list1, n):\n  res = []\r\n  for elem in list1:\r\n    if elem % n == 0:\r\n      res.append(elem)\r\n  return res", "id": 86, "avg_similarity_score": 0.14797428719666197}
{"instruction": "Write a python function to convert a given string into a dictionary with keys as the characters and the values as their corresponding frequencies. Your code should pass these tests:\n\nassert char_freq_dict(\"helloworld\") == {\"h\":1,\"e\":1,\"l\":3,\"o\":2,\"w\":1,\"r\":1,\"d\":1}", "output": "def char_freq_dict(str1):\r\n  result_dict = {}\r\n  for char in str1:\r\n    if char in result_dict:\r\n      result_dict[char] += 1\r\n    else:\r\n      result_dict[char] = 1\r\n  return result_dict", "id": 87, "avg_similarity_score": 0.09774923587291114}
{"instruction": "Write a python function to prefix every odd element of a list with given special character. Your code should pass these tests:\n\nassert prefix_odd_elements(['a', 1, 'b', 2], '#') == ['a', '#1', 'b', 2]\nassert prefix_odd_elements(['k', 3, 'e', 4], '#') == ['k', '#3', 'e', 4]\nassert prefix_odd_elements(['m', 11, 'n', 8], '#') == ['m', '#11', 'n', 8]", "output": "def prefix_odd_elements(list, special_char):\r\n    for i, item in enumerate(list):\r\n        if i % 2 == 0 and type(item) == int:\r\n            list[i] = special_char + str(list[i])\r\n    return list", "id": 88, "avg_similarity_score": 0.16116167302168613}
{"instruction": "Write a Python function to implement K-Means clustering algorithm on a given dataset. Your code should pass these tests:\n\nassert kmeans_clustering(2, [[1, 2], [2, 4], [3, 5], [4, 6], [5, 7]], 2, [[8, 3], [7, 2], [6, 1], [9, 4]]) == ([[2, 4], [3, 5], [4, 6], [5, 7], [1, 2]], [[9, 4], [8, 3], [7, 2], [6, 1]])\nassert kmeans_clustering(2, [[1, 1], [2, 3], [3, 5], [6, 7], [7, 7]], 3, [[2, 3], [4, 5], [6, 4], [7, 6], [8, 7]]) == ([[3, 5], [2, 3], [1, 1], [7, 7], [6, 7]], [[4, 5], [8, 7], [7, 6], [6, 4], [2, 3]])", "output": "import numpy as np\n\ndef kmeans_clustering(k, dataset, n, centroids):\n    centroid_pos = 0\n    old_centroids = np.array(centroids)\n    dataset = np.array(dataset)\n        \n    error = 0.\n    iterations = 0\n    while True:\n        cluster_assignments = [[] for _ in range(k)]\n        iterations += 1\n        for datapoint in dataset:\n            min_dist = float('inf')\n            for c in range(k):\n                dist = (np.sum((datapoint - centroids[c])**2))**(1./2)\n                if dist < min_dist:\n                    min_dist = dist\n                    cluster_assignments[c].append(datapoint)\n        for i in range(k):\n            centroids[i] = np.mean(cluster_assignments[i], axis=0)\n        error = np.sum(np.sum((old_centroids - centroids)**2))**(1./2)\n        if error == 0 or iterations > n:\n            break\n    return dataset, centroids", "id": 89, "avg_similarity_score": 0.12078007193374597}
{"instruction": "Write a Python function to merge two dictionaries into one. Your code should pass these tests:\n\nassert merge_dicts({'x': 1, 'y': 3}, {'a': 2, 'b': 4, 'c':5}) == {'x': 1, 'y': 3, 'a': 2, 'b': 4, 'c': 5}\nassert merge_dicts({'a': 1, 'b': 3}, {'c': 2, 'd': 4}) == {'a': 1, 'b': 3, 'c': 2, 'd': 4}\nassert merge_dicts({'a': 3, 'b': 4}, {'a': 2, 'd': 7}) == {'a': 2, 'b': 4, 'd':7}", "output": "def merge_dicts(dict1, dict2): \n    res = {**dict1, **dict2} \r\n    return res", "id": 90, "avg_similarity_score": 0.0016666666666666668}
{"instruction": "Write a Python function to get the coefficients of two given polynomials. Your code should pass these tests:\n\nassert coefficients_polynomial([-6, 7, 0, 12, 0], [1, 2, -3, 0, 4]) == ([-6, 7, -3, 12, 4], [1, 2, 0, 0, 4])\nassert coefficients_polynomial([2, 6, 3, 0, 0], [1, -2, 0, 6, 6]) == ([2, 6, -2, 0, 6], [1, -2, 3, 0, 6])\nassert coefficients_polynomial([3, 4, 2, -9, -2], [2, 9, 3, 0, 0]) == ([3, 4, 9, -9, 0], [2, 9, 2, 0, -2])", "output": "def coefficients_polynomial(P, Q):\n    N = max(len(P), len(Q))\n    P = P + [0] * (N - len(P))\n    Q = Q + [0] * (N - len(Q))\n    return P,Q", "id": 91, "avg_similarity_score": 0.18733544994434176}
{"instruction": "Write a Python function to check whether a given list contains a sublist. Your code should pass these tests:\n\nassert contains_sublist([1, 2, 3], [2, 3]) == True\nassert contains_sublist([1, 2, 3, 4], [2, 3]) == True\nassert contains_sublist([1, 2, 3], [4]) == False", "output": "def contains_sublist(list_, sub_list): \r\n    for i in range(len(list_)):\r\n        sub = list_[i:i + len(sub_list)]\r\n        if sub == sub_list: \r\n            return True\r\n        return False", "id": 92, "avg_similarity_score": 0.1881943722826828}
{"instruction": "Write a code to remove the duplicates in the given list and return a list with no duplicates. Your code should pass these tests:\n\nassert remove_duplicate([1,2,2,3,3]) = [1,2,3]\nassert remove_duplicate([4,1,2,2,3]) = [4,1,2,3]", "output": "def remove_duplicate(my_list): \r\n    my_list = list(dict.fromkeys(my_list)) \r\n    return my_list", "id": 93, "avg_similarity_score": 0.1625430790581878}
{"instruction": "Write a code to find the power of any number using recursion. Your code should pass these tests:\n\nassert power(3,4)==81\nassert power(4,3)==64\nassert power(5,2)==25", "output": "def power(num,pow):\r\n    if pow == 0:\r\n        return 1\r\n    else:\r\n        return num * power(num, pow-1)", "id": 94, "avg_similarity_score": 0.14672937674913428}
{"instruction": "Write a function to count the total number of odd numbers in a given list. Your code should pass these tests:\n\nassert count_odds([1,2,3,4,5,6]) == 3\nassert count_odds([1,2,3,3,3,4,5,6]) == 4\nassert count_odds([1,3,3,5,7]) == 5", "output": "def count_odds(li):\r\n    count = 0\r\n    for num in li:\r\n        if num % 2 != 0:\r\n            count += 1\r\n    return count", "id": 95, "avg_similarity_score": 0.22070954176878063}
{"instruction": "Write a code to get the intersection of two given list and remove the duplicates. Your code should pass these tests:\n\nassert intersection([1, 3, 4], [1, 8, 5]) == [1]\nassert intersection([2, 4, 6], [2, 3]) == [2]", "output": "def intersection(list1, list2): \r\n    return list(set(list1) & set(list2))", "id": 96, "avg_similarity_score": 0.18843422987653013}
{"instruction": "Write a code to sort a dictionary based on its values in ascending order. Your code should pass these tests:\n\nassert sorted_dict({2:3, 4:1, 0:2})=={4:1, 0:2, 2:3}\nassert sorted_dict({5:6, 3:8, 9:3})=={9:3, 5:6, 3:8}", "output": "def sorted_dict(dict): \r\n    result = dict() \r\n    list_keys = list() \r\n    sorted_keys = sorted(dict.values()) \r\n    for keys in sorted_keys: \r\n        for key in dict.keys(): \r\n            if dict[key] == keys and key not in list_keys: \r\n                result[key] = keys \r\n                list_keys.append(key) \r\n    return result", "id": 97, "avg_similarity_score": 0.08363797636269875}
{"instruction": "Write a code to find the largest element in a tuple. Your code should pass these tests:\n\nassert largest_elem((2,5,1,6)) == 6\nassert largest_elem((4,8,5,9)) == 9", "output": "def largest_elem(tup):\r\n  return max(tup)", "id": 98, "avg_similarity_score": 0.19374851979971106}
{"instruction": "Write a function to print all prime numbers between 1 and N. Your code should pass these tests:\n\nassert print_prime(5) == [2, 3, 5]\nassert print_prime(10) == [2, 3, 5, 7]", "output": "def print_prime(n): \n        prime_nums = []\n    for num in range(2,n+1):\n        flag = True\n        for i in range(2, num):\n            if (num % i == 0):\n                flag = False\n                break\n        if flag:\n            prime_nums.append(num)\n    return prime_nums", "id": 99, "avg_similarity_score": 0.04142470936942392}
{"instruction": "Write a code to count the total number of vowels in a string. Your code should pass these tests:\n\nassert count_vowels(\"Hello World\") == 3\nassert count_vowels(\"Python Programming\") == 5", "output": "def count_vowels(string):\n  vowels = 'aeiou'\n  cnt = 0\n  for ch in string:\n    if ch.lower() in vowels:\n      cnt+=1\n  return cnt", "id": 100, "avg_similarity_score": 0.1853341482167757}
{"instruction": "Write a function to generate a dictionary from a given list. Your code should pass these tests:\n\nassert generate_dict([\"name\",\"year\",\"city\"],[['warm',2015,'UK'],['scare',2017,'US'],['crash',2016,'FR']])==[{'name': 'warm', 'year': 2015, 'city': 'UK'}, {'name': 'scare', 'year': 2017, 'city': 'US'},{'name': 'crash', 'year': 2016, 'city': 'FR'}]\nassert generate_dict([\"age\", \"gender\"],[[20, \"male\"],[30, \"female\"],[15, \"other\"]])==[{'age': 20, 'gender': 'male'}, {'age': 30, 'gender': 'female'},{'age': 15, 'gender': 'other'}]", "output": "def generate_dict(list_key, list_value):\n    list_dict = []\n\n    for i in range(len(list_value)):\n        list_dict.append(dict(zip(list_key, list_value[i])))\n    return list_dict", "id": 101, "avg_similarity_score": 0.1850289258468422}
{"instruction": "Write a function to convert DateTime object into String. Your code should pass these tests: \n\nassert convert_datetime('2020-02-02 00:30:12') == '02 Feb 2020 00:30:12'\nassert convert_datetime('2021-01-19 03:25:45') == '19 Jan 2021 03:25:45'", "output": "import datetime\r\ndef convert_datetime(datetime_str):\r\n    datetime_object = datetime.datetime.strptime(datetime_str, '%Y-%m-%d %H:%M:%S')\r\n    return datetime_object.strftime('%d %b %Y %H:%M:%S')", "id": 102, "avg_similarity_score": 0.037689071840857555}
{"instruction": "Write a program in Python to count the number of leading zeros in a binary string. Your code should pass these tests:\n\nassert count_leading_zero('010011') == 2\nassert count_leading_zero('111111') == 0\nassert count_leading_zero('00000110') == 6", "output": "def count_leading_zero(s):\n    count = 0\n    for char in s:\n        if char == '0':\n            count += 1\n        else:\n            break\n    return count", "id": 103, "avg_similarity_score": 0.2069551127638868}
{"instruction": "Write a function to compare two dictionaries. Your code should pass these tests:\n\nassert compare_dicts({1: \"a\", 2: \"b\", 3: \"c\"}, {1: \"a\", 2: \"b\", 3: \"c\"}) == True\nassert compare_dicts({1: \"a\", 2: \"b\"}, {1: \"a\", 3: \"c\"}) == False\nassert compare_dicts({1: \"a\", 2: \"b\"}, {2: \"b\", 3: \"c\"}) == False", "output": "def compare_dicts(dict1, dict2):\n    if len(dict1) != len(dict2):\n        return False\n    else:\n        for key1 in dict1:\n            if key1 not in dict2.keys() or dict1[key1] != dict2[key1]:\n                return False\n        return True", "id": 104, "avg_similarity_score": 0.029102954846661942}
{"instruction": "Write a function to find the maximum two digits in a string. Your code should pass these tests:\n\nassert max_two_digit('68S78M42') == 78\nassert max_two_digit('68S7M4') == 68\nassert max_two_digit('54S7M552') == 55", "output": "def max_two_digit(s):\n    max_val = -1 \n    for i in range(len(s) - 1):\n        if 9 < int(s[i:i+2]) < 99 and int(s[i:i+2]) > max_val :\n            max_val = int(s[i:i+2])\n    return max_val", "id": 105, "avg_similarity_score": 0.21959362296199722}
{"instruction": "Write a program to find the longest common substring between two strings. Your code should pass these tests:\n\nassert LongestSubStr(\"ABCDGH\", \"AEDFHR\") == \"ADH\"\nassert LongestSubStr(\"CGCG\", \"GGCA\") == \"GG\"\nassert LongestSubStr(\"ABCDEFG\", \"ABCDXYZ\") == \"ABCD\"", "output": "def LongestSubStr(str1, str2): \n\tlen1 = len(str1) \n\tlen2 = len(str2) \n\tres = \"\" \n\n\tmat = [[0 for x in range(len2 + 1)] for x in range(len1 + 1)] \n\tfor i in range(len1 + 1):\n\t\tfor j in range(len2 + 1): \n\t\t\tif (i == 0 or j == 0): \n\t\t\t\tmat[i][j] = 0\n\t\t\telif (str1[i - 1] == str2[j - 1]): \n\t\t\t\tmat[i][j] = mat[i - 1][j - 1] + 1\n\t\t\t\tif (mat[i][j] > len(res)): \n\t\t\t\t\tres = str1[i - mat[i][j]:i] \n\t\t\telse: \n\t\t\t\tmat[i][j] = 0\n\treturn res", "id": 106, "avg_similarity_score": 0.11462234669716068}
{"instruction": "Write a function to convert a given string to a dictionary, splitting each letter into a key and value pair. Your code should pass these tests:\n\nassert to_dictionary(\"ABCD\") == {'A':'B', 'B':'C', 'C':'D'}\nassert to_dictionary(\"HELLO\") == {'H':'E', 'E':'L', 'L':'L', 'O':''}\nassert to_dictionary(\"WWWWWW\") == {'W':'V', 'V':'U', 'U':'T', 'T':'S', 'S':'R'}", "output": "def to_dictionary(s):\n    d = {}\n    for i in range(len(s) - 1):\n        d[s[i]] = s[i + 1]\n    d[s[-1]] = ''\n    return d", "id": 107, "avg_similarity_score": 0.08449910593857606}
{"instruction": "Write a function to convert a string to its equivalent ascii value. Your code should pass these tests:\n\nassert ascii_val('A') == 65\nassert ascii_val('75') == 55\nassert ascii_val('$') == 36", "output": "def ascii_val(s):\n    return ord(s)", "id": 108, "avg_similarity_score": 0.004459241323648103}
{"instruction": "Write a python function to find the number of subarrays with a given sum. Your code should pass these tests:\n\nassert countSubarraysSum([1,2,3,3],6) == 2\nassert countSubarraysSum([1,3,4],6) == 1\nassert countSubarraysSum([1,4,2,3],6) == 2", "output": "def countSubarraysSum(arr, sum) : \r\n    n = len(arr)  \r\n    count = 0  \r\n    for i in range(n):  \r\n        curr_sum = arr[i]  \r\n        for j in range(i + 1, n): \r\n            if curr_sum == sum: \r\n                count += 1  \r\n            if curr_sum > sum or j == n: \r\n                break  \r\n            curr_sum = curr_sum + arr[j]  \r\n    return count", "id": 109, "avg_similarity_score": 0.23914011538408}
{"instruction": "Write a python function to find the contiguous subarray with the maximum sum in a given array. Your code should pass these tests:\n\nassert maxSubarraySum([-2,-3,4,-1,-2,1,5,-3]) == 7\nassert maxSubarraySum([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert maxSubarraySum([2,-8,3,-2,4,-10]) == 5", "output": "def maxSubarraySum(arr): \r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    for i in range(len(arr)): \r\n        max_ending_here = max_ending_here + arr[i] \r\n        if (max_ending_here < 0): \r\n            max_ending_here = 0\r\n        elif (max_so_far < max_ending_here): \r\n            max_so_far = max_ending_here \r\n    return max_so_far", "id": 110, "avg_similarity_score": 0.20125949558951184}
{"instruction": "Write a python function to determine if a given Binary Search Tree (BST) is balanced or not. Your code should pass these tests:\n\nassert isBalancedBST([4,2,5,1,3]) == True\nassert isBalancedBST([2,1,3,0,4]) == False\nassert isBalancedBST([5,30,20,45,35,46]) == True", "output": "def isBalancedBST(tree):\n    def check(node, minValue, maxValue):\r\n        if not node:\r\n            return True\r\n        if node.val < minValue or node.val > maxValue:\r\n            return False\n        return check(node.left, minValue,node.val-1) and check(node.right, node.val+1, maxValue)\n    return check(tree.root, float('-inf'),float('inf'))", "id": 111, "avg_similarity_score": 0.13691683552039177}
{"instruction": "Write a python function to find the kth smallest element in an array. Your code should pass these tests:\n\nassert find_KthSmallest([2,4,7,3,9],2) == 4\nassert find_KthSmallest([1,5,2,7,4],3) == 4\nassert find_KthSmallest([2,3,4},1) == 2", "output": "def find_KthSmallest(arr, k): \r\n    left, right = 0, len(arr)-1\r\n    while left <= right : \r\n        pos = partition(arr, left, right) \r\n        if pos == k-1 : \r\n            return arr[pos] \r\n        if pos > k-1 : \r\n            right = pos - 1\r\n        else : \r\n            left = pos + 1\r\n\r\ndef partition(arr, low, high):\n    pivot = arr[high]  \r\n    i = low-1\r\n    for j in range(low , high): \r\n        if   arr[j] <= pivot: \r\n            i = i+1\r\n            arr[i],arr[j] = arr[j],arr[i] \r\n           \r\n    arr[i+1],arr[high] = arr[high],arr[i+1] \r\n    return ( i+1 )", "id": 112, "avg_similarity_score": 0.1280461893197043}
{"instruction": "Write a function to calculate the sum of the most frequently occurring element in a list. Your code should pass these tests:\n\nassert sum_most_frequent([1,1,2,3,3]) == 6\nassert sum_most_frequent([2,2,2,3,3]) == 6\nassert sum_most_frequent([1,2,3,3,3]) == 9", "output": "def sum_most_frequent(nums):\r\n    counts = {}\r\n    max_freq_element = None\r\n    max_freq = 0\r\n    \r\n    for n in nums:\r\n        if n in counts:\r\n            counts[n] += 1\r\n            if counts[n] > max_freq:\r\n                max_freq_element = n\r\n                max_freq = counts[n]\r\n        else:\r\n            counts[n] = 1\r\n            if counts[n] > max_freq:\r\n                max_freq_element = n\r\n                max_freq = counts[n]\r\n    \r\n    return max_freq * max_freq_element", "id": 113, "avg_similarity_score": 0.1957519099251554}
{"instruction": "Write a function to count the number of set bits in a positive integer. Your code should pass these tests:\n\nassert count_bits(5) == 2\nassert count_bits(15) == 4\nassert count_bits(11) == 3", "output": "def count_bits(n): \r\n\tcount = 0\r\n\twhile n: \r\n\t\tcount+= n & 1\r\n\t\tn >>= 1\r\n\treturn count", "id": 114, "avg_similarity_score": 0.19059870112263108}
{"instruction": "Write a function to check if a given dictionary is empty. Your code should pass these tests:\n\nassert is_empty({}) == True\nassert is_empty({'x': 1}) == False\nassert is_empty(None) == True", "output": "def is_empty(d):\r\n    if d is None:\r\n        return True\r\n    else:\r\n        if len(d) == 0:\r\n            return True\r\n        else:\r\n            return False", "id": 115, "avg_similarity_score": 0.18035231566970902}
{"instruction": "Write a function that takes two positive integers and returns their greatest common divisor. Your code should pass these tests:\n\nassert gcd(24, 42) == 6\nassert gcd(10, 40) == 10\nassert gcd(18, 24) == 6", "output": "def gcd(a, b): \r\n\tif a == 0: \r\n\t\treturn b \r\n\treturn gcd(b % a, a)", "id": 116, "avg_similarity_score": 0.07697934771765752}
{"instruction": "Write a function to find the sum of the powers of all the numbers in a given array. Your code should pass these tests:\n\nassert sum_powers([2, 3, 4]) == 39\nassert sum_powers([5, 2, 3]) == 174\nassert sum_powers([2, 4, 6, 8]) == 1978", "output": "def sum_powers(arr):\n    result = 0\n    for number in arr:\n        result += pow(number, len(arr))\n    return result", "id": 117, "avg_similarity_score": 0.22625492657514568}
{"instruction": "Write a function to check if two lists have the same elements in any order. Your code should pass these tests:\n\nassert check_lists([1, 2, 3], [3, 2, 1]) == True\nassert check_lists([2, 3], [3, 2, 1]) == False\nassert check_lists([1, 1, 2], [2, 1]) == False", "output": "def check_lists(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return False\n    else:\n        lst1.sort()\n        lst2.sort()\n        for i in range(len(lst1)):\n            if lst1[i] != lst2[i]:\n                return False\n        return True", "id": 118, "avg_similarity_score": 0.12412202551660374}
{"instruction": "Write a Python program to reverse a string and remove all whitespace from it. Your code should pass these tests:\n\nassert reverse_and_remove('Hello World!') == '!dlroWolleH'\nassert reverse_and_remove(' Hi  ') == 'iH'\nassert reverse_and_remove('pYTHon') == 'nohTYP'", "output": "def reverse_and_remove(s): \r\n    s = s[::-1] \r\n    s = s.replace(\" \", \"\")  \r\n    return s", "id": 119, "avg_similarity_score": 0.11205390912799847}
{"instruction": "Write a Python function to find out common elements from two list using list comprehension. Your code should pass these tests:\n\nassert common_elements([2,3,4], [2,5,6]) == [2]\nassert common_elements([4,7,9], [2,7,3]) == [7]\nassert common_elements([5,8,9], [7,8,2]) == [8]", "output": "def common_elements(list1, list2): \r\n  return [ele for ele in list1 if(ele in list2)]", "id": 120, "avg_similarity_score": 0.08934042825158142}
{"instruction": "Write a Python function to find the fourth root of a number. Your code should pass these tests:\n\nassert fourth_root(81) == 3\nassert fourth_root(64) == 2\nassert fourth_root(1024) == 4", "output": "def fourth_root(n): \r\n    return n ** 0.25", "id": 121, "avg_similarity_score": 0.21550412964682233}
{"instruction": "Write a Python program to create an array of all possible combinations of three distinct numbers. Your code should pass these tests:\n\nassert possible_combination([1, 2, 3]) == [(1, 2, 3), (1, 3, 2), (2, 1, 3),(2, 3, 1), (3, 1, 2), (3, 2, 1)]\nassert possible_combination([4, 5, 6]) == [(4, 5, 6), (4, 6, 5), (5,4, 6),(5, 6, 4), (6, 4, 5), (6, 5, 4)]\nassert possible_combination([7, 8, 9]) == [(7, 8, 9), (7, 9, 8), (8, 7, 9),(8, 9, 7), (9, 7, 8), (9, 8, 7)]", "output": "import itertools\ndef possible_combination(lst):\r\n  return list(itertools.permutations(lst))", "id": 122, "avg_similarity_score": 0.07932512550911473}
{"instruction": "Write a Python function to remove all characters from a string except the alphabet and space. Your code should pass these tests:\n\nassert only_alphabets('Hello123') == 'Hello'\nassert only_alphabets('HelLo') == 'HelLo'\nassert only_alphabets('HiHa') == 'HiHa'", "output": "import re\r\ndef only_alphabets(st):\r\n  return re.sub(r\"[^A-z\\s]\", '', st)", "id": 123, "avg_similarity_score": 0.13553032043266316}
{"instruction": "Write a Python program to get the sum of given integers. Your code should pass these tests:\n\nassert sum_of_ints(3,2) == 5\nassert sum_of_ints(1,4) == 5\nassert sum_of_ints(6,7) == 13", "output": "def sum_of_ints(a,b):\r\n  return a+b", "id": 124, "avg_similarity_score": 0.1879676347980523}
{"instruction": "Write a Python program to reverse a sentence (strings). Your code should pass these tests:\n\nassert reverse_sentence('Hello World') == 'World Hello'\nassert reverse_sentence('This is a sentence') == 'sentence a is This'\nassert reverse_sentence('I love coding') == 'coding love I'", "output": "def reverse_sentence(st): \r\n    words = st.split(' ') \r\n    \r\n    newWords = [words[-1]]  \r\n    for i in range(len(words)-1): \r\n        newWords.append(words[i]) \r\n    newSentence = ' '.join(newWords) \r\n    return newSentence", "id": 125, "avg_similarity_score": 0.11195796966350802}
{"instruction": "Write a Python program to calculate the sum of a given integer array. Your code should pass these tests:\n\nassert sum_array([2, 3, 4]) == 9\nassert sum_array([1, 2, 3, 4, 5]) == 15\nassert sum_array([6, 7, 8, 9, 10]) == 40", "output": "def sum_array(arr): \r\n    sum = 0\r\n    for i in range(0,len(arr)): \r\n        sum += arr[i] \r\n  \r\n    return sum", "id": 126, "avg_similarity_score": 0.2379793928173737}
{"instruction": "Write a Python program to generate Pascal's triangle up to nth row. Your code should pass these tests:\n\nassert pascal_triangle(4) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\nassert pascal_triangle(3) == [[1], [1, 1], [1, 2, 1]]\nassert pascal_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]", "output": "def pascal_triangle(n) : \r\n    pascal = [[1]*(i+1) for i in range(n)] \r\n    for i in range(n) : \r\n        for j in range(1,i) : \r\n            pascal[i][j] = pascal[i-1][j-1] + pascal[i-1][j] \r\n    return pascal", "id": 127, "avg_similarity_score": 0.002085505735140772}
{"instruction": "Write a function to reverse a given string using stack data structure. Your code should pass these tests:\n\nassert reverse_string('Welcome') == 'emocleW'\nassert reverse_string('Codex') == 'xeodC'\nassert reverse_string('Learning') == 'gninraeL'", "output": "def reverse_string(string): \r\n    stack = [] \r\n    for ch in string: \r\n        stack.append(ch) \r\n    res = ''  \r\n    while stack: \r\n        res += stack.pop() \r\n    return res", "id": 128, "avg_similarity_score": 0.15055491470764754}
{"instruction": "Write a Python function to generate a list of numbers which are divisible by a given number. Your code should pass these tests:\n\nassert div_by(4, [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [4, 8]\nassert div_by(3, [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [3, 6, 9]\nassert div_by(2, [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]", "output": "def div_by(divisor, list): \r\n    ans_list = [] \r\n    for num in list: \r\n        if (num % divisor == 0): \r\n            ans_list.append(num) \r\n    return ans_list", "id": 129, "avg_similarity_score": 0.17855880663132528}
{"instruction": "Write a function that returns the longest palindromic substring within a given string. Your code should pass these tests:\n\nassert longest_palindrome('abcbacb') == 'bacb' \nassert longest_palindrome('aba') == 'aba'\nassert longest_palindrome('bananas') == 'anana'", "output": "def longest_palindrome(string): \r\n    start = end = 0\r\n    for i in range(1, len(string)): \r\n        for j in range (i + 1): \r\n            if (isPalindrome(string, j, i) and (i - j + 1) > (end - start)): \r\n                start = j \r\n                end = i \r\n    return string[start : end + 1] \r\ndef isPalindrome(string, start, end): \r\n    while (start < end): \r\n        if (string[start] != string[end]): \r\n            return False\r\n        start += 1\r\n        end -= 1\r\n    return True", "id": 130, "avg_similarity_score": 0.16409274127067158}
{"instruction": "Create a function to check if an input year is a Leap Year. Your code should pass these tests:\n\nassert check_leap_year(2016) == True\nassert check_leap_year(1995) == False\nassert check_leap_year(2100) == False", "output": "def check_leap_year(year):\r\n  if((year % 4 == 0) and (year % 100 != 0) or (year % 400 == 0)): \r\n    return True\r\n  else: \r\n    return False", "id": 131, "avg_similarity_score": 0.10095610571197175}
{"instruction": "Create a function to find the reverse order of a given string. Your code should pass these tests:\n\nassert reverse_string(\"Hello\") == \"olleH\"\nassert reverse_string(\"Codex\") == \"xedoC\"\nassert reverse_string(\"Learning\") == \"gninraeL\"", "output": "def reverse_string(string): \r\n    rev = \"\" \r\n    for i  in string: \r\n        rev = i + rev \r\n    return rev", "id": 132, "avg_similarity_score": 0.2356715617806093}
{"instruction": "Create a function to find a factorial of a given number. Your code should pass these tests:\n\nassert factorial(5) == 120\nassert factorial(3) == 6\nassert factorial(9) == 362880", "output": "def factorial(n): \r\n    fact = 1\r\n    for i in range(1, n + 1): \r\n        fact = fact * i \r\n    return fact", "id": 133, "avg_similarity_score": 0.19227575921401763}
{"instruction": "Write a python function to generate the combination of list elements using itertools. Your code should pass these tests:\n\nassert list(combination_elements([1, 2, 3], 2)) == [(1, 2), (1, 3), (2, 3)]\nassert list(combination_elements([1, 2, 3, 4], 3)) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]", "output": "import itertools\r\n\r\ndef combination_elements(list1,n):\r\n   return list(itertools.combinations(list1,n))", "id": 134, "avg_similarity_score": 0.0}
{"instruction": "Write a python function to calculate the sum of the even Fibonacci sequence from 0 to n. Your code should pass these tests: \n\nassert sum_fibonacci(8)== 10\nassert sum_fibonacci(13) == 44", "output": "def sum_fibonacci(n):\r\n    a = 0\r\n    b = 1\r\n    if (n<0):\r\n        print(\"Incorrect input\")\r\n    elif (n==1):\r\n        return a\r\n    else:\r\n        result = 0\r\n        for i in range(0, n):\r\n            c = a + b\r\n            if(c%2==0):\r\n                result+=c\r\n            a = b\r\n            b = c\r\n        return result", "id": 135, "avg_similarity_score": 0.005883962780514504}
{"instruction": "Write a Python function to delete the last common item in two lists of integers. Your code should pass these tests: \n\nassert delete_last_common_item([1,2,3,4], [3,4,5,6]) == [1,2,3]\nassert delete_last_common_item([1,2,3,4], [7,8,9]) == [1,2,3,4]", "output": "def delete_last_common_item(list1, list2): \r\n    for x in reversed(list1): \r\n        if x in list2: \r\n            return list1[:-1] \r\n    return list1", "id": 136, "avg_similarity_score": 0.12402517000250632}
{"instruction": "Write a python function to print a n x n matrix in clockwise spiral from the center. Your code should pass these tests:\n\nassert print_spiral_matrix([[1,2,3], [4,5,6], [7,8,9]]) ==[5, 6, 9, 8, 7, 4, 1, 2, 3]\nassert print_spiral_matrix([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]) == [6,7,8,12,16,15,14,13,9,5,1,2,3,4,10,11]", "output": "def print_spiral_matrix(matrix):\r\n    M = len(matrix)\r\n    N = len(matrix[0])\r\n\r\n    # Initialize the result array\r\n    result = []\r\n\r\n    # initialize the starting row index, ending row index, starting column index and ending column index\r\n    top = 0\r\n    left = 0\r\n    bottom = M - 1\r\n    right = N - 1\r\n\r\n    # Setup the loop until all the rows and columns of the matrix are explored\r\n    while (top <= bottom and left <= right):\r\n\r\n        # loop from left to right of the matrix, top row\r\n        for i in range(left, right + 1):\r\n            result.append(matrix[top][i])\r\n\r\n        # Increment the Top Row Index\r\n        top += 1\r\n\r\n        # loop from top to bottom of the matrix, right column\r\n        for i in range(top, bottom + 1):\r\n            result.append(matrix[i][right])\r\n\r\n        # Decrement the Right Column Index\r\n        right -= 1\r\n\r\n        # if the top row index is greater than the Bottom Row Index\r\n        if (top <= bottom):\r\n\r\n            # loop from right to left of the matrix, bottom row\r\n            for i in range(right, left - 1, -1):\r\n                result.append(matrix[bottom][i])\r\n\r\n        # Decrement the Bottom Row Index\r\n        bottom -= 1\r\n\r\n        # if the Right Column Index is greater than the Left Column Index\r\n        if (left <= right):\r\n\r\n            # loop from bottom to top of the matrix, left column\r\n            for i in range(bottom, top - 1, -1):\r\n                result.append(matrix[i][left])\r\n\r\n        # Increment the Left Column Index\r\n        left += 1\r\n\r\n    # return the resultant matrix\r\n    return result", "id": 137, "avg_similarity_score": 0.1013850701159137}
{"instruction": "Write a Python function to find the length of the longest repeating substring in a given string. Your code should pass these tests: \n\nassert lrs(\"aabcaabdaab\") ==  4\nassert lrs(\"aaaaa\") ==  5", "output": "def lrs(str1): \r\n    n = len(str1) \r\n    LCSRe = [[0 for x in range(n + 1)] for y in range(n + 1)] \r\n    res = \"\" \r\n    max_val = 0\r\n    index = 0\r\n    for i in range(1, n + 1): \r\n        for j in range(i + 1, n + 1): \r\n            if (str1[i - 1] == str1[j - 1] and LCSRe[i - 1][j - 1] < (j - i)): \r\n                LCSRe[i][j] = LCSRe[i - 1][j - 1] + 1\r\n                if (LCSRe[i][j] > max_val):  \r\n                    max_val = LCSRe[i][j]  \r\n                    res = str1[i - 1:j]  \r\n    return len(res)", "id": 138, "avg_similarity_score": 0.24035577600461364}
{"instruction": "Write a Python function to find the maximum sum of a subsequence in a given array such that no two elements in the subsequence are adjacent in the original array. Your code should pass these tests: \n\nassert max_subsequence_sum([1, 3, 4, 5]) == 9\nassert max_subsequence_sum([3, 5, 4 ,2, 6, 9]) == 13", "output": "def max_subsequence_sum(arr): \r\n\r\n    incl = 0\r\n    excl = 0\r\n    length = len(arr) \r\n  \r\n    for i in range(length): \r\n          \r\n        # Current max excluding i \r\n        new_excl = max(incl, excl) \r\n  \r\n        # Current max including i \r\n        incl = excl + arr[i] \r\n        excl = new_excl \r\n  \r\n    return max(incl,excl)", "id": 139, "avg_similarity_score": 0.16763341337053403}
{"instruction": "Write a function to find the inverse ones of a given list (that is, for example, if the list has 0 and 1 as elements, the inverse ones should have 1 and 0 as elements). Your code should pass these tests:\n\nassert inv_ones([0, 0, 0, 1, 1]) == [1, 1, 1, 0, 0]\nassert inv_ones([1, 0, 1, 1, 0]) == [0, 1, 0, 0, 1]\nassert inv_ones([1, 1, 0, 0, 1]) == [0, 0, 1, 1, 0]", "output": "def inv_ones(list):\n  res = []\r\n  for i in list:\n    if i == 1:\n      res.append(0)\n    else:\n      res.append(1)\n  return res", "id": 140, "avg_similarity_score": 0.13461791318252697}
{"instruction": "Write a function to check if a string contains the substring. Your code should pass these tests:\n\nasser check_substring(\"hello world\", \"ld\") == True\nassert check_substring(\"welcome\", \"llo\") == False\nassert check_substring(\"beautiful\", \"ful\") == True", "output": "def check_substring(string, substring):\n  return substring in string", "id": 141, "avg_similarity_score": 0.16963693399630816}
{"instruction": "Write a function to find the average of given list elements. Your code should pass these tests:\n\nassert avg_list([1, 2, 3, 4]) == 2.5\nassert avg_list([1, 3, 5, 7, 9]) == 5\nassert avg_list([2, 4, 6, 8, 10, 12]) == 7", "output": "def avg_list(list):\n  s = 0\n  for i in list:\n    s += i\n  avg = s/len(list)\n  return avg", "id": 142, "avg_similarity_score": 0.21419030701665495}
{"instruction": "Write a function to find the average items of a given dictionary. Your code should pass these tests:\n\nassert avg_dict({1:10, 2:20}) == 15\nassert avg_dict({2:3, 3:4, 4:5}) == 4", "output": "def avg_dict(dict_val):\n  s = 0\n  c = 0\n  for k,v in dict_val.items():\n    s += k*v\n    c += v\n  avg = s/c\n  return avg", "id": 143, "avg_similarity_score": 0.24967521436779433}
{"instruction": "Write a function to check if all the elements of a given list are positives or not. Your code should pass these tests:\n\nassert are_positive([2, 4, 6, 8]) == True\nassert are_positive([2, -3, 6, 4]) == False\nassert are_positive([1, 3, 5, 7]) == True", "output": "def are_positive(list):\n  for i in list:\n    if i < 0:\n      return False\n  return True", "id": 144, "avg_similarity_score": 0.23545780415522624}
{"instruction": "Write a Python function to get the largest two numbers from a given list of numbers. Your code should pass these tests:\n\nassert largest_two([16, 4, 14, 2]) == [16, 14]\nassert largest_two([4, 24, 13, 11]) == [24, 13]", "output": "def largest_two(list1):\r\n  list2 = sorted(list1)\r\n  return list2[-2:]", "id": 145, "avg_similarity_score": 0.22036164673364017}
{"instruction": "Write a Python function to replace all occurrences of a given character in a string with another character. Your code should pass these tests: \n\nassert rep_char('Python', 't', 'h') == 'Phyon'\nassert rep_char('Terry', 'r', 'n') == 'Tenny'", "output": "def rep_char(str1, c1, c2):\r\n  return str1.replace(c1, c2)", "id": 146, "avg_similarity_score": 0.17717890265372305}
{"instruction": "Write a Python function to find unique elements in a list. Your code should pass these tests:\n\nassert unique_list([1,1,1,2,2,3,4,3]) == [1,2,3,4]\nassert unique_list([2,3,3,3,3,3,4,4]) == [2,3,4]", "output": "def unique_list(list1):\r\n  return list(set(list1))", "id": 147, "avg_similarity_score": 0.1865333863442892}
{"instruction": "Write a Python program to print the Pascal\u2019s Triangle for n number of rows. Your code should pass these tests:\n\nassert draw_pascal_triangle(4) == [[1], [1,1], [1,2,1], [1,3,3,1]]\nassert draw_pascal_triangle(8) == [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1], [1,5,10,10,5,1], [1,6,15,20,15,6,1], [1,7,21,35,35,21,7,1]]", "output": "def draw_pascal_triangle(n):\r\n    result = [[1]]\r\n    if n == 0:\r\n        return result\r\n    else: \r\n        for row in range(1,n):\r\n            result.append([])\r\n            prev_row = result[row-1]\r\n            for j in range(len(prev_row)+1):\r\n                if j == 0 or j == len(prev_row):\r\n                    result[row].append(1)\r\n                else:\r\n                    result[row].append(prev_row[j] + prev_row[j-1])\r\n        return result", "id": 148, "avg_similarity_score": 0.11793876455148018}
{"instruction": "Write a Python program to print the Fibonacci series up to the given number. Your code should pass these tests:\n\nassert print_fibo(9) == [0, 1, 1, 2, 3, 5, 8]\nassert print_fibo(6) == [0, 1, 1, 2, 3, 5]", "output": "def print_fibo(n): \r\n    fibo = [0, 1] \r\n    for i in range(2,n): \r\n        fibo.append(fibo[i-2]+fibo[i-1]) \r\n    return fibo[0:n]", "id": 149, "avg_similarity_score": 0.1726246580756063}
{"instruction": "Write a Python program to check if an array is monotonic or not. Your code should pass these tests:\n\nassert is_monotonic([1,2,3,4,5,6]) == True\nassert is_monotonic([1,3,2,6,5,7]) == False", "output": "def is_monotonic(lst):\n  return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) or all(lst[i] >= lst[i+1] for i in range(len(lst)-1))", "id": 150, "avg_similarity_score": 0.021104000166500166}
{"instruction": "Write a Python function to rotate a 2D matrix by 90 degrees in the clockwise direction. Your code should pass these tests:\n\nassert rotate_matrix([[1,2,3],[4,5,6],[7,8,9]]) ==  [[7,4,1],[8,5,2],[9,6,3]]\nassert rotate_matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == [[13, 9, 5, 1],[14, 10, 6, 2],[15, 11, 7, 3],[16, 12, 8, 4]]", "output": "def rotate_matrix(matrix): \r\n    return [list(item) for item in zip(*matrix[::-1])]", "id": 151, "avg_similarity_score": 0.09946789210801048}
{"instruction": "Write a Python function to encode a given string to ROT13 and decode it. Your code should pass these tests:\n\nassert encode_rot13('HELLO') == 'URYYB'\nassert decode_rot13('URYYB') == 'HELLO'", "output": "def encode_rot13(string): \r\n    return \"\".join([chr(ord(string[i]) + 13) if 97<=(ord(string[i])+13)<=122 else chr(ord(string[i]) + 13 -26) for i in range(len(string))]) \r\n\r\ndef decode_rot13(string): \r\n    return \"\".join([chr(ord(string[i]) - 13) if (ord(string[i]) - 13)>=97 else chr(ord(string[i]) - 13 +26) for i in range(len(string))])", "id": 152, "avg_similarity_score": 0.013362922183584952}
{"instruction": "Write a Python function to flatten a 2D list. Your code should pass these tests:\n\nassert flatten_list([[1, 2, 3], [4, 5], [6, 7]]) == [1, 2, 3, 4, 5, 6, 7]\nassert flatten_list([[1], [2, 3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]", "output": "def flatten_list(lst):\r\n  return [item for sublist in lst for item in sublist]", "id": 153, "avg_similarity_score": 0.1321494900607154}
{"instruction": "Write a Python function to convert a given list of strings into a dictionary. Your code should pass these tests:\n\nassert  convert_list_to_dict(['ba', '1', 'bb', '2']) == {'ba': '1', 'bb': '2'}\nassert  convert_list_to_dict(['na', '1', 'nb', '2', 'nc', '3']) == {'na': '1', 'nb': '2', 'nc': '3'}", "output": "def convert_list_to_dict(lst):\n  my_dict = {}\n  for i in range(0,len(lst),2):\n    my_dict[lst[i]] = lst[i+1] \r\n  return my_dict", "id": 154, "avg_similarity_score": 0.12222757853845975}
{"instruction": "Write a python function to find the first n prime numbers. Your code should pass these tests:\n\nassert first_primes(4) == [2,3,5,7]\nassert first_primes(3) == [2,3,5]\nassert first_primes(7) == [2,3,5,7,11,13,17]", "output": "def first_primes(n): \n    i, j, counter = 2, 0, 0\n    primest = []\n    while counter < n: \n        for j in range(2, i - 1): \n            if i % j == 0: \n                break\n        if j == i - 2 : \n            primest.append(i) \n            counter += 1 \n        i += 1\n    return primest", "id": 155, "avg_similarity_score": 0.11948944443656458}
{"instruction": "Write a python function to find the sum of the series of numbers given in the array. Your code should pass these tests:\n\nassert sum_array([1,2,3,4]) == 10\nassert sum_array([2,5,7,9]) == 23\nassert sum_array([3,6,9,12]) == 30", "output": "def sum_array(arr): \n    return sum(arr)", "id": 156, "avg_similarity_score": 0.19478418025772787}
{"instruction": "Write a python function to find the sum of the elements in the given array up to a given index. Your code should pass these tests:\n\nassert sum_array_up_to([2,3,4,5], 2) == 9\nassert sum_array_up_to([1,2,3], 1) == 3\nassert sum_array_up_to([2,4,6,8], 3) == 20", "output": "def sum_array_up_to(arr, index): \n    res = 0\n    for i in range(0, index + 1): \n        res = res + arr[i] \n    return res", "id": 157, "avg_similarity_score": 0.17682844218864252}
{"instruction": "Write a python function to convert a list of characters to their corresponding ASCII values. Your code should pass these tests:\n\nassert ascii_val (['a','b','c']) == [97,98,99]\nassert ascii_val (['p','a','m']) == [112,97,109]\nassert ascii_val (['%','&','=']) == [37,38,61]", "output": "def ascii_val(lst): \n    return [ord(x) for x in lst]", "id": 158, "avg_similarity_score": 0.007023443348631319}
{"instruction": "Write a function to solve Josephus problem. Your code should pass these tests:\n\nassert josephus([1,2,3,4,5],2) == [2,4,1,5,3]\nassert josephus([1,2,3],2) == [2,3,1]\nassert josephus([7,8,9,10],3) ==[8,10,7,9]", "output": "def josephus(arr,k): \r\n    n = len(arr) \r\n    result = [0] * n \r\n    l = 0\r\n    while (n > 0): \r\n        l = (l + k - 1) % n \r\n        result[l] = arr[n - 1] \r\n        n = n - 1\r\n    return result", "id": 159, "avg_similarity_score": 0.0026298487836949372}
{"instruction": "Write a function to traverse the given matrix in spiral form. Your code should pass these tests:\n\nassert matrix_Traverse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4, 5 ]\nassert matrix_Traverse([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]", "output": "def matrix_Traverse(matrix): \r\n    rows = len(matrix) \r\n    cols = len(matrix[0]) \r\n    result = [] \r\n  \r\n    top = 0\r\n    bottom = rows - 1\r\n    left = 0\r\n    right = cols - 1\r\n    while (top <= bottom and left <= right): \r\n      \r\n        for i in range(left, right + 1): \r\n            result.append(matrix[top][i]) \r\n        top += 1\r\n      \r\n        for i in range(top, bottom + 1): \r\n            result.append(matrix[i][right]) \r\n        right -= 1\r\n      \r\n        if (top <= bottom): \r\n            for i in range(right, left - 1, -1): \r\n                result.append(matrix[bottom][i]) \r\n            bottom -= 1\r\n      \r\n        if (left <= right): \r\n            for i in range(bottom, top - 1, -1): \r\n                result.append(matrix[i][left]) \r\n            left += 1\r\n    return result", "id": 160, "avg_similarity_score": 0.13330856781243333}
{"instruction": "Write a function to generate a spiral matrix. Your code should pass these tests:\n\nassert gen_Spiral_Matrix(3) == [[1,2,3], [4,5,6], [7,8,9]]\nassert gen_Spiral_Matrix(4) == [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]", "output": "def gen_Spiral_Matrix(n): \r\n    matrix = [[0 for x in range(n)]  \r\n                  for y in range(n)] \r\n    top = 0\r\n    bottom = n - 1\r\n    left = 0\r\n    right = n - 1\r\n    count = 1\r\n    while (top <= bottom and left <= right): \r\n        for i in range(left, right + 1): \r\n            matrix[top][i] = count \r\n            count += 1\r\n        top += 1\r\n  \r\n        for i in range(top, bottom + 1): \r\n            matrix[i][right] = count \r\n            count += 1\r\n        right -= 1\r\n  \r\n        if (top <= bottom): \r\n            for i in range(right, left - 1, -1): \r\n                matrix[bottom][i] = count \r\n                count += 1\r\n            bottom -= 1\r\n  \r\n        if (left <= right): \r\n            for i in range(bottom, top - 1, -1): \r\n                matrix[i][left] = count \r\n                count += 1\r\n            left += 1\r\n    return matrix", "id": 161, "avg_similarity_score": 0.10474447186092586}
{"instruction": "Write a function to find the longest palindromic substring. Your code should pass these tests:\n\nassert longestPalindrome(\"babad\") == \"bab\"\nassert longestPalindrome(\"cbbd\") == \"bb\"\nassert longestPalindrome(\"a\") == \"a\"", "output": "def longestPalindrome(s):\r\n    longest_length = 0\r\n    longest_palindrome = \"\"\r\n    for i in range(len(s)):\r\n        for j in range(i+1, len(s)+1):\r\n            substr = s[i:j]\r\n            if substr == substr[::-1] and len(substr) > longest_length:\r\n                longest_length = len(substr)\r\n                longest_palindrome = substr\r\n\r\n    return longest_palindrome", "id": 162, "avg_similarity_score": 0.1100310965170707}
{"instruction": "Write a python function to calculate the absolute difference between the mean and the median of a given set of numbers. Your code should pass these tests:\n\nassert mean_median_diff([1,2,3,4]) == 1\nassert mean_median_diff([1,2,3,4,5]) == 0\nassert mean_median_diff([1,9]) == 4", "output": "def mean_median_diff(arr): \r\n    arr.sort()  \r\n    mid = len(arr)//2\r\n    median = (arr[mid] + arr[~mid])/2  \r\n    mean = sum(arr) / len(arr)  \r\n    return abs(mean-median)", "id": 163, "avg_similarity_score": 0.17163266941702077}
{"instruction": "Write a python program to find the length of the longest substring without repeating characters. Your code should pass these tests:\n\nassert longest_substring(\"abcabcbb\") == 3\nassert longest_substring(\"bbbbbbb\") == 1\nassert longest_substring(\"pwwkew\") == 3", "output": "def longest_substring(str):  \r\n    n = len(str)  \r\n    visited = [-1] * 256  \r\n    maxLen = 0  \r\n    currentLen = 0\r\n    prevIndex = 0  \r\n  \r\n    for i in range(0, n):  \r\n        prevIndex = visited[ord(str[i])]  \r\n\r\n        if (prevIndex == -1 or i - currentLen > prevIndex):  \r\n            currentLen += 1 \r\n        else:  \r\n            if (currentLen > maxLen):  \r\n                maxLen = currentLen  \r\n\r\n            currentLen = i - prevIndex  \r\n\r\n        visited[ord(str[i])] = i  \r\n\r\n    if (currentLen > maxLen): \r\n        maxLen = currentLen  \r\n  \r\n    return maxLen", "id": 164, "avg_similarity_score": 0.13824068106482484}
{"instruction": "Write a python program to sort a given unsorted linked list in linear time. Your code should pass these tests:\n\nassert sorted_list([1,2,6,3,4,5]) == [1,2,3,4,5,6]\nassert sorted_list([1,2,3,4]) == [1,2,3,4]\nassert sorted_list([3,7,1,2]) == [1,2,3,7]", "output": "def sorted_list(l):  \r\n    for i in range(len(l)-1):  \r\n        min_index = i  \r\n        for j in range(i+1, len(l)):  \r\n            if l[min_index] > l[j]:  \r\n                min_index = j  \r\n        l[i], l[min_index] = l[min_index], l[i]  \r\n    return l", "id": 165, "avg_similarity_score": 0.14904692237483794}
{"instruction": "Write a python program to generate all the permutations of a given list. Your code should pass these tests:\n\nassert perm([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\nassert perm([1,2,3,4]) == [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2], \n                           [2,1,3,4],[2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1], \n                           [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [3,4,2,1], \n                           [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]]", "output": "def perm(l):  \r\n    if len(l) == 0:  \r\n        return []  \r\n    \r\n    if len(l) == 1:  \r\n        return [l]  \r\n\r\n    lst = [] \r\n    for i in range(len(l)):  \r\n        m = l[i]  \r\n        \r\n        remLst = l[:i] + l[i+1:]  \r\n  \r\n        for p in perm(remLst):  \r\n            lst.append([m] + p)  \r\n    return lst", "id": 166, "avg_similarity_score": 0.2532264554337909}
{"instruction": "Write a program to check if a certain substring exists in a given string. Your code should pass these tests:\n\nassert is_substring('Python', 'th')==True\nassert is_substring('Coding', 'go')==True\nassert is_substring('Code', 'de')==False", "output": "def is_substring(s1, s2):\r\n  if s2 in s1:\r\n    return True\r\n  else:\r\n    return False", "id": 167, "avg_similarity_score": 0.18673585901700138}
{"instruction": "Write a function to split a list into two equal parts. Your code should pass these tests:\n\nassert split_list([1, 2, 3, 4, 5, 6],0)==[[1, 2, 3], [4, 5, 6]]\nassert split_list([1, 2, 3, 4, 5, 6],4)==[[1, 2, 3, 4], [5, 6]]\nassert split_list([1],2)==[[], [1]]", "output": "def split_list(lst, n): \r\n  return lst[:n], lst[n:]", "id": 168, "avg_similarity_score": 0.027993151453595717}
{"instruction": "Write a program to insert an element into a specific position of a given list. Your code should pass these tests:\n\nassert insert_to_list(['a','b','c','d','e'], 1, 'y') == ['a','y','b','c','d','e']\nassert insert_to_list([1, 2, 3, 4, 5], 0, 10) == [10,1,2,3,4,5] \nassert insert_to_list(['n', 'a', 'm'], 5, 'oh!') == ['n','a','m','oh!']", "output": "def insert_to_list(lst, n, x): \n  \n    lst.insert(n, x) \n    return lst", "id": 169, "avg_similarity_score": 0.21073601429148212}
{"instruction": "Write a program to convert a given number in binary form. Your code should pass these tests:\n\nassert dec_to_bin(7) == 111\nassert dec_to_bin(150) == 10010110\nassert dec_to_bin(11105) == 101011001001", "output": "def dec_to_bin(n): \r\n      \r\n    s = \"\" \r\n    while (n > 0):  \r\n        s += str(n % 2) \r\n        n = n // 2\r\n    s=s[::-1]   \r\n    return s", "id": 170, "avg_similarity_score": 0.1607069506274326}
{"instruction": "Write a program to check if a given year is a leap year. Your code should pass these tests:\n\nassert is_leap_year(2012) == True\nassert is_leap_year(1700) == False\nassert is_leap_year(1800) == False", "output": "def is_leap_year(year): \r\n\t\r\n\tif ((year % 4 == 0) and \r\n\t((year % 400 == 0) or (year % 100 != 0))): \r\n\t\treturn True \r\n\telse: \r\n\t\treturn False", "id": 171, "avg_similarity_score": 0.16193850534502993}
{"instruction": "Write a Python function to check if a number is divisible by all elements of a list. Your code should pass these tests:\n\nassert division_check(50, [2, 5, 10]) == True\nassert division_check(25, [5, 4]) == False\nassert division_check(12, [3, 4, 1]) == True", "output": "def division_check(num, divisor_list): \r\n  \r\n    # looping through every element \r\n    for ele in divisor_list: \r\n          \r\n        # if number is divisible \r\n        # by any of the element \r\n        if num % ele == 0: \r\n            flag = 1\r\n              \r\n        # if number is not divisible \r\n        # by any of the element \r\n        else: \r\n            flag = 0\r\n            break\r\n              \r\n    # if flag is 1 then number is divisible \r\n    # by all elements else not \r\n    if (flag == 1): \r\n        return False\r\n    else: \r\n        return True", "id": 172, "avg_similarity_score": 0.18127141261837998}
{"instruction": "Write a python function to calculate the angle between two objects in a 3D space. Your code should pass these tests:\n\nassert angle_object(0.5, 0.5, 0.4) == 0.7854045598093897\nassert angle_object(2, 3, 0) == 1.0606601717798213\nassert angle_object(1, 5, 3) == 0.48187518812505857", "output": "import math \r\n  \r\ndef angle_object(base_x, base_y, base_z): \r\n    \"\"\"\r\n    This function calculates the angle \r\n    between two objects in 3D space.  \r\n    \"\"\"\r\n\r\n    # res will store the angle\r\n    res = math.acos((base_x * base_y +  \r\n                     base_y * base_z +  \r\n                    base_z * base_x) / \r\n                    (math.sqrt(base_x * base_x +\r\n                    base_y * base_y + \r\n                    base_z * base_z) * \r\n                    math.sqrt((base_x * base_x + \r\n                    base_y * base_y)))) \r\n  \r\n    return res", "id": 173, "avg_similarity_score": 0.15349871929322906}
{"instruction": "Write a function to find the position of min value among the given values. Your code should pass these tests:\n\nassert min_index(4, 5, 1 ) == 2\nassert min_index(-2, 4, -5, -7 ) == 3\nassert min_index(1, 2, 7, 9, 2 ) == 0", "output": "def min_index(a, b, c): \r\n    # Get the minimum value position \r\n    if (a < b and a < c): \r\n        return 0\r\n    elif (b < a and b < c): \r\n        return 1\r\n    else: \r\n        return 2", "id": 174, "avg_similarity_score": 0.17378440973427364}
{"instruction": "Write a Python function for sorting a given data structure by a given field. Your code should pass these tests:\n\nassert sort_field([(\"Tom\", 25), (\"Jane\", 33), (\"Bob\", 15)], field=0) == [(\"Bob\", 15), (\"Jane\", 33), (\"Tom\", 25)]\n\nassert sort_field([(\"Tom\", 25), (\"Jane\", 33), (\"Bob\", 15)], field=1) == [(\"Bob\", 15), (\"Tom\", 25), (\"Jane\", 33)]", "output": "def sort_field(seq, field): \r\n      \r\n    # field argument indicates which field to sort by \r\n    # e.g. if field == 0, sort by field 0 \r\n    # if field == 1, sort by field 1 \r\n    return(sorted(seq, key = lambda x : x[field]))", "id": 175, "avg_similarity_score": 0.11095182271245992}
{"instruction": "Write a python function that takes two numbers as parameters and returns the difference between them. Your code should pass these tests:\n\nassert sub(25, 5) == 20\nassert sub(3, 5) == -2\nassert sub(10, 0) == 10", "output": "def sub(x, y):  \r\n    result = x - y  \r\n    return result", "id": 176, "avg_similarity_score": 0.09841145940103178}
{"instruction": "Write a python function to check for palindrome. Your code should pass these tests:\n\nassert palindrome('madam') == True\nassert palindrome('malayalam') == True\nassert palindrome('Codegen') == False", "output": "def palindrome(word): \r\n  \r\n    left, right = 0, len(word) - 1\r\n  \r\n    while right >= left: \r\n        if not word[left] == word[right]: \r\n            return False\r\n        left += 1\r\n        right -= 1\r\n    return True", "id": 177, "avg_similarity_score": 0.02944696333340561}
{"instruction": "Write a python function to calculate the total number of ways to reach the top of a staircase by taking 1 or 2 steps. Your code should pass these tests:\n\nassert numWay(3) == 3\nassert numWay(12) == 233\nassert numWay(4) == 5", "output": "def numWay(n): \r\n    if n == 1 or n == 0: \r\n        return 1\r\n    if n == 2: \r\n        return 2\r\n  \r\n    return numWay(n - 1) + numWay(n - 2)", "id": 178, "avg_similarity_score": 0.11270130317340116}
{"instruction": "Write a python function to reverse a given string without using loops. Your code should pass these tests:\n\nassert reverseString('Hello world') == 'dlrow olleH'\nassert reverseString('codegen') == 'negedoc'\nassert reverseString('python') == 'nohtyp'", "output": "def reverseString(string): \r\n    return string[::-1]", "id": 179, "avg_similarity_score": 0.16166534021865528}
{"instruction": "Write a python function to calculate the maximum depth of a binary tree. Your code should pass these tests:\n\nassert maxDepth(node) == 4\nassert maxDepth(node1) == 2\nassert maxDepth(node2) == 3", "output": "class Node: \r\n  \r\n    def __init__(self, data): \r\n        self.left = None\r\n        self.right = None\r\n        self.data = data\n\ndef maxDepth(node): \r\n  \r\n    if node is None: \r\n        return 0\r\n  \r\n    else : \r\n        left_depth = maxDepth(node.left) \r\n        right_depth = maxDepth(node.right) \r\n  \r\n        if (left_depth > right_depth): \r\n            return left_depth+1\r\n        else: \r\n            return right_depth+1", "id": 180, "avg_similarity_score": 0.17750109240321496}
{"instruction": "Write a function to find the number of ways to climb a staircase given the number of steps. Your code should pass these tests:\n\nassert climbingStairs(3) == 3\nassert climbingStairs(4) == 5\nassert climbingStairs(5) == 8", "output": "def climbingStairs(n): \r\n    if n <= 1: \r\n        return n \r\n    return climbingStairs(n-1) + climbingStairs(n-2)", "id": 181, "avg_similarity_score": 0.19336067721854563}
{"instruction": "Write a python program to find the greatest common divisor of two given numbers. Your code should pass these tests:\n\nassert num_gcd(15, 18) == 3\nassert num_gcd(20, 10) == 10\nassert num_gcd(54, 24) == 6", "output": "def num_gcd(a,b): \r\n    if a == 0 : \r\n        return b \r\n    return num_gcd(b % a, a)", "id": 182, "avg_similarity_score": 0.1975573312324983}
{"instruction": "Write a python program to rotate a list by given number. Your code should pass these tests:\n\nassert rot([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert rot([1,2,3,4,5], 3) == [4,5,1,2,3]\nassert rot([1,2,3,4,5], 5) == [1,2,3,4,5]", "output": "def rot(list1, n): \r\n    list2 = list1[n:] + list1[:n] \r\n    return list2", "id": 183, "avg_similarity_score": 0.1732062531264794}
{"instruction": "Write a python program to find the smallest positive number that is evenly divisible by two given numbers. Your code should pass these tests:\n\nassert smallest_multiple(15,20) == 60\nassert smallest_multiple(21,6) == 42\nassert smallest_multiple(30,2) == 30", "output": "def smallest_multiple(a,b): \r\n    lcm = (a*b)//num_gcd(a,b)\r\n    return lcm", "id": 184, "avg_similarity_score": 0.14409357540879972}
{"instruction": "Write a python program to find the power of the given number without using the python built-in pow() function. Your code should pass these tests:\n\nassert pow_(7,5) == 16807\nassert pow_(3,3) == 27\nassert pow_(2,4) == 16", "output": "def pow_(num, exponent):\r\n    result = 1\r\n\r\n    for i in range(1, exponent + 1):\r\n        result *= num\r\n    return result", "id": 185, "avg_similarity_score": 0.1617022134946527}
{"instruction": "Write a python function to reverse a given list in place. Your code should pass these tests:\n\nassert reverse_list([1, 4, 2, 5, 3]) == [3, 5, 2, 4, 1]\nassert reverse_list([5, 7, 8]) == [8, 7, 5]\nassert reverse_list([-1, -4, -3]) == [-3, -4, -1]", "output": "def reverse_list(list1):\r\n  start = 0\r\n  end = len(list1) - 1\r\n  while start < end:\r\n    list1[start], list1[end] = list1[end], list1[start]\r\n    start += 1\r\n    end -= 1\r\n  return list1", "id": 186, "avg_similarity_score": 0.18872492281675474}
{"instruction": "Write a python function to calculate the Levenshtein distance between two given strings. Your code should pass these tests:\n\nassert levenshtein_distance(\"kitten\", \"sitting\") == 3\nassert levenshtein_distance(\"kitten\", \"sittings\") == 4\nassert levenshtein_distance(\"\", \"sittings\") == 8", "output": "def levenshtein_distance(str1, str2):\r\n  if len(str1) == 0:\r\n    return len(str2)\r\n  if len(str2) == 0:\r\n    return len(str1)\r\n\r\n  n1 = len(str1)\r\n  n2 = len(str2)\r\n  d = [[0] * (n2 + 1) for _ in range(n1 + 1)]\r\n\r\n  for i in range(n1 + 1):\r\n    d[i][0] = i\r\n  for j in range(n2 + 1):\r\n    d[0][j] = j\r\n    \r\n  for i in range(1, n1 + 1):\r\n    for j in range(1, n2 + 1):\r\n      if str1[i - 1] == str2[j - 1]:\r\n        d[i][j] = d[i - 1][j - 1]\r\n      else:\r\n        d[i][j] = min(d[i][j - 1], d[i - 1][j], d[i - 1][j - 1]) + 1\r\n\r\n  return d[-1][-1]", "id": 187, "avg_similarity_score": 0.1394384894517418}
{"instruction": "Write a python class for a to-do list application which can store and manage tasks. The class should be able to add tasks, remove tasks and retrieve tasks. Your code should pass these tests:\n\nassert len(TodoList().tasks) == 0\nassert len(TodoList().add_task(\"Task1\").tasks) == 1\nassert len(TodoList().add_task(\"Task2\").remove_task(\"Task1\").tasks) == 1\nassert \"Task2\" in TodoList().add_task(\"Task2\").get_tasks()", "output": "class TodoList(object):\r\n    def __init__(self):\r\n        self.tasks = []\r\n\r\n    def add_task(self, task):\r\n        self.tasks.append(task)\r\n        return self\r\n\r\n    def remove_task(self, task):\r\n        self.tasks.remove(task)\r\n        return self\r\n\r\n    def get_tasks(self):\r\n        return self.tasks", "id": 188, "avg_similarity_score": 0.04962758643948223}
{"instruction": "Write a python function to generate a dictionary that contains (i, i*i) where i is an integer between 1 and n (both included). Your code should pass these tests:\n\n\nassert dict_square(3) == {1: 1, 2: 4, 3: 9}\nassert dict_square(2) == {1: 1, 2: 4}\nassert dict_square(4) == {1: 1, 2: 4, 3: 9, 4: 16,}", "output": "def dict_square(n): \r\n    result_dict = {i: i * i for i in range(1, n + 1)} \r\n    return result_dict", "id": 189, "avg_similarity_score": 0.07478066457212944}
{"instruction": "Write a python function to check if a given number is divisible by 3. Your code should pass these tests:\n\nassert is_divisible_by_3(9) == True\nassert is_divisible_by_3(8) == False\nassert is_divisible_by_3(7) == False", "output": "def is_divisible_by_3(n):\r\n  if n % 3 == 0:\r\n    return True\r\n  else:\r\n    return False", "id": 190, "avg_similarity_score": 0.17324937547203922}
{"instruction": "Write a function to find the zeros of an equation using bisection method. Your code should pass these tests:\n\nassert find_zeros(lambda x: x**3 - 8, 0, 5, 0.02) == [2.001953125, 3.998046875]\nassert find_zeros(lambda x: x**2 - 12, 3, 10, 0.002) ==  [3.515625, 10.484375]\nassert find_zeros(lambda x: x**3 - 10*x, 0, 10, 0.0001) == [2.99996, 5.00004]", "output": "def find_zeros(func, x_min, x_max, eps):\n    zeros = []\n    iteration = 0\n  \n    # check that roots are present in the interval\n    f_x_min = func(x_min)\n    f_x_max = func(x_max)\n  \n    # if sign of f(x_min) and f(x_max) are same,\n    # roots are not present on the interval\n    if f_x_min * f_x_max > 0:\n        print(\"Given interval does not hold roots\")\n        return None\n    # if sign of f(x_min) and f(x_max) are not same,\n    # roots must be present on the interval\n    else:         \n        # Pay attention! While loop\n        while x_max - x_min > eps:\n            iteration = iteration + 1\n            # Calculate mid point\n            x_mid = (x_min + x_max) / 2\n            # Calculate f(x_mid)\n            f_x_mid = func(x_mid)\n            # if sign of f_x_mid and f_x_min are not same \n            # set x_max = x_mid\n            if f_x_mid * f_x_min < 0:\n                x_max = x_mid\n            # else set x_min = x_mid\n            else:\n                x_min = x_mid\n            zeros.append(x_mid)\n            # Print iterations\n            print(\"The value of the root is :\", \"%.4f\"%x_mid, \n                  \" after \", iteration, \"th iteration\")\n             \n    return zeros", "id": 191, "avg_similarity_score": 0.13026499010003148}
{"instruction": "Write a function to reverse a linked list. Your code should pass these tests:\n\nassert reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert reverse_list([4, 8, 15, 16, 23, 42]) == [42, 23, 16, 15, 8, 4]\nassert reverse_list([1, 2, 3, 4]) == [4, 3, 2, 1]", "output": "class Node:  \r\n          \r\n    # Function to initialise the node object  \r\n    def __init__(self, data):  \r\n        self.data = data  # Assign data  \r\n        self.next = None  # Initialize next as null  \r\n  \r\ndef reverse_list(head):  \r\n    prev = None  \r\n    current = head  \r\n    while(current is not None):  \r\n        nxt = current.next\r\n        current.next = prev  \r\n        prev = current  \r\n        current = nxt  \r\n    head = prev  \r\n    return head", "id": 192, "avg_similarity_score": 0.14008449280386082}
{"instruction": "Write a function to find maximum sum of a subarray in an array. Your code should pass these tests:\n\nassert max_subarray_sum([-2, -5, 6, -2, -3, 1, 5, -6]) == 8\nassert max_subarray_sum([1, 4, 2, 10, 23, 3, 1, 0, 20]) == 39\nassert max_subarray_sum([-1, -2, -3, -4, -5]) == -1", "output": "def max_subarray_sum(arr): \n    max_so_far = 0\n    max_ending_here = 0\n  \n    for i in range(0, len(arr)): \n        max_ending_here = max_ending_here + arr[i] \n        max_ending_here = max(0, max_ending_here)  \n        max_so_far = max(max_so_far, max_ending_here)\n  \n    return max_so_far", "id": 193, "avg_similarity_score": 0.16738726709040425}
{"instruction": "Write a function to create a Floyd Triangle with given number of rows. Your code should pass these tests:\n\nassert triangle(3) == [[1], [2, 3], [4, 5, 6]]\nassert triangle(5) == [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]\nassert triangle(1) == [[1]]", "output": "def triangle(rows):\n    floyd = []\n    k = 1\n    for i in range(rows):\n        floyd_row=[]\n        for j in range(i+1):\n            floyd_row.append(k)\n            k = k+1\n        floyd.append(floyd_row)\n    return floyd", "id": 194, "avg_similarity_score": 0.15733903534730623}
{"instruction": "Write a function to print the numbers from a given interval which are divisible by 8. Your code should pass these tests:\n\nassert divisible_by_8([1, 20]) == [8, 16]\nassert divisible_by_8([100, 150]) == [128, 136, 144]\nassert divisible_by_8([45, 65]) == [48]", "output": "def divisible_by_8(interval):\n    result = []\n  # iterate from start to end of interval\n    for num in range(interval[0], interval[1] + 1):\n        # if num is divisible by 8, add it to result\n        if num % 8 == 0:\n            result.append(num)\n    return result", "id": 195, "avg_similarity_score": 0.16464826655887066}
{"instruction": "Write a function to find the two smallest elements in unsorted array. Your code should pass these tests:\n\nassert two_min_elements([3,1,4,2,6]) == [1,2]\nassert two_min_elements([2,4,5,7,3]) == [2,3]\nassert two_min_elements([4,3,7,1,9]) ==[1,3]", "output": "def two_min_elements(arr):\n    small_num = min(arr) \n    arr.remove(small_num) \n    next_small_num = min(arr) \n    arr.append(small_num) \n    return [small_num, next_small_num]", "id": 196, "avg_similarity_score": 0.1447055091330249}
{"instruction": "Write a function to swap the two given elements of a list. Your code should pass these tests:\n\nassert swap_list_elements([3,1,2], 0,1) == [1,3,2]\nassert swap_list_elements([1,2,3], 0,2) == [3,2,1]\nassert swap_list_elements([1,2,3], 2,1) == [1,3,2]", "output": "def swap_list_elements(arr,first_index,second_index): \r\n\r\n    temp = arr[first_index] \r\n    arr[first_index] = arr[second_index] \r\n    arr[second_index] = temp \r\n\r\n    return arr", "id": 197, "avg_similarity_score": 0.2186436830611702}
{"instruction": "Write a function to count the shorter words inside a string. Your code should pass these tests:\n\nassert count_short_words(\"Hello World\") == 2\nassert count_short_words(\"I love programming\") == 4\nassert count_short_words(\"What is your name?\") == 3", "output": "def count_short_words(string): \r\n    \r\n    words = string.split(\" \")\r\n    count = 0 \r\n    for word in words: \r\n        if len(word)<=3: \r\n            count = count+1\r\n    \r\n    return count", "id": 198, "avg_similarity_score": 0.15646256224994057}
{"instruction": "Write a function to return all the anagrams of the given string. Your code should pass these tests:\n\nassert find_anagrams(\"rat\",\"art\") == True\nassert find_anagrams(\"silent\",\"listen\") == True\nassert find_anagrams(\"one\",\"two\") == False", "output": "def find_anagrams(first,second): \r\n    if sorted(first)== sorted(second): \r\n        return True\r\n    return False", "id": 199, "avg_similarity_score": 0.1896354050816841}
{"instruction": "Write a function to calculate the sum of digits of the given number. Your code should pass these tests:\n\nassert sum_of_digits(550) == 10\nassert sum_of_digits(123) == 6\nassert sum_of_digits(30) == 3", "output": "def sum_of_digits(n): \n    sum = 0\n    while n > 0: \n        sum = sum + (n % 10) \n        n = n // 10\n    return sum", "id": 200, "avg_similarity_score": 0.1802394964951417}
{"instruction": "Write a function to sort a given list of strings in descending order of their length. Your code should pass these tests:\n\nassert sort_string(['a','b','ab','abc','c']) == ['abc', 'ab', 'b', 'a', 'c']\nassert sort_string (['sarah','david','michelle','sam','jude']) == ['michelle', 'sarah', 'david', 'sam', 'jude']", "output": "def sort_string(list1): \r\n    list1.sort(key = len, reverse = True) \r\n    return list1", "id": 201, "avg_similarity_score": 0.160943281966769}
{"instruction": "Write a python function to remove all duplicates from the given list. Your code should pass these tests:\n\nassert remove_duplicate([1,2,2,3,3,4]) == [1,2,3,4]\nassert remove_duplicate([1,2,2,3,3,4,4,5]) == [1,2,3,4,5]\nassert remove_duplicate([1,2,2,3,3,4,5,5,5]) == [1,2,3,4,5]", "output": "def remove_duplicate(list1): \r\n    list2 = [] \r\n    for item in list1: \r\n        if item not in list2: \r\n            list2.append(item) \r\n    return list2", "id": 202, "avg_similarity_score": 0.1667215871177}
{"instruction": "Write a python function to calculate the sum of distances from all the points to the origin (0,0). Your code should pass these tests:\n\nassert sum_distance([(3,2),(1,4),(7,1)]) == 16\nassert sum_distance([(2,3),(3,2),(5,3)]) == 17\nassert sum_distance([(1,1),(0,2)]) == 3", "output": "def sum_distance(list1): \r\n    sum_dist = 0 \r\n    for point in list1: \r\n        sum_dist += pow((pow(point[0],2) + pow(point[1],2)), 0.5) \r\n    return sum_dist", "id": 203, "avg_similarity_score": 0.0758542114167647}
{"instruction": "Write a function to remove the given character from the given string.Your code should pass these tests:\n\nassert remove_char('abc','a') == 'bc'\nassert remove_char('abcd','d') == 'abc'\nassert remove_char('abcde','e') == 'abcd'", "output": "def remove_char(string, letter):\r\n  result = \"\"\r\n  for char in string:\r\n    if char != letter:\r\n      result+=char\r\n  return result", "id": 204, "avg_similarity_score": 0.15823275563644829}
{"instruction": "Write a function to sort the given list of tuples based on the second element. Your code should pass these tests:\n\nassert sort_tuple([(1,2), (0,1), (1,3), (0,2)]) == [(0,1), (0,2), (1,2), (1,3)]\nassert sort_tuple([(3,4), (1,2), (0,1), (2,5)]) == [(0,1), (1,2), (3,4), (2,5)]\nassert sort_tuple([(2,3), (0,5), (4,1), (5,2)]) == [(4,1), (5,2), (2,3), (0,5)]", "output": "def sort_tuple(list1): \r\n    list1.sort(key = lambda tuples: tuples[1])  \r\n    return list1", "id": 205, "avg_similarity_score": 0.1514294806322143}
{"instruction": "Write a function to find the maximum element in the given list of tuples. Your code should pass these tests:\n\nassert max_value([(3,2), (1,4), (6,5)]) == 6\nassert max_value([(9,3), (2,1), (6,2)]) == 9\nassert max_value([(4,3), (1,5), (3,2)]) == 4", "output": "def max_value(list1):\r\n    max_tuple = max(list1, key=lambda item:item[0])\r\n    return max_tuple[0]", "id": 206, "avg_similarity_score": 0.20170240747964516}
{"instruction": "Write a function to find the minimum element in the given dictionary. Your code should pass these tests:\n\nassert min_value({'a':2, 'b':4, 'c':6}) == 2\nassert min_value({'x':8, 'y':5, 'z':1}) == 1\nassert min_value({'p':3, 'q':9, 'r':2}) == 2", "output": "def min_value(dict1):\r\n    min_value = min(dict1.values())\r\n    return min_value", "id": 207, "avg_similarity_score": 0.18065091899996277}
{"instruction": "Write a function to print all the prime numbers in the given range. Your code should pass these tests:\n\nassert print_primes(2,8) == [2,3,5,7]\nassert print_primes(11,17) == [11,13,17]\nassert print_primes(20,30) == [23,29]", "output": "def print_primes(m, n): \r\n    result = []\r\n    for num in range(m, n+1): \r\n        if num > 1: \n            prime = True\n            for i in range(2, num): \n                if (num % i) == 0: \n                    prime = False\n            if prime: \n                result.append(num)\r\n    return result", "id": 208, "avg_similarity_score": 0.16125388810847238}
{"instruction": "Write a python function to find the largest palindrome that is a product of two three digits numbers. Your code should pass these tests:\n\nassert palindrome_Product(101,999) == 906609\nassert palindrome_Product(10,100) == 121\nassert palindrome_Product(100,110) == 121", "output": "def palindrome_Product(start,end): \r\n    max_product = 0\r\n    for i in range (start-1, end): \r\n       for j in range (i+1, end): \r\n            product = i*j \r\n            if (is_Palindrome(product) and product > max_product): \r\n                max_product = product \r\n    return max_product \r\n    \r\ndef is_Palindrome(n): \r\n    return str(n) == str(n)[::-1]", "id": 209, "avg_similarity_score": 0.170666408331783}
{"instruction": "Write a python function to count the number of ways to reach a given score in a game where Sunday is the winning day. Your code should pass these tests:\n\nassert countWays(5) == 1 \nassert countWays(10) == 2\nassert countWays(20) == 5", "output": "def countWays(n): \r\n    dp = [0] * (n + 1) \r\n      \r\n    dp[0] = 1\r\n    dp[1] = 1\r\n      \r\n    for i in range(2,n+1): \r\n        dp[i] = dp[i-2] + dp[i-1] \r\n  \r\n    return dp[n]", "id": 210, "avg_similarity_score": 0.14126468233825404}
{"instruction": "Write a python function to check if a string is a palindrome without using library functions. Your code should pass these tests:\n\nassert isPalindrome(\"racecar\") == True\nassert isPalindrome(\"apple\") == False\nassert isPalindrome(\"aba\") == True", "output": "def isPalindrome(s): \r\n    n = len(s) \r\n    for i in range(n//2): \r\n        if (s[i] != s[n-i-1]): \r\n            return False \r\n    return True", "id": 211, "avg_similarity_score": 0.12511077753392227}
{"instruction": "Write a python program to determine if an array consists of consecutive elements or not. Your code should pass these tests:\n\nassert checkConsecutive([1,3,4,5]) == True\nassert checkConsecutive([7,9,11,12]) == False\nassert checkConsecutive([2,1,3,5]) == False", "output": "def checkConsecutive(arr): \r\n    flag = True\r\n    arr.sort() \r\n    for i in range(1,len(arr)): \r\n        if (arr[i] - arr[i - 1] != 1): \r\n            flag = False\r\n            break\r\n    return flag", "id": 212, "avg_similarity_score": 0.0834591801450268}
{"instruction": "Write a python function to count the minimum number of coins of given denominations that can make a given amount. Your code should pass these tests:\n\nassert coinChange({3,5,7},9) == 1\nassert coinChange({2,5,7},13) == 3\nassert coinChange({2,5,7},9) == 2", "output": "def coinChange(denominations,amount): \r\n    n = len(denominations) \r\n    dp = [0 for i in range(amount + 1)] \r\n    dp[0] = 1\r\n      \r\n    for i in range(n): \r\n        for j in range(denominations[i],amount + 1): \r\n            dp[j] += dp[j - denominations[i]] \r\n              \r\n    return dp[amount]", "id": 213, "avg_similarity_score": 0.16846465456807308}
{"instruction": "Write a python function to evaluate a given polynomial and constant. Your code should pass these tests:\n\nassert evaluatePolynomial(2,4,{3,2,1,0},{2,5,7,10}) == 16\nassert evaluatePolynomial(2,5,{3,2,1,0},{2,2,2,2}) == 33\nassert evaluatePolynomial(1,2,{2,1,0},{2,3,5}) == 11", "output": "def evaluatePolynomial(x,coefficient,exponent,constant): \r\n    result = 0\r\n    for i in range (len(exponent)): \r\n        result += ( coefficient[i] * pow(x,exponent[i]) )   \r\n    result += constant[0] \r\n    return result", "id": 214, "avg_similarity_score": 0.1515903235021096}
{"instruction": "Write a Python program to print the calendar of a given month and year. Your code should pass these tests:\n\nassert month_name(5) =='May'\nassert day_of_week(30,10,2020)==4\nassert get_week_days(1,23,2020)=='Fri  Sat  Sun  Mon  Tue  Wed  Thu'", "output": "import calendar\r\ndef month_name(month): \r\n    return calendar.month_name[month] \r\n\r\ndef day_of_week(day, month, year): \r\n    return calendar.weekday(year, month, day) \r\n  \r\ndef get_week_days(start_day, end_day, year): \r\n    d1 = day_of_week(start_day,end_day,year) \r\n    print('Day of week  ',  end = ' ') \r\n  \r\n    for i in range(d1, 8): \r\n        print(calendar.day_name[i%7], end = '  ')", "id": 215, "avg_similarity_score": 0.22013958576386106}
{"instruction": "Write a function to print the nth element of a Fibonacci series. Your code should pass these tests:\n\nassert series_fibonacci(7)==13\nassert series_fibonacci(3)==2", "output": "def series_Fibonacci(n): \r\n\tif n==0: \r\n\t\treturn 0\r\n\telif n==1: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn series_Fibonacci(n-1)+series_Fibonacci(n-2)", "id": 216, "avg_similarity_score": 0.1811454165799788}
{"instruction": "Write a function to format a given date according to the given format. Your code should pass these tests:\n\nassert format_date(datetime.date(2020, 9, 28), 'dd-mm-yyyy') == '28-09-2020'\nassert format_date(datetime.date(2020, 9, 28), 'dd/mm/yyyy') == '28/09/2020'", "output": "import datetime \r\n  \r\ndef format_date(d, pattern): \r\n    if pattern == \"dd-mm-yyyy\": \r\n        return d.strftime(\"%d-%m-%Y\") \r\n    elif  pattern == \"dd/mm/yyyy\": \r\n        return d.strftime(\"%d/%m/%Y\")", "id": 217, "avg_similarity_score": 0.16246607477706818}
{"instruction": "Write a function to calculate the factorial of an integer. Your code should pass these tests:\n\nassert calculate_factorial(5) == 120\nassert calculate_factorial(7) == 5040", "output": "def calculate_factorial(num): \r\n  if num == 0: \r\n    return 1\r\n  else: \r\n    return num * calculate_factorial(num - 1)", "id": 218, "avg_similarity_score": 0.0738851667119777}
{"instruction": "Write a function to calculate the power of a number. Your code should pass these tests:\n\nassert calculate_power(4, 3) == 64\nassert calculate_power(2, 4) == 16", "output": "def calculate_power(base, exp): \r\n    if(exp == 0): \r\n        return 1\r\n    elif (exp%2 == 0): \r\n        return calculate_power(base, exp/2) * calculate_power(base, exp/2) \r\n    else: \r\n        return base * calculate_power(base, exp/2) * calculate_power(base, exp/2)", "id": 219, "avg_similarity_score": 0.21306172651096797}
{"instruction": "Write a function to sort a list of numbers. Your code should pass these tests:\n\nassert sort_list([3, 5, 9, 1]) == [1, 3, 5, 9]\nassert sort_list([4, 2, 6, 8]) == [2, 4, 6, 8]", "output": "def sort_list(lst): \r\n    lst.sort() \r\n    return lst", "id": 220, "avg_similarity_score": 0.17139612555569997}
{"instruction": "Write a function to convert a given string to reverse its order. Your code should pass these tests:\n\nassert string_reverse(\"hello\") == \"olleh\"\nassert string_reverse(\"puppy\") == \"yppup\"\nassert string_reverse(\"machine\") == \"enihcam\"", "output": "def string_reverse(str1): \r\n  return str1[::-1]", "id": 221, "avg_similarity_score": 0.016330939382887436}
{"instruction": "Write a function to compare two strings and return true if they are anagrams. Your code should pass these tests:\n\nassert anagram_check('LISTEN', 'SILENT') == True\nassert anagram_check('apple', 'orange') == False\nassert anagram_check('abcd', 'dcab') == True", "output": "def anagram_check(str1,str2):\r\n  return  sorted(str1)==sorted(str2)", "id": 222, "avg_similarity_score": 0.04667414490532454}
{"instruction": "Write a python function to check whether a number is a perfect cube or not. Your code should pass these tests:\n\nassert isCube(125)==True\nassert isCube(27)==True\nassert isCube(47)==False", "output": "def isCube(x): \n    i = 1\n    while(i*i*i < x): \n        i += 1\n  \n    if (i*i*i == x): \n        return True\n    else: \n        return False", "id": 223, "avg_similarity_score": 0.1279360953914349}
{"instruction": "Write a python function to find fibonacci numbers in given range. Your code should pass these tests:\n\nassert fibonacci_numbers(3,8)==[3,5,8]\nassert fibonacci_numbers(2,10)==[2,3,5,8]\nassert fibonacci_numbers(1,6)==[1,2,3,5]", "output": "def fibonacci_numbers(start, end): \n  \n    fibonacci_nums = [] \n    num1 = 0\n    num2 = 1\n    while num1 <= end: \n        if num1 >= start: \n            fibonacci_nums.append(num1) \n        next = num1 + num2 \n        num1 = num2 \n        num2 = next\n    return fibonacci_nums", "id": 224, "avg_similarity_score": 0.13029791677367414}
{"instruction": "Write a python function to find the reverse of string. Your code should pass these tests:\n\nassert reverse_string(\"Hello World\")==\"dlroW olleH\"\nassert reverse_string(\"Python\")==\"nohtyP\"\nassert reverse_string(\"Codex\") == \"xedoC\"", "output": "def reverse_string(s): \n      \n    str = \"\" \n  \n    for i in s: \n        str = i + str\n    return str", "id": 225, "avg_similarity_score": 0.19381564912965718}
{"instruction": "Write a python program to find whether a given number is armstrong or not. Your code should pass these tests:\n\nassert armstrong(153)==True\nassert armstrong(1634)==True\nassert armstrong(154)==False", "output": "def armstrong(num): \n  \n    sum = 0\n    temp = num \n    while temp > 0: \n        digit = temp % 10 \n        sum += digit ** 3 \n        temp //= 10 \n    if num == sum: \n        return True\n    else: \n        return False", "id": 226, "avg_similarity_score": 0.1833407188200361}
{"instruction": "Write a function to calculate the median of a list of numbers. Your code should pass these tests:\n\nassert median([4, 5, 6]) == 5\nassert median([9, 8, 7, 6]) == 7.5\nassert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5", "output": "def median(nums):\r\n  nums.sort()\r\n  if len(nums) % 2:\r\n    return nums[len(nums) // 2]\r\n  return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2.0", "id": 227, "avg_similarity_score": 0.2235175448713709}
{"instruction": "Write a python function to create a new list which contains the characters from two given list. Your code should pass these tests: \n\nassert combine_lists(['a', 'b', 'c'], [1, 2, 3]) == ['a', 1, 'b', 2, 'c', 3]\nassert combine_lists(['s', 'r', 'u'], [7, 2, 9]) == ['s', 7, 'r', 2, 'u', 9]\nassert combine_lists([1, 2, 3], [4, 5, 6]) == [1, 4, 2, 5, 3, 6]", "output": "def combine_lists(list1, list2):\r\n    result = []\r\n    for i, j in zip(list1, list2):\r\n        result.append(i)\r\n        result.append(j)\r\n    return result", "id": 228, "avg_similarity_score": 0.1721107141306252}
{"instruction": "Write a python function to remove the characters from odd positions of a given string. Your code should pass these tests: \n\nassert remove_odd_characters('ABCDEFG') == 'BDF'\nassert remove_odd_characters('NFL 2K20') == 'FK2'\nassert remove_odd_characters('hello world') == 'el ol'", "output": "def remove_odd_characters(string): \n  res = \"\" \n  i=0 \n  while i < len(string): \n    res = res + string[i] \n    i+=2 \n  return res", "id": 229, "avg_similarity_score": 0.2271379437150463}
{"instruction": "Write a python function to find the common elements between two given lists. Your code should pass these tests: \n\nassert common_elements([11, 6, 5, 10], [1, 6, 9, 3]) == [6]\nassert common_elements([21, 4, 5, 16], [1, 6, 5, 10]) == [5]\nassert common_elements([1, 2, 3], [4, 5, 6]) == []", "output": "def common_elements(list1, list2):\r\n  result = []\r\n  for element in list1:\r\n    if element in list2:\r\n      result.append(element)\r\n  return result", "id": 230, "avg_similarity_score": 0.17165233848970446}
{"instruction": "Write a function to remove the duplicates values in an array. Your code should pass these tests:\n\nassert remove_duplicates([1, 2, 2, 3, 4, 5, 3, 4]) == [1, 2, 3, 4, 5]\nassert remove_duplicates([1, \"Roy\", \"Mario\", \"Roy\"]) == [1, \"Roy\", \"Mario\"]\nassert remove_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "output": "def remove_duplicates(arr): \r\n    arr_sorted = sorted(arr) \r\n    new_arr = [] \r\n  \r\n    for i in range(len(arr_sorted)): \r\n        if i == 0 or arr_sorted[i] != arr_sorted[i-1]: \r\n            new_arr.append(arr_sorted[i]) \r\n  \r\n    return new_arr", "id": 231, "avg_similarity_score": 0.11737922783780241}
{"instruction": "Write a function to calculate the sum of two 2D arrays. Your code should pass these tests:\n\narrA = [[1, 2], [3, 4]]\narrB = [[-1, 7], [5, 0]]\n\nassert sum2D(arrA, arrB) == [[0, 9], [8, 4]]", "output": "def sum2D(arrA, arrB): \n    rowsA = len(arrA) \n    colsA = len(arrA[0]) \n    rowsB = len(arrB) \n    colsB = len(arrB[0]) \n    result = [] \n  \n    for i in range(rowsA): \n        row = [] \n        for j in range(colsA): \n            row.append(arrA[i][j] + arrB[i][j]) \n        result.append(row) \n  \n    return result", "id": 232, "avg_similarity_score": 0.1492668630184175}
{"instruction": "Write a function to determine if two strings are anagrams of each other. Your code should pass these tests:\n\nassert is_anagram(\"Flame\", \"MaleF\") == True\nassert is_anagram(\"green\", \"greens\") == False", "output": "def is_anagram(str1, str2): \n    str1_list = sorted(str1.lower()) \n    str2_list = sorted(str2.lower()) \n  \n    if str1_list == str2_list: \n        return True\r\n    else: \n        return False", "id": 233, "avg_similarity_score": 0.0845080502081615}
{"instruction": "Write a function to print Pascal's triangle. Your code should pass these tests:\n\nassert pascal_triangle(3) == [[1], [1, 1], [1, 2, 1]]\nassert pascal_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]", "output": "def pascal_triangle(n): \r\n    result = [] \r\n    temp =[] \r\n    for i in range(n): \r\n        temp = [1] \r\n        for j in range(i): \r\n            temp.append(sum(result[-1][j:j+2])) \r\n        result.append(temp) \r\n    return result", "id": 234, "avg_similarity_score": 0.011606562836071034}
{"instruction": "Write a Python function to concatenate given elements of a list of any number of lists. Your code should pass these tests:\n\nassert concatenate([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]\nassert concatenate([[1,2,3],[4,5,6],[7,8,9]]) ==[1,2,3,4,5,6,7,8,9]\nassert concatenate([[11,22,33],[55,77],[44,55,66]]) == [11,22,33,55,77,44,55,66]", "output": "def concatenate(listOfLists):\r\n  result = []\r\n  for lst in listOfLists:\r\n    result.extend(lst)\r\n  return result", "id": 235, "avg_similarity_score": 0.1554142667718192}
{"instruction": "Write a Python function to convert a list of multiple integers into one integer. Your code should pass these tests:\n\nassert convert_to_int([1, 2, 3, 4, 5]) == 12345\nassert convert_to_int([9, 9, 9, 9]) == 9999\nassert convert_to_int([1, 2, 3]) == 123", "output": "def convert_to_int(list1): \r\n  res = [str(x) for x in list1] \r\n  res = int(\"\".join(res)) \r\n  return(res)", "id": 236, "avg_similarity_score": 0.008194109413621609}
{"instruction": "Write a Python program to sort a list of dictionaries using Lambda. Your code should pass these tests:\n\nlist1= [{'name': 'John', 'age':23}, {'name': 'bob', 'age':4}, {'name': 'Tom', 'age':2}]\n\nassert Sort_lambda(list1) == [{'name': 'Tom', 'age': 2}, {'name': 'bob', 'age': 4}, {'name': 'John', 'age': 23}]\nlist1= [{'name': 'Lance', 'age':31}, {'name': 'Ron', 'age':41}, {'name': 'Mare', 'age':13}]\n\nassert Sort_lambda(list1) == [{'name': 'Mare', 'age': 13}, {'name': 'Lance', 'age': 31}, {'name': 'Ron', 'age': 41}]", "output": "def Sort_lambda(List): \r\n\treturn sorted(List, key = lambda i: i['age'])", "id": 237, "avg_similarity_score": 0.14277381419353322}
{"instruction": "Write a Python program to split a comma separated sequence of numbers into a list or tuple. Your code should pass these tests:\n\nassert split_into_list(\"2,3,4\") == [2,3,4]\nassert split_into_list(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\nassert split_into_list(\"7,8,9\") == [7,8,9]", "output": "def split_into_list(string):\r\n  return [int(x.strip()) for x in string.split(',')]", "id": 238, "avg_similarity_score": 0.14024200234068512}
{"instruction": "Write a Python program to check if a given string is a substring of another string. Your code should pass these tests:\n\nassert is_substring(\"foo\", \"foobar\") == True\nassert is_substring(\"bar\", \"foobar\") == True\nassert is_substring(\"baz\", \"foobar\") == False", "output": "def is_substring(string1, string2):\n  if string1 in string2:\n    return True\n  else:\n    return False", "id": 239, "avg_similarity_score": 0.18120958498520517}
{"instruction": "Write a function to check if a set is a subset of another given set. Your code should pass these tests:\n\nassert is_subset({\"a\", \"b\", \"c\"}, {\"a\", \"b\", \"d\", \"c\", \"f\"})==True\nassert is_subset({\"a\", \"b\", \"c\"}, {\"a\", \"b\", \"d\"})==False\nassert is_subset({\"a\", \"b\", \"c\"}, {\"d\"})==False", "output": "def is_subset(small, large):\r\n  for ele in small:\r\n    if ele not in large:\r\n      return False\r\n  return True", "id": 240, "avg_similarity_score": 0.1654855421208586}
{"instruction": "Write a function to calculate the Hamming Distance between two strings of equal length. Your code should pass these tests:\n\nassert hamming_distance(\"verisimilitude\", \"veracity\")==3\nassert hamming_distance(\"veracity\", \"veridicality\")==4\nassert hamming_distance(\"veridicality\", \"verisimilitude\")==4", "output": "def hamming_distance(s1, s2):\r\n  if len(s1) != len(s2):\r\n    return(\"Strings must have the same length\")\r\n  else:\r\n    dist = 0\r\n    for i in range(len(s1)):\r\n      if s1[i] != s2[i]:\r\n        dist += 1\r\n    return(dist)", "id": 241, "avg_similarity_score": 0.1262750222373074}
{"instruction": "Write a function to convert a string of uppercase letters to its corresponding lowercase letters.Your code should pass these tests:\n\nassert to_lowercase(\"ABCD\")==\"abcd\"\nassert to_lowercase(\"hello\")==\"hello\"\nassert to_lowercase(\"CDe\")==\"cde\"", "output": "def to_lowercase(string):\n  output = []\r\n  for letter in string:\r\n    value = ord(letter)\r\n    if value >= 65 and value <= 90:\r\n      value += 32\r\n    output.append(chr(value))\r\n  return ''.join(output)", "id": 242, "avg_similarity_score": 0.004775496943416743}
{"instruction": "Write a function to convert a list into a dictionary using the given function. Your code should pass these tests:\n\nassert to_dict([1, 2, 3], lambda x: x * 2) == {1: 2, 2: 4, 3: 6}\nassert to_dict(['a', 'b', 'c'], lambda x: x.upper()) == {'a': 'A', 'b': 'B', 'c': 'C'}\nassert to_dict([], lambda x: x * 3) == {}", "output": "def to_dict(list, func):\r\n  new_dict = {}\r\n  for ele in list:\r\n    new_dict[ele] = func(ele)\r\n  return new_dict", "id": 243, "avg_similarity_score": 0.1874240719856372}
{"instruction": "Write a function to find the longest consecutive sequence of an array.Your code should pass these tests:\n\nassert longest_subsequence([1, 2, 3, 4, 5])==5\nassert longest_subsequence([5, 3, 1, 8, 4])==3\nassert longest_subsequence([2, 4, 6, 8, 10])==5", "output": "def longest_subsequence(array):\n  n = len(array)\n  current_seq = 1\n  longest_seq = 0\n  for i in range(1, n):\n    if array[i] - array[i-1] == 1:\n      current_seq+=1\n      if longest_seq < current_seq:\n        longest_seq = current_seq\n    else:\n      current_seq = 1\n  return longest_seq", "id": 244, "avg_similarity_score": 0.15115510388002049}
{"instruction": "Write a function to delete an element in a list at given index. Your code should pass these tests:\n\nassert del_from_list([1, 2, 3, 4], 1)==[1, 3, 4]\nassert del_from_list([5, 7, 9, 6], 2)==[5, 7, 6]\nassert del_from_list([5, 8, 10, 11], 3)==[5, 8, 10]", "output": "def del_from_list(arr, index):\n  return arr[:index] + arr[(index+1):]", "id": 245, "avg_similarity_score": 0.1584438905425262}
{"instruction": "Write a function to sort a given list using the selection sort algorithm. Your code should pass these tests:\n\nassert selection_sort([9, 6, 8, 3, 10, 2])==[2, 3, 6, 8, 9, 10]\nassert selection_sort([-3, -2, -1, 0])==[-3, -2, -1, 0]\nassert selection_sort([5, 4, 3, 2, 1])==[1, 2, 3, 4, 5]", "output": "def selection_sort(arr): \r\n    # Traverse through all array elements \r\n    for i in range(len(arr)): \r\n        # Find the minimum element in remaining  \r\n        # unsorted array \r\n        min_idx = i \r\n        for j in range(i+1, len(arr)): \r\n            if arr[min_idx] > arr[j]: \r\n                min_idx = j \r\n  \r\n        # Swap the found minimum element with  \r\n        # the first element           \r\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\r\n    return arr", "id": 246, "avg_similarity_score": 0.1700840175320241}
{"instruction": "Write a function which takes two strings as parameters and returns true if the second string is subset of the first string. Your code should pass these tests:\n\nassert isSubset('python', 'py') == True\nassert isSubset('hello', 'swers') == False\nassert isSubset('dictionary', 'ictiona') == True", "output": "def isSubset(str1, str2): \r\n  \r\n    s_str1 = set(str1) \r\n    s_str2 = set(str2) \r\n  \r\n    # check other string in first string  \r\n    # set.issubset() return true if  \r\n    # all element of set2 is in set1  \r\n    if s_str2.issubset(s_str1): \r\n        return True \r\n    else: \r\n        return False", "id": 247, "avg_similarity_score": 0.12471546429373695}
{"instruction": "Write a function which takes two strings as parameters and returns true if they are anagrams of each other, or false if not. Your code should pass these tests:\n\nassert check_anagrams('abcde', 'edcab') == True\nassert check_anagrams('piyush', 'nihu') == False\nassert check_anagrams('hello', 'llohe') == True", "output": "def check_anagrams(str1, str2):  \r\n  \r\n    # make the strings lowercase  \r\n    s1 = str1.lower()  \r\n    s2 = str2.lower()  \r\n    # sort the strings  \r\n    s1 = ''.join(sorted(s1))  \r\n    s2 = ''.join(sorted(s2))  \r\n  \r\n    # compare the sorted strings  \r\n    if(s1 == s2):  \r\n        return True  \r\n    else:  \r\n        return False", "id": 248, "avg_similarity_score": 0.09061845258170195}
{"instruction": "Write a function which takes an array of integers and returns true if all the elements in the array are unique, or false if not. Your code should pass these tests:\n\nassert check_unique_elements([1, 3, 4, 4]) == False\nassert check_unique_elements([5, 7, 9, 10]) == True\nassert check_unique_elements([1, 2, 3, 4, 5]) == True", "output": "def check_unique_elements(my_list): \r\n    n = len(my_list) \r\n    for i in range(n): \r\n        for j in range(i + 1, n): \r\n            if my_list[i] == my_list[j]: \r\n                return False\r\n    return True", "id": 249, "avg_similarity_score": 0.11690841966461862}
{"instruction": "Write a function which takes two parameters string and character and returns true if the given character is found in the string, or false if not. Your code should pass these tests:\n\nassert check_in('Piyush', 's') == True\nassert check_in('Hello', 'p') == False\nassert check_in('python', 'h') == True", "output": "def check_in(str, ch): \r\n  \n    for char in str: \r\n        if char == ch: \r\n            return True\r\n    return False", "id": 250, "avg_similarity_score": 0.1293987607735546}
{"instruction": "Write a function which takes two integers and returns the product of them. Your code should pass these tests:\n\nassert get_product(2, 3) == 6\nassert get_product(3, 10) == 30\nassert get_product(-2, 6) == -12", "output": "def get_product(num1, num2): \r\n    return num1 * num2", "id": 251, "avg_similarity_score": 0.14125922612946357}
{"instruction": "Write a function which takes an array of integers and returns the maximum element. Your code should pass this test:\n\nassert get_max([2, 3, 5, 1, 4]) == 5", "output": "def get_max(list): \n  \n    max = list[0] \n  \n    for i in range(1, len(list)): \n        if list[i] > max: \n            max = list[i] \n  \n    return max", "id": 252, "avg_similarity_score": 0.07968081633308982}
{"instruction": "Write a python function to remove all instances of duplicates from the given array. Your code should pass this test:\n\nassert remove_duplicates([1, 3, 2, 3, 4, 5]) == [1, 3, 2, 4, 5]", "output": "def remove_duplicates(list): \r\n  \r\n    mov = 0\r\n    for i in range(len(list)): \r\n        j = i + 1\r\n        for j in range(i + 1, len(list)): \r\n            if (list[i] == list[j]): \r\n                list[j] = -1\r\n            else: \r\n                mov = mov + 1\r\n  \r\n    return mov + 1", "id": 253, "avg_similarity_score": 0.07646635412608707}
{"instruction": "Write a function which takes a dictionary as a parameter and the key and value as parameters and returns the specified value. Your code should pass this test:\n\nassert get_value({'l_name': 'Kumar', 'f_name': 'Vishal'}, 'f_name') == 'Vishal'", "output": "def get_value(dict, key): \r\n  \r\n    if key in dict.keys(): \r\n        return dict[key]", "id": 254, "avg_similarity_score": 0.06293014127390506}
{"instruction": "Write a function which takes a two lists of numbers as parameters and returns true if all elements of both the list add up to the same number, or false if not. Your code should pass this test:\n\nassert compare_lists([2, 4, 8], [2, 4, 1]) == False", "output": "def compare_lists(list1, list2): \r\n  \r\n    sum1 = 0\r\n    sum2 = 0\r\n  \r\n    for ele in list1: \r\n        sum1 = sum1 + ele \r\n      \r\n    for ele in list2: \r\n        sum2 = sum2 + ele \r\n      \r\n    if(sum1 == sum2): \r\n        return True\r\n    else: \r\n        return False", "id": 255, "avg_similarity_score": 0.06103166835112583}
{"instruction": "Write a Python program to generate Pascal's Triangle up to given row number.", "output": "def pascal_triangle(n):\n result = [[1]]\n \r\n for _ in range(1, n):\r\n  result.append([1]+[sum(result[-1][i:i + 2]) for i in range(len(result[-1]) - 1)] + [1])\r\n return result", "id": 256, "avg_similarity_score": 0.09998762232159641}
{"instruction": "Write a program to check if two given strings consist of exactly same characters.", "output": "def compare_strings(str1, str2): \r\n    if len(str1) != len(str2): \r\n        return False\r\n    else: \r\n        count = {} \r\n  \r\n        for i in str1: \r\n            if i in count: \r\n                count[i] += 1\r\n            else: \r\n                count[i] = 1\r\n  \r\n        for j in str2: \r\n            if j in count: \r\n                count[j] -= 1\r\n            else: \r\n                return False\r\n  \r\n        for k in count: \r\n            if count[k] != 0: \r\n                return False\r\n        return True", "id": 257, "avg_similarity_score": 0.12199803155298433}
{"instruction": "Write code to delete repeated characters from the given string.", "output": "def remove_rep (s): \r\n    result = \"\" \r\n  \r\n    for i in s: \r\n        if i not in result: \r\n            result += i  \r\n    return result", "id": 258, "avg_similarity_score": 0.14679670372740605}
{"instruction": "Create a function to find the largest number in a list. Your code should pass these tests:\n\nassert largest_in_list([-15, 8, 45, 5]) == 45\nassert largest_in_list([-45, 0, 9, 10]) == 10\nassert largest_in_list([1, 2, 3, 4]) == 4", "output": "def largest_in_list(lst):\n    curr_max = lst[0]\n    for i in lst:\n        if i > curr_max:\n            curr_max = i\n    return curr_max", "id": 259, "avg_similarity_score": 0.20151329610398339}
{"instruction": "Create a function to check whether the given number is a prime number or not.", "output": "def is_prime(x):\n    if x <= 1:\n        return False\n    if x == 2:\n        return True\n    for i in range(2,int(x/2)+1):\n        if x % i == 0:\n            return False\n    return True", "id": 260, "avg_similarity_score": 0.17279291845181405}
{"instruction": "Create a function to find two elements in the given array whose sum is equal to the given number. Your code should pass these tests:\n\nassert two_sum([1,2,3,4],5) == (1,4)\nassert two_sum([5,7,8,9],14) == (5,9)\nassert two_sum([2,5,6,9],7) == (2,5)", "output": "def two_sum(arr, number): \n    for i in range (len(arr)-1): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == number: \n                return (arr[i], arr[j])", "id": 261, "avg_similarity_score": 0.1635502159596511}
{"instruction": "Create a function to check if two words are anagrams with each other.", "output": "def check_anagram(str1, str2): \r\n    if (len(str1) != len(str2)): \r\n        return False\r\n    else: \r\n        count = {} \r\n  \r\n        for i in str1: \r\n            if i in count: \r\n                count[i] += 1\r\n            else: \r\n                count[i] = 1\r\n  \r\n        for j in str2: \r\n            if j in count: \r\n                count[j] -= 1\r\n            else: \r\n                return False\r\n  \r\n        for k in count: \r\n            if count[k] != 0: \r\n                return False\r\n        return True", "id": 262, "avg_similarity_score": 0.1034195981103373}
{"instruction": "Write a python Function to find the smallest perfect cube that is greater than a given number. Your code should pass these tests:\n\nassert perfect_cube(5) == 8 \nassert perfect_cube(15) == 27 \nassert perfect_cube(100) == 125", "output": "def perfect_cube(n): \r\n    while True : \r\n        if n == pow(int(pow(n, 1.0/3.0) + 1), 3): \r\n            return pow(int(pow(n, 1.0/ 3.0) + 1), 3) \r\n        n=n+1", "id": 263, "avg_similarity_score": 0.1787905815794862}
{"instruction": "Write a python function to generate a random integer between given range. Your code should pass these tests:\n\nassert rand_int(10) == 8\nassert rand_int(2,50) == 43\nassert rand_int(2,10) == 4", "output": "import random\r\ndef rand_int(n1, n2=None): \r\n    if n2 == None: \r\n        return random.randint(0, n1) \r\n    return random.randint(n1, n2)", "id": 264, "avg_similarity_score": 0.14333944508308924}
{"instruction": "Write a python function to replace all occurrences of a character with another character in a given string. Your code should pass these tests:\n\nassert replace_char(\"Hello\", \"l\", \"x\") == \"Hexxo\"\nassert replace_char(\"goo goo\", \"o\", \"r\") == \"grr grr\"\nassert replace_char(\"goo goo\", \"o\", \"e\") == \"gee gee\"", "output": "def replace_char(string,ch1,ch2): \r\n    char = list(string) \r\n    for i in range(0, len(char)) : \r\n        if char[i] == ch1: \r\n            char[i] = ch2 \r\n    return ''.join(char)", "id": 265, "avg_similarity_score": 0.17148008915743962}
{"instruction": "Write a python function to generate a random string of given length and consisting of characters from a given list. Your code should pass these tests:\n\nassert random_string(5, [\"a\", \"b\", \"c\"]) == \"bcaac\"\nassert random_string(7, [\"x\", \"y\", \"z\"]) == \"zyzxxyy\"\nassert random_string(3, [\"1\", \"2\"]) == \"211\"", "output": "import random \r\ndef random_string(length, char_list): \r\n    res = \"\" \r\n    for i in range(length): \r\n        res+=random.choice(char_list) \r\n    return res", "id": 266, "avg_similarity_score": 0.1699229224515482}
{"instruction": "Write a python function to encode a given string by skipping the mth character and replacing it with the (n + mth)th character in the string. Your code should pass these tests:\n\nassert encode_String(\"ABBCD\",3,2) == \"ACDBC\"\nassert encode_String(\"XYZ\",1,2) == \"YZX\"\nassert encode_String(\"HELLOWORLD\",2,4) == \"HLLARDOEOW\"", "output": "def encode_String(str, m, n): \r\n    st =\"\" \r\n    len_str = len(str) \r\n\r\n    for i in range(len_str): \r\n        if(i == m): \r\n            st += str[m + n] \r\n        else: \r\n            st += str[i] \r\n    return st", "id": 267, "avg_similarity_score": 0.12539788842717653}
{"instruction": "Write a python function to calculate the numbers of vowels in a given string. Your code should pass these tests:\n\nassert num_Vowels('Hello') == 2\nassert num_Vowels('World') == 1\nassert num_Vowels('Code') == 2", "output": "def num_Vowels(str):  \r\n    count = 0\r\n    vowels = ['a','e','i','o','u']  \r\n\r\n    for i in str:  \r\n        if i.lower() in vowels:  \r\n            count += 1  \r\n    return count", "id": 268, "avg_similarity_score": 0.2475177998673325}
{"instruction": "Write a Python function to convert a given digit into its binary representation. Your code should pass these tests:\n\nassert binary_Format(2) == '10'\nassert binary_Format(5) == '101'\nassert binary_Format(3) == '11'", "output": "def binary_Format (n): \r\n    return bin(n).replace(\"0b\", \"\")", "id": 269, "avg_similarity_score": 0.006843813295426199}
{"instruction": "Write a python function to convert the given array into increasing order. Your code should pass these tests:\n\nassert sort_array([2, -3, 5, -4]) == [-4, -3, 2, 5]\nassert sort_array([1, 3, 2, 4]) == [1, 2, 3, 4]\nassert sort_array([1, 5, 6, -5]) == [-5, 1, 5, 6]", "output": "def sort_array(arr):\r\n  arr.sort()\r\n  return arr", "id": 270, "avg_similarity_score": 0.005888800005341359}
{"instruction": "Write a python function to convert a given string into an integer. Your code should pass these tests:\n\nassert string_to_integer(\"-1234\") == -1234\nassert string_to_integer(\"1001\") == 1001\nassert string_to_integer(\"-1002\") == -1002", "output": "def string_to_integer(s): \r\n    num = 0\r\n    sign = 1\r\n    if s[0] == '-': \r\n        sign = -1\r\n    for i in range(len(s)): \r\n        if s[i] == '-': \r\n            continue\r\n        num = num * 10 + (ord(s[i]) - ord('0')) \r\n    return sign * num", "id": 271, "avg_similarity_score": 0.017827352220648057}
{"instruction": "Write a python function to find the longest increasing subsequence in a given array. Your code should pass these tests:\n\nassert longestIncSeq([3,2,4,1]) == 3\nassert longestIncSeq([5, 4, 3, 2, 1, -5]) == 1\nassert longestIncSeq([2,3,1,5,4]) == 3", "output": "def longestIncSeq(arr): \n    n = len(arr) \n  \n    lis = [1]*n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum", "id": 272, "avg_similarity_score": 0.2187737691711651}
{"instruction": "Write a python function to count the occurrence of a given character in a given string. Your code should pass these tests:\n\nassert count_char(\"abccca\", 'c') == 3\nassert count_char(\"AAAAA\", 'A') == 5\nassert count_char(\"BBBBB\", 'b') == 0", "output": "def count_char(s, c): \n  count= 0\n  for ch in s: \n    if ch == c: \n      count= count + 1\n  return count", "id": 273, "avg_similarity_score": 0.23205376867403335}
{"instruction": "Write a Python function to compute the length of a given string. Your code should pass these tests:\n\nassert string_length(\"Hello World!\") == 12\nassert string_length(\"123456\") == 6\nassert string_length(\"\") == 0", "output": "def string_length(s):\n    return len(s)", "id": 274, "avg_similarity_score": 0.24892695683604926}
{"instruction": "Write a Python program to unscramble a given scrambled string. Your code should pass these tests:\n\nassert unscramble_string('retae') == 'earth'\nassert unscramble_string('utpo') == 'output'\nassert unscramble_string('mocslatsc') == 'scalostm'", "output": "def unscramble_string(scrambled): \r\n\r\n    lst = list(scrambled) \r\n    ans = lst.sort() \r\n\r\n    return ''.join(lst)", "id": 275, "avg_similarity_score": 0.17546465496083566}
{"instruction": "Write a program to calculate the sum of all even numbers in a given range. Your code should pass these tests:\n\nassert sum_even(0,5) == 6\nassert sum_even(3,7) == 12\nassert sum_even(23,29) == 56", "output": "def sum_even(start, end): \r\n    s = 0\r\n    for i in range(start,end+1): \r\n        if(i % 2 == 0): \r\n            s += i \r\n    return s", "id": 276, "avg_similarity_score": 0.22104284323031553}
{"instruction": "Write a program to remove a given item from a given list. Your code should pass these tests:\n\nassert remove_item([1,2,3], 2) == [1,3]\nassert remove_item([1,4,5], 5) == [1,4]\nassert remove_item([1,2,3,3], 3) == [1,2]", "output": "def remove_item(lst, n): \r\n    new_list = [i for i in lst if i != n] \r\n    return new_list", "id": 277, "avg_similarity_score": 0.17734889147280133}
{"instruction": "Write a Python program to convert a given date into the Julian day number. Your code should pass these tests:\n\nassert get_julian(24/3/2020) == 2458921\nassert get_julian(4/4/2020) == 2458960\nassert get_julian(27/6/2020) == 2459029", "output": "import datetime \r\ndef get_julian (date): \r\n    date_val = datetime.datetime.strptime(date, '%d/%m/%Y').date() \r\n    julian = date_val.strftime('%j') \r\n    return int(julian)", "id": 278, "avg_similarity_score": 0.10157210888705742}
{"instruction": "Write a program to count the number of occurrences of a given element in a given array. Your code should pass these tests:\n\nassert count_occurrences([1,2,3,1,1,1], 1) == 4\nassert count_occurrences([2,4,5,4,2], 4) == 2\nassert count_occurrences([2,4,6,8], 10) == 0", "output": "def count_occurrences(arr, element): \r\n    c = 0\r\n    for i in arr: \r\n        if i == element: \r\n            c +=1 \r\n    \r\n    return c", "id": 279, "avg_similarity_score": 0.21729369174875396}
{"instruction": "Write a Python function to calculate the frequency of each element in the given list. Your code should pass these tests:\n\nassert freq_Of_Element([1,2,3,4,2,5,4,5,3]) == {1:1, 2:2, 3:2, 4:2, 5:2}\nassert freq_Of_Element([2, 1, 2, 2, 3, 2, 4, 5, 2]) == {2:5, 1:1, 3:1, 4:1, 5:1}", "output": "def freq_Of_Element(arr): \r\n    return dict([i, arr.count(i)] for i in set(arr))", "id": 280, "avg_similarity_score": 0.19968825047175276}
{"instruction": "Create a Python function to compute the greatest common divisor (GCD) of two positive integers. Your code should pass these tests:\n\nassert gcd_Of_Integers(4,8) == 4\nassert gcd_Of_Integers(14,10) == 2\nassert gcd_Of_Integers(1,2) == 1", "output": "def gcd_Of_Integers(a, b): \r\n  \r\n    if(b == 0): \r\n        return a \r\n    else: \r\n        return gcd_Of_Integers(b, a % b)", "id": 281, "avg_similarity_score": 0.13228243111127888}
{"instruction": "Write a Python function to compute the lowest common multiple (LCM) of two positive integers. Your code should pass these tests: \n\nassert lcm_Of_Integers(4,8) == 8\nassert lcm_Of_Integers(14,10) == 70\nassert lcm_Of_Integers(1,2) == 2", "output": "def lcm_Of_Integers(a, b): \r\n  \r\n    return (a*b) / gcd_Of_Integers(a,b)", "id": 282, "avg_similarity_score": 0.1169213384958066}
{"instruction": "Write a program to count occurrences of a specified element in a given list. Your code should pass these tests:\n\nassert count_occurrences([1,1,2,2,2,3],1) == 2\nassert count_occurrences([True, False, True],True) == 2\nassert count_occurrences([1,2,3,4,5],6) == 0", "output": "def count_occurrences(lst, x): \n    return lst.count(x)", "id": 283, "avg_similarity_score": 0.20317972909772533}
{"instruction": "Write a function to delete N nodes after the Mth node of a linked list. Your code should pass these tests:\n\nassert del_n_after_m('11,10,20,20,30,20,50,20','20','2','3') == '11,10,20,30,50,20'\nassert del_n_after_m('7,14,15,16,20,21,20,50,20','20','3','5') == '7,14,15,16,20,21,50'\nassert del_n_after_m('11,10,20,20,30,20,50,20','20','2','2') == '11,10,20,30,20,50,20'", "output": "class Node: \r\n    def __init__(self, data): \r\n        self.data = data \r\n        self.next = None\n  \r\n  \r\nclass LinkedList: \r\n    def __init__(self): \r\n        self.head = None\r\ndef del_n_after_m(inp, key, n, m): \r\n    if (head is None): \r\n        return\r\n    curr = head  \r\n    while (curr is not None): \r\n  \r\n        for i in range(m - 1): \r\n            curr = curr.next\r\n            if (curr is None): \r\n                break\r\n        t = curr \r\n        for i in range(n): \r\n            curr = curr.next\r\n            if (curr is None and key == t.data): \r\n                t.next = None\r\n            elif (curr is None and key != t.data): \r\n              t = None\r\n        if (curr is not None and key == t.data): \r\n            t.next = curr.next\r\n        curr = curr.next\n    return inp", "id": 284, "avg_similarity_score": 0.16369527627512437}
{"instruction": "Write a program to create a copy of existing list in a new list. Your code should pass these tests:\n\nassert create_copy(['hello', 2, [3, 4]]) == ['hello', 2, [3, 4]]\nassert create_copy([1, 2, 3]) == [1, 2, 3]\nassert create_copy([7, 8, 9]) == [7, 8, 9]", "output": "def create_copy(lst): \r\n\treturn lst[:]", "id": 285, "avg_similarity_score": 0.1642264135154698}
{"instruction": "Write a function to count the number of times a particular item appears in a given sequence. Your code should pass these tests:\n\nassert count_item([1, 2, 4, 1, 3, 4], 4) == 2\nassert count_item([1, 2, 3, 4], 5) == 0\nassert count_item([1, 2, 3, 4], 1) == 1", "output": "def count_item(sequence, item):\r\n    count = 0\r\n    for i in sequence:\r\n        if i == item:\r\n            count += 1\r\n    return count", "id": 286, "avg_similarity_score": 0.20305804215896184}
{"instruction": "Write a function to calculate the difference between two sets. Your code should pass these tests:\n\nassert difference({1,2,3}, {3,4}) == {1,2}\nassert difference({1,2,3,4}, {3,4,5}) == {1,2}\nassert difference({1}, {1}) == set()", "output": "def difference(set1, set2):\r\n    return set1.difference(set2)", "id": 287, "avg_similarity_score": 0.10046533947912621}
{"instruction": "Write a function to print a list of given strings in sorted order. Your code should pass these tests:\n\nassert sorted_strings([\"Coding\", \"Python\", \"for\", \"Life\"]) == [\"Coding\", \"Life\", \"Python\", \"for\"]\n\nassert sorted_strings([\"Good\", \"Coding\", \"is\", \"Fun\"]) == [\"Coding\",\"Fun\",\"Good\",\"is\"]\n\nassert sorted_strings([\"Good\", \"morning\", \"to\", \"all\"]) == [\"all\",\"Good\",\"morning\",\"to\"]", "output": "def sorted_strings(strings):\n  return sorted(strings)", "id": 288, "avg_similarity_score": 0.18078051422356725}
{"instruction": "Write a function to determine whether an integer is a perfect cube. Your code should pass these tests:\n\nassert is_perfect_cube(27) == True\nassert is_perfect_cube(8) == False\nassert is_perfect_cube(64) == True", "output": "def is_perfect_cube(number):\r\n  cubic_root = round(number ** (1. / 3))\r\n  return cubic_root ** 3 == number", "id": 289, "avg_similarity_score": 0.09127349791943923}
{"instruction": "Write a function to rotate a list \"N\" places to the left. Your code should pass these tests:\n\nassert rotate_left([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5], 6) == [2, 3, 4, 5, 1]\nassert rotate_left([1, 2, 3], 1) == [2, 3, 1]", "output": "def rotate_left(list1, n):\r\n  n = n % len(list1)\r\n  return list1[n:] + list1[:n]", "id": 290, "avg_similarity_score": 0.09267965494613793}
{"instruction": "Write a function to retrieve a subset of a given dictionary with given keys. Your code should pass these tests:\n\ndct = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\nassert subset_dict(dct, {'a', 'c', 'e'}) == {'a': 1, 'c': 3, 'e': 5}\nassert subset_dict(dct, {'c','d','e'}) == {'c': 3, 'd': 4, 'e': 5}\nassert subset_dict(dct, {'a', 'b'}) == {'a': 1, 'b': 2}", "output": "def subset_dict(dct, keys):\n  return {key: dct[key] for key in keys & dct.keys()}", "id": 291, "avg_similarity_score": 0.16997045887093465}
{"instruction": "Write a function that takes a sentence and returns the set of words contained in it. Your code should pass these tests:\n\nassert get_Words(\"Happy, work, work\") == {'happy','work'}\nassert get_Words(\"'This is Python 123'\") == {'this','is','python'}\nassert get_Words(\"Sample:   Text\") == {'sample','text'}", "output": "def get_Words(sentence): \r\n    words = sentence.replace(\",\",\"\").replace(\"'\",\"\").replace(\":\",\"\").split(\" \")\r\n    return set([x for x in words if x.isalpha()])", "id": 292, "avg_similarity_score": 0.14466885160247106}
{"instruction": "Write a python function to compute GCD of two numbers. Your code should pass these tests:\n\nassert findGCD(12, 8) == 4\nassert findGCD(100, 10) == 10\nassert findGCD(23, 9) == 1", "output": "def findGCD(x, y): \r\n   while(y): \r\n      x, y = y, x % y \r\n   return x", "id": 293, "avg_similarity_score": 0.096170443139133}
{"instruction": "Write a python function to find the maximum sum subarray of size k. Your code should pass these tests:\n\nassert max_Sum_Subarray(arr, 3) == [10, 11, 12]\nassert max_Sum_Subarray(arr, 4) == [7, 8, 9, 10]\nassert max_Sum_Subarray(arr, 2) == [9, 10]", "output": "def max_Sum_Subarray(arr, n): \r\n    maxSum = 0\r\n    start = 0\r\n    end = n-1\r\n    tempSum = 0\r\n    for i in range(start, len(arr)):\r\n        if (i+n-1 < len(arr)): \r\n            tempSum = sum(arr[i:i+n]) \r\n            if (tempSum > maxSum): \r\n                maxSum = tempSum \r\n                start = i \r\n  \r\n    return arr[start:start+n]", "id": 294, "avg_similarity_score": 0.14475869716563727}
{"instruction": "Write a function to convert a binary number into a decimal number. Your code should pass these tests:\n\nassert bin_to_Dec(1000) == 8\nassert bin_to_Dec(101) == 5\nassert bin_to_Dec(1010) == 10", "output": "def bin_to_Dec(b): \n  \n    num = b; \n    dec_value = 0; \n  \n    base = 1; \n  \n    temp = num; \n    while (temp): \n      \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n  \n         \n        dec_value += last_digit * base; \n  \n        \n        base = base * 2; \n  \n    return dec_value;", "id": 295, "avg_similarity_score": 0.12181111664211565}
{"instruction": "Write a function to sum all the items in a dictionary. Your code should pass these tests:\n\nassert sum_dict({'a': 0, 'b': 1, 'c': 2}) == 3\nassert sum_dict({'a':1, 'b':3, 'c':6}) == 10\nassert sum_dict({'a':3, 'b':9, 'c':1}) == 13", "output": "def sum_dict(dict):   \r\n    sum = 0\r\n    for i in dict.values(): \r\n        sum = sum + i  \r\n    return sum", "id": 296, "avg_similarity_score": 0.1733272678979243}
{"instruction": "Write a function to calculate the greatest common divisor of two numbers. More than two numbers can also be taken as an argument. Your code should pass these tests: \n\nassert gcd(8, 12) == 4\nassert gcd(24, 56, 72) == 8\nassert gcd(9, 6) == 3", "output": "def gcd(a, b, c=0): \r\n    if c==0: \r\n        ans = a \r\n        m = min(a, b) \r\n        for i in range(1, m + 1): \r\n            if a % i==0 and b % i == 0: \r\n                ans = i \r\n    else: \r\n        ans = a \r\n        m = min(a, b, c) \r\n        for i in range(1, m + 1): \r\n            if a % i==0 and b % i == 0 and c % i == 0: \r\n                ans = i \r\n    return ans", "id": 297, "avg_similarity_score": 0.09633279516016441}
{"instruction": "Write a function to display the current date and time. Your code should display the date and time with the following format:\n\n2020-04-17 13: 30: 31", "output": "import datetime\r\ndef display_time():\r\n    return str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))", "id": 298, "avg_similarity_score": 0.04933851612466987}
{"instruction": "Write a function to extract the middle element from a list with an odd number of elements. Your code should pass these tests:\n\nassert mid_element([4, 6, 8, 10, 7]) == 8\nassert mid_element([1, 2, 3, 4, 5, 6]) == 4\nassert mid_element([3, 4, 5, 2, 7]) == 5", "output": "def mid_element(lst): \r\n    return lst[len(lst)//2]", "id": 299, "avg_similarity_score": 0.16715087960060282}
{"instruction": "Write a function to traverse a two-dimensional array. Your code should pass these tests:\n\nassert traverse_2dArray([[1,3],[4,2]]) == [1, 3, 4, 2]\nassert traverse_2dArray([[11,14,19],[2,19,15]]) == [11, 14, 19, 2, 19, 15]\nassert traverse_2dArray([[9,3,4,6],[6,3,2,1]]) == [9,3,4,6,6,3,2,1]", "output": "def traverse_2dArray(arr): \r\n    temp = [] \r\n    for i in range(len(arr)):  \r\n        for j in range(len(arr[i])):  \r\n            temp.append(arr[i][j])  \r\n    return temp", "id": 300, "avg_similarity_score": 0.11893560983176686}
{"instruction": "Write a function to calculate both the average and median of a given list. Your code should pass these tests:\n\nassert avg_median([3,4,7,1])==[3.75,3.5]\nassert avg_median([1,2,3,4,7,8,9])==[5.0,5.5]\nassert avg_median([-2,3,6,9])==[4.25,5.5]", "output": "def avg_median(list1): \r\n    n = len(list1) \r\n    list1.sort()\r\n  \r\n    # Calculate average and median \r\n    average = sum(list1)/n \r\n    median = (list1[(n-1)//2] + list1[n//2])/2\r\n      \r\n    # Return result in list  \r\n    return [average, median]", "id": 301, "avg_similarity_score": 0.22635225584318028}
{"instruction": "Write a program to create a dictionary from two lists such that one list is used as the keys and the other is used as the values. Your code should pass these tests:\n\nassert lists_to_dict([\"John\",\"Jack\",\"Jordan\"], [1, 2, 3]) == {\"John\":1, \"Jack\":2, \"Jordan\":3}\nassert lists_to_dict([\"Red\",\"Blue\",\"Green\"], [\"Apple\",\"Banana\",\"Cherry\"]) == {\"Red\":\"Apple\", \"Blue\":\"Banana\", \"Green\":\"Cherry\"}", "output": "def lists_to_dict(list1, list2): \r\n    output_dict = dict(zip(list1, list2)) \r\n    return output_dict", "id": 302, "avg_similarity_score": 0.10654663007686657}
{"instruction": "Write a program to take the list of numbers, iterate over that list, and check if each element is even or odd. Your code should pass these tests:\n\nassert even_or_odd([2,4,1,6]) == [\"Even\", \"Even\", \"Odd\", \"Even\"]\nassert even_or_odd([12,15,17,21]) == [\"Even\", \"Odd\", \"Odd\", \"Odd\"]", "output": "def even_or_odd(list1): \r\n    output_list = []\r\n    for i in list1: \r\n        if i % 2 == 0: \r\n            output_list.append(\"Even\")\r\n        else: \r\n            output_list.append(\"Odd\")\r\n    return output_list", "id": 303, "avg_similarity_score": 0.12634318746381595}
{"instruction": "Write a function to convert a set of strings to lowercase. Your code should pass these tests:\n\nassert to_lower([\"John\",\"Jack\",\"Jordan\"]) == [\"john\",\"jack\",\"jordan\"]\nassert to_lower([\"marry\",\"haPpy\"]) == [\"marry\",\"happy\"]", "output": "def to_lower(list1): \r\n    output_list = [i.lower() for i in list1] \r\n    return output_list", "id": 304, "avg_similarity_score": 0.0012738853503184715}
{"instruction": "Write a program to count the number of elements a given list contains. Your code should pass these tests:\n\nassert elm_count([1,2,3,4,5,6]) == 6\nassert elm_count([\"John\", \"Jack\", \"Jordan\", \"James\"]) == 4", "output": "def elm_count(list1): \r\n    return len(list1)", "id": 305, "avg_similarity_score": 0.24463284125327978}
{"instruction": "Write a program to search a given element in a given stack using linear search. Your code should pass these tests:\n\nassert linear_search( 3, [1,2,3,4] ) == 2\nassert linear_search( 5, [1,2,3,4] ) == -1", "output": "def linear_search(x, stack): \n    for i in range(0, len(stack)): \n        if stack[i] == x: \n            return i \n    return -1", "id": 306, "avg_similarity_score": 0.15172150077906893}
{"instruction": "Write a function to print the common elements between two lists. Your code should pass these test:\n\nassert common_elements([1,2,3,4,5], [3,7,8,2,1]) == [1,2,3]\nassert common_elements([\"John\",\"Jack\",\"Jordan\"], [\"Jack\",\"John\",\"Henry\"]) == [\"John\",\"Jack\"]", "output": "def common_elements(list1, list2): \n    output_list = [i for i in list1 if i in list2] \n    return output_list", "id": 307, "avg_similarity_score": 0.04104664207540995}
{"instruction": "Write a function to print the number of elements in a set from a given list. Your code should pass these tests:\n\nassert num_of_elem([\"John\", \"Jack\", \"Jordan\", \"John\"]) == {'John': 2, 'Jack': 1, 'Jordan': 1}\nassert num_of_elem([100, 200, 300, 300]) == {100: 1, 200: 1, 300: 2}", "output": "def num_of_elem(list1): \n    return {i:list1.count(i) for i in list1}", "id": 308, "avg_similarity_score": 0.23641761944078538}
{"instruction": "Write a program to print the array elements in reverse order. Your code should pass these tests:\n\nassert reverse_array([1,2,3,4,5]) == [5,4,3,2,1]\nassert reverse_array([\"John\", \"Jack\", \"Jordan\"]) == [\"Jordan\", \"Jack\", \"John\"]", "output": "def reverse_array(list1): \n   return list1[::-1]", "id": 309, "avg_similarity_score": 0.11958600572121666}
{"instruction": "Write a python program to check whether a given string contains all the vowels. Your code should pass these tests:\n\nassert check_vowels(\"Apple\") == True\nassert check_vowels(\"app\") == False\nassert check_vowels(\"Hollywood\") == True", "output": "def check_vowels(str): \r\n    vowels=\"aeiou\"\r\n    flag = True\r\n    for x in str.lower(): \r\n        if x in vowels: \r\n            flag = True\r\n        else: \r\n            flag = False\t                          \r\n            break\t\r\n    return flag", "id": 310, "avg_similarity_score": 0.1776226643695149}
{"instruction": "Write a python function to find the longest common prefix string among an array of strings. Your code should pass these tests:\n\nassert longestCommonPrefix([\"apple\",\"app\",\"apricot\"]) == \"ap\"\nassert longestCommonPrefix([\"apple\",\"banana\",\"avocado\"]) == \"\"\nassert longestCommonPrefix([\"coconut\",\"cat\",\"canary\"]) == \"\"", "output": "def longestCommonPrefix(strs): \r\n    if not strs: \r\n        return \"\"\r\n    l = len(min(strs, key=len)) \r\n    result = \"\" \r\n    for i in range(l): \r\n        ch = strs[0][i] \r\n        for j in range(1, len(strs)): \r\n            if strs[j][i] != ch: \r\n                return result \r\n        result += ch \r\n    return result", "id": 311, "avg_similarity_score": 0.14311514203594988}
{"instruction": "Write a python program to find the number of ways to represent n as sum of consecutive natural numbers. Your code should pass these tests:\n\nassert consecutive_sum(9) == 2\nassert consecutive_sum(15) == 3\nassert consecutive_sum(30) == 5", "output": "def consecutive_sum(n) : \r\n    ans = 0 \r\n    start_index, end_index = 1, 2 \r\n    while  start_index < end_index : \r\n        current_sum = (start_index + end_index) * (end_index - start_index + 1) // 2 \r\n        if  (current_sum > n) : \r\n            start_index += 1 \r\n        elif(current_sum < n) : \r\n            end_index += 1 \r\n        else : \r\n            ans += 1 \r\n            start_index += 1 \r\n    return ans", "id": 312, "avg_similarity_score": 0.07371317197478872}
{"instruction": "Write a Python program to find the number of digits that can be made by multiplying two numbers of n digits each. Your code should pass these tests:\n\nassert multiply_digits(2,3) == 9\nassert multiply_digits(4,5) == 20\nassert multiply_digits(5,9) == 45", "output": "def multiply_digits(num1, num2): \r\n    digits1 = len(str(num1)) \r\n    digits2 = len(str(num2)) \r\n    return digits1 + digits2", "id": 313, "avg_similarity_score": 0.12692937028944046}
{"instruction": "Write a Python program to find all numbers divisible by n between m and n. Your code should pass these tests:\n\nassert numbers_divisible(4,41,5) == [5, 10, 15, 20, 25, 30, 35, 40]\nassert numbers_divisible(2,24,3) == [3, 6, 9, 12, 15, 18, 21, 24]\nassert numbers_divisible(7,81,9) == [9, 18, 27, 36, 45, 54, 63, 72, 81]", "output": "def numbers_divisible(m,n,x): \r\n    num_list=[] \r\n    for i in range(m,n+1): \r\n        if(i % x == 0): \r\n            num_list.append(i) \r\n    return num_list", "id": 314, "avg_similarity_score": 0.060917846999498045}
{"instruction": "Write a python program to generate the frequency dictionary of a given string. Your code should pass these tests:\n\nassert frequency_dictionary(\"HeLLo WorLD\") == {'H':1, 'e':1, 'L':2, 'o':2, 'W':1, 'r':1, 'D':1}\nassert frequency_dictionary(\"How are you?\") == {'H':1, 'o':1, 'w':1, 'a':1, 'r':1, 'e':1, 'y':1, 'o':1, 'u':1, '?':1}\nassert frequency_dictionary(\"This is a test\") == {'T':1, 'h':1, 'i':2, 's':2, 'a':1, 't':2, 'e':1}", "output": "def frequency_dictionary(text):\n    d = {}\n    for i in text:\n        d[i] = d.get(i, 0) + 1\n    return d", "id": 315, "avg_similarity_score": 0.23914552570058442}
{"instruction": "Write a python program to print all the divisible numbers from a given range. Your code should pass these tests:\n\nassert div_by_range(2, 9)==[2, 3, 4, 6, 8]\nassert div_by_range(11, 22)==[11, 12, 14, 16, 18, 20, 22]\nassert div_by_range(3, 6)==[3, 6]", "output": "def div_by_range(start,end):\r\n  list=[]\r\n  for i in range(start,end+1):\r\n    if(i % 2 == 0):\r\n      list.append(i)\r\n  return list", "id": 316, "avg_similarity_score": 0.19351027334840978}
{"instruction": "Write a python function to count the number of steps needed to reach a given number, starting from 0. Your code should pass these tests:\n\nassert steps_to_reach(4) == 5\nassert steps_to_reach(8) == 7\nassert steps_to_reach(1) == 2", "output": "def steps_to_reach(n): \r\n      \r\n    count = 0\r\n    if (n == 0): \r\n        return count \r\n    while (n): \r\n        if (n & 1): \r\n            n = n - 1\r\n            count= count + 1\r\n        else:  \r\n            n = n // 2\r\n            count = count + 1\r\n    return count", "id": 317, "avg_similarity_score": 0.14988679320219445}
{"instruction": "Write a Python function to check whether a list is sorted in ascending order or not. Your code should pass these tests:\n\nassert is_sorted([1, 2, 3, 4]) == True\nassert is_sorted([4, 3, 2, 1]) == False\nassert is_sorted([-4, -3, -1, -2]) == True", "output": "def is_sorted(lst): \r\n  \r\n    n = len(lst) \r\n    for i in range(0, n-1): \r\n        if (lst[i] > lst[i+1] ) : \r\n            return False\r\n    return True", "id": 318, "avg_similarity_score": 0.13203110923138098}
{"instruction": "Write a python function to replace all the vowels in a given string to given character. Your code should pass these tests:\n\nassert replace_vowels(\"Hello World\", \"X\") == 'HXllX WXrld'\nassert replace_vowels(\"Boom!\", \"Z\") == 'BZzzZm!'\nassert replace_vowels(\"Oh my!\", \"Q\") == 'Qh my!'", "output": "def replace_vowels(s,r) : \r\n\r\n    vow = 'aeiouAEIOU'\r\n    for t in s : \r\n        if t in vow : \r\n            s = s.replace(t, r) \r\n\r\n    return s", "id": 319, "avg_similarity_score": 0.08778188264137124}
{"instruction": "Write a python program to convert all the letters of a given string to uppercase. Your code should pass these tests:\n\nassert to_uppercase(\"hello\") == \"HELLO\"\nassert to_uppercase(\"sEcOnD\") == \"SECOND\"\nassert to_uppercase(\"Test\") == \"TEST\"", "output": "def to_uppercase(s): \r\n    return s.upper()", "id": 320, "avg_similarity_score": 0.0}
{"instruction": "Write a python function to get the difference between absolute maximum and absolute minimum values of a given list. Your code should pass these tests:\n\nassert difference_max_min([1, 6, 5, 4]) == 5\nassert difference_max_min([-5, 20, -12, -7]) == 27\nassert difference_max_min([-12, -107, -552, 32]) == 564", "output": "def difference_max_min(lst): \r\n    return max(lst) - min(lst)", "id": 321, "avg_similarity_score": 0.19104014710348863}
{"instruction": "Write a python function to multiply two given integers and float values. Your code should pass these tests:\n\nassert multiply_num(4, 3, 5.6) == 67.20\nassert multiply_num(8, 2, 3.6) == 57.60\nassert multiply_num(2, 7, 8.4) == 116.80", "output": "def multiply_num(a,b,c): \r\n    return a*b*c", "id": 322, "avg_similarity_score": 0.09291793921245733}
{"instruction": "Write a function to perform left rotation of array elements. Your code should pass these tests:\n\nassert left_rotate([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]\nassert left_rotate([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\nassert left_rotate([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "output": "def left_rotate(array, n): \n    return array[n:] + array[:n]", "id": 323, "avg_similarity_score": 0.07418351137592104}
{"instruction": "Write a function to find maximum points from a given dictionary of points {(x,y):1, (x1,y1):2, (x2, y2):1...}. Your code should pass these tests:\n\nassert max_points({(3, 5): 2, (7, 2): 1, (1, 3): 3, (4, 5): 0}) == (1, 3)\nassert max_points({(6, 3): 2, (7, 4): 3, (2, 5): 1, (2, 2): 2, (3, 3): 5}) == (3, 3)\nassert max_points({(3, 0): 2, (3, 1): 1, (3, 2): 0, (3, 3): 4}) == (3, 3)", "output": "def max_points(dictionary): \n    max_x, max_y, max_points = 0, 0, 0\n    for x, y in dictionary.keys():\n        if dictionary[(x, y)] > max_points:\n            max_points = dictionary[(x, y)]\n            max_x, max_y = x, y\n    return (max_x, max_y)", "id": 324, "avg_similarity_score": 0.11875253475569521}
{"instruction": "Write a function to sum all the digits of a number. Your code should pass these tests:\n\nassert sum_of_digits(345) == 12\nassert sum_of_digits(123) == 6\nassert sum_of_digits(-123) == 6", "output": "def sum_of_digits(n): \n    if n<0:\n        n=abs(n)\n    return sum(map(int, str(n)))", "id": 325, "avg_similarity_score": 0.19962329187326766}
{"instruction": "Write a function to generate a list of all the prime numbers less than a given number. Your code should pass these tests:\n\nassert list_primes(10) == [2, 3, 5, 7]\nassert list_primes(17) == [2, 3, 5, 7, 11, 13, 17]\nassert list_primes(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]", "output": "def list_primes(upper_limit): \n    primes = [2] \n    for number in range(3, upper_limit + 1): \n        for prime in primes: \n            if (number % prime == 0):\n                break\n        else:\n            primes.append(number) \n    return primes", "id": 326, "avg_similarity_score": 0.19825705874280017}
{"instruction": "Write a Python program to check whether two given strings are anagrams or not. Your code should pass these tests :\n\nassert is_anagram(\"iceman\", \"cinema\") == True\nassert is_anagram(\"iceman\", \"cebian\") == False\nassert is_anagram(\"funeral\", \"real fun\") == True", "output": "def is_anagram(str1, str2): \n      \n    list_str1 = list(str1.replace(\" \", \"\")) \n    list_str1.sort() \n    list_str2 = list(str2.replace(\" \", \"\")) \n    list_str2.sort() \n  \n    if(list_str1 == list_str2):\n        return 1\n    else:\n        return 0", "id": 327, "avg_similarity_score": 0.10981428458161234}
{"instruction": "Write a Python function to format a specified string to limit the number of characters to 6. Your code should pass these tests :\n\nassert format_string(\"Python Exercises\") == \"Python\"\nassert format_string(\"Welcome to Java Programming Course\") == \"Welcom\"\nassert format_string(\"Luca's Adventures in Wonderland\") == \"Luca's\"", "output": "def format_string(str1): \n    if(len(str1)<=6): \n        return str1 \n    str2 = str1[0:6] \n    return str2", "id": 328, "avg_similarity_score": 0.0}
{"instruction": "Write a Python program to find the most common 10 letter words in a given list of words Your code should pass these tests :\n\nassert most_common_words(['hello', 'world', 'example', 'word']) == [\"example\", \"hello\", \"word\", \"world\"]\nassert most_common_words(['cat', 'table', 'door', 'piano']) == [\"door\", \"piano\", \"table\"]", "output": "from collections import Counter\r\n\r\ndef most_common_words(lst):\r\n    cnt = Counter()\r\n    for word in lst:\r\n        if len(word) == 10:\r\n            cnt[word] += 1\r\n    return [word for word, count in cnt.most_common(10)]", "id": 329, "avg_similarity_score": 0.20945736784365096}
{"instruction": "Write a Python program to get the common items from two Python dictionaries. Your code should pass these tests :\n\nassert common_items({'a': 1, 'b': 2, 'c': 3}, {'b':4, 'c': 3, 'd': 5}) == {'b': 4, 'c': 3}\nassert common_items({'a': 1, 'b': 2, 'c': 3}, {'x': 1, 'y': 2, 'z': 3}) == {}", "output": "def common_items(d1, d2): \n    l1 = list(d1.keys()) \n    l2 = list(d2.keys()) \n    result = {k:d1[k] for k in l1 if k in l2} \n    return result", "id": 330, "avg_similarity_score": 0.0950922923989979}
{"instruction": "Write a Python function to Convert time from seconds to hour, minute and seconds. Your code should pass these tests :\n\nassert time_convert(120) == \"02:00\"\nassert time_convert(820) == \"13:40\"\nassert time_convert(4100) == \"1:08:20\"", "output": "def time_convert(seconds): \n    minutes = seconds // 60\n    seconds = seconds % 60\n    hour = minutes // 60\n    minutes = minutes % 60\n    return \"%d:%02d:%02d\" % (hour, minutes, seconds)", "id": 331, "avg_similarity_score": 0.013931086880687728}
{"instruction": "Write a python function to find the maximum depth of string list. Your code should pass these tests:\n\nassert max_Depth([\"Hello\", \"world\"]) == 1\nassert max_Depth([\"Hello\", [\"world\", [\"welcome\"]]]) == 3\nassert max_Depth([\"Hello\", \"world\", [\"how\", [\"are\", [\"you\"]]]]) == 5", "output": "def max_Depth(arr): \r\n    max_depth = 0\r\n    for item in arr: \r\n        if isinstance(item, list): \r\n            depth = 1 + max_Depth(item)\r\n            max_depth = max(depth, max_depth)\r\n    return max_depth", "id": 332, "avg_similarity_score": 0.18151820255062046}
{"instruction": "Write a python function to check if a given word is an anagram of another. Your code should pass these tests:\n\nassert isAnagram(\"Cloud\", \"uldCo\") == True\nassert isAnagram(\"Earth\", \"Arhte\") == True\nassert isAnagram(\"Rain\", \"Snow\") == False", "output": "def isAnagram(str1, str2): \r\n    lst1 = sorted(str1) \r\n    lst2 = sorted(str2) \r\n\r\n    if(lst1 == lst2): \r\n        return True\r\n    return False", "id": 333, "avg_similarity_score": 0.16493724946871552}
{"instruction": "Write a python function to check if a given list contains at least two non-zero elements. Your code should pass these tests:\n\nassert at_Least_Two([0, 0, 0]) == False\nassert at_Least_Two([1, 2, 0]) == True\nassert at_Least_Two([2, 5, 0]) == True", "output": "def at_Least_Two(lst): \n    count = 0\r\n    for ele in lst: \r\n        if ele != 0: \r\n            count += 1\r\n    return count >= 2", "id": 334, "avg_similarity_score": 0.1526903656357319}
{"instruction": "Write a python function to check whether an input temperature is between -2 degrees Celsius and 10 degrees Celsius. Your code should pass these test:\n\nassert check_Temp(7) == True\nassert check_Temp(1.5) == True\nassert check_Temp(-5.2) == False", "output": "def check_Temp(temp):\r\n    if(temp>=-2 and temp<=10):\r\n        return True\r\n    else:\r\n        return False", "id": 335, "avg_similarity_score": 0.026515441315760585}
{"instruction": "Write a python function to check whether an input number is divisible by 17 or not. Your code should pass these tests:\n\nassert check_divisible(83) == True \nassert check_divisible(82) == False", "output": "def check_divisible(n):\n    if (n % 17 == 0):\n        return True\n    else:\n        return False", "id": 336, "avg_similarity_score": 0.06535113281157473}
{"instruction": "Write a python program to get all values in a list, and return its sum. Your code should pass these tests:\n\nassert calculate_list_sum([2, 4, 6, 8]) == 20\nassert calculate_list_sum([1, 2, 3, 4, 5]) == 15\nassert calculate_list_sum([3, 5, 7, 9, 11]) == 35", "output": "def calculate_list_sum(list_val):\r\n  total = 0\r\n  for ele in list_val:\r\n    total += ele\r\n  return total", "id": 337, "avg_similarity_score": 0.13091580203346792}
{"instruction": "Write a python program to find the factors of the given integer. Your code should pass these tests:\n\nassert get_Factors(8) == [1,2,4,8]\nassert get_Factors(10) == [1,2,5,10]\nassert get_Factors(11) == [1,11]", "output": "def get_Factors(int_val):\n  factor_list = []\r\n  for i in range(1, int_val + 1):\r\n    if int_val % i == 0:\r\n      factor_list.append(i)\r\n  return factor_list", "id": 338, "avg_similarity_score": 0.16404543624451162}
{"instruction": "Write a python program to check if the given number is positive or negative. Your code should pass these tests:\n\nassert pos_neg(7) == 'Positive'\nassert pos_neg(-8) == 'Negative'\nassert pos_neg(0) == 'Zero'", "output": "def pos_neg(int_val):\n  if int_val > 0:\n    return 'Positive'\n  elif int_val < 0:\n    return 'Negative'\n  else:\n    return 'Zero'", "id": 339, "avg_similarity_score": 0.16364420575875704}
{"instruction": "Write a python program to compare two strings and find the number of common characters. Your code should pass these tests:\n\nassert find_common_char('acsgbd','atgbi') == 4\nassert find_common_char('xyzcde','zyxoxb') == 3\nassert find_common_char('aaaaaaaaa','aaaaaaaaaaaa') == 9", "output": "def find_common_char(str1, str2):\n  unique_list = []\n  for i in str1:\n    if i in str2 and i not in unique_list:\n      unique_list.append(i)\n  return len(unique_list)", "id": 340, "avg_similarity_score": 0.15428455728714252}
{"instruction": "Write a python function to find and return the GCD of the given two numbers. Your code should pass these tests:\n\nassert find_GCD(12,4)==4\nassert find_GCD(54, 24) == 6\nassert find_GCD(100, 32) == 4", "output": "def find_GCD(a,b):\r\n  while b>0:\r\n    a,b=b,a % b\r\n  return a", "id": 341, "avg_similarity_score": 0.19409150834420721}
{"instruction": "Write a python program to combine two dictionaries by adding the values of common keys. Your code should pass these tests:\n\nassert add_dictionaries({1: 1, 2: 2}, {1: 11, 3: 3}) == {1: 12, 2: 2, 3: 3}\nassert add_dictionaries({'a': 2, 'b': 4}, {'a': 1, 'c': 3}) == {'a': 3, 'b': 4, 'c': 3}\nassert add_dictionaries({'a': 3, 'b': 4, 'c': 5}, {}) == {'a': 3, 'b': 4, 'c': 5}", "output": "def add_dictionaries(dict1, dict2):\n  res_dict = {}\n  for key in dict1:\n    if key in dict2:\n      res_dict[key] = dict1[key] + dict2[key]\n    else:\n      res_dict[key] = dict1[key]\n  for key in dict2:\n    if key not in dict1:\n      res_dict[key] = dict2[key]\n  return res_dict", "id": 342, "avg_similarity_score": 0.11347545110717738}
{"instruction": "Write a python program to find all occurrences of a string in another string. Your code should pass these tests:\n\nassert find_occurrence('chocolate is yummy', 'choc') == [0]\nassert find_occurrence('bananas are delicious', 'na') == [2, 5] \nassert find_occurrence('strawberry jam is amazing', 'er') == [7, 14]", "output": "def find_occurrence(target_string, search_string):\n  res_list = []\n  start = 0\n  while start < len(target_string):\n    index = target_string.find(search_string, start)\n    if index == -1:\n      break\n    res_list.append(index)\n    start = index + 1\n  return res_list", "id": 343, "avg_similarity_score": 0.16582153649978962}
{"instruction": "Write a python program to print a multilevel nested list. Your code should pass these tests:\n\nassert  print_nested_list([1, [2, 2, 2], [3, 3, [4, 4, [5]], 5], 6]) == '[1, [2, 2, 2], [3, 3, [4, 4, [5]], 5], 6]'\nassert  print_nested_list([[1,2],2,3,[[4],[5,6]]]) == '[[1, 2], 2, 3, [[4], [5, 6]]]'", "output": "def print_nested_list(inp_list):\n  return str(inp_list)", "id": 344, "avg_similarity_score": 0.1213849453435787}
{"instruction": "Write a python function to create a new list of the first and last elements from the given list. Your code should pass these tests:\n\nassert get_f_and_l_elements([2, 3, 4, 5, 6]) == [2, 6]\nassert get_f_and_l_elements([7, 8, 9, 10]) == [7, 10]", "output": "def get_f_and_l_elements(input_list):\n  return [input_list[0], input_list[-1]]", "id": 345, "avg_similarity_score": 0.17474693798296165}
{"instruction": "Write a Python function to calculate the factorial of a number. Your code should pass these tests:\n\nassert factorial(3)==6\nassert factorial(5)==120\nassert factorial(7)==5040", "output": "def factorial(num):\r\n    if num < 0:\r\n        return 0\r\n    elif num == 0:\r\n        return 1\r\n    else:\r\n        return num * factorial(num - 1)", "id": 346, "avg_similarity_score": 0.1632128364511608}
{"instruction": "Write a Python function to remove a specified element from a list. Your code should pass these tests:\n\nassert removeElement([1,2,3,4,5],2)==[1,3,4,5]\nassert removeElement([1, 2, 3, 8, 9],8)==[1, 2, 3, 9]\nassert removeElement([1, 0, 4, 5],0)==[1, 4, 5]", "output": "def removeElement(list1, n): \n    return [x for x in list1 if x != n]", "id": 347, "avg_similarity_score": 0.13501314755234378}
{"instruction": "Write a Python function to count the elements between two given elements in the specified array. Your code should pass these tests:\n\nassert count_between([1,2,3,4,5,6,7],3,7)==5\nassert count_between([0,8,10,11],0,10)==3\nassert count_between([],0,10)==0", "output": "def count_between(list1, a, b):\r\n    count = 0\r\n    for i in list1:\r\n        if (i >= a and i <= b):\r\n            count += 1\r\n    return count", "id": 348, "avg_similarity_score": 0.15285236313554243}
{"instruction": "Write a Python function to check the validity of a given IP address. Your code should pass these tests:\n\nassert validate_IP('192.168.0.1')==True\nassert validate_IP('10.0.0.89')==True\nassert validate_IP('10.0.0.256')==False", "output": "def validate_IP(ip):\n    valid = True\n    nums = ip.split('.')\n    if (len(nums) != 4):\n        valid = False\n    else:\n        for num in nums:\n            if (int(num) < 0 or int(num) > 255):\n                valid = False\n                break\n    return valid", "id": 349, "avg_similarity_score": 0.22764797435256656}
{"instruction": "Write a function to print the maximum element in a list of elements. Your code should pass these tests:\n\nassert max_element([10, 20, 30, 40, 10, 50]) == 50\nassert max_element([1, 2, 3, 4]) == 4\nassert max_element([1, 2, -3, -4]) == 2", "output": "def max_element(list1):\r\n  max_value = list1[0]\r\n  for i in range(1, len(list1)):\r\n    if list1[i] > max_value:\r\n      max_value = list1[i]\r\n  \r\n  return max_value", "id": 350, "avg_similarity_score": 0.20374888838185695}
{"instruction": "Write a function to calculate the nth Fibonacci number in a given series. Your code should pass these tests:\n\nassert calc_fibonacci(2) == 1\nassert calc_fibonacci(7) == 13\nassert calc_fibonacci(10) == 45", "output": "def calc_fibonacci(n):  \r\n    if n == 0:  \r\n        return 0  \r\n    if (n == 1) or (n == 2):  \r\n        return 1  \r\n    if n > 2:  \r\n        return calc_fibonacci(n-1) + calc_fibonacci(n-2)", "id": 351, "avg_similarity_score": 0.2024286771128795}
{"instruction": "Write a function to insert an element at a specified position in a list. Your code should pass these tests:\n\nassert insert_element([1, 2, 3, 4], 2, 9) == [1, 2, 9, 3, 4]\nassert insert_element([2, 4, 6, 8, 10], 3, 7) == [2, 4, 6, 7, 8, 10]\nassert insert_element([23, 45, 67, 89, 101, 123], 0, 21) == [21, 23, 45, 67, 89, 101, 123]", "output": "def insert_element(list1, pos, value): \r\n  list1.insert(pos, value) \r\n  return list1", "id": 352, "avg_similarity_score": 0.12895733661957942}
{"instruction": "Write a function to add two dictionaries. Your code should pass these tests:\n\nassert add_dicts({\"name\":\"John\", \"age\": 20}, {\"name\":\"Mark\", \"age\": 47}) == {\"name\": \"John Mark\", \"age\": 67}\nassert add_dicts({1: 1, 2: 2}, {2: 3, 5: 4}) == {1: 1, 2: 5, 5: 4}\nassert add_dicts({1:1, 2:3},{3:4, 1:6}) == {1:7, 2:3, 3:4}", "output": "def add_dicts(dict1, dict2): \r\n  dict3 = {**dict1, **dict2} \r\n  for key, value in dict3.items(): \r\n    if key in dict1 and key in dict2: \r\n        dict3[key] = value + dict1[key] \r\n  \r\n  return dict3", "id": 353, "avg_similarity_score": 0.032156186641756526}
{"instruction": "Write a function to calculate the area of a circle with a given radius. Your code should pass these tests:\n\nassert area(4) == 50.26548\nassert area(3) == 28.274334\nassert area(2) == 12.56636", "output": "def area(r): \n    return (22/7)*r*r", "id": 354, "avg_similarity_score": 0.20811984454492688}
{"instruction": "Write a function to convert hexadecimal numbers to binary numbers. Your code should pass these tests:\n\nassert hex_to_binary('A1') == '10100001'\nassert hex_to_binary('F8') == '11111000'\nassert hex_to_binary('61') == '01100001'", "output": "def hex_to_binary(hex): \r\n    binary = \"\"\r\n    look_up ={\"0\":\"0000\",\"1\":\"0001\",\"2\":\"0010\",\"3\":\"0011\",\r\n            \"4\":\"0100\",\"5\":\"0101\",\"6\":\"0110\",\r\n            \"7\":\"0111\",\"8\":\"1000\",\"9\":\"1001\",\r\n            \"A\":\"1010\",\"B\":\"1011\",\"C\":\"1100\",\r\n            \"D\":\"1101\",\"E\":\"1110\",\"F\":\"1111\"}\r\n    for c in hex:\r\n        binary = binary + look_up[c]\r\n    return binary", "id": 355, "avg_similarity_score": 0.02193000022488126}
{"instruction": "Write a function to delete an element from a given linked list. Your code should pass these tests:\n\nassert delete_node([1,2,3,4,5],1)==[1,3,4,5]\nassert delete_node([1,2,3,4],2)==[1,2,4]\nassert delete_node([1,2,3],0)==[2,3]", "output": "def delete_node(linked_list, node_index): \r\n    if node_index in linked_list: \r\n        del linked_list[node_index]\r\n        return linked_list  \r\n    else:  \r\n        return \"Node not found\"", "id": 356, "avg_similarity_score": 0.1687747663577831}
{"instruction": "Write a function to find the intersection of two list sets. Your code should pass these tests:\n\n\nassert intersection_check([1,3,5], [3,5,7]) == [3,5]\nassert intersection_check(['a', 'b', 'z'], ['c', 'z', 'y']) == ['z']\nassert intersection_check([1, 2, 3], [4, 5, 6]) == []", "output": "def intersection_check(list1, list2): \r\n    return [value for value in list1 if value in list2]", "id": 357, "avg_similarity_score": 0.17779629845409076}
{"instruction": "Write a function to find the index of a given element in a list. Your code should pass these tests:\n\nassert find_index([1,2,3], 2) == 1\nassert find_index(['a', 'b', 'c'], 'a') == 0\nassert find_index([1,2,3,4,5,6], 6) == 5", "output": "def find_index(list, ele):\r\n    for index in range(len(list)):\r\n        if ele == list[index]:\r\n            return index\n    return -1", "id": 358, "avg_similarity_score": 0.26070303196897887}
{"instruction": "Write a python function which will return the highest common factor of two numbers. Your code should pass these tests:\n\nassert hcf(6,24) == 6\nassert hcf(17,13) ==1\nassert hcf(21,12) == 3", "output": "def hcf(num1, num2): \r\n    if(num2 == 0): \r\n        return num1 \r\n    else: \r\n        return hcf(num2, num1%num2)", "id": 359, "avg_similarity_score": 0.1071957214476402}
{"instruction": "Write a python function to find the size of a list. Your code should pass these tests:\n\nassert list_size([1,2,3]) == 3\nassert list_size([10,20]) == 2\nassert list_size([30,40,50,60]) == 4", "output": "def list_size(list1): \n    count = 0 \n    for i in list1: \n        count = count + 1\n    return count", "id": 360, "avg_similarity_score": 0.24139322108990996}
{"instruction": "Write a python program that prints out the fraction form of a given decimal number. Your code should pass these tests:\n\nassert decimal(0.5) == \"1/2\"\nassert decimal(0.25) == \"1/4\"\nassert decimal(0.3) == \"3/10\"", "output": "def decimal(decimal):\r\n  denominator = 1\r\n  while (denominator < 100):\r\n    if (str(decimal)[0] == '0'):\r\n      decimal = decimal * 10\r\n    if (denominator * decimal).is_integer():\r\n      return '{}/{}'.format(int(denominator * decimal), denominator)\r\n    else:\r\n      denominator += 1", "id": 361, "avg_similarity_score": 0.17767993340238905}
{"instruction": "Write a python function to count the numbers of characters in a string that are lowercase. Your code should pass these tests:\n\nassert countlower('Mr. AbCd') == 4\nassert countlower('Test') == 4\nassert countlower('HELLO') == 0", "output": "def countlower(inputString):\r\n  return sum(letter.islower() for letter in inputString)", "id": 362, "avg_similarity_score": 0.1886718627562461}
{"instruction": "Write a python function to remove duplicate characters from a given string of length N. Your code should pass these tests:\n\nassert remove_duplicate(\"aaabcdefgh\") == \"abcdefgh\"\nassert remove_duplicate(\"abddeefggh\") == \"abdefgh\"\nassert remove_duplicate(\"aabbcc\") == \"abc\"", "output": "def remove_duplicate(str1):\r\n    new = \"\"\r\n    for char in str1:\r\n        if char not in new: \r\n            new = new + char \r\n    return new", "id": 363, "avg_similarity_score": 0.16186650371823444}
{"instruction": "Write a python function to find the fibonacci series till the given number N. Your code should pass these tests:\n\nassert fibonacci(7) == [0, 1, 1, 2, 3, 5, 8]\nassert fibonacci(5) == [0, 1, 1, 2, 3]\nassert fibonacci(3) == [0, 1, 1]", "output": "def fibonacci(n): \r\n    ans = [] \r\n    x = 0\r\n    y = 1\r\n  \r\n    for i in range(0, n): \r\n        ans.append(x) \r\n        z = x + y \r\n        x = y \r\n        y = z \r\n    return ans", "id": 364, "avg_similarity_score": 0.15652939645108838}
{"instruction": "Write a python function to find the union of two sorted arrays of length N and M. Your code should pass these tests:\n\nassert union_of_arrays([1,2,3,4], [3,4,5,6]) == [1,2,3,4,5,6]\nassert union_of_arrays([20,21,22], [15,16,17]) == [15,16,17,20,21,22]\nassert union_of_arrays([-2,-1,0], [1,2,3]) == [-2,-1,0,1,2,3]", "output": "def union_of_arrays(arr1, arr2):\r\n    i=0\r\n    j=0\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    result = []\r\n\r\n    while i < m and j < n:\r\n        if arr1[i] < arr2[j]:\r\n            result.append(arr1[i])\r\n            i+= 1\r\n        elif arr2[j] < arr1[i]:\r\n            result.append(arr2[j])\r\n            j+= 1\r\n        else:\r\n            result.append(arr1[i])\r\n            i+= 1\r\n            j+= 1\r\n    \r\n    result = result + arr1[i:] + arr2[j:]\r\n    \r\n    return result", "id": 365, "avg_similarity_score": 0.14006357613829845}
{"instruction": "Write a Python function to generate an array of Fibonacci numbers of length N. Your code should pass these tests:\n\nassert fibonacci_array(3) == [0, 1, 1]\nassert fibonacci_array(4) == [0, 1, 1, 2]\nassert fibonacci_array(5) == [0, 1, 1, 2, 3]", "output": "def fibonacci_array(n):\r\n    # set up an empty array\r\n    result = []\r\n    # if n is 0 or 1, return an empty array\r\n    if n == 0 or n == 1:\r\n        return result\r\n    # else, add first two items to array\r\n    result.append(0)\r\n    result.append(1)\r\n    # loop over the remaining numbers, adding the sum of the previous two items to the result array\r\n    for i in range(2,n):\r\n        result.append(result[i-2] + result[i-1]) \r\n    # return the array\r\n    return result", "id": 366, "avg_similarity_score": 0.0882148618553395}
{"instruction": "Write a Python function to group the given array of numbers into an NxN matrix. Your code should pass these tests:\n\nassert matrix([1,2,3,4,5,6,7,8,9],3) == [[1,2,3], [4,5,6], [7,8,9]]\nassert matrix([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ], 2) == [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\nassert matrix([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ], 4) == [[1,2,3,4], [5,6,7,8], [9,10,11,12]]", "output": "def matrix(arr, N): \r\n  \r\n    # An empty list that will store  \r\n    # the matrix \r\n    matrix = [] \r\n  \r\n    # loop over the array by N's \r\n    while (len(arr) > 0): \r\n  \r\n        # slice the array and add it \r\n        # to the matrix \r\n        matrix.append(arr[:N]) \r\n  \r\n        # remove the sliced elements \r\n        arr = arr[N:] \r\n  \r\n    # return the matrix \r\n    return matrix", "id": 367, "avg_similarity_score": 0.014291507681662154}
{"instruction": "Write a python function to check if a given array is a binary search tree. Your code should pass these tests:\n\nassert is_binary_search_tree([1,2,3]) == True\nassert is_binary_search_tree([2,1,5,7,3,8]) == True\nassert is_binary_search_tree([2,1,5,6,7,3]) == False", "output": "def is_binary_search_tree(arr):\r\n    left_tree = []\r\n    right_tree = []\r\n\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[0]:\r\n            right_tree.append(arr[i])\r\n        else:\r\n            left_tree.append(arr[i])\r\n\r\n    if len(left_tree) == 0 and len(right_tree) == 0:\r\n        return True\r\n    if len(left_tree) != 0 and is_binary_search_tree(left_tree):\r\n        if len(right_tree) != 0 and is_binary_search_tree(right_tree):\r\n            return True\r\n        \r\n    return False", "id": 368, "avg_similarity_score": 0.15780888213677396}
{"instruction": "Write a Python function to match list item to list index. Your code should pass these tests:\n\nassert match_item_index([3,4,2,6,1]) == [3,2,4,1,0]\nassert match_item_index([1,2,3,4]) == [0,1,2,3]\nassert match_item_index([4,3,2,1,0]) == [3,2,1,0,4]", "output": "def match_item_index(arr):\r\n    index_list = []\r\n\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr)):\r\n            if arr[i] == j:\r\n                index_list.append(j)\r\n\r\n    return index_list", "id": 369, "avg_similarity_score": 0.04516549620383238}
{"instruction": "Write a function to find the position of the first occurrence of a substring in a given string. Your code should pass these tests:\n\nassert position_of(\"apple\", \"p\") == 1\nassert position_of(\"kiwi\", \"i\") == 1\nassert position_of(\"candle\", \"a\") == 2", "output": "def position_of(given_string, sub_string): \r\n  \r\n    # Using list comprehension \r\n    # finding the position of first occurrence of sub_string  \r\n    pos = [i for i in range(len(given_string)) if given_string.startswith(sub_string, i)] \r\n      \r\n    if pos: \r\n        return pos[0] \r\n    else: \r\n        return -1", "id": 370, "avg_similarity_score": 0.2220530535243918}
{"instruction": "Write a function to convert a given string into a list with each element as a letter in the string. Your code should pass these tests:\n\nassert convert_to_list(\"green\") == [\"g\", \"r\", \"e\", \"e\", \"n\"]\nassert convert_to_list(\"know\") == [\"k\", \"n\", \"o\", \"w\"]\nassert convert_to_list(\"apple\") == [\"a\", \"p\", \"p\", \"l\", \"e\"]", "output": "def convert_to_list(string): \n    list1 = [] \n    for letter in string:\n        list1.append(letter) \n    return list1", "id": 371, "avg_similarity_score": 0.14952789330400154}
{"instruction": "Write a function to find the common characters in two given strings. Your code should pass these tests:\n\nassert common_chars(\"done\", \"lives\") == [\"e\"]\nassert common_chars(\"closed\", \"listen\") == [\"e\", \"o\"]\nassert common_chars(\"university\", \"college\") == [\"e\", \"l\", \"i\"]", "output": "def common_chars(string1, string2): \n    result = [] # empty list \n    for char1 in string1: \n        for char2 in string2: \n            if char1 == char2: \n                result.append(char1) \n    return list(set(result))", "id": 372, "avg_similarity_score": 0.18571441863751345}
{"instruction": "Write a function that determines whether a given number is prime or not. Your code should pass these tests:\n\nassert is_prime(7) == True\nassert is_prime(11) == True\nassert is_prime(15) == False", "output": "def is_prime(n): \n      \n    # Corner case \n    if n <= 1: \n        return False\n  \n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return False\n  \n    return True", "id": 373, "avg_similarity_score": 0.14296693939530472}
{"instruction": "Write a function to compute the square root of a given number. Your code should pass these tests:\n\nassert square_root(25) == 5\nassert square_root(9) == 3\nassert square_root(36) == 6", "output": "import math\r\ndef square_root(number): \r\n   return math.sqrt(number)", "id": 374, "avg_similarity_score": 0.23001661288572398}
{"instruction": "Write a function to check if a given key exists in a dictionary. Your code should pass these tests:\n\nassert check_key({'a':1, 'b':2}, 'a') == True\nassert check_key({'a':1, 'b':2}, 'c') == False\nassert check_key({'a':1, 'b':2}, 'b') == True", "output": "def check_key(given_dict, key):\n    if key in given_dict:\n        return True\n    else:\n        return False", "id": 375, "avg_similarity_score": 0.1666737120022191}
{"instruction": "Write a function to access elements in a nested dictionary. Your code should pass these tests:\n\nassert access_elements({'a':{'b':1}, 'c':2}, 'a','b') == 1\nassert access_elements({'a':{'b':3}, 'c':4}, 'c') == 4\nassert access_elements({'a':{'b':5}, 'c':6}, 'a') == {'b':5}", "output": "def access_elements(mydict, *keys):\n  \n    value = mydict\n    for key in keys:\n        value = value.get(key)\n  \n    return value", "id": 376, "avg_similarity_score": 0.11878009093775793}
{"instruction": "Write a program to check whether any two elements in an array sum up to a given target value. Your code should pass these tests:\n\nassert two_sum([7, 2, 8, 5], 9) == True\nassert two_sum([7, 2, 8, 4], 9) == False\nassert two_sum([6, -2, 0, 4, 1], 3) == True", "output": "def two_sum(arr, target): \r\n\tfor i in range(len(arr)): \r\n\t\tfor j in range(i + 1, len(arr)): \r\n\t\t\tif arr[i] + arr[j] == target: \r\n\t\t\t\treturn True\r\n\t\t\t\t\r\n\treturn False", "id": 377, "avg_similarity_score": 0.16182104682479606}
{"instruction": "Write a program to convert temperature from Fahrenheit to Celsius. Your code should pass these tests:\n\nassert to_celsius(32.0) == 0\nassert to_celsius(104.0) == 40.0\nassert to_celsius(90.5) == 32.5", "output": "def to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5.0/9.0\n    return celsius", "id": 378, "avg_similarity_score": 0.00013564839934888768}
{"instruction": "Write a function to calculate the standard deviation of a list. Your code should pass these tests:\n\nassert std_dev([4, 5, 6, 4]) == 0.9258200997725514\nassert std_dev([3, 4, 3.5, 3.25, 5.75, 5.5]) == 0.8366600265340756\nassert std_dev([1, 2, 3, 3, 4, 5, 6]) == 1.707825127659933", "output": "def std_dev(arr): \r\n\tn = len(arr) \r\n\tmean = sum(arr) / n\r\n\tsum_sq = 0\r\n\tfor i in arr: \r\n\t\tsum_sq += (i - mean) ** 2\r\n\treturn (sum_sq/n) ** 0.5", "id": 379, "avg_similarity_score": 0.20870709401526621}
{"instruction": "Write a program to extract all the words from a given sentence and put it into a seperate list. Your code should pass these tests:\n\nassert extract_words('My name is Tom.') == ['My', 'name', 'is', 'Tom']\nassert extract_words('The air is quite cold!') == ['The', 'air', 'is', 'quite', 'cold']\nassert extract_words('This book is very interesting') == ['This', 'book', 'is', 'very', 'interesting']", "output": "def extract_words(sentence):\r\n    words = sentence.split() \r\n    return words", "id": 380, "avg_similarity_score": 0.13899195695687785}
{"instruction": "Write a function to compute the sum of the elements across a given axis for a given two-dimensional array. Your code should pass these tests:\n\nassert sum_axis([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 0) == [[6, 8], [10, 12]]\nassert sum_axis([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1) == [[4, 6], [12, 14]]\nassert sum_axis([[[3, 5], [2, 8], [1, 3]], [[4, 3], [7, 9], [2, 4]]],2) == [[12, 18], [13, 16]]", "output": "def sum_axis(arr, axis):\r\n    if axis == 0:\r\n        result = [[sum(sub) for sub in zip(*arr)] for arr in arr]\r\n    else:\r\n        result = [[sum(arr[i][j] for i in range(len(arr))) \r\n                      for j in range(len(arr[0]))] for arr in arr]\r\n    return result", "id": 381, "avg_similarity_score": 0.1848439927150752}
{"instruction": "Write a program to build a dictionary from two given lists in Python. Your code should pass these tests:\n\nassert dict_from_lists(['foo', 'bar', 'baz'], [1, 2, 3]) == {'foo': 1, 'bar': 2, 'baz': 3}\nassert dict_from_lists(['a', 'b', 'c'], [5, 6]) == {'a': 5, 'b': 6, 'c': None}\nassert dict_from_lists(['Python', 'C#', 'Java'], [3, 6, 9]) == {'Python': 3, 'C#': 6, 'Java': 9}", "output": "def dict_from_lists(key_list, values): \n    return {key_list[i]: values[i] if i < len(values) \n                              else None for i in range(len(key_list))}", "id": 382, "avg_similarity_score": 0.15407312227247105}
{"instruction": "Write a function to generate Armstrong numbers within a given range. Your code should pass these tests:\n\nassert list_armstrong_num(0,100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407]\nassert list_armstrong_num(50,70) == [153]\nassert list_armstrong_num(100,1000) == [153, 370, 371, 407]", "output": "def list_armstrong_num(start, end): \n    list_res = []\n    for num in range(start, end+1):\n        sum = 0 \r\n        temp = num \r\n        while temp > 0:\n            remainder = temp % 10 \n            sum += remainder ** 3\n            temp //= 10\r\n              \r\n        if num == sum: \n            list_res.append(num) \r\n    return list_res", "id": 383, "avg_similarity_score": 0.14589297880162438}
{"instruction": "Write a function to calculate the volume of a cylinder. Your code should pass these tests:\n\nassert volume_Cylinder(3,10) == 282.74\nassert volume_Cylinder(5,4) == 201.06\nassert volume_Cylinder(2,8) == 100.53", "output": "def volume_Cylinder(r,h): \r\n    return pi * pow(r,2) * h", "id": 384, "avg_similarity_score": 0.19482535654880825}
{"instruction": "Write a function that takes two strings and returns true if one is a rotation of the other. Your code should pass these tests:\n\nassert is_Rotation('abcd','cdab')==True\nassert is_Rotation('abcde','abced')==False\nassert is_Rotation('abbacade','acadeabb') == True", "output": "def is_Rotation(s1, s2): \n    if len(s1) != len(s2): return False\n    temp = s1 + s1\n    return (s2 in temp)", "id": 385, "avg_similarity_score": 0.12533247685315743}
{"instruction": "Write a function to calculate the Levenshtein distance between two strings. Your code should pass theses tests:\n\nassert levenshtein_Distance(\"kitten\",\"sitting\") == 3\nassert levenshtein_Distance(\"Sunday\",\"Saturday\") == 3\nassert levenshtein_Distance(\"Bring\",\"Gring\") == 3", "output": "def levenshtein_Distance(s1, s2): \n    if len(s1) > len(s2): \n        s1, s2 = s2, s1 \n    distances = range(len(s1) + 1) \n    for i2, c2 in enumerate(s2): \n        distances_ = [i2+1] \n        for i1, c1 in enumerate(s1): \n            if c1 == c2: \n                distances_.append(distances[i1]) \n            else: \n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1]))) \n        distances = distances_ \n    return distances[-1]", "id": 386, "avg_similarity_score": 0.045537315273028275}
{"instruction": "Write a function to calculate the sum of all numbers of the given array that is divisible by a given number. Your code should pass these tests:\n\nassert div_Sum([4, 7, 9, 11, 13], 5) == 16\nassert div_Sum([5, 10, 15, 20, 25], 5) == 55\nassert div_Sum([20, 30, 40, 50, 60], 10) == 150", "output": "def div_Sum(arr=[], div=0): \n    summ = 0; \n    for ele in arr: \n        if ele%div==0: \n            summ+=ele \n    return summ", "id": 387, "avg_similarity_score": 0.19051973233343775}
{"instruction": "Write a function to calculate area of a triangle using the Heron's formula. Your code should pass these tests:\n\nassert triangle_Area(20,30,40) == 288.0\nassert triangle_Area(4,5,3) == 6.0\nassert triangle_Area(5,12,13) == 30.0", "output": "def triangle_Area(a,b,c):\n    s = (a+b+c)/2\n    return ((s*(s-a)*(s-b)*(s-c)) ** 0.5)", "id": 388, "avg_similarity_score": 0.1351436212847847}
{"instruction": "Write a function that rearranges the elements of the given array in the form of a wave. Your code should pass these tests:\n\nassert wave_Array([1,2,3,4]) == [2,1,4,3]\nassert wave_Array([5,7,9,10,8]) == [7,5,10,8,9]\nassert wave_Array([12,14,15,16]) == [14,12,16,15]", "output": "def wave_Array(arr):\n    arr.sort()\n\n    i = 0\n    while i<len(arr)-1:\n        arr[i],arr[i+1]=arr[i+1],arr[i]\n        i+=2\n    return arr", "id": 389, "avg_similarity_score": 0.18639303803492321}
{"instruction": "Write a function to find the maximum element of a given array. Your code should pass these tests:\n\nassert max_Element([1,2,3]) == 3\nassert max_Element([4,5,1,2]) == 5\nassert max_Element([2,7,5,4,9]) == 9", "output": "def max_Element(arr):\n    max = arr[0]\n    for i in range(1,len(arr)):\n        if (arr[i] > max):\n            max = arr[i]\n    return max", "id": 390, "avg_similarity_score": 0.2559062498542261}
{"instruction": "Write a python program to sort a given array using Heap Sort. Your code should pass these tests:\n\nassert heap_Sort([9,3,5,2,6]) == [2,3,5,6,9]\nassert heap_Sort([10,30,25,45,81,1]) == [1,10,25,30,45,81]\nassert heap_Sort([12,14,13,16,18]) == [12,13,14,16,18]", "output": "def heap_Sort(arr): \n\tn = len(arr) \n\tfor i in range(n, -1, -1): \n\t\theapify(arr, n, i) \n\tfor i in range(n-1, 0, -1): \n\t\tarr[i], arr[0] = arr[0], arr[i]\n\t\theapify(arr, i, 0) \n\ndef heapify(arr, n, i): \n\tlargest = i \n\tl = 2 * i + 1\t \n\tr = 2 * i + 2\t \n\tif l < n and arr[i] < arr[l]: \n\t\tlargest = l \n\tif r < n and arr[largest] < arr[r]: \n\t\tlargest = r \n\tif largest != i: \n\t\tarr[i],arr[largest] = arr[largest],arr[i] \n\t\theapify(arr, n, largest)", "id": 391, "avg_similarity_score": 0.14773021803916198}
{"instruction": "Write a python code to shuffle a given array. Your code should pass these tests:\n\nassert shuffle_Array([1,2,3,4,5]) == [3,1,5,4,2]\nassert shuffle_Array([3,5,7,2]) == [5,2,7,3]\nassert shuffle_Array([12,34,56]) == [34,12,56]", "output": "import random\n\ndef shuffle_Array(arr):\n    random.shuffle(arr)\n    return arr", "id": 392, "avg_similarity_score": 0.17598973667123358}
{"instruction": "Write a python code to find if a number is within a given range.", "output": "def is_within_range(num, lower, upper):\n  if num >=lower and num <=upper:\n    return True\n  else:\n    return False", "id": 393, "avg_similarity_score": 0.17915073877947052}
{"instruction": "Write a python code to generate a range of numbers.", "output": "def generate_range(lower, upper):\n  range_list = []\n  for i in range(lower, upper+1):\n    range_list.append(i)\n  return range_list", "id": 394, "avg_similarity_score": 0.14528777675589116}
{"instruction": "Write a function to remove all punctuations from a string. Your code should pass these tests:\n\nassert remove_punctuation(\"Hello, it's me!\") == \"Hello its me\"\nassert remove_punctuation(\"this is fantastic!\") == \"this is fantastic\"\nassert remove_punctuation(\"Good morning? How are you\") == \"Good morning How are you\"", "output": "def remove_punctuation(string):   \r\n    return ''.join([char for char in string if char not in string.punctuation])", "id": 395, "avg_similarity_score": 0.12369462734539316}
{"instruction": "Write a function to convert a given string to an integers. Your code should pass these tests:\n\nassert convert_to_integer(\"5\") == 5\nassert convert_to_integer(\"-3\") == -3\nassert convert_to_integer(\"10.2\") == 10", "output": "def convert_to_integer(s): \n    try:\n        i = int(s)\n    except ValueError:\n        return int(float(s))\n    return i", "id": 396, "avg_similarity_score": 0.017606360698007813}
{"instruction": "Write a python program to print out the prime numbers between 0 and 100.", "output": "for num in range(2, 101):\n    for divider in range(2, num): \n        if (num % divider == 0):\n            break\n    else:\n        print(num)", "id": 397, "avg_similarity_score": 0.08863818968513071}
{"instruction": "Write a program to convert a given number of hours into seconds. Your code should pass these tests:\n\nassert hours_to_seconds (2) == 7200\nassert hours_to_seconds (1.5) == 5400\nassert hours_to_seconds (30) == 108000", "output": "def hours_to_seconds(hours): \r\n    return int(hours * 60 * 60)", "id": 398, "avg_similarity_score": 0.000980392156862745}
{"instruction": "Implement a function to count the number of words in a string. Your code should pass these tests:\n\nassert count_words('I will learn to code') == 4\nassert count_words('A good life is about learning') == 6\nassert count_words('Coding is all about creativity') == 5", "output": "def count_words(ls): \n\tres = 0\n\tarr = ls.split() \n\tfor wrd in arr: \n\t\tres += 1 \n\treturn res", "id": 399, "avg_similarity_score": 0.20440110210462537}
{"instruction": "Create a program to generate the powers of 2 until the number N is reached. Your code should pass these tests:\n\nassert powers_2(3) == [2, 4, 8]\nassert powers_2(4) == [2, 4, 8, 16]\nassert powers_2(1) == [2]", "output": "def powers_2(N):  \r\n    s = 1;    \n    ans = [2];   \r\n    if N == 1: \r\n        return ans;    \r\n    while (2 ** s <= N) : \r\n        ans.append(2 ** s) \r\n        s += 1;   \r\n    return ans;", "id": 400, "avg_similarity_score": 0.13990622520635132}
{"instruction": "Write a function to generate Fibonacci numbers up to a given n-th number. Your code should pass these tests:\n\nassert fibonacci(6) == [0, 1, 1, 2, 3, 5]\nassert fibonacci(7) == [0, 1, 1, 2, 3, 5, 8]\nassert fibonacci(2) == [0, 1]", "output": "def fibonacci(n): \r\n\r\n    fib = [0] * (n + 1) \r\n    fib[1] = 1\r\n\r\n    for i in range(2 , n + 1): \r\n        fib[i] = fib[i - 1] + fib[i - 2] \r\n\r\n    return fib", "id": 401, "avg_similarity_score": 0.17435849991872493}
{"instruction": "Implement an algorithm to get the n-th fibonacci number. Your code should pass these tests:\n\nassert n_fibonacci(6) == 8\nassert n_fibonacci(7) == 13\nassert n_fibonacci(2) == 1", "output": "def n_fibonacci(n): \r\n    if ( n <= 1): \r\n        return n \r\n    return n_fibonacci(n-1) + n_fibonacci(n-2)", "id": 402, "avg_similarity_score": 0.08888815725625862}
{"instruction": "Write a function to verify a simple password pattern. Your code should pass these tests:\n\nassert verify_pattern(\"abcd12\") == True\nassert verify_pattern(\"a1b2\") == False\nassert verify_pattern(\"abc123\") == False", "output": "def verify_pattern(passwd): \r\n    if type(passwd) == str: \r\n        special = \"!@#$%^&*()_+=-\" \r\n        upper = False \r\n        lower = False \r\n        num = False \r\n        sp = False \r\n        for i in passwd: \r\n            if  i.isupper(): \r\n                upper = True \r\n            elif  i.islower(): \r\n                lower = True \r\n            elif i.isdigit(): \r\n                num = True \r\n            elif i in special: \r\n                sp = True \r\n        if ( upper and lower \r\n            and num and sp ): \r\n            return True\r\n        else: \r\n            return False", "id": 403, "avg_similarity_score": 0.08642363930974084}
{"instruction": "Create a program to calculate root mean square from a list of numbers. Your code should pass these tests:\n\nassert root_mean_square([5, 4, 3, 2]) == 3.87298\nassert root_mean_square([2, 4, 7, 5]) == 4.69042 \nassert root_mean_square([1, 0, 9, 8]) == 5.14850", "output": "def root_mean_square(numbers):  \r\n    mean_value = sum(numbers)/len(numbers) \r\n    sum_of_sq_diff = 0 \r\n    for n in numbers:  \r\n        sum_of_sq_diff += (n - mean_value) ** 2 \r\n    res =math.sqrt(sum_of_sq_diff / len(numbers))  \r\n    return res", "id": 404, "avg_similarity_score": 0.13553257895059467}
{"instruction": "Write a function to compare two given lists. Your code should pass these tests:\n\nassert compareLists([2,5,6],[2,4,7]) == False\nassert compareLists([3,6,1],[8,6,3]) == False\nassert compareLists([3,4,5,6,7],[3,4 ,5,6,7]) == True", "output": "def compareLists(lst_1, lst_2): \n    if(len(lst_1) != len(lst_2)):\n        return False \n    for i in range(len(lst_1)): \n        if lst_1[i] != lst_2[i]: \n            return False \n    return True", "id": 405, "avg_similarity_score": 0.09960844493152636}
{"instruction": "Create a function to sort a given list of integer elements in the increasing order. Your code should pass these tests:\n\nassert sortList([34, 5, 2, 9, 36, 27]) == [2, 5, 9, 27, 34, 36]\nassert sortList([1, 5, 7, 9, 0]) == [0, 1, 5, 7, 9]\nassert sortList([4, 5, 6, 7, 8]) == [4, 5, 6, 7, 8]", "output": "def sortList(a): \r\n    for i in range(len(a)):       \r\n        for j in range(0, len(a)-i-1): \r\n            if a[j] > a[j+1] : \r\n                a[j], a[j+1] = a[j+1], a[j] \r\n    return a", "id": 406, "avg_similarity_score": 0.16823554703829807}
{"instruction": "Implement a python program to print all prime numbers in a given interval. Your code should pass these tests:\n\nassert prime_numbers(2, 10) == [2, 3, 5, 7]\nassert prime_numbers(5, 20) == [5, 7, 11, 13, 17, 19]\nassert prime_numbers(0, 2) == [2]", "output": "def prime_numbers(start, end): \n    a = [] \r\n    for n in range(start, end + 1): \n  \n        # counter for all prime numbers \r\n        c = 0 \r\n  \r\n        for i in range(1, n + 1): \r\n            if n % i == 0: \r\n                c += 1\r\n  \r\n        # prime numbers are greater than 1 and only divisible by 1, so there should be only 2 divisors \r\n        if c == 2 and n != 1: \r\n            a.append(n)\r\n  \r\n    return a", "id": 407, "avg_similarity_score": 0.1476310106635014}
{"instruction": "Write a function to evaluate a polynomial equation with degree 3. Your code should pass these tests:\n\nassert evaluate_polynomial(1,-5,3,2) == 16\nassert evaluate_polynomial(-4,5,3,1) == -16\nassert evaluate_polynomial(-1,-2,3,0)==-1", "output": "def evaluate_polynomial(a,b,c,x):\r\n    return a*x**3 + b*x**2 + c*x", "id": 408, "avg_similarity_score": 0.08098003880306893}
{"instruction": "Write a function to calculate the product of an array. Your code should pass these tests:\n\nassert prod_array([2,3,5]) == 30\nassert prod_array([1, 2, 4, -2]) == -16\nassert prod_array([1,0,-3]) == 0", "output": "def prod_array(arr): \r\n    product = 1\r\n    for i in range(len(arr)): \r\n        product = product * arr[i] \r\n    return product", "id": 409, "avg_similarity_score": 0.1491528939202747}
{"instruction": "Write a function to convert an array of size n to a one-dimensional array. Your code should pass these tests:\n\nassert array_to_1d([[2,3],[4,5],[6,7]],3) == [2,3,4,5,6,7]\nassert array_to_1d([[1,-2],[2,4]],2) == [1,-2,2,4]\nassert array_to_1d([[1,3,-2],[2,4,5]],2) == [1,3,-2,2,4,5]", "output": "def array_to_1d(arr,n):\r\n  temp = [] \r\n   for i in range(n): \r\n      for j in range(len(arr[i])): \r\n         temp.append(arr[i][j]) \r\n   return temp", "id": 410, "avg_similarity_score": 0.11003558144267832}
{"instruction": "Write a python function to remove all elements from the list that are in a given range. Your code should pass these tests:\n\nassert remove_range([1,2,3,4,5],2,4) == [1,5]\nassert remove_range([12,15,18,16,14],14,17) == [12,18]\nassert remove_range([-4,-5,-6],-5,-4) == [-4,-6]", "output": "def remove_range(list1, lower, upper): \r\n    return [i for i in list1 if (i < lower or i > upper)]", "id": 411, "avg_similarity_score": 0.18442783443898966}
{"instruction": "Write a function to delete a node in a singly linked list if its value is the same as the given key. Your code should pass these tests:\n\nassert delete_node([10,20,30,40],20) == [10,30,40]\nassert delete_node([12,24,16,14],14) == [12,24,16]\nassert delete_node([-4,2,-5],-4) == [2,-5]", "output": "def delete_node(list1, key): \r\n    head = list1 \r\n    curr = list1 \r\n    while(curr != None) : \r\n        if curr.data == key :  \r\n            break \r\n        prev = curr  \r\n        curr = curr.next  \r\n    if(curr == None) : \r\n        return list1 \r\n    if(curr == head) : \r\n        head = head.next \r\n    else :  \r\n        prev.next = curr.next  \r\n    return head", "id": 412, "avg_similarity_score": 0.1416802958870793}
{"instruction": "Write a function to convert an integer to a binary string. Your code should pass these tests:\n\nassert int_to_binary(5) == \"101\"\nassert int_to_binary(25) == \"11001\"\nassert int_to_binary(50) == \"110010\"", "output": "def int_to_binary(n):  \r\n    binary = \"\"\r\n    while (n > 0):  \r\n        binary += str(n % 2) \r\n        n = int(n // 2)  \r\n    binary = binary[::-1]  \r\n    return binary", "id": 413, "avg_similarity_score": 0.1307400738443503}
{"instruction": "Write a Python function to check whether a substring is present in a given string or not. Your code should pass these tests:\n\nassert is_Substring('abcdefgh','bc') == True\nassert is_Substring('abcdefgh','efg') == True\nassert is_Substring('22344','5') == False", "output": "def is_Substring(string1, string2): \r\n  \r\n    # Calculate the length of both string \r\n    n1 = len(string1) \r\n    n2 = len(string2) \r\n  \r\n    # A loop to check an every potential starting index \r\n    # within string1\r\n    for i in range(n1 - n2 + 1): \r\n        j = 0 \r\n        # A loop to check every potential \r\n        # ending index within string2 \r\n        for j in range(n2): \r\n            # If any mismatch is found \r\n            if string1[i + j] != string2[j]: \r\n                break\r\n            j += 1\r\n            # If all characters in string2 were \r\n            # matched\r\n        if j == n2: \r\n            return True \r\n    return False", "id": 414, "avg_similarity_score": 0.17329096922308726}
{"instruction": "Write a Python code to generate a list of credit card numbers that pass the Luhn algorithm. Your code should pass these tests:\n\nassert generate_cc_num(14) == '6011912345678915'\nassert generate_cc_num(17) == '3528583212999838'\nassert generate_cc_num(15) == '371467801234561'", "output": "import random\r\nimport math\r\n\r\ndef generate_cc_num(length):\r\n    \"\"\" Generate credit card number of given length that satisfies Luhn test. \"\"\"\r\n    \r\n    # generate random base number as string\r\n    digits = [str(random.randint(0, 9)) for i in range(length-1)]\r\n    \r\n    # Calculate checksum\r\n    checksum = 0\r\n    for k,v in enumerate(digits):\r\n        # double every second number\r\n        if (k % 2 == 0):\r\n            digits[k] = int(v) * 2\r\n            # subtract 9 from double digit numbers\r\n            if (digits[k] > 9):\r\n                digits[k] = digits[k] - 9\r\n        # sum the numbers\r\n        checksum += digits[k]\r\n    \r\n    # calculate missing digit to make checksum divisible by 10\r\n    remainder = checksum % 10\r\n    check_digit = 0 if remainder == 0 else 10 - remainder\r\n\r\n    # return generated credit card number\r\n    return ''.join(digits) + str(check_digit)", "id": 415, "avg_similarity_score": 0.13751975528022384}
{"instruction": "Write a Python script to calculate the maximum profit from a given list of items. Your code should pass these tests:\n\nassert max_profit([1,2,20,4,10])==18\nassert max_profit([15,5,7,1,2,20,4,10])==19\nassert max_profit([1,20,4,10,2,5,4])==17", "output": "def max_profit(list1):\r\n    max_profit = 0\r\n    min_price = list1[0]\r\n\r\n    for i in range(1, len(list1)):\r\n        profit = list1[i] - min_price\r\n        max_profit = max(profit, max_profit)\r\n        min_price = min(min_price, list1[i])       \r\n\r\n    return max_profit", "id": 416, "avg_similarity_score": 0.21565561910420197}
{"instruction": "Write a Python function to transpose a given matrix. Your code should pass these tests:\n\nassert transpose_matrix([[1,2,3],[4,5,6]])==[[1,4],[2,5],[3,6]]\nassert transpose_matrix([[1,2],[3,4],[5,6]])==[[1,3,5],[2,4,6]]\nassert transpose_matrix([[1,2,3,4],[5,6,7,8]])==[[1,5],[2,6],[3,7],[4,8]]", "output": "def transpose_matrix(matrix): \r\n  \r\n    # Get the number of rows and columns\r\n    rows = len(matrix) \r\n    cols = len(matrix[0]) \r\n  \r\n    # Create the transposed matrix \r\n    transposed = [[0 for _ in range(rows)]for _ in range(cols)] \r\n  \r\n    # Produce the transposed matrix \r\n    for i in range(rows): \r\n        for j in range(cols): \r\n            transposed[j][i]= matrix[i][j] \r\n  \r\n    return transposed", "id": 417, "avg_similarity_score": 0.16671994365876125}
{"instruction": "Write a Python program to delete a given element from a list of elements. Your code should pass these tests: \n\nassert delete_element([1, 2, 3, 4],2)==[1,3,4]\nassert delete_element([2, 5, 6, 7],7)==[2, 5, 6]\nassert delete_element([1, 3, 5, 7],1)==[3, 5, 7]", "output": "def delete_element(list1, element): \r\n  \r\n    # Create index list to store every index of elements \r\n    index = [] \r\n  \r\n    # iterate through every element \r\n    for x in range(0, len(list1)): \r\n        # check every element \r\n        if list1[x] == element: \r\n            index.append(x) \r\n      \r\n    # if list of index contains any element then only remove elements \r\n    if len(index)!=0: \r\n        i = len(index)-1\r\n        # Iterate through every index in reverse order \r\n        while i >=0: \r\n            del list1[index[i]] \r\n            i -=1\r\n    # Return the updated list \r\n    return list1", "id": 418, "avg_similarity_score": 0.18774674137545921}
{"instruction": "Write a python function to find the largest circular subarray with the given values. Your code should pass these tests:\n\nassert find_Largest_Circular([3,7,1,2,9],5) == 17\nassert find_Largest_Circular([4,5,7],3) == 16\nassert find_Largest_Circular([2,4,6,1,3],5) == 13", "output": "def find_Largest_Circular(arr,n): \r\n    largest_sum = arr[0] \r\n\r\n    # Case 1: Get the maximum sum using standard \r\n    # Kadane's algorithm \r\n    curr_sum = arr[0] \r\n    for i in range(1,n): \r\n        curr_sum = max(arr[i], curr_sum + arr[i]) \r\n        largest_sum = max(largest_sum, curr_sum) \r\n\r\n    # Case 2: Compute the maximum sum by excluding \r\n    # the elements of the circular subarray \r\n    curr_sum = 0\r\n    for i in range(0,n): \r\n        curr_sum = curr_sum + arr[i] \r\n        curr_sum = max(0, curr_sum) \r\n    exclude_last_element_sum = curr_sum \r\n\r\n    # maximum sum up to last element is total sum minus\r\n    # minimum sum of subarray excluding first element \r\n    curr_sum = 0\r\n    for i in range(1,n): \r\n        curr_sum = curr_sum + arr[i] \r\n        curr_sum = min(0, curr_sum) \r\n    exclude_first_element_sum = curr_sum \r\n\r\n    # Case 3: Both of Circular sum \r\n    circular_sum = total_sum - exclude_first_element_sum +  exclude_last_element_sum \r\n\r\n    return max(largest_sum,circular_sum)", "id": 419, "avg_similarity_score": 0.14136533934762918}
{"instruction": "Write a python function to find the minimum number of jumps to reach the end of an array. Your code should pass these tests:\n\nassert min_Jumps([2,3,1,1,4],5) == 2\nassert min_Jumps([3,2,1,1,4],5) == 2\nassert min_Jumps([2,1,3,2,3,4,5],7) == 3", "output": "def min_Jumps(arr, n): \n    jumps = [0 for i in range(n)] \n  \n    if (n == 0) or (arr[0] == 0): \n        return float('inf') \n  \n    jumps[0] = 0\n  \n    for i in range(1, n): \n        jumps[i] = float('inf') \n        for j in range(i): \n            if (i <= j + arr[j] and jumps[j] != float('inf')): \n                jumps[i] = min(jumps[i], jumps[j] + 1) \n                break\n  \n    return jumps[n-1]", "id": 420, "avg_similarity_score": 0.1410144817268313}
{"instruction": "Write a python function to find the maximum subarray sum such that subarrays do not overlap. Your code should pass these tests:\n\nassert find_Max_Non_Overlapping_Subarray([2,3,4,1,6,2],6) == 9\nassert find_Max_Non_Overlapping_Subarray([2,8,2,7],4) == 17\nassert find_Max_Non_Overlapping_Subarray([1,2,3,4],4) == 10", "output": "def find_Max_Non_Overlapping_Subarray(arr, n): \n  \n    incl = 0\n    excl = 0\n  \n    for i in range(0, n): \n        temp = incl \n        incl = max(incl, excl + arr[i] ) \n        excl = temp \n  \n    return incl", "id": 421, "avg_similarity_score": 0.08584982208172647}
{"instruction": "Write a python function to calculate nth Fibonacci number using a naive method. Your code should pass these tests:\n\nassert fib(5) == 5\nassert fib(6) == 8\nassert fib(7) == 13", "output": "def fib(n):  \r\n    if n == 0: \r\n        return 0\r\n    elif n == 1: \r\n        return 1\r\n    else: \r\n        return fib(n - 1) + fib(n - 2)", "id": 422, "avg_similarity_score": 0.09533635484158219}
{"instruction": "Write a python function to calculate the number of possible ways to make change for a given amount. Your code should pass these tests:\n\nassert ways_to_Change(5,[1,2,3]) == 5 \nassert ways_to_Change(4,[2,3]) == 3 \nassert ways_to_Change(3,[1,2,3,4]) == 4", "output": "def ways_to_Change(amount, coins): \n    m = len(coins) \n    dp = [0 for _ in range(amount + 1)]   \r\n    dp[0] = 1   \n    for i in range(0, m): \r\n        for j in range(coins[i], amount + 1): \r\n            dp[j] += dp[j - coins[i]] \r\n    return dp[amount]", "id": 423, "avg_similarity_score": 0.1438741413791499}
{"instruction": "Write a python function to calculate the minimum number of operations to convert a number x to y using only two operations: multiplication by 2 and subtraction by 1. Your code should pass these tests:\n\nassert min_Operations(4,7) == 3\nassert min_Operations(10,17) == 6\nassert min_Operations(17,10) == 5", "output": "def min_Operations(x, y): \n    # base condition \n    if y == x: \n        return 0\n    if y < x: \n        return float('-inf')\n  \n    # returned if  \n    # anyone could be \n    # reached from x. \n    if y % 2 == 0 and x == (y//2): \n        return 1\n    if y % 2 == 1 and x == (y//2): \n        return 2\n  \n    # try both \n    # division by 2 \n    # and subtraction \n    # by 1 \n    return 1 + min(min_Operations(x, y//2), \r\n                   min_Operations(x, y - 1))", "id": 424, "avg_similarity_score": 0.03311996758972959}
{"instruction": "Write a function to compute the difference between two dates represented as a string. Your code should pass these tests:\n\nassert date_diffrence(\"2021/01/01\",\"2021/01/03\")==2\nassert date_diffrence(\"2021/02/01\",\"2021/07/01\")==155\nassert date_diffrence(\"2021/01/01\",\"2022/01/01\")==366", "output": "def date_diffrence(first_date,second_date):  \r\n  year1,month1,day1 = map(int, first_date.split('/'))  \r\n  year2,month2,day2 = map(int, second_date.split('/'))  \r\n    \r\n  date1 = datetime.date(year1, month1, day1)  \r\n  date2 = datetime.date(year2, month2, day2)  \r\n  \r\n  return abs((date2 - date1).days)", "id": 425, "avg_similarity_score": 0.14527302121988525}
{"instruction": "Write a function to convert a given string to a base 10 integer. Your code should pass these tests:\n\nassert string_to_int(\"abc\") == 29364\nassert string_to_int(\"def\") == 36351\nassert string_to_int(\"123\") == 123", "output": "def string_to_int(s): \n    result = 0\n    for i in range(len(s)): \n        char = s[i] \n        number = ord(char) - ord('a') + 1\n        result = result * 10 + number\n    return result", "id": 426, "avg_similarity_score": 0.09968758310480434}
{"instruction": "Write a function to iterate over a given list of numbers and generate a new list containing the absolute differences of all the consecutive elements. Your code should pass these tests:\n\nassert absolute_difference([4, 2, 5, 8, 10]) == [2, 3, 3, 2]\nassert absolute_difference([2, 3, 8, 9 ,10]) == [1, 5, 1, 1]\nassert absolute_difference([2, 3, 4, 5, 6]) == [1, 1, 1, 1]", "output": "def absolute_difference(list1): \r\n    result = [abs(list1[i+1]-list1[i]) for i in range(len(list1)-1)] \r\n    return result", "id": 427, "avg_similarity_score": 0.1466968198452294}
{"instruction": "Write a function to print all prime numbers between two given numbers. Your code should pass these tests:\n\nassert print_prime(1,10) == [2, 3, 5, 7]\nassert print_prime(5,30) == [5, 7, 11, 13, 17, 19, 23, 29]\nassert print_prime(3,20) == [3,5,7,11,13,17,19]", "output": "def print_prime(start,end): \n    result=[]\n    for i in range(start,end+1): \n        if i>1: \n            for j in range(2,i): \n                if (i % j) == 0: \n                    break\n            else: \n                result.append(i) \n                  \n    return result", "id": 428, "avg_similarity_score": 0.1071658095634524}
{"instruction": "Write a function to extract and display individual characters from a given string. Your code should pass these tests:\n\nassert extract_characters('Hello World') == ['H','e','l','l','o',' ','W','o','r','l','d']\nassert extract_characters('abcdefghijkl') == ['a','b','c','d','e','f','g','h','i','j','k','l']\nassert extract_characters('1234567890') == ['1','2','3','4','5','6','7','8','9','0']", "output": "def extract_characters(s): \n    result = []\n    for x in s: \n        result.append(x) \n      \n    return result", "id": 429, "avg_similarity_score": 0.15033985836764924}
{"instruction": "Write a function to count the even and odd numbers in a given array. Your code should pass these tests:\n\nassert count_even_odd([1, 2, 3, 4, 5]) == {'odd': 3, 'even': 2}\nassert count_even_odd([2, 4, 6, 8, 10]) == {'odd': 0, 'even': 5}\nassert count_even_odd([3, 7, 9, 4, 6]) == {'odd': 3, 'even': 2}", "output": "def count_even_odd(list1): \n    even = 0\n    odd = 0\n      \n    for i in list1: \n        if i % 2 == 0: \n            even += 1\n        else: \n            odd += 1\n          \n    return {'even': even, 'odd': odd}", "id": 430, "avg_similarity_score": 0.19940549695179136}
{"instruction": "Write a python program to find the area of a given rhombus. Your code should pass these tests: \n\nassert get_area_of_rhombus(4, 6) == 24\nassert get_area_of_rhombus(5, 10) == 50\nassert get_area_of_rhombus(6, 12) == 72", "output": "def get_area_of_rhombus(d1, d2): \r\n    return (d1 * d2)/2", "id": 431, "avg_similarity_score": 0.25238772866592446}
{"instruction": "Write a python function to convert the given number into binary format with spaces. Your code should pass these tests:\n\nassert to_binary(25) == \"00011001\"\nassert to_binary(45) == \"00101101\"\nassert to_binary(107) == \"01101011\"", "output": "def to_binary(num): \r\n    return ' '.join(format(num, 'b'))", "id": 432, "avg_similarity_score": 0.010853098488179669}
{"instruction": "Write a python function to find the second smallest number in the given list. Your code should pass these tests:\n\nassert second_smallest([5, 7, 1, 2, 9]) == 2\nassert second_smallest([3, 8, 6, 4, 7]) == 4\nassert second_smallest([5, 1, 6, 4, 7]) == 4", "output": "def second_smallest(list_of_numbers): \r\n  list_sorting = sorted(list_of_numbers) \r\n  second_min_value = list_sorting[1] \r\n  return second_min_value", "id": 433, "avg_similarity_score": 0.18722057718157448}
{"instruction": "Write a python program for printing the maximum number of A\u2019s using given four keys. Your code should pass these tests:\n\nassert max_a_pattern(\"abcdef\", 3) == 3\nassert max_a_pattern(\"cdce\", 4) == 4\nassert max_a_pattern(\"xyz\", 4) == 0", "output": "def max_a_pattern(str1, key): \r\n    if key == 0: \r\n        return 0 \r\n    if len(str1) <= key: \r\n        return len(str1) \r\n  \r\n    count = 0\r\n    for i in range(key): \r\n        if str1[i] == 'a': \r\n            count += 1\r\n  \r\n    # Initialize the result \r\n    res = count \r\n  \r\n    # Traverse the string and update the result \r\n    for i in range(key, len(str1)): \r\n        if str1[i] == 'a': \r\n            count += 1\r\n        if str1[i - key] == 'a': \r\n            count -= 1\r\n        res = max(res, count) \r\n  \r\n    return res", "id": 434, "avg_similarity_score": 0.17493880714526347}
{"instruction": "Write a python function to calculate the Fibonacci sequence for a given number of terms. Your code should pass these tests:\n\nassert get_fibonacci_sequence(10) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\nassert get_fibonacci_sequence(5) == [1, 1, 2, 3, 5]\nassert get_fibonacci_sequence(3) == [1, 1, 2]", "output": "def get_fibonacci_sequence(n): \r\n    fibo_list = [1]*n \r\n  \r\n    for i in range(2, n): \r\n       fibo_list[i] = fibo_list[i-1] + fibo_list[i-2] \r\n  \r\n    return fibo_list", "id": 435, "avg_similarity_score": 0.20219221015543035}
{"instruction": "Write a python function to find the time complexity for a given algorithm. Your code should pass these tests:\n\nassert find_time_complexity(32, 8) == 4\nassert find_time_complexity(50, 10) == 5\nassert find_time_complexity(64, 16) == 4", "output": "def find_time_complexity(n, k): \n  return n//k", "id": 436, "avg_similarity_score": 0.20097568227063517}
{"instruction": "Generate a function to two lists if they share a element in common. Your code should pass these tests:\n\nassert shared_elements([1,2,3,4],[2,3,5]) == [2,3]\nassert shared_elements([7,8,3,2,1],[2,9,3]) == [2,3]\nassert shared_elements([4,5,6],[7,8,9]) == []", "output": "def shared_elements(list1,list2): \r\n    # Initialize results \r\n    res = [] \r\n  \r\n    # Traverse both lists \r\n    for i in list1: \r\n        # print(x) \r\n        if i in list2: \r\n            res.append(i) \r\n  \r\n    # Return result \r\n    return res", "id": 437, "avg_similarity_score": 0.11213727159686235}
{"instruction": "Write a python program to count the number of individual character occurrences in a string. Your code should pass these tests:\n\nassert countChar(\"hello\") == {'h':1, 'e':1, 'l':2, 'o':1}\nassert countChar(\"GeeksForGeeks\") == {'G':2, 'e':4, 'k':2, 's':2, 'F':1, 'o':1, 'r':1}\nassert countChar(\"aaaaa\") == {'a': 5}", "output": "def countChar(str_in): \r\n    # Create empty dictionary \r\n    dict_out = dict() \r\n      \r\n    # iterate over the string  \r\n    for i in str_in: \r\n  \r\n        # check if char is already in this dictionary \r\n        if i in dict_out: \r\n            dict_out[i] += 1\r\n        else: \r\n            dict_out[i] = 1\r\n  \r\n    return dict_out", "id": 438, "avg_similarity_score": 0.1967854309203403}
{"instruction": "Generate a python code to calculate the area of a triangle from given 3 sides. Your code should pass these tests:\n\nassert triangle_area(5,5,7) == 12.04159458\nassert triangle_area(3,4,5) == 6.0\nassert triangle_area(2,2,2.5) == 1.481013586", "output": "import math \r\n  \r\ndef triangle_area(a,b,c): \r\n    s = (a + b + c) / 2\r\n    return (math.sqrt(s * (s - a) * (s - b) * (s - c)))", "id": 439, "avg_similarity_score": 0.18345717699596828}
{"instruction": "Create a Python program to print out a pyramid pattern of stars. Your code should pass these tests:\n\nassert pyramid(3) == \n   *\n  * *\n * * *\nassert pyramid(7) ==\n      *\n     * *\n    * * *\n   * * * *\n  * * * * *\n * * * * * *\n* * * * * * *", "output": "def pyramid(rows): \r\n    for i in range(1, rows + 1): \r\n        print(\" \" * (rows - i) + \" *\" * i)", "id": 440, "avg_similarity_score": 0.10851342641811192}
{"instruction": "Construct a function to find the longest palindrome in a given string. Your code should pass these tests:\n\nassert longest_palindrome(\"geefeb\") == \"eefee\" \nassert longest_palindrome(\"racecar\") == \"racecar\"\nassert longest_palindrome(\"google\") == \"goog\"", "output": "def longest_palindrome(str): \r\n    n = len(str) \r\n  \r\n    table = [[0 for x in range(n)] for y in range(n)] \r\n  \r\n    maxlen = 1\r\n    start = 0\r\n  \r\n    for i in range(n): \r\n        table[i][i] = True\r\n  \r\n    for i in range(n - 1): \r\n        if (str[i] == str[i + 1]): \r\n            table[i][i + 1] = True\r\n            maxlen = 2\r\n            start = i \r\n  \r\n    k = 3\r\n    while (k <= n): \r\n        for i in range(n - k + 1): \r\n            j = i + k - 1\r\n  \r\n            if (table[i + 1][j - 1] and str[i] == str[j]): \r\n                table[i][j] = True\r\n  \r\n                if (k > maxlen): \r\n                    maxlen = k \r\n                    start = i \r\n        k += 1\r\n  \r\n    return str[start:start + maxlen]", "id": 441, "avg_similarity_score": 0.21343133655794788}
{"instruction": "Generate a python function to calculate nCr value without using recursion. Your code should pass these tests:\n\nassert nCr(5,2) == 10\nassert nCr(6,3) == 20\nassert nCr(7,4) == 35", "output": "def nCr(n,r):\n    fact_n = 1\n    fact_r = 1\n    for i in range(1 , n+1):\n        fact_n = fact_n*i\n    for j in range(1 , r+1):\n        fact_r = fact_r*j\n    return fact_n / ( fact_r* fact_n-fact_r)", "id": 442, "avg_similarity_score": 0.08462794919393833}
{"instruction": "Generate a Python code to reverse a stack using recursion. Your code should pass these tests:\n\nassert reverse_stack([1,2,3,4,5]) == [5,4,3,2,1]\nassert reverse_stack([0,1,0,1,1]) == [1,1,0,1,0]\nassert reverse_stack([5,7,8,9]) == [9,8,7,5]", "output": "def reverse_stack(stack):\r\n    if len(stack) == 0:\r\n        return stack  \r\n  \r\n    temp = stack.pop()\r\n    reverse_stack(stack)  \r\n    stack_push(stack, temp)  \r\n    return stack \r\n  \r\n  \r\ndef stack_push(stack, data):  \r\n    stack.append(data)", "id": 443, "avg_similarity_score": 0.09891717593026479}
{"instruction": "Construct a python function to find the sum of the integers in an array. Your code should pass these tests:\n\nassert sum_arr([1,2,3,4,5]) == 15\nassert sum_arr([4,8,12]) == 24\nassert sum_arr([0,1,1,1]) == 3", "output": "def sum_arr(arr): \r\n    sum = 0\r\n  \r\n    for i in range(len(arr)): \r\n        sum += arr[i] \r\n    return sum", "id": 444, "avg_similarity_score": 0.17763973360113888}
{"instruction": "Generate a function to remove all spaces from a given string. Your code should pass these tests:\n\nassert remove_spaces(\"the quick brown fox\") == \"thequickbrownfox\"\nassert remove_spaces(\"the     quick        brown      fox\") == \"thequickbrownfox\"\nassert remove_spaces(\"  hello   world       \") == \"helloworld\"", "output": "def remove_spaces(str): \r\n  \r\n    # split the string into words \r\n    split_string = str.split(\" \") \r\n  \r\n    # join the words of the list without a space \r\n    new_string = \"\".join(split_string) \r\n  \r\n    return new_string", "id": 445, "avg_similarity_score": 0.16467398405712744}
{"instruction": "Write a python code to find the power of a number in logarithmic time. Your code should pass these tests:\n\nassert findPower(2,5)==32\nassert findPower(8,2)==64\nassert findPower(15,3)==3375", "output": "import math \r\ndef findPower(x, y):  \r\n    if (y == 0): \r\n        return 1;  \r\n    temp = findPower(x, int(y / 2))  \r\n    if (y % 2 == 0): \r\n        return temp * temp;  \r\n    else: \r\n        if(y > 0): \r\n            return x * temp * temp;  \r\n        else: \r\n            return (temp * temp) /x;", "id": 446, "avg_similarity_score": 0.2037629360896627}
{"instruction": "Write a function to find the number of invariant blocks of a matrix in linear time complexity. Your code should pass these tests:\n\nassert countMatrixBlocks( [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 7\nassert countMatrixBlocks([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 9\nassert countMatrixBlocks([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 1]]) == 14", "output": "def countMatrixBlocks(matrix): \r\n    rows = len(matrix) \r\n    cols = len(matrix[0])\r\n    min_row = 0\r\n    max_row = rows \r\n    min_col = 0\r\n    max_col = cols\r\n    count = 0\r\n    while (min_row < max_row and min_col < max_col): \r\n        for i in range (min_row, max_row): \r\n            if matrix[i][min_col] == matrix[min_row][min_col] and matrix[i][max_col - 1] == matrix[min_row][max_col - 1]: \r\n                count += (max_row - min_row) \r\n  \r\n        for j in range (min_col, max_col): \r\n            if matrix[min_row][j] == matrix[min_row][min_col] and matrix[max_row - 1][j] == matrix[max_row - 1][min_col]: \r\n                count += (max_col - min_col) \r\n  \r\n        min_row += 1\r\n        max_row -= 1\r\n        min_col += 1\r\n        max_col -= 1\r\n        count -= 1\r\n    return count", "id": 447, "avg_similarity_score": 0.1698806194481287}
{"instruction": "Write a Python function to match a string that contains only lowercase alphabets and digits.\n\nassert match_string(\"test123\") == True\nassert match_string(\"Abc!@#$\") == False\nassert match_string(\"12345abc\") == True", "output": "import re\r\ndef match_string(string):\r\n    regex = re.compile('^[a-z0-9]+$')\r\n    if(regex.search(string) != None):\r\n        return True\r\n    else:\r\n        return False", "id": 448, "avg_similarity_score": 0.05728492227626536}
{"instruction": "Write a Python function to check if a number is palindrome or not.\n\nassert isPalindrome(12321) == True\nassert isPalindrome(1001) == True\nassert isPalindrome(1297) == False", "output": "def isPalindrome(num): \r\n  \r\n    rev = 0\r\n    x = num\r\n    while (num > 0): \r\n        dig = num % 10\r\n        rev = rev * 10 + dig \r\n        num = num // 10\r\n      \r\n    if (x == rev): \r\n        return True\r\n    else: \r\n        return False", "id": 449, "avg_similarity_score": 0.08013547781993473}
{"instruction": "Write a function to check whether a string consists of unique characters or not in linear time complexity. Your code should pass these tests:\n\nassert isUnique(\"abcd\") == True\nassert isUnique(\"pqrs\") == True\nassert isUnique(\"test\") == False", "output": "def isUnique(str): \r\n  \r\n    if len(str) > 256: \r\n        return False\r\n  \r\n    charset = [False] * 256\r\n  \r\n    for char in str: \r\n  \r\n        if charset[ord(char)] == True: \r\n            return False\r\n  \r\n        charset[ord(char)] = True\r\n  \r\n    return True", "id": 450, "avg_similarity_score": 0.12605624089522538}
{"instruction": "Write a Python function to check if a binary tree is a valid binary search tree.\n\nassert isBinarySearchTree(root) == True\nassert isBinarySearchTree(root.left) == True\nassert isBinarySearchTree(root.right) == False", "output": "def isBinarySearchTree(root): \n  \r\n    if root is None: \r\n        return True\r\n  \r\n    if (root.left is not None and\r\n        root.left.val > root.val): \r\n        return False\n  \r\n    if (root.right is not None and\r\n        root.right.val < root.val): \r\n        return False\r\n  \r\n    if (not isBinarySearchTree(root.left) or\r\n        not isBinarySearchTree(root.right)): \r\n        return False\r\n  \r\n    return True", "id": 451, "avg_similarity_score": 0.06664702025850464}
{"instruction": "Write a Python function to count the number of even and odd elements in an array.\n\nassert countEvenOdd([2, 4, 0, 5, 9]) == (3, 2)\nassert countEvenOdd([1, 2, 3, 4, 5]) == (3, 2)\nassert countEvenOdd([1, 3, 5, 7]) == (0, 3)", "output": "def countEvenOdd(arr):\r\n  count_even = 0\r\n  count_odd = 0\r\n  for i in range(len(arr)):\r\n    if arr[i]%2 == 0:\r\n      count_even+=1\r\n    else:\r\n      count_odd+=1\r\n  return (count_even, count_odd)", "id": 452, "avg_similarity_score": 0.07363650179448597}
{"instruction": "Write a Python function to calculate the total number of possible paths from source to destination in a grid.\n\nassert countAllPaths(3, 3) == 10000\nassert countAllPaths(2, 4) == 10\nassert countAllPaths(4, 5) == 1910", "output": "def countAllPaths(m, n):  \r\n    dp = [[0 for x in range(m)] for y in range(n)] \r\n    for i in range(m):  \r\n        dp[0][i] = 1\r\n    for j in range(n):  \r\n        dp[j][0] = 1\r\n    for i in range(1, m):  \r\n        for j in range(1, n):  \r\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]  \r\n    return dp[m-1][n-1]", "id": 453, "avg_similarity_score": 0.062406745768951326}
{"instruction": "Write a Python function to determine if a given number is a prime number.\n\nassert isPrime(11) == True\nassert isPrime(9) == False\nassert isPrime(19) == True", "output": "def isPrime(number): \r\n\r\n    if (number<=1): \r\n        return False\r\n  \r\n    for i in range(2,number): \r\n        if (number % i == 0): \r\n            return False\r\n  \r\n    return True", "id": 454, "avg_similarity_score": 0.10371411952106568}
{"instruction": "Write a Python function to check if two strings are anagrams or not.\n\nassert isAnagram(\"anagram\",\"gramana\") == True\nassert isAnagram(\"anagramm\",\"gramana\") == False\nassert isAnagram(\"listen\",\"silent\") == True", "output": "def isAnagram(s1, s2): \r\n  \r\n    s1 = s1.replace(' ', '').lower() \r\n    s2 = s2.replace(' ', '').lower() \r\n  \r\n    return sorted(s1) == sorted(s2)", "id": 455, "avg_similarity_score": 0.039922103938677476}
{"instruction": "Write a function to check if an array contains a sequence of increasing numbers. Your code should pass these tests:\n\nassert check_increasing([1,2,3,4,5])==True\nassert check_increasing([9,1,2,3,4])==False\nassert check_increasing([1,2,1,3,4])==False", "output": "def check_increasing(arr): \r\n    n = len(arr) \r\n    counter = 1\r\n    if n == 0: \r\n        return False\r\n  \r\n    for i in range(1,n): \r\n        if arr[i] - arr[i - 1] >= 1: \r\n            counter += 1\r\n \r\n    if counter == n: \r\n        return True\r\n    else: \r\n        return False", "id": 456, "avg_similarity_score": 0.1333932265296527}
{"instruction": "Write a function to convert a given string into its sorted version. Your code should pass these tests:\n\nassert sortString(\"heya\")==\"aehy\"\nassert sortString(\"happay\")==\"ahppay\"\nassert sortString(\"seperated\")==\"aceeeprstd\"", "output": "def sortString(string):\n     arr = list(string) \n        arr.sort()  \n        return ''.join(arr)", "id": 457, "avg_similarity_score": 0.005386524016074337}
{"instruction": "Write a function to sum the list of numbers using recursion. Your code should pass these tests:\n\nassert sumListRec([2,4,5])==11\nassert sumListRec([6,7,8])==21\nassert sumListRec([3,2,1])==6", "output": "def sumListRec(arg_list): \n    if not arg_list: \n        return 0\n    else: \n        return arg_list[0] + sumListRec(arg_list[1:])", "id": 458, "avg_similarity_score": 0.1503003357339884}
{"instruction": "Write a python function to search for a word and replace it with another word in a given paragraph. Your code should pass these tests:\n\nassert search_replace(\"This is a pen. I like a pen\", \"pen\", \"dog\") == \"This is a dog. I like a dog\"", "output": "def search_replace(paragraph, original, new):\r\n  temp = paragraph.split()  \r\n  for i in range(len(temp)):\r\n      if temp[i] == original:\r\n          temp[i] = new\r\n  return ' '.join(temp)", "id": 459, "avg_similarity_score": 0.13153592305694217}
{"instruction": "Write a Python program to create a list containing the cubes of odd numbers from a given list. Your code should pass these tests:\n\nassert cubes_odd_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 27, 125, 343, 729]", "output": "def cubes_odd_list(l):\r\n   res = []\r\n   for i in l:\r\n   if i % 2 != 0:\r\n     res.append(i ** 3)\r\n   return res", "id": 460, "avg_similarity_score": 0.2176859523725424}
{"instruction": "Write a function to convert 2-dimensional array to 1-dimensional array. Your code should pass these tests:\n\nassert convert_2Darray([[1,2,3], [4,5,6], [7,8,9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def convert_2Darray(arr):\r\n  res = []\r\n  for row in arr:\r\n    for e in row:\r\n      res.append(e)\r\n  return res", "id": 461, "avg_similarity_score": 0.018580959473078196}
{"instruction": "Write a Python program to remove the duplicate elements from a list. Your code should pass these tests:\n\nassert remove_duplicate_elements([1, 2, 3, 2, 3, 4, 3, 4, 2]) == [1, 2, 3, 4]", "output": "def remove_duplicate_elements(l):\n  res = []\r\n  for e in l:\r\n    if e not in res:\r\n      res.append(e)\r\n  return res", "id": 462, "avg_similarity_score": 0.1778238784652037}
{"instruction": "Write a python program to sort a list of tuples based on a specific element in the tuple. Your code should pass these tests:\n\nassert sort_tuple([(1, 3), (3, 2), (2, 1)], 0) == [(1, 3), (2, 1), (3, 2)]", "output": "def sort_tuple(l,index):\n  res = sorted(l, key=lambda x: x[index])\r\n  return res", "id": 463, "avg_similarity_score": 0.14912516752220348}
{"instruction": "Write a Python program to print all even numbers present in a list. Your code should pass these tests\n\nassert print_even_numbers([1, 4, 5, 6, 8, 7]) == [4, 6, 8]", "output": "def print_even_numbers(l):\n  res = []\r\n  for i in l:\n    if i % 2 == 0:\n      res.append(i)\n  return res", "id": 464, "avg_similarity_score": 0.14325939724443956}
{"instruction": "Write a Python code to sort a list of dictionaries based on given key. Your code should pass these tests:\n\nassert sort_dictionary([{'name': 'John', 'age': 25}, {'name': 'Adam', 'age': 40}, {'name': 'Bob', 'age': 30}], 'age') == [{'name': 'John', 'age': 25}, {'name': 'Bob', 'age': 30}, {'name': 'Adam', 'age': 40}]", "output": "def sort_dictionary(data, key): \n  res = sorted(data, key=lambda k: k[key]) \n  return res", "id": 465, "avg_similarity_score": 0.16396281023574097}
{"instruction": "Write a python function to generate a list of length N, containing the numbers in the Fibonacci sequence. Your code should pass these tests:\n\nassert fibonacci(7) == [1,1,2,3,5,8,13]\nassert fibonacci(4) == [1,1,2,3]\nassert fibonacci(2) == [1,1]", "output": "def fibonacci(n): \r\n    if n == 1 or n == 2:\r\n        return [1, 1]\r\n    x_prev, x_prev_prev = 1, 1\r\n    F = [x_prev, x_prev_prev]\r\n    for _ in range(n - 2):\r\n        x = x_prev + x_prev_prev\r\n        F.append(x)\r\n        x_prev_prev = x_prev\r\n        x_prev = x\r\n    return F", "id": 466, "avg_similarity_score": 0.1577090694434664}
{"instruction": "Write a python function to validate a password. Your code should check if the password is between 5 and 12 characters long and should contain at least one number and one special character. Your code should pass these tests:\n\nassert validate_password(\"password1!\") == True \nassert validate_password(\"password\") == False \nassert validate_password(\"password1\") == False", "output": "def validate_password(password): \r\n  symbol =[\"$\", \"#\", \"@\"] \r\n  val = True\r\n  \r\n  if len(password) < 5 and len(password) > 12: \r\n     return False\r\n  \r\n  if not any(char.isdigit() for char in password): \r\n     return False\r\n  \r\n  if not any(char in symbol for char in password): \r\n     return False\r\n  \r\n  if not any(char.isalpha() for char in password):\r\n     return False\r\n  \r\n  else: \r\n     return val", "id": 467, "avg_similarity_score": 0.08128332071644047}
{"instruction": "Write a python program to find the roots of a quadratic equation. Your code should pass these tests:\n\nassert roots(1,-2,1) == (1,1)\nassert roots(1,-3,2) == (1,2)\nassert roots(1,2,-3) == (-1,3)", "output": "import cmath\r\n\r\ndef roots(a,b,c): \r\n  d = (b**2) - (4*a*c) \r\n  \r\n  sol1 = (-b-cmath.sqrt(d))/(2*a) \r\n  sol2 = (-b+cmath.sqrt(d))/(2*a)  \r\n  \r\n  return sol1,sol2", "id": 468, "avg_similarity_score": 0.1953541137077889}
{"instruction": "Write a function to find the nth prime number. Your code should pass these tests:\n\nassert(nth_prime(1) == 2)\nassert(nth_prime(4) == 7)\nassert(nth_prime(10) == 29)", "output": "# Function to find nth prime number \r\ndef nth_prime(n): \r\n  \r\n    prime_list = [2] \r\n    # iterate from 3 to nth number \r\n    for i in range(3, n+1, 2): \r\n        for j in range(3, int(i ** 0.5) + 1, 2): \r\n            if i % j == 0: \r\n                break\r\n        else: \r\n            prime_list.append(i) \r\n  \r\n    return prime_list[-1]", "id": 469, "avg_similarity_score": 0.1252048089258656}
{"instruction": "Write a python function to convert a given number to its Roman representation. Your code should pass these tests:\n\nassert(roman_number(\"123\") == \"CXXIII\")\nassert(roman_number(\"15\") == \"XV\")\nassert(roman_number(\"350\") == \"CCCL\")", "output": "def roman_number(num): \r\n    values = [ 1000, 900, 500, 400, \r\n             100, 90, 50, 40, \r\n             10, 9, 5, 4, \r\n             1 ] \r\n    xl_num = [ \"M\", \"CM\", \"D\", \"CD\", \r\n               \"C\", \"XC\", \"L\", \"XL\", \r\n               \"X\", \"IX\", \"V\", \"IV\", \r\n               \"I\" ] \r\n    result = \"\" \r\n    for i in range(0, len(values)): \r\n        while num >= values[i]: \r\n            num -= values[i] \r\n            result += xl_num[i] \r\n    return result", "id": 470, "avg_similarity_score": 0.004807692307692307}
{"instruction": "Write a python function to calculate the number of days between two dates. Your code should pass these tests:\n\nassert days_calculator((2018, 9, 26), (2020, 1, 1)) == 635\nassert days_calculator((2016, 8, 3), (2020, 6, 7)) == 1464\nassert days_calculator((2020, 1, 24), (2020, 2, 3)) == 10", "output": "from datetime import date\r\n\r\ndef days_calculator(date1, date2):\r\n  d1 = date(*date1)\r\n  d2 = date(*date2)\r\n  return abs((d2-d1).days)", "id": 471, "avg_similarity_score": 0.14799032921937366}
{"instruction": "Write a python function to find common items from two lists. Your code should pass these tests:\n\nassert common_items([2, 8, 10], [3, 5, 2]) == [2]\nassert common_items([1, 2, 3], [2, 3, 4]) == [2, 3]\nassert common_items([1, 3, 5], [2, 4, 6]) == []", "output": "def common_items(list1, list2):  \r\n    res = []  \r\n    for x in list1: \r\n        if x in list2: \r\n            res.append(x) \r\n    return res", "id": 472, "avg_similarity_score": 0.0661157299293024}
{"instruction": "Write a python program to replace last value of tuples in a given list. Your code should pass these tests:\n\nassert replace_last_value([(10, 20, 40), (40, 50, 60), (70, 80, 90)], (10,5)) == [(10, 20, 10), (40, 50, 10), (70, 80, 10)]\nassert replace_last_value([(1, 4, 9), (5, 8, 3)], (4,9)) == [(1, 4, 4), (5, 8, 4)]\nassert replace_last_value([(7,2,3), (4,7,11)], (5,4)) == [(7,2,5), (4,7,5)]", "output": "def replace_last_value(test_list, new_tuple):\r\n    res = []\r\n    for tup in test_list:\r\n        tmp_list = list(tup)\r\n        tmp_list[-1] = new_tuple[1]\r\n        res.append(tuple(tmp_list))\r\n    return res", "id": 473, "avg_similarity_score": 0.19413373150722005}
{"instruction": "Write a python function to check whether all items in a dictionary are equal to given value. Your code should pass these tests: \n\nassert all_values_equal_to(\"ab\", {'a': 'ab', 'b': 'ab'}) == True\nassert all_values_equal_to(True, {'a': True, 'b': True, 'c': False}) == False\nassert all_values_equal_to(\"xy\", {'x': 'xy', 'y': 'xy', 'z': 'ab'}) == False", "output": "def all_values_equal_to(value, test_dict):\r\n    for v in test_dict.values():\r\n        if v != value: \r\n            return False\r\n    return True", "id": 474, "avg_similarity_score": 0.08481931213821074}
{"instruction": "Write a python program to calculate the Fibonacci sequence up to \"n\" elements. Your code should pass these tests:\n\nassert fibonacci(5) == [0, 1, 1, 2, 3]\nassert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nassert fibonacci(20) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]", "output": "def fibonacci(n): \r\n    f_sequence = []  \r\n    a = 0\r\n    b = 1\r\n    if (n <= 0):  \r\n        print(\"Please enter a positive integer\")  \r\n    else:\r\n        f_sequence.append(a)\r\n        for i in range(1,n):  \r\n            c = a + b\r\n            a = b\r\n            b = c\r\n            f_sequence.append(a)  \r\n    return f_sequence", "id": 475, "avg_similarity_score": 0.022599209624325742}
{"instruction": "Create a program that will reverse a list of strings and return the reversed output.Your code should pass these tests:\n\nassert reverseString([\"Life\", \"Is\", \"Interesting\"]) == [\"Interesting\", \"Is\", \"Life\"]\nassert reverseString([]) == []\nassert reverseString([\"A\",\"BC\",\"Hello!\"]) == [\"Hello!\", \"BC\", \"A\"]", "output": "def reverseString(arr): \r\n\tarr.reverse() \r\n\treturn arr", "id": 476, "avg_similarity_score": 0.1343303046654535}
{"instruction": "Write a python script using \"while loop\" to print the following output. Your code should pass these tests:\n\nOutput:\n\n1 2 3 4 9 \n2 3 4 9 \n3 4 9 \n4 9", "output": "n = 9\nwhile n >= 4:\n  for i in range(n, n-5, -1):\n    print(i, end = \" \")\n  print()\n  n -= 1", "id": 477, "avg_similarity_score": 0.08252831449580453}
{"instruction": "Create a recursive function to calculate the Nth fibonacci number. Your code should pass this test:\n\nassert NthFibonacci(9) == 34", "output": "def Fibonacci(n): \r\n\tif n<0: \r\n\t\tprint(\"Incorrect input\") \r\n\telif n==1: \r\n\t\treturn 0\r\n\telif n==2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) \n\ndef NthFibonacci(n): \r\n\treturn Fibonacci(n)", "id": 478, "avg_similarity_score": 0.09563350463556915}
{"instruction": "Create a function to calculate the sum of two complex numbers. Your code should pass this test:\n\nassert sum_complex(2+5j,1+3j) == (3+8j)", "output": "def sum_complex(comp1, comp2): \r\n   return (comp1.real + comp2.real) + (comp1.imag + comp2.imag)*1j", "id": 479, "avg_similarity_score": 0.10966338563086012}
{"instruction": "Create a function that will reverse the order of the elements of a given list. Your code should pass this test:\n\nassert reverse_list([\"A\", \"B\", \"C\"]) == [\"C\", \"B\", \"A\"]", "output": "def reverse_list(my_list): \n  return my_list[::-1]", "id": 480, "avg_similarity_score": 0.13574303045074723}
{"instruction": "Create a function to extract the first occurrence of a string from another string. Your code should pass this test:\n\nassert extract_str(\"w3resource\",\"resource\") == \"w3\"", "output": "def extract_str(text, element):\n  first_index = text.find(element)\n  return text[0 : first_index]", "id": 481, "avg_similarity_score": 0.11658027333519307}
{"instruction": "Create a function to extract all digits from a given string. Your code should pass this test:\n\nassert extr_digit(\"w3resource198\") == \"1981\"", "output": "def extr_digit(text): \r\n   result = '' \r\n   for i in text: \r\n      if i.isdigit(): \r\n         result+=i \r\n   return result", "id": 482, "avg_similarity_score": 0.11197025660662518}
{"instruction": "Create a python program to sum all the items in a given list. Your code should pass this test:\n\nassert sum_list([2, 4, 6, 8, 8]) == 28", "output": "def sum_list(input_list): \n  total = 0\n  for i in input_list:\n    total += i\n  return total", "id": 483, "avg_similarity_score": 0.13158725068355012}
{"instruction": "Create a function to count the number of times a substring occurs in a given string. Your code should pass this test:\n\nassert count_substr(\"salesforce is cool\", \"sales\") == 1", "output": "def count_substr(string, substr): \n    count = 0\n    start = 0\n    end = len(substr)\n    while True:\n        pos = string.find(substr, start, end)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n        end += 1\n    return count", "id": 484, "avg_similarity_score": 0.147012005180943}
{"instruction": "Create a function to assign a number to each character and convert it to a string. Your code should pass this test:\n\nassert char_to_int(\"ABC\") == \"10102011\"", "output": "def char_to_int(my_str):\n  result = \"\"\n  for i in my_str:\n    result += str(ord(i))\n  return result", "id": 485, "avg_similarity_score": 0.08249768402840613}
{"instruction": "Write a python function to return two numbers whose sum is equal to K and product is maximum. Your code should pass these tests:\n\nassert two_nums(6,2) == [3, 3]\nassert two_nums(2,5) == [1,2]\nassert two_nums(7,10) == [3,4]", "output": "def two_nums(k,p) : \r\n    a = k // 2 \r\n    b = k - a \r\n    if(a * b > p) : \r\n        a -= 1 \r\n        b = k - a \r\n    return [a, b]", "id": 486, "avg_similarity_score": 0.030936358020267694}
{"instruction": "Write a python function to determine whether a given number is a prime. Your code should pass these tests:\n\nassert is_prime(5) == True\nassert is_prime(84) == False\nassert is_prime(21) == False", "output": "def is_prime(n): \r\n    count = 0\r\n    i = 1\r\n    while i <= n : \r\n        if n % i == 0 : \r\n            count += 1\r\n        i += 1\r\n    return count == 2", "id": 487, "avg_similarity_score": 0.1655922230436222}
{"instruction": "Write a python function to check if a linked list is a palindrome. Your code should pass these tests:\n\nassert is_palindrome([7, 5, 3, 5, 7]) == True\nassert is_palindrome([3, 5, 5, 7]) == False\nassert is_palindrome([1, 2, 2, 3, 3, 2, 2, 1]) == True", "output": "def is_palindrome(lst): \n  temp = lst \n  rev = lst[-1::-1] \n  \n  if temp == rev: \n    return True\n  else: \n    return False", "id": 488, "avg_similarity_score": 0.1442994225089218}
{"instruction": "Write a python function to remove a specific item from a given list. Your code should pass this tests:\n\nassert remove_item([2,3,6,7],3) == [2,6,7]\nassert remove_item([1,2,3,4,5],4) == [1,2,3,5]\nassert remove_item([7,8,9],9) == [7,8]", "output": "def remove_item(list1, item):  \r\n    if item in list1: \r\n        list1.remove(item) \r\n    return list1", "id": 489, "avg_similarity_score": 0.06515840356961139}
{"instruction": "Write a python function to convert a given string to a list with each word from the string as a separate element. Your code should pass this tests:\n\nassert string_to_list(\"Hello World\") == [\"Hello\", \"World\"]\nassert string_to_list(\"Coding challenge\") == [\"Coding\", \"challenge\"]\nassert string_to_list(\"This is a test\") == [\"This\", \"is\", \"a\",\"test\"]", "output": "def string_to_list(string): \r\n    result = string.split() \r\n    return result", "id": 490, "avg_similarity_score": 0.0769617686396232}
{"instruction": "Write a python function to sort a given string alphabetically. Your code should pass these tests:\n\nassert alpha_sort(\"South Africa\") == \"AacerfiiSs\"\nassert alpha_sort(\"London\") == \"Ldonno\"\nassert alpha_sort(\"Dream\") == \"adeDmr\"", "output": "def alpha_sort(string): \r\n    return ''.join(sorted(string))", "id": 491, "avg_similarity_score": 0.17280402752372717}
{"instruction": "Write a python program to calculate the value of a given expression. Your code should pass these tests:\n\nassert calculate(\"(3+5)*7\") == 56\nassert calculate(\"(2+6)/2+8\") == 14\nassert calculate(\"2/4+2*3\") == 7", "output": "def calculate(exp): \r\n    return eval(exp)", "id": 492, "avg_similarity_score": 0.2322649059583813}
{"instruction": "Write a python program to find the number of pairs of substrings of a given string whose concatenation form a palindrome. Your code should pass these tests:\n\nassert palindrome_pairs(\"abxbaxb\") == 2\nassert palindrome_pairs(\"axbxba\") == 1\nassert palindrome_pairs(\"abcbaxx\") == 0", "output": "def palindrome_pairs(str): \r\n    c = 0\r\n    for i in range(len(str)): \r\n        for j in range(len(str)): \r\n            if i != j and str[i : j+1] == str[j : i-1 : -1] : \r\n                c += 1\r\n    return c", "id": 493, "avg_similarity_score": 0.18550904966099727}
{"instruction": "Write a python program to find the frequency of each element in a given array. Your code should pass these tests:\n\nassert frequency([1,2,1,3]) == {1:2, 2:1, 3:1}\nassert frequency([11,13,15,11,17,13]) == {11:2, 13:2, 15:1, 17:1}\nassert frequency([1,2,1,5,7,2]) == {1:2, 2:2, 5:1, 7:1}", "output": "def frequency(lst):  \r\n    frequency = {} \r\n    for item in lst: \r\n        if (item in frequency): \r\n            frequency[item] += 1\r\n        else: \r\n            frequency[item] = 1\r\n    return frequency", "id": 494, "avg_similarity_score": 0.23958759253395204}
{"instruction": "Write a python program to find a subsequence in a given string. Your code should pass these tests:\n\nassert find_subsequence(\"abcdefgh\",\"afh\") == True\nassert find_subsequence(\"abcdefgh\",\"ghi\") == False\nassert find_subsequence(\"hello world\",\"ll w\") == True", "output": "def find_subsequence(x,substr): \r\n    found = False\r\n    for i in range(len(x)): \r\n        if x[i:].startswith(substr): \r\n            found = True\r\n            break\r\n    return found", "id": 495, "avg_similarity_score": 0.2085444503506772}
{"instruction": "Write a function to check whether a given array is a subsequence of another array. Your code should pass these tests:\n\nassert is_Subsequence([8,6,5], [1,3,5,6,8,9]) == True\nassert is_Subsequence([2,7,12], [1,2,7,10,12]) == True\nassert is_Subsequence([4,3,13], [3,4,7,10,11]) == False", "output": "def is_Subsequence(arr1, arr2): \r\n    m = len(arr1) \r\n    n = len(arr2) \r\n  \r\n    j = 0 \r\n    i = 0\r\n    while (i<n and j<m): \r\n        if (arr2[i] == arr1[j]): \r\n            j += 1\r\n        i+= 1\r\n    return (j==m)", "id": 496, "avg_similarity_score": 0.16623681147723934}
{"instruction": "Write a python function to sort a given array of 0's, 1's and 2's. Your code should pass these tests:\n\nassert sort_Arr([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]) == [0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_Arr([0, 1, 1, 0, 1]) == [0, 0, 1, 1, 1]\nassert sort_Arr([2, 2, 0]) == [0, 2, 2]", "output": "def sort_Arr(arr): \r\n    count_0 = 0\r\n    count_1 = 0\r\n    count_2 = 0\r\n    for i in range(len(arr)): \r\n        if (arr[i] == 0): \r\n            count_0 += 1 \r\n        elif (arr[i] == 1): \r\n            count_1 += 1 \r\n        else: \r\n            count_2 += 1 \r\n    \r\n    i = 0\r\n    while (count_0 > 0): \r\n        arr[i] = 0\r\n        i += 1\r\n        count_0 -= 1\r\n    while (count_1 > 0): \r\n        arr[i] = 1\r\n        i += 1\r\n        count_1 -= 1\r\n    while (count_2 > 0): \r\n        arr[i] = 2\r\n        i += 1\r\n        count_2 -= 1\r\n    return arr", "id": 497, "avg_similarity_score": 0.1395302493980833}
{"instruction": "Write a python function to generate a linked list from a given array of integers. Your code should pass these tests:\n\nassert generate_List([1,3,6,8]) == [1->3->6->8]\nassert generate_List([2,7]) == [2->7]\nassert generate_List([7]) == [7]", "output": "class Node: \r\n    # Function to initialize node object \r\n    def __init__(self, data): \r\n        self.data = data # Assign data \r\n        self.next = None # Initialize next as null \r\n  \r\n# Linked list class contains a Node object \r\nclass LinkedList: \r\n  \r\n    # Function to initialize head \r\n    def __init__(self): \r\n        self.head = None\r\n  \r\n    # Method to generate list from given array \r\n    def generate_List(self, arr): \r\n        \r\n        # Start with empty list \r\n        start = None\r\n  \r\n        # Create a linked list from given array \r\n        for i in range(len(arr)): \r\n            data = arr[i] \r\n            node = Node(data) \r\n            if start is None: \r\n                start = node \r\n            else : \r\n                curr = start \r\n                while curr.next: \r\n                    curr = curr.next\r\n                curr.next = node \r\n        return start", "id": 498, "avg_similarity_score": 0.1790300616403248}
{"instruction": "Write a function to return the first and third element of a given list. Your code should pass these tests:\n\nassert get_first_third([1,2,3,4,5]) == (1,3)\nassert get_first_third([1,0,3,4,2]) == (1,3)\nassert get_first_third([-1,2,-3,4,5]) == (-1,-3)", "output": "def get_first_third(list1):\n  if len(list1) < 3:\n    return None\n  else:\n  \treturn (list1[0],list1[2])", "id": 499, "avg_similarity_score": 0.2197640898432435}
{"instruction": "Write a function that takes two lists and returns a list of all common elements, in the same order as they appear in the first list. Your code should pass these tests:\n\nassert common_elements([1,2,3],[2,3,4]) == [2,3]\nassert common_elements([1,0,3,2],[2,3,0,-1]) == [2,3,0]\nassert common_elements([12,2,5,3],[3,5,7,9]) == [3,5]", "output": "def common_elements(list1, list2):\n  common = []\n  for el in list1: \n    if el in list2: \n      common.append(el)\n  return common", "id": 500, "avg_similarity_score": 0.1233809137221029}
{"instruction": "Write a Python program to merge two given functions into one function. Your code should pass these tests:\n\nassert merge_function((lambda x: x + 3), (lambda x: x * 5))(2) == 13\nassert merge_function((lambda x: x + 2), (lambda x: x * 3))(4) == 20\nassert merge_function((lambda x: x * 2), (lambda x: x * 4))(3) == 24", "output": "def merge_function(func1,func2):\n  def function(x):\n    return func1(x) + func2(x)\n  return function", "id": 501, "avg_similarity_score": 0.012366931685627558}
{"instruction": "Write a function to find a number of palindrome in a list of words. Your code should pass these tests:\n\nassert num_palindromes([\"mom\",\"aabaa\",\"test\"]) == 2\nassert num_palindromes([\"wow\",\"abba\",\"tacocat\"]) == 2\nassert num_palindromes([]) == 0", "output": "def num_palindromes(words):\n  count = 0\n  for word in words:\n    if (word == word[::-1]):\n      count+=1\n  return count", "id": 502, "avg_similarity_score": 0.20053392090726924}
{"instruction": "Write a Python Function to check if any element is repeated in a given list.\n\nassert has_duplicates([1,2,3]) == False\nassert has_duplicates([1,3,4,1]) == True\nassert has_duplicates([1,2,3,2]) == True", "output": "def has_duplicates(list1):\n  seen_elements = set()\n  for el in list1:\n    if el in seen_elements:\n      return True\n    else:\n      seen_elements.add(el)\n  return False", "id": 503, "avg_similarity_score": 0.09087371535297716}
{"instruction": "Write a function to find the position of the string in the two dimensional array. Your code should pass these tests:\n\nassert find_position([['1','2','3'],['4','5','6']], '4') == (1,0)\nassert find_position([['a','b'],['c','d'],['e','f']], 'f') == (2,1)\nassert find_position([['Python','JS','Ruby'],['C++','Java','PHP'],['C#','Go','Rust']], 'Go') == (1,1)", "output": "def find_position(arr, val): \n   for i in range(0, len(arr)): \n      newArr = arr[i] \n      for j in range(0, len(newArr)): \n         if newArr[j] == val: \n            return (i, j) \n   return (-1, -1)", "id": 504, "avg_similarity_score": 0.1689771853688504}
{"instruction": "Write a Python function to find the last element from a given list. Your code should pass these tests:\n\nassert last_element([4,2,3,1]) == 1\nassert last_element([100,200,300,400]) == 400\nassert last_element([]) == None", "output": "def last_element(list1):\n  if len(list1) > 0:\n    return list1[-1]\n  else:\n    return None", "id": 505, "avg_similarity_score": 0.23246040974046736}
{"instruction": "Write a python program to calculate the block hash of a given string of characters. Your code should pass this test:\n\nassert calc_block_hash('qwertyuiopasdfghjklzxcvbnm') == '3ac7033f53128e7f15a704e687e9ea7f'", "output": "import hashlib \r\ndef calc_block_hash(str):\n    h = hashlib.sha256()\n    h.update(str.encode('utf-8'))\n    return h.hexdigest()", "id": 506, "avg_similarity_score": 0.1480980137809714}
{"instruction": "Write a python function to print the multiplication table of a given number. Your code should pass these tests:\n\nassert multiplication_table(3) == [[1,2,3],[2,4,6],[3,6,9]]\nassert multiplication_table(2) == [[1,2],[2,4]]", "output": "def multiplication_table(num):  \r\n    result = []  \r\n    for i in range(1, num+1):  \r\n        row = []  \r\n        for j in range(1,num+1):  \r\n            row.append(i*j)  \r\n        result.append(row)  \r\n       \r\n    return result", "id": 507, "avg_similarity_score": 0.22860083028514205}
{"instruction": "Write a python function to calculate the median of a given list of numbers. Your code should pass this test:\n\nassert median_list([2,4,1,7,9]) == 4", "output": "def median_list(list):  \r\n    list.sort()  \n    if len(list) % 2 == 0:  \r\n        return (list[len(list)//2 - 1] + list[len(list)//2])/2  \r\n    else:  \r\n        return list[len(list)//2]", "id": 508, "avg_similarity_score": 0.15355028694613082}
{"instruction": "Write a python function to find the sum of natural numbers in a range. Your code should pass this test:\n\nassert sum_numbers(2,4) == 9", "output": "def sum_numbers(start, end):  \r\n    sum = 0\r\n    for i in range(start, end + 1):  \r\n        sum += i \r\n    return sum", "id": 509, "avg_similarity_score": 0.14425483163878144}
{"instruction": "Write a function to determine if one string is a substring of another. Your code should pass this test:\n\nassert isSubstring('hello', 'hello world') == True\nassert isSubstring('goodbye', 'hello world') == False", "output": "def isSubstring(str1, str2):\r\n  return str1 in str2", "id": 510, "avg_similarity_score": 0.07590068977446356}
{"instruction": "Write a function to generate all subsequences of a string. Your code should pass these tests:\n\nassert list(subsequences('abc')) == ['', 'a', 'b', 'ab', 'c', 'ac', 'bc', 'abc']", "output": "def subsequences(string):\r\n  result = [\"\"]   \r\n  for i in string:\r\n    result.extend([sub + i for sub in result])   \r\n  return result", "id": 511, "avg_similarity_score": 0.1587623156243201}
{"instruction": "Write a function to delete all occurrences of a given element from an array and return a new array with remaining elements. Your code should pass this test:\n\nassert delete_all([1,2,3,2,1],2) == [1,3,1]", "output": "def delete_all(array, target): \r\n  output = [i for i in array if i != target] \r\n  return output", "id": 512, "avg_similarity_score": 0.10024418678140914}
{"instruction": "Write a function to generate all possible subsets of a given set. Your code should pass this test:\n\nassert list(all_subsets({1,2,3})) == [set(), {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}]", "output": "def all_subsets(s):\r\n  result = [set()]\r\n  for e in s:\r\n    result = result + [x | {e} for x in result]\r\n\r\n  return result", "id": 513, "avg_similarity_score": 0.09636478275895241}
{"instruction": "Write a function to perform deep sorting of a given list. Your code should pass this test:\n\nassert deep_sort([5,3,2,7,1,6,4]) == [1,2,3,4,5,6,7]", "output": "def deep_sort(L): \r\n  if L == []: \r\n    return []\r\n  else: \r\n    mid = L[0] \r\n    left = [x for x in L if x < mid]         \r\n    right = [x for x in L if x > mid] \r\n    return deep_sort(left) + [mid] + deep_sort(right)", "id": 514, "avg_similarity_score": 0.10026896539618423}
{"instruction": "Write a function to find the arithmetic mean of a give list. Your code should pass this test:\n\nassert find_mean([2,7,3,9,11]) == 6.4", "output": "def find_mean(L):\r\n  return sum(L) / len(L)", "id": 515, "avg_similarity_score": 0.12558118266093105}
{"instruction": "Write a function to calculate the sum of all elements in a 2D array. Your code should pass this test:\n\nassert sum_2d_array([[1, 2], [3, 4]]) == 10", "output": "def sum_2d_array(arr): \r\n  total = 0\r\n  for i in range(len(arr)) : \r\n    total += sum(arr[i]) \r\n  return total", "id": 516, "avg_similarity_score": 0.13018789367690284}
{"instruction": "Write a function to flatten a 2D array. Your code should pass this test:\n\nassert flatten_2d_array([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]", "output": "def flatten_2d_array(arr): \r\n    return  [i for x in arr for i in x]", "id": 517, "avg_similarity_score": 0.06395443779583028}
{"instruction": "Write a function to reverse a given list preserving the relative order of the elements. Your code should pass this test:\n\nassert reverse_preserve_order([1,2,3,4,5]) == [5,4,3,2,1]", "output": "def reverse_preserve_order(arr):\n  result = []\r\n  while len(arr) > 0:\r\n    result.append(arr.pop())\r\n    \r\n  return result", "id": 518, "avg_similarity_score": 0.11594070728069691}
{"instruction": "Write a python program to find the maximum subsequence of unique indices in an array. Your code should pass these tests:\n\nassert max_subseq_ind([7,4,6,8],4) == 3\nassert max_subseq_ind([1,2,2,3,3,4],6) == 4\nassert max_subseq_ind([1,2,2,2,3,3,3],7) == 2", "output": "def max_subseq_ind(arr, n):\n  s= []  \n  max_len = 0 \n\n  for i in range(0,n): \n    s.append(1) \n    \n  for i in range(1,n): \n    for j in range(0,i): \n      if(arr[i] == arr[j]): \n        break\n      if(arr[i] > arr[j]): \n        s[i] = max(s[i], s[j] + 1) \n    \n  for i in range(0,n): \n    if (max_len < s[i]): \n      max_len = s[i] \n    return max_len", "id": 519, "avg_similarity_score": 0.15273662846681707}
{"instruction": "Write a python program to check if three given numbers are Pythagorean Triplets. Your code should pass these tests:\n\nassert is_triplet(3,4,5) == True\nassert is_triplet(9,11,13) == True\nassert is_triplet(10,2,7) == False", "output": "def is_triplet(a,b,c) : \r\n    if a*a + b*b == c*c: \r\n        return True\r\n    else: \r\n        return False", "id": 520, "avg_similarity_score": 0.08764428749824123}
{"instruction": "Write an algorithm to list all permutations of a list with duplicates. Your code should pass these tests:\n\nassert permutations(['A','B'])==[[\u2018A\u2019, \u2018B\u2019], [\u2018B\u2019, \u2018A\u2019]]\nassert permutations([1,2,3])==[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nassert permutations([1,1,2])==[[1, 1, 2], [1, 2, 1], [2, 1, 1]]", "output": "def permutations(lst): \r\n   if len(lst) == 0: \r\n       return [] \r\n   if len(lst) == 1: \r\n       return [lst] \r\n   l = [] \r\n   for i in range(len(lst)): \r\n       m = lst[i] \r\n       remLst = lst[:i] + lst[i+1:] \r\n       for p in permutations(remLst): \r\n           l.append([m] + p) \r\n   return l", "id": 521, "avg_similarity_score": 0.15067404177451799}
{"instruction": "Write a function to remove duplicates from an array. Your code should pass these tests:\n\nassert remove_duplicates([1,2,2,3,4,3,5]) == [1,2,3,4,5]\nassert remove_duplicates([3,4,4,3,2,3,1]) == [3,4,2,1]\nassert remove_duplicates([5,6,7,7,5,4]) == [5,6,7,4]", "output": "def remove_duplicates(lst):\n  return list(set(lst))", "id": 522, "avg_similarity_score": 0.044463201822466575}
{"instruction": "Write a python function to find the nth element of the Fibonacci sequence. Your code should pass these tests:\n\nassert fibonacci_nth(6) == 8\nassert fibonacci_nth(20) == 6765\nassert fibonacci_nth(43) == 433494437", "output": "def fibonacci_nth(n):\r\n  if n<=0: \r\n    return 0\r\n  elif n==1: \r\n    return 1\r\n  else: \r\n    return fibonacci_nth(n-1) + fibonacci_nth(n-2)", "id": 523, "avg_similarity_score": 0.14619872557224758}
{"instruction": "Write a python function to calculate the sum of all prime numbers from 1 to an upper limit. Your code should pass these tests:\n\nassert prime_sum(10) == 17\nassert prime_sum(100) == 1060\nassert prime_sum(50) == 328", "output": "def prime_sum(n): \n  total = 0\n  for i in range(2,n + 1): \n    prime = True\n    for j in range(2,i): \n      if i % j == 0: \n        prime = False\n    if prime: \n      total += i \n  return total", "id": 524, "avg_similarity_score": 0.012831247270275691}
{"instruction": "Write a python function to calculate the number of ways to make change of a certain amount given coins of certain denominations. Your code should pass these tests:\n\nassert coin_change(7, [10,5,2]) == 3\nassert coin_change(12, [1,5,10]) == 5\nassert coin_change(5, [2,1]) == 3", "output": "def coin_change(n, coins): \n  table = [0 for i in range(n+1)] \n  table[0] = 1 \n  for i in range(len(coins)): \n    for j in range(coins[i],n+1): \n      table[j] += table[j-coins[i]] \n  return table[n]", "id": 525, "avg_similarity_score": 0.1490132148528931}
{"instruction": "Write a Python program to replace the last element in a list with another list. Your code should pass these tests:\n\nassert replace([1, 2, 3], [4,5,6]) == [1, 2, [4, 5, 6]]\nassert replace(['A', 'B', 'C', 'D'], ['X', 'Y', 'Z']) == ['A', 'B', 'C', ['X', 'Y', 'Z']]\nassert replace([], [1, 2,3]) == [[1, 2, 3]]", "output": "def replace(list_1, list_2): \r\n    list_1[-1] = list_2\r\n    return list_1", "id": 526, "avg_similarity_score": 0.16416874330915998}
{"instruction": "Write a Python program to find the occurrence of each letter in a string. Your code should pass these tests:\n\nassert letter_occurrence(\"abbcccddd\") == {'a': 1, 'b': 2, 'c': 3, 'd': 3}\nassert letter_occurrence(\"aabbccddee\") == {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2}\nassert letter_occurrence(\"abcdef\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}", "output": "def letter_occurrence(text): \n  result = {} \n  for c in text: \n    if c in result: \n      result[c] += 1\n    else: \n      result[c] = 1\n  return result", "id": 527, "avg_similarity_score": 0.2117330049133671}
{"instruction": "Write a python function that computes the leading digit in a non-negative integer. Your code should pass these tests:\n\nassert leading_digit(321) == 3\nassert leading_digit(4215) == 4\nassert leading_digit(95) == 9", "output": "def leading_digit(num): \r\n    while (num >= 10): \r\n        num = num / 10; \r\n  \r\n    return int(num);", "id": 528, "avg_similarity_score": 0.13777159727718338}
{"instruction": "Write a python program to reverse a stack using the same stack. Your code should pass these tests:\n\nassert stack_reverse([3, 5, 8, 6]) == [6, 8, 5, 3]\nassert stack_reverse([1, 2]) == [2, 1]\nassert stack_reverse([]) == []", "output": "def reverse_stack(stack): \r\n    if len(stack) == 0: \r\n        return; \r\n  \r\n    temp = stack.pop();    # pop out the first element from stack \r\n    reverse_stack(stack);   # reverse the remaining stack \r\n    insert_at_bottom(stack, temp);  # push the first element to bottom \r\n  \r\n# Utility function to push an  \r\n# element to bottom of a stack \r\ndef insert_at_bottom(stack, item): \r\n    if len(stack) == 0: \r\n        stack.append(item); \r\n        return \r\n  \r\n    temp = stack.pop(); \r\n    insert_at_bottom(stack, item); \r\n    stack.append(temp); \n    \r\ndef stack_reverse(stack): \r\n    reverse_stack(stack); \r\n    return stack", "id": 529, "avg_similarity_score": 0.12058381192614852}
{"instruction": "Write a python program to calculate the angle between the hands of a clock at noon. Your code should pass these tests:\n\nassert calc_angle(12) == 0\nassert calc_angle(1) == 30\nassert calc_angle(3) == 90", "output": "def calc_angle(time): \r\n  \r\n    # differentiating hour and minutes \r\n    angle_h = 0.5 * (60 * time) \r\n  \r\n    # Assuming the minute hand move by \r\n    # 6 degree in a minute \r\n    angle_m = 6 * time \r\n  \r\n    angle = abs(angle_h - angle_m) \r\n  \r\n    return min(360 - angle, angle)", "id": 530, "avg_similarity_score": 0.15183307357197645}
{"instruction": "Write a python program to sort numbers in ascending order using the Bubble Sort algorithm. Your code should pass these tests:\n\nassert bubbleSort([5, 2, 4, 1, 3]) == [1, 2, 3, 4, 5]\nassert bubbleSort([10, 9, 8, 7, 6]) == [6, 7, 8, 9, 10]\nassert bubbleSort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "output": "def bubbleSort(arr): \r\n    n = len(arr) \r\n  \r\n    for i in range(n): \r\n  \r\n        for j in range(0, n-i-1): \r\n  \r\n            if arr[j] > arr[j+1] : \r\n                arr[j], arr[j+1] = arr[j+1], arr[j] \r\n  \r\n    return arr", "id": 531, "avg_similarity_score": 0.08080042489243337}
{"instruction": "Write a python program to find the longest increasing sequences in an array of integers. Your code should pass these tests:\n\nassert longestIncreasingSequence([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert longestIncreasingSequence([1, 3, 2, 5, 3, 4]) == [1, 2, 3, 4]\nassert longestIncreasingSequence([5, 4, 3, 2, 1]) == [1]", "output": "def longestIncreasingSequence(arr): \r\n  \r\n    n = len(arr) \r\n  \r\n    # LIS Values for all indexes \r\n    lis = [1]*n \r\n  \r\n    # Compute optimized LIS values in bottom up manner \r\n    for i in range (1 , n): \r\n        for j in range(0 , i): \r\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n  \r\n    # Pick maximum of all LIS values \r\n    maximum = 0\r\n  \r\n    for i in range(n): \r\n        maximum = max(maximum , lis[i]) \r\n  \r\n    return maximum", "id": 532, "avg_similarity_score": 0.14535392062519087}
{"instruction": "Write a Python program to generate all combinations of a string from list of strings.\n\nassert list_combinations(['A', 'B', 'C']) == [['A'], ['B'], ['C'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B', 'C']]", "output": "def list_combinations(lst):\r\n  combinations = []\r\n  # Generate all combinations by looping \r\n  for i in range(len(lst)):\r\n    for j in range(i+1, len(lst)+1):\r\n      combinations.append(lst[i:j])\r\n  \r\n  return combinations", "id": 533, "avg_similarity_score": 0.09745563847828811}
{"instruction": "Write a Python program to return the sublist with maximum sum from a given list. Your code should pass these tests:\n\nassert max_sum_sublist([-2, -3, 4, -1, -2, 1, 5, -3]) == [4, -1, -2, 1, 5]\nassert max_sum_sublist([1, -2, 3, 4, -4]) == [3, 4]\nassert max_sum_sublist([-1, -2, -8, -9]) == [-1]", "output": "def max_sum_sublist(nums): \n    size = len(nums) \n  \n    # max_sum_so_far stores the maximum sum \n    # of sub-array found so far \n    max_sum_so_far = -float('inf') \n  \n    # stores the maximum sum of sub-array \n    # ending at current position \n    max_ending_here = 0\n  \n    # traverse the given array \n    for i in range(0, size): \n  \n        # update max_ending_here \n        max_ending_here += nums[i] \n  \n        # if maximum sum is is smaller than 0, \n        # then start with a sub-array from new index \n        # or else include nums[i] to build \n        # a bigger sub-array \n        max_ending_here = max(max_ending_here, 0); \n  \n        # update maximum sum found so far \n        max_sum_so_far = max(max_sum_so_far, max_ending_here) \n  \n    result = list() \n    temp = max_sum_so_far \n  \n    for i in range(size - 1, -1, -1): \n        if (temp - nums[i] >= 0): \n            result.append(nums[i]) \n            temp -= nums[i] \n  \n    return result[::-1]", "id": 534, "avg_similarity_score": 0.19233915653424277}
{"instruction": "Write a function to calculate the sum of the squares of the digits in a number. Your code should pass these tests:\n\nassert sum_squares(18)==53\nassert sum_squares(504)==97\nassert sum_squares(321)==37", "output": "def sum_squares(num):\r\n  result=0\r\n  while num>0:\r\n    digit= num%10\r\n    result+=digit**2\r\n    num= int(num/10)\r\n  return result", "id": 535, "avg_similarity_score": 0.1823935382562002}
{"instruction": "Write a function to replace all instances of a substring in a string with the given replacement. Your code should pass these tests:\n\nassert replace_substring(\"hello there\",\"e\",\"a\")==\"hallo thara\"\nassert replace_substring(\"cat dog cat\",\"cat\",\"monkey\")==\"monkey dog monkey\"\nassert replace_substring(\"iiiiiii\",\"i\",\"a\")==\"aaaaaaa\"", "output": "def replace_substring(string, old_word, new_word):\n  return string.replace(old_word, new_word)", "id": 536, "avg_similarity_score": 0.18138220452417478}
{"instruction": "Write a function to calculate the number of values which are greater than a given value in a given list. Your code should pass these tests:\n\nassert count_gt([1,2,3,4,5,6], 4) == 2\nassert count_gt([10,20,30,-1], 0) == 3\nassert count_gt([1,2,3], 10)==0", "output": "def count_gt(list1, val):\n  count = 0\r\n  for i in list1:\r\n    if i > val:\r\n      count += 1\r\n  return count", "id": 537, "avg_similarity_score": 0.20179456579291352}
{"instruction": "Write a function to invert the order of a list. Your code should pass these tests:\n\nassert reverse([\"apple\",\"banana\",\"orange\"]) == [\"orange\", \"banana\", \"apple\"]\nassert reverse([1,2,3,4])== [4,3,2,1]\nassert reverse([5,6,7,8,9])==[9,8,7,6,5]", "output": "def reverse(list1):\r\n  return list1[::-1]", "id": 538, "avg_similarity_score": 0.2124541938863205}
{"instruction": "Write a function to calculate the lengths of the longest common substrig in two specified strings. Your code should pass these tests:\n\nassert lcs(\"hello\", \"chello\")==4\nassert lcs(\"yellow\", \"yale\")==2\nassert lcs(\"fire\", \"water\")==0", "output": "def lcs(a, b): \r\n    lengths = [[0 for j in range(len(b)+1)] for i in range(len(a)+1)]\r\n    for i, x in enumerate(a):\r\n        for j, y in enumerate(b):\r\n            if x == y:\r\n                lengths[i+1][j+1] = lengths[i][j] + 1\r\n            else:\r\n                lengths[i+1][j+1] = max(lengths[i+1][j], lengths[i][j+1])\r\n    return lengths[-1][-1]", "id": 539, "avg_similarity_score": 0.13796492148936995}
{"instruction": "Write a function to concatenate two given lists of the same length. Your code should pass these tests:\n\nassert concat_lists([5,6,7],[1,2,3]) == [5,6,7,1,2,3]\nassert concat_lists([7,8,9],[4,5,6]) == [7,8,9,4,5,6]\nassert concat_lists([1],[2]) == [1,2]", "output": "def concat_lists(list1,list2):\n  resultList = list1 + list2\n  return resultList", "id": 540, "avg_similarity_score": 0.12079257444555341}
{"instruction": "Write a function that takes a number as an argument, and returns a boolean value indicating whether the number is prime or not. Your code should pass these tests:\n\nassert is_Prime(3) == True\nassert is_Prime(8) == False\nassert is_Prime(7) == True", "output": "def is_Prime(n): \r\n    if (n <= 1): \r\n        return False\r\n    if (n <= 3): \r\n        return True\r\n    if (n % 2 == 0 or n % 3 == 0): \r\n        return False\r\n    i = 5\r\n    while(i * i <= n): \r\n        if (n % i == 0 or n % (i + 2) == 0):  \r\n            return False\r\n        i = i + 6\r\n    return True", "id": 541, "avg_similarity_score": 0.10674540719904228}
{"instruction": "Write a python function to find the maximum multiple of 3 for a given number. Your code should pass these tests:\n\nassert max_multiple_of_3(20) == 18\nassert max_multiple_of_3(15) == 15\nassert max_multiple_of_3(13) == 12", "output": "def max_multiple_of_3(n): \r\n    n=n-n%3\r\n    return n", "id": 542, "avg_similarity_score": 0.2249614902147894}
{"instruction": "Write a python function to multiply all elements of a given list of numbers. Your code should pass these tests:\n\nassert multiply_List([2, 4, 6]) == 48\nassert multiply_List([4, 2, 3]) == 24\nassert multiply_List([2, 4, 8]) == 128", "output": "def multiply_List(lst): \r\n    result = 1\r\n    for x in lst: \r\n         result = result * x  \r\n    return result", "id": 543, "avg_similarity_score": 0.2088830778784673}
{"instruction": "Write a python function to parse a given string into a dictionary of unique words and their occurrences in the string. Your code should pass these tests:\n\nassert parse_String(\"This is an example string\") == {'This': 1, 'is': 1, 'an': 1, 'example': 1, 'string': 1}\nassert parse_String(\"Love is a powerful emotion\") == {'Love':1, 'is':1, 'a':1, 'powerful':1, 'emotion':1} \nassert parse_String(\"It is important to understand code\") == {'It':1, 'is':1, 'important':1, 'to':1, 'understand':1, 'code':1}", "output": "def parse_String(s): \r\n    result = {}\r\n    for word in s.split(): \r\n        if word in result.keys(): \r\n            result[word]+=1\r\n        else: \r\n            result[word] = 1\r\n    return result", "id": 544, "avg_similarity_score": 0.1483876146522137}
{"instruction": "Write a python function to reverse the elements of a given list. Your code should pass these tests:\n\nassert reverse_List([1, 2, 3]) == [3, 2, 1]\nassert reverse_List([4, 5, 6, 7, 8]) == [8, 7, 6, 5, 4]\nassert reverse_List([8, 7, 6]) == [6, 7, 8]", "output": "def reverse_List(lst): \r\n    lst.reverse() \r\n    return lst", "id": 545, "avg_similarity_score": 0.25773949519945405}
{"instruction": "Write a python function to find the Least Common Character (LCC) in a given string. Your code should pass these tests:\n\nassert LCC(\"cppzzq\") == 'z'\nassert LCC(\"mississippi\") == 'i'\nassert LCC(\"princess\") == 'n'", "output": "def LCC(s): \n    count = {} \n    min_index = 0\n    for i in s: \n        if i in count: \n            count[i] += 1\n        else: \n            count[i] = 1\n        if min_index == 0 or count[i] < count[min_index]: \n            min_index = i \n    return min_index", "id": 546, "avg_similarity_score": 0.21152547418665274}
{"instruction": "Write a python function to convert a given string of characters into a list of tuples (string, index). Your code should pass these tests:\n\nassert convert_string(\"My name is John\")==[('M', 0), ('y', 1), (' ', 2), ('n', 3), ('a', 4), ('m', 5), ('e', 6), (' ', 7), ('i', 8), ('s', 9), (' ', 10), ('J', 11), ('o', 12), ('h', 13), ('n', 14)]\nassert convert_string(\"Hello\")==[('H', 0), ('e', 1), ('l', 2), ('l', 3), ('o', 4)]\nassert convert_string(\"Hello World\")==[('H', 0), ('e', 1), ('l', 2), ('l', 3), ('o', 4), (' ', 5), ('W', 6), ('o', 7), ('r', 8), ('l', 9), ('d', 10)]", "output": "def convert_string(s): \r\n    # Convert the characters into tuples \r\n    res = [(i, s.index(i)) for i in s] \r\n  \r\n    return res", "id": 547, "avg_similarity_score": 0.16419621925151748}
{"instruction": "Write a Python program to generate a matrix of combinations of two lists. Your code should pass these tests:\n\nassert generate_matrix([1,2], [2,3])==[[1, 2], [1, 3], [2, 2], [2, 3]]\nassert generate_matrix([1,2,3], [2,3,4])==[[1, 2], [1, 3], [1, 4], [2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4]]\nassert generate_matrix([2,3], [3,4])==[[2, 3], [2, 4], [3, 3], [3, 4]]", "output": "import itertools \n\ndef generate_matrix(list1, list2): \r\n    res = list(itertools.product(list1, list2)) \r\n  \r\n    return res", "id": 548, "avg_similarity_score": 0.13073462221630489}
{"instruction": "Write a Python function to check is a given number is prime or not. Your code should pass these tests:\n\nassert prime_check(37) == True\nassert prime_check(48) ==  False\nassert prime_check(103) == True", "output": "def prime_check(num): \r\n  \r\n    if num > 1: \r\n        for i in range(2, num): \r\n            if (num % i) == 0: \r\n                return False\r\n              \r\n        return True\r\n  \r\n    else: \r\n        return False", "id": 549, "avg_similarity_score": 0.16197573896347878}
{"instruction": "Write a Python program to find the product of two given numbers using recursion. Your code should pass these tests:\n\nassert product_num_recursive(3,4)== 12\nassert product_num_recursive(5,2)== 10\nassert product_num_recursive(2,3)== 6", "output": "def product_num_recursive(x, y): \r\n  \r\n    if x == 0 or y == 0: \r\n        return 0\r\n    elif y == 1: \r\n        return x \r\n    else: \r\n        return product_num_recursive(x, y-1) + x", "id": 550, "avg_similarity_score": 0.1898139614378973}
{"instruction": "Write a Python program to print all N-K length sublists of a given list. Your code should pass these tests:\n\nassert print_sublist([1, 2, 3, 4],2)==[[1,2],[2,3],[3,4],[1,3],[2,4],[1,4]]\nassert print_sublist([1, 2, 3, 4],3)==[[1,2,3],[2,3,4],[1,3,4]]\nassert print_sublist([2, 3, 4, 5],4)==[[2,3,4,5]]", "output": "def print_sublist(list1, n): \r\n  \r\n    subs = [list1[i:i + n] for i in range(len(list1)- (n - 1))] \r\n  \r\n    return subs", "id": 551, "avg_similarity_score": 0.1811548620865514}
{"instruction": "Write a Python program to compute the sum of all items in a given list of integers. Your code should pass these tests:\n\nassert compute_sum([1,2,3]) == 6\nassert compute_sum([4,5,6,7]) == 22\nassert compute_sum([2,3,4,5,6,7,8]) == 36", "output": "def  compute_sum(list1): \r\n  return sum(list1)", "id": 552, "avg_similarity_score": 0.2310044597660676}
{"instruction": "Write a program to find if a number is a palindrome or not. Your code should pass these tests:\n\nassert check_Palin(123) == False\nassert check_Palin(121) == True\nassert check_Palin(1221) == True", "output": "def check_Palin(num): \r\n    temp = num\r\n    rev = 0\r\n      \r\n    while(num > 0): \r\n        dig = num% 10\r\n        rev = rev * 10 + dig\r\n        num = num // 10\r\n    \r\n    if (rev == temp): \r\n        return True\r\n    else: \r\n        return False", "id": 553, "avg_similarity_score": 0.15087746020097031}
{"instruction": "Write a program to print an array in the sorted order. Your code should pass these tests:\n\narr = [3, 4, 2, 5, 1]\nassert sorted_array(arr) == [1, 2, 3, 4, 5]\narr = [5, 3, 6, 1, 8]\nassert sorted_array(arr) == [1, 3, 5, 6, 8]", "output": "def sorted_array(arr):\n    #merge sort implementation\r\n    if len(arr) > 1: \r\n        mid = len(arr)//2  #Finding the mid of the array \r\n        L = arr[:mid]  # Dividing the array elements  \r\n        R = arr[mid:] # into 2 halves \r\n  \n        sorted_array(L) # Sorting the first half \r\n        sorted_array(R) # Sorting the second half \r\n  \r\n        i = j = k = 0\n          \r\n        while i < len(L) and j < len(R):\r\n            if L[i] < R[j]: \r\n                arr[k] = L[i] \r\n                i+=1\r\n            else: \r\n                arr[k] = R[j] \r\n                j+=1\r\n            k+=1\r\n          \r\n        while i < len(L): \r\n            arr[k] = L[i] \r\n            i+=1\r\n            k+=1\r\n          \r\n        while j < len(R): \r\n            arr[k] = R[j] \r\n            j+=1\r\n            k+=1\n\r\n    return arr", "id": 554, "avg_similarity_score": 0.09882594833206122}
{"instruction": "Write a program to rotate a list of n elements to the left by k steps. Your code should pass these tests:\n\narr = [1,2,3,4,5,6]\nk = 2\nassert rotate_left(arr, k) == [3,4,5,6,1,2]\narr = [1,2,3,4,5]\nk = 3\nassert rotate_left(arr, k) == [4,5,1,2,3]", "output": "def rotate_left(arr, k): \r\n    n = len(arr) \r\n    mod = k % n \r\n    result = [0] * n \r\n    for i in range(n): \r\n        result[i] = arr[(mod + i)%n] \r\n    return result", "id": 555, "avg_similarity_score": 0.0749549816495666}
{"instruction": "Write a program to find if a given array contains a given number. Your code should pass these tests:\n\narr = [2,6,3,4,7]\nassert contains_num(arr, 7) == true\narr = [6,4,2,3]\nassert contains_num(arr, 5) == false", "output": "def contains_num(arr, num): \r\n    for n in arr: \r\n        if n == num: \r\n            return True\r\n    else: \r\n        return False", "id": 556, "avg_similarity_score": 0.18740100142992103}
{"instruction": "Write a python program to compute the sum of the Fibonacci sequence up to the nth term. Your code should pass these tests:\n\nassert Fibonacci_sum_convergence(7) == 33\nassert Fibonacci_sum_convergence(8) == 54\nassert Fibonacci_sum_convergence(3) == 4", "output": "def Fibonacci_sum_convergence(n): \r\n    if n < 0: \r\n        print(\"Incorrect input\") \r\n    elif n == 1: \r\n        return n \r\n    elif n == 2: \r\n        return n \r\n    else: \r\n        A = 0\r\n        B = 1\r\n        C = 0\r\n        summation = 1\r\n  \r\n        for i in range(2,n): \r\n            C = A + B \r\n            summation += C \r\n            A = B \r\n            B = C \r\n        return summation", "id": 557, "avg_similarity_score": 0.08369774422884362}
{"instruction": "Write a Python Function to calculate the GCD for two integers. Your code should pass the following tests:\n\nassert GCD(6, 9) == 3\nassert GCD(9, 15) == 3\nassert GCD(16, 24) == 8", "output": "def GCD(a,b): \r\n\r\n    if a == 0: \r\n        return b \r\n    if b == 0: \r\n        return a \r\n  \r\n    if a == b: \r\n        return a \r\n  \r\n    if a > b: \r\n        return GCD(a-b, b) \r\n    return GCD(a, b-a)", "id": 558, "avg_similarity_score": 0.060988707362856255}
{"instruction": "Write a function to calculate the greatest common divisor. Your code should pass these tests:\n\nassert gcd(30,20) == 10\nassert gcd(20,45) == 5\nassert gcd(3,7) == 1", "output": "def gcd(a,b): \r\n      \r\n    if(b == 0): \r\n        return a \r\n    else: \r\n        return gcd(b, a % b)", "id": 559, "avg_similarity_score": 0.08701217458518079}
{"instruction": "Write a function to generate a random number between two given numbers. Your code should pass these tests:\n\nassert generateRandom(10,25) > 10\nassert generateRandom(10,25) < 35\nassert type(generateRandom(10,25)) == int", "output": "import random\r\ndef generateRandom(low,high): \r\n\r\n    return random.randint(low,high)", "id": 560, "avg_similarity_score": 0.16440394354872925}
{"instruction": "Write a function to perform Binary Search on a sorted list. Your code should pass these tests:\n\nassert binary_search([1,3,6,7,8,9], 9) == True\nassert binary_search([1,2,3,4,5,6], 0) == False\nassert binary_search([], 0) == False", "output": "def binary_search(arr,search_item): \r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n  \r\n    while low <= high: \r\n      mid = (low + high) // 2\r\n  \r\n      if arr[mid] == search_item: \r\n        return True \r\n  \r\n      elif arr[mid] < search_item: \r\n        low = mid + 1\r\n  \r\n      else: \r\n        high = mid - 1\r\n    return False", "id": 561, "avg_similarity_score": 0.10788791660177113}
{"instruction": "Write a function to find the range of a set of numbers. Your code should pass these tests:\n\nassert findRange([2, 3, 8, 5, 4, 9]) == 7\nand assert findRange([6, 3, 4, 2, 0, L 10]) == 10\nassert findRange([-5, 2, -4, 0, 9]) == 14", "output": "def findRange(arr): \r\n    maximum = 0\r\n    minimum = arr[0] \r\n    for i in range(1, len(arr)): \r\n        if arr[i] > maximum: \r\n            maximum = arr[i] \r\n        if arr[i] < minimum: \r\n            minimum = arr[i] \r\n  \r\n    return (maximum - minimum)", "id": 562, "avg_similarity_score": 0.20785437745204957}
{"instruction": "Write a function to generate a random password with 10 characters long. Your code should pass these tests:\n\nassert len(generatePassword()) == 10\nassert re.search('[0-9]', generatePassword())\nassert re.search('[A-Z]', generatePassword())\nassert re.search('[a-z]', generatePassword())", "output": "import string \r\nimport random \r\n  \r\ndef generatePassword(): \r\n  \r\n    chars = string.ascii_letters + string.digits \r\n    password = \"\".join(random.choice(chars) for i in range(10)) \r\n  \r\n    return password", "id": 563, "avg_similarity_score": 0.08631044070417877}
{"instruction": "Write a function to calculate the minimum number of steps it takes to convert one string to another. Your code should pass these tests:\n\nassert min_steps(\"abc\", \"def\") == 3\nassert min_steps(\"abc\", \"ghi\") == 6\nassert min_steps(\"abcd\", \"acbd\") == 2", "output": "def min_steps(s1, s2): \r\n  \r\n    # Base Cases \r\n    if len(s1) == 0: \r\n        return len(s2) \r\n  \r\n    if len(s2) == 0: \r\n        return len(s1) \r\n  \r\n    # If last characters of two strings are same,  \r\n    # ignore last characters and get count for  \r\n    # remaining strings. \r\n    if s1[-1] == s2[-1]: \r\n        return min_steps(s1[:-1], s2[:-1]) \r\n  \r\n    # If last characters are not same, consider all  \r\n    # possibilities and find minimum \r\n    return 1 + min( min_steps(s1[:-1], s2), min_steps(s1, s2[:-1]), min_steps(s1[:-1], s2[:-1]) )", "id": 564, "avg_similarity_score": 0.003402198524149744}
{"instruction": "Write a function to find the maximum difference between two elements in an array. Your code should pass these tests:\n\nassert max_diff([2, 1, 5, 6, 7]) == 6\nassert max_diff([-2, -9, -6, -5, 0]) == 8\nassert max_diff([-1, 10, 4, 3, 9]) == 19", "output": "def max_diff(arr): \r\n  \r\n    # Initialize max and min  \r\n    max_elem = arr[0] \r\n    min_elem = arr[0] \r\n  \r\n    # Traverse array elements  \r\n    for i in range(1, len(arr)): \r\n  \r\n        # Maximum element \r\n        if arr[i] > max_elem: \r\n            max_elem = arr[i] \r\n  \r\n        # Minimum element \r\n        if arr[i] < min_elem: \r\n            min_elem = arr[i] \r\n  \r\n    # Difference between maximum \r\n    # and minimum elements \r\n    return max_elem - min_elem", "id": 565, "avg_similarity_score": 0.13805751332627791}
{"instruction": "Write a function to count the number of anagrams in a list of words. Your code should pass these tests:\n\nassert count_anagrams(['car', 'arc', 'acre', 'ecra']) == 2\nassert count_anagrams(['car', 'cab', 'cat']) == 0\nassert count_anagrams(['cab', 'abc', 'bca']) == 3", "output": "from collections import Counter \r\n  \r\ndef count_anagrams(words): \r\n    cnt = 0\r\n    for i in range(len(words)): \r\n        for j in range(len(words)): \r\n  \r\n            # check if two words are anagrams \r\n            if (i != j and Counter(words[i]) == Counter(words[j])): \r\n                cnt += 1\r\n    return cnt", "id": 566, "avg_similarity_score": 0.21480128503979712}
{"instruction": "Given a non-empty array of integers, Write a function to find the second smallest element. Your code should pass these tests:\n\nassert second_smallest([2, 5, 4, 1, 3]) == 2\nassert second_smallest([9,8,7,6,5,4,4]) == 5\nassert second_smallest([2,3,4,5,6,7, 8]) == 3", "output": "def second_smallest(arr): \r\n    # Initialize first and second smallest \r\n    smaller, smaller2 = arr[0], arr[1] \r\n   \r\n    # Traverse array elements from third and compare \r\n    # every element with current first and second smallest \r\n    for i in range(2,len(arr)): \r\n        if arr[i] < smaller: \r\n            smaller2 = smaller \r\n            smaller = arr[i] \r\n        elif arr[i] < smaller2: \r\n            smaller2 = arr[i]; \r\n    return smaller2", "id": 567, "avg_similarity_score": 0.13577506054642416}
{"instruction": "Write a function to reverse the order of the letters, in place. Your code should pass these tests:\n\nassert inplace_reverse(\"codegen\")==\"negedoc\"\nassert inplace_reverse(\"python\")==\"nohtyp\"\nassert inplace_reverse(\"cod\")==\"doc\"", "output": "def inplace_reverse(str1): \r\n    left, right = 0, len(str1) - 1\r\n  \r\n    # traverse string from both ends until \r\n    # 'left' and 'right' meet at the middle \r\n    while left < right: \r\n  \r\n        # swapping \r\n        str1[left], str1[right] = str1[right], str1[left] \r\n          \r\n        left += 1\r\n        right -= 1\r\n    return str1", "id": 568, "avg_similarity_score": 0.14484678865462539}
{"instruction": "Write a function to compare two strings for equality. Your code should pass these tests:\n\nassert comparison(\"Python\", \"Python\")==True\nassert comparison(\"abc\", \"cde\")==False\nassert comparison(\"aa\", \"ab\")==False", "output": "def comparison(str1, str2):  \r\n     \r\n    # Using in-built function \r\n    if (str1 == str2): \r\n        return True \r\n    else: \r\n        return False", "id": 569, "avg_similarity_score": 0.03163989062822161}
{"instruction": "Write a Python function to calculate cumlative product of elements in a list. Your code should pass these tests:\n\nassert pattern([1, 2, 3, 4]) == 24\nassert pattern([0, 1, 2, 3, 4]) == 0\nassert pattern([1, -2, -3, 4]) == -24", "output": "def pattern(s):\n    sum=1\n    for i in range(len(s)):\n        sum=s[i]*sum\n    return sum", "id": 570, "avg_similarity_score": 0.17489523982774838}
{"instruction": "Write a function to calculate the sum of the first n natural numbers. Your code should pass these tests:\n\nassert sum_natural_nos(3) == 6\nassert sum_natural_nos(15) == 120\nassert sum_natural_nos(20) == 210", "output": "def sum_natural_nos(n):\n  if n<=0:\n    return 0\n  else:\n    return n+(sum_natural_nos(n-1))", "id": 571, "avg_similarity_score": 0.14041582926195642}
{"instruction": "Write a code that takes a string and returns a count of all occurrences of each character. Your code should pass these tests:\n\nassert char_count('abbaccc') == {'a': 2, 'b': 2, 'c': 3}\nassert char_count('abcdeffg') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f':2, 'g': 1}", "output": "def char_count(str): \r\n    res = {} \r\n    for i in str: \r\n        if i in res: \r\n            res[i] += 1\r\n        else: \r\n            res[i] = 1\r\n    return res", "id": 572, "avg_similarity_score": 0.11142169815741879}
{"instruction": "Write a function to find the sum of elements in given range and summed at most k times. Your code should pass these tests:\n\nassert range_sum(3, 5, 2) == 11\nassert range_sum(2, 10, 3) == 42\nassert range_sum(2, 4, 4) == 10", "output": "def range_sum(start,end,k):\n      sum=0\r\n      for i in range(start,end+1): \r\n        if k>0: \r\n            sum=sum+(i*k) \r\n            k-=1 \r\n        else: \r\n            break\r\n    \r\n      return sum", "id": 573, "avg_similarity_score": 0.1608091295074969}
{"instruction": "Write a function to find maximum and minimum values in a given array. Your code should pass these tests:\n\nassert max_min([4, 2, 8, 6]) == (8, 2)\nassert max_min([7, 1, 3, 9]) == (9, 1)\nassert max_min([5, 4, 7, 11, 3]) == (11, 3)", "output": "def max_min(arr): \n    max = arr[0]\n    min = arr[0]\n    for num in arr: \n        if num > max: \n            max = num \n        elif num < min: \n            min = num \n    return (max, min)", "id": 574, "avg_similarity_score": 0.17698666654471287}
{"instruction": "Write a code to find how many unique combinations of length k can be formed. Your code should pass these tests:\n\nassert combination(3,2) == 6\nassert combination(5,3) == 10\nassert combination(8,4) == 70", "output": "def combination(n, k): \n    p = 1\n    for i in range(k): \n        p = p * (n - i) \n    q = 1\n    for j in range(1, k + 1): \n        q = q * j\n  \n    return int(p / q)", "id": 575, "avg_similarity_score": 0.06677055276888402}
{"instruction": "Write a code to flatten the nested list. Your code should pass these tests: \n\nassert flatten_list(['a',['b',['c','d'],'e'],'f']) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert flatten_list([[1,2,3], [4,5], 6, [[7,8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert flatten_list([[10,[11],12], 14,[15,[16,[17]]]]) == [10, 11, 12, 14, 15, 16, 17]", "output": "def flatten_list(lst): \n    res = []\n    for item in lst:\n        if isinstance(item, list):\n            for nitem in flatten_list(item):\n                res.append(nitem)\n        else:\n            res.append(item)\n    return res", "id": 576, "avg_similarity_score": 0.1095756723563772}
{"instruction": "Write a python function to get a string that made of the first two characters of a given string, if the length is less than 2 then return string instead of empty string. Your code should pass these tests: \n\nassert first_two('python') == 'py'\nassert first_two('py') == 'py'\nassert first_two('a') == 'a'", "output": "def first_two(word): \r\n    if len(word)<2: \r\n        return word \r\n    else: \r\n        return word[0:2]", "id": 577, "avg_similarity_score": 0.14271680659283137}
{"instruction": "Write a python function to calculate the power of a number using recursion pass in the two arguments. Your code should pass these tests:\n\nassert power(3, 1) == 3\nassert power(2, 4) == 16\nassert power(3, 3) == 27", "output": "def power(x,n): \r\n    if (n==0): \r\n        return 1\r\n    elif (int(n%2)==0): \r\n        y = power(x, int(n/2)) \r\n        return y*y \r\n    else: \r\n        return x*power(x, int(n/2)) *power(x, int(n/2))", "id": 578, "avg_similarity_score": 0.18104221223314673}
{"instruction": "Write a python function to count the number of occurrences of an item in a list. Your code should pass these tests:\n\nassert count([1,2,3,2,1,2],2) == 3\nassert count([1,2,1,4,3,2],3) == 1\nassert count([1,2,2,3],4) == 0", "output": "def count(list1,s): \n    count = 0\n    for item in list1: \n        if (item == s): \n            count = count + 1\n    return count", "id": 579, "avg_similarity_score": 0.20070482328356}
{"instruction": "Write a function to reverse a word with letter and character shuffling. Your code should pass these tests:\n\nassert scrambleWord('hello')=='olleh'\nassert scrambleWord('amazed')=='eazamd'\nassert scrambleWord('jargon')=='norgaj'", "output": "import random\n\ndef scrambleWord(word):\n    scrambled_word = []\n    for i in range(0, len(word)):\n        scrambled_word.append(word[i])\n    random.shuffle(scrambled_word)\n    return ''.join(scrambled_word)", "id": 580, "avg_similarity_score": 0.09209713394849094}
{"instruction": "Write a function to add up the elements of a two-dimensional matrix row-wise. Your code should pass thesetests: \n\nassert matrixRowSum([[5, 4], [3, 1], [2, 1]],2) == [4]\nassert matrixRowSum([[7, 4, 8], [3, 1, 3], [2, 1, 5]],3) == [15]\nassert matrixRowSum([[3, 6], [2, 4]],2) == [9]", "output": "def matrixRowSum(matrix, row):\r\n    return [sum(row) for row in matrix[row-1]]", "id": 581, "avg_similarity_score": 0.07313525675269127}
{"instruction": "Write a function to print a list containing all elements of a given list  in reverse order. Your code should pass these tests:\n\nassert revList([2,6,3,7,8])==[8,7,3,6,2]\nassert revList([-2,5,7,9])==[9,7,5,-2]\nassert revList([5,3,1])==[1,3,5]", "output": "def revList(li):\n    li.reverse() \n    return li", "id": 582, "avg_similarity_score": 0.18569580491279633}
{"instruction": "Write a function to calculate the Fibonacci number for a given number. The Fibonacci series is 0,1,1,2,3,5,8,13 and so on.Your code should pass these tests:\n\nassert Fibonacci(8)==21\nassert Fibonacci(10)==55\nassert Fibonacci(12)==144", "output": "def Fibonacci(n): \r\n    if n<0: \r\n        print(\"Incorrect input\") \r\n    elif n==1: \r\n        return 0\r\n    elif n==2 or n==3: \r\n        return 1\r\n    else: \r\n        return Fibonacci(n-1)+Fibonacci(n-2)", "id": 583, "avg_similarity_score": 0.13033447012921356}
{"instruction": "Write a function to return the sum of all even numbers between 0 and a specified number. Your code should pass these tests:\n\nassert sumOfEven(6)==12\nassert sumOfEven(7)==12\nassert sumOfEven(15)==56", "output": "def sumOfEven(n): \r\n    summ = 0 \r\n    for i in range(0,n+1): \r\n        if i%2 == 0: \r\n            summ += i  \r\n    return summ", "id": 584, "avg_similarity_score": 0.16334884645875933}
{"instruction": "Write a function to convert an inch to a centimeter. Your code should pass these tests:\n\nassert inchToCm(5) == 12.7 \nassert inchToCm(2) == 5.08 \nassert inchToCm(13) == 33.02", "output": "def inchToCm(inch):\n  #1 inch = 2.54 centimeter\n  return inch * 2.54", "id": 585, "avg_similarity_score": 0.11182601544893019}
{"instruction": "Write a function to count and print the number of even and odd numbers from a given list of numbers. Your code should pass these tests:\n\nassert count_even_odd([1, 2, 87, 42, 89, 63]) == [3,3] \nassert count_even_odd([1, 4, 8, 16]) == [4, 0]\nassert count_even_odd([25, 36, 75, 55, 41]) == [2, 3]", "output": "def count_even_odd(nums):\r\n  even_count = 0\r\n  odd_count = 0\r\n\r\n  for num in nums:\r\n    if num % 2 == 0:\r\n      even_count += 1\r\n    else:\r\n      odd_count += 1\r\n\r\n  return [even_count, odd_count]", "id": 586, "avg_similarity_score": 0.2026398054366561}
{"instruction": "Write a python function to format a date (month-day-year) as (month name, day , year). Your code should pass these tests:\n\nassert format_date('03-05-2007') == 'March 5, 2007' \nassert format_date('05-14-2017') == 'May 14, 2017' \nassert format_date('06-07-2019') == 'June 7, 2019'", "output": "import datetime\r\n\r\ndef format_date(date):\r\n  date_time_object = datetime.datetime.strptime(date, '%m-%d-%Y')\r\n  return date_time_object.strftime('%B %d, %Y')", "id": 587, "avg_similarity_score": 0.06454540025121858}
{"instruction": "Write a python function to find the longest sequence of consecutive numbers in a list of numbers. Your code should pass these tests:\n\nassert longest_sequence([2, 3, 4, 5, 8, 9, 10]) == [2, 3, 4, 5] \nassert longest_sequence([10, 11, 12, 13, 14, 15, 16]) == [10, 11, 12, 13, 14, 15, 16] \nassert longest_sequence([ 31, 32, 33, 34, 55, 56, 57, 58, 59]) == [55, 56, 57, 58, 59]", "output": "def longest_sequence(nums):\r\n    nums.sort()\r\n    longest_sequence = []\r\n    current_sequence = [nums[0]]\r\n\r\n    for i in range(1, len(nums)):\r\n        if nums[i] == nums[i-1] + 1:\r\n            current_sequence.append(nums[i])\r\n        else:\r\n            if len(current_sequence) > len(longest_sequence):\r\n                longest_sequence = current_sequence\r\n            current_sequence = [nums[i]]\r\n\r\n    if len(current_sequence) > len(longest_sequence):\r\n        longest_sequence = current_sequence\r\n\r\n    return longest_sequence", "id": 588, "avg_similarity_score": 0.213833636175785}
{"instruction": "Write a python program to convert RGB color to Hexadecimal. Your code should pass these tests:\n\nassert rgbToHex(255, 255, 255) == '#FFFFFF' \nassert rgbToHex(0, 255, 0) == '#00FF00' \nassert rgbToHex(255, 0, 0) == '#FF0000'", "output": "def rgbToHex(r, g, b): \r\n  \r\n    hex = \"#\"\r\n\r\n    bi= [r, g, b] \r\n    hex_values = {10 : 'A', 11 : 'B', 12 : 'C', 13 : 'D', 14 : 'E', 15 : 'F'} \r\n\r\n    for x in bi: \r\n        first = x // 16\r\n        second = x % 16\r\n        if first > 9: \r\n            hex += hex_values[first]\r\n        else: \r\n            hex += str(first) \r\n        if second > 9: \r\n            hex += hex_values[second] \r\n        else: \r\n            hex += str(second) \r\n  \r\n    return hex", "id": 589, "avg_similarity_score": 0.0}
{"instruction": "Write a python function to get the Fibonacci sequence of a number. Your code should pass these tests:\n\nassert generateFibonacciSeq(10) == [0,1,1,2,3,5,8] \nassert generateFibonacciSeq(7) == [0,1,1,2,3,5] \nassert generateFibonacciSeq(3) == [0,1,1]", "output": "def generateFibonacciSeq(num):\n  if num <= 0:\n    return []\n  elif num == 1:\n    return [0]\n  else:\n    seq = [0, 1]\n    for _ in range(2, num):\n      seq.append(seq[-2] + seq[-1])\n    return seq", "id": 590, "avg_similarity_score": 0.19300698106131012}
{"instruction": "Write a python program to generate all sets of three distinct numbers from 1 to 10 whose product is equal to 20. Your code should pass these tests:\n\nassert generate() == [(1, 5, 4), (2, 4, 5), (2, 10, 1)]", "output": "def generate():\r\n  result = []\r\n  for x in range(1, 11):\r\n    for y in range(x + 1, 11):\r\n      for z in range(y + 1, 11):\r\n        if x * y * z == 20:\r\n          result.append((x, y, z))\r\n  return result", "id": 591, "avg_similarity_score": 0.0}
{"instruction": "Write a function to populate two lists with different data types from a given tuple. Your code should pass these tests:\n\nassert tuplisting((1, 2.5, 'h'), 'int', 'float') == ([1], [2.5])\nassert tuplisting((-1, 0, 'o'), 'str', 'int') == (['o'], [-1, 0])\nassert tuplisting((4, 9.8, 'z', 'a'), 'float', 'str') == ([9.8], ['z', 'a'])", "output": "def tuplisting(tup, data_type1, data_type2):\r\n  res1 = []\r\n  res2 = []\r\n  for element in tup :\r\n    if isinstance(element, data_type1) :\r\n      res1.append(element)\r\n    elif isinstance(element, data_type2) :\r\n      res2.append(element)\r\n  return (res1, res2)", "id": 592, "avg_similarity_score": 0.12534016357491531}
{"instruction": "Write a function to find the missing number in a given range of integers. Your code should pass these tests:\n\nassert missing(11, 15) == 13\nassert missing (5, 8) == 6", "output": "def missing(start, end):\n  orig_list = list(range(start,end))\r\n  given_list = [x for x in orig_list if x%2 == 0]\n  for num in orig_list:\n    if num not in given_list:\n      return num", "id": 593, "avg_similarity_score": 0.22430864771310052}
{"instruction": "Write a python program to remove the value from the given List if the value is not in the given range. Your code should pass these tests:\n\nassert remove_value([2, -3, 4, 5, -6], -4, 4) == [2, 4, 5]\nassert remove_value([-2, 8, 9], 1, 7) == [-2, 8, 9]", "output": "def remove_value(lst, lower_bound, upper_bound):\r\n  result = [i for i in lst if lower_bound <= i <= upper_bound]\r\n  return result", "id": 594, "avg_similarity_score": 0.14425378699353386}
{"instruction": "Write a function to search for an element in a given sorted list using binary search. Your code should pass these tests:\n\nassert binary_search([1,2,3,4,5,6,7,8], 8) == 7\nassert binary_search([0,2,4,6,8], 4) == 2", "output": "def binary_search(lst, x):\r\n  lower_bound = 0\r\n  upper_bound = len(lst) - 1\r\n  while lower_bound <= upper_bound:\r\n    mid = (lower_bound + upper_bound)//2\r\n    if lst[mid] == x:\r\n      return mid\r\n    elif x < lst[mid]:\r\n      upper_bound = mid - 1\r\n    else:\r\n      lower_bound = mid + 1\r\n  return -1", "id": 595, "avg_similarity_score": 0.15402499987832952}
{"instruction": "Write a python program to sort a given list of strings using insertion sort. Your code should pass these tests:\n\nassert insert_sort(['cat', 'dog', 'hippo']) == ['cat', 'dog', 'hippo']\nassert insert_sort(['Horse', 'Apple', 'Banana']) == ['Apple', 'Banana', 'Horse']", "output": "def insert_sort(lst):\r\n   for index in range(1, len(lst)):\r\n      current = lst[index]\r\n      pos = index\r\n      while pos > 0 and lst[pos-1] > current:\r\n          lst[pos] = lst[pos-1]\r\n          pos = pos-1\r\n      lst[pos] = current\r\n   return lst", "id": 596, "avg_similarity_score": 0.1724201832608105}
{"instruction": "Create a function that prints prime numbers between two numbers. Your code should pass these tests:\n\nassert print_primes(2,11)==[2,3,5,7,11]\nassert print_primes(19,29)==[19,23,29]\nassert print_primes(1,50)==[2,3,5,7,11,13,17,19,23,29,31,\n37,41,43,47]", "output": "def isPrime(m): \r\n    if (m <= 1): \r\n        return False\r\n    if (m <= 3): \r\n        return True\r\n    if (m % 2 == 0 or m % 3 == 0): \r\n        return False\r\n    i = 5\r\n    while (i * i <= m) : \r\n        if (m % i == 0 or m % (i + 2) == 0) : \r\n            return False\r\n        i = i + 6\r\n    return True\r\n  \r\ndef print_primes(n1, n2): \r\n    l = [] \r\n    for i in range (n1, n2 + 1): \r\n        if(isPrime(i)): \r\n            l.append(i) \r\n              \r\n    return l", "id": 597, "avg_similarity_score": 0.10826639724316396}
{"instruction": "Design a code that finds the factors of a number. Your code should pass these tests:\n\nassert find_Factors(1)==[1]\nassert find_Factors(8)==[1,2,4,8]\nassert find_Factors(17)==[1,17]", "output": "def find_Factors(n): \r\n    l = [] \r\n    for i in range(1, n + 1): \r\n        if (n % i == 0) : \r\n            l.append(i) \r\n    return l", "id": 598, "avg_similarity_score": 0.1815305056109172}
{"instruction": "Create a function to determine the maximum depth of a tree. Your code should pass these tests:\n\nassert max_depth(tree1) == 4\nassert max_depth(tree2) == 3\nassert max_depth(tree3) == 2", "output": "def max_depth(node): \r\n    if node is None: \r\n        return 0 ;  \r\n  \r\n    else : \r\n  \r\n        left_height = max_depth(node.left) \r\n        right_height = max_depth(node.right) \r\n  \r\n        depth = max(left_height, right_height) + 1\r\n          \r\n        return depth", "id": 599, "avg_similarity_score": 0.1784087208456467}
{"instruction": "Create a function in Python to calculate the cosine similarity between two vectors of different lengths. Your code should pass these tests:\n\nassert cosine_similarity([1, 2, 3], [3, 4, 5]) == 0.974631846197076\nassert cosine_similarity([1, 2], [3, 4]) == 0.9838699100999074\nassert cosine_similarity([1, 3, 4], [4, 3, 1]) == -0.7071067811865476", "output": "import math \r\ndef cosine_similarity(vec1, vec2): \r\n  \r\n    dot_product = 0\r\n    first_norm = 0\r\n    second_norm = 0\r\n    for i in range(len(vec1)): \r\n        dot_product += (vec1[i] * vec2[i]) \r\n        first_norm += (vec1[i] ** 2) \r\n        second_norm += (vec2[i] ** 2) \r\n          \r\n    return float(dot_product) / (math.sqrt(first_norm) * math.sqrt(second_norm))", "id": 600, "avg_similarity_score": 0.13862599709462187}
{"instruction": "Write a python program to merge two sorted arrays and return an array with unique elements. Your code should pass the following tests:\n\nassert merge_arrays([1,2,3],[2,3,4]) == [1, 2, 3, 4]\nassert merge_arrays([2,3,4],[1,2,5]) == [1, 2, 3, 4, 5]\nassert merge_arrays([7,8,9],[1,2,2]) == [1, 2, 7, 8, 9]", "output": "def merge_arrays(arr1,arr2): \r\n    res = [] \r\n    for i in arr1: \r\n        if i not in res and i in arr2: \r\n            res.append(i) \r\n    for i in arr2: \r\n        if i not in res: \r\n            res.append(i) \r\n    return res", "id": 601, "avg_similarity_score": 0.041655266838805424}
{"instruction": "Create a function in Python to find the Longest Common Subsequence (LCS) between two strings. Your code should pass these tests:\n\nassert LCS(\"abcd\", \"abbcd\") == \"abcd\"\nassert LCS(\"abc\", \"bcd\") == \"bc\"\nassert LCS(\"abczz\", \"cbazz\") == \"bcz\"", "output": "def LCS(str1, str2): \r\n    m = len(str1) \r\n    n = len(str2) \r\n  \r\n    L = [[None]*(n + 1) for i in range(m + 1)] \r\n  \r\n    for i in range(m + 1): \r\n        for j in range(n + 1): \r\n            if i == 0 or j == 0 : \r\n                L[i][j] = 0\r\n            elif str1[i-1] == str2[j-1]: \r\n                L[i][j] = L[i-1][j-1]+1\r\n            else: \r\n                L[i][j] = max(L[i-1][j], L[i][j-1]) \r\n  \r\n    index = L[m][n] \r\n    lcs = [\"\"] * (index + 1) \r\n    lcs[index] = \"\" \r\n    i = m \r\n    j = n \r\n    while i > 0 and j > 0: \r\n\r\n        if str1[i-1] == str2[j-1]: \r\n            lcs[index - 1] = str1[i-1] \r\n            i -= 1\r\n            j -= 1\r\n            index -= 1\r\n  \r\n        elif L[i-1][j] > L[i][j-1]: \r\n            i -= 1\r\n        else: \r\n            j -= 1\r\n  \r\n    return \"\".join(lcs)", "id": 602, "avg_similarity_score": 0.13296466799628398}
{"instruction": "Write a python function to find the missing number in an array of consecutive numbers. Your code should pass these tests:\n\nassert find_Missing_No([3,1,5,2]) == 4\nassert find_Missing_No([2,3,5]) == 4\nassert find_Missing_No([2,4,6]) == 3", "output": "def find_Missing_No(arr): \r\n    n = len(arr) \r\n    total = (n + 1)*(n + 2)/2\r\n    sum_of_elements = sum(arr)  \r\n    return total - sum_of_elements", "id": 603, "avg_similarity_score": 0.16535432233861844}
{"instruction": "Write a Python function to find the substrings between two given strings. Your code should pass these tests:\n\nassert substring_Between(\"abc\",\"xyz\") == \"bc\"\nassert substring_Between(\"apple\",\"banana\") == \"ppl\"\nassert substring_Between(\"infinity\",\"code\") == \"initi\"", "output": "def substring_Between(str1,str2): \r\n    n1 = len(str1) \r\n    n2 = len(str2) \r\n    return str1[n1-1:n2]", "id": 604, "avg_similarity_score": 0.16253313884166032}
{"instruction": "Write a Python function to check whether an array is in ascending order. Your code should pass these tests:\n\nassert is_Ascending([2,3,5,4]) == False\nassert is_Ascending([1,4,7,9]) == True\nassert is_Ascending([1,6,2,4]) == False", "output": "def is_Ascending(arr): \r\n    n = len(arr) \r\n    for i in range(n-1): \r\n        if (arr[i] > arr[i+1]): \r\n            return False  \r\n    return True", "id": 605, "avg_similarity_score": 0.07136502897126877}
{"instruction": "Write a python function to print the next greater element of an element in an array. Your code should pass these tests:\n\nassert next_Greater([4,5,12,3,2],4) == 12\nassert next_Greater([13,7,6,12],12) == -1\nassert next_Greater([13,15,7,14],15) == -1", "output": "def next_Greater(arr, n): \r\n    for i in range(0, n):  \r\n        next = -1  \r\n        for j in range(i + 1, n):  \r\n            if arr[i] < arr[j]:  \r\n                next = arr[j]  \r\n                break  \r\n        print(str(arr[i]) + \"--\" + str(next))", "id": 606, "avg_similarity_score": 0.1365061258156435}
{"instruction": "Write a python program to print the elements of an array in the order they appear after cyclic rotation. Your code should pass these tests:\n\nassert cycle_Rot([1,2,3,4],2) == [3,4,1,2]\nassert cycle_Rot([4,8,2,1],3) == [2,1,4,8]\nassert cycle_Rot([9,3,5,7],1) == [7,9,3,5]", "output": "def cycle_Rot(arr,d): \r\n\tn = len(arr) \r\n\t# put elements in temperory array \r\n\ttempArr = [0] * n \n \t\r\n\t# copy elements from original array to temp array \r\n\tfor i in range(0,n): \r\n\t\ttempArr[(i+d)%n] = arr[i] \r\n\r\n\t# copy elements from temp array to original array \r\n\tfor i in range(0,n): \r\n\t\tarr[i] = tempArr[i] \r\n\t\t\r\n\tprint (arr)", "id": 607, "avg_similarity_score": 0.12734759681592545}
{"instruction": "Write a python program to find the sparse number of an array of integers, i.e. the number of elements that are different from the previous element. Your code should pass these tests:\n\nassert sparse_num([3,1,2,6,0,3,5,6,2]) == 4\nassert sparse_num([1,2,3,4,5,6,7,8,9]) == 1\nassert sparse_num([3,3,3,3,3]) == 0", "output": "def sparse_num(arr) : \r\n\tcount = 0\r\n\tfor i in range(1, len(arr)) : \r\n\t\tif arr[i] != arr[i-1] : \r\n\t\t\tcount = count + 1\r\n\treturn count", "id": 608, "avg_similarity_score": 0.12067944594556727}
{"instruction": "Write a python program to select a random number from a random sequence. Your code should pass these tests:\n\nassert random_num([2, 3, 5, 7], 3) == 5\nassert random_num([1, 3, 9], 4) == None\nassert random_num([10, 3, 15], 2) == 3", "output": "import random\ndef random_num(random_sequence, n) : \r\n\t\r\n\t# Get a random number from the sequence \r\n\trandNum = random.choice(random_sequence) \r\n\r\n\t# Check if the random number is the one we're looking for \r\n\tif randNum == n : \r\n\t\treturn n \r\n\telse : \r\n\t\treturn None", "id": 609, "avg_similarity_score": 0.11800278042631555}
{"instruction": "Write a python program to find the equilibrium index of an array. Your code should pass these tests:\n\nassert equilibrium ([-7,2,2,2,-7],5) == 2\nassert equilibrium ([3,4,-1,3,3],5) == 3\nassert equilibrium ([4,-5, 0, 4,-5],5) == 2", "output": "def equilibrium(arr,n): \r\n\tsum = 0; \r\n\tsum_left = 0; \r\n\t\r\n\t# Find the total sum of the array \r\n\tfor i in range(n): \r\n\t\tsum = sum + arr[i] \r\n\r\n\t# Add elements to the left side \r\n\tfor i in range(n): \r\n\t\tsum = sum - arr[i] # sum is now right side \r\n\t\t\n\t\tif sum_left == sum : \r\n\t\t\treturn i \r\n\t\t\r\n\t\tsum_left = sum_left + arr[i] \r\n\r\n\treturn -1", "id": 610, "avg_similarity_score": 0.15614111466065927}
{"instruction": "Write a python program to find the product of the three largest elements in a given array. Your code should pass these tests:\n\nassert largest_Product([5, 8, 4, 9, 3, 7],5) == 252\nassert largest_Product([1, 5, 3, 6, 4],5) == 120\nassert largest_Product([10, 15, 2, 8, 3],5) == 1200", "output": "def largest_Product(arr,n): \n\t\t# Three largest elements \n\tfirst = second = third = float('-inf') \n\tfor i in range(n):  \n\t\t# If current element is greater \n\t\t# than first and second element \n\t\tif arr[i] >= first: \n\t\t\tthird = second\t\t\t \r\n\t\t\tsecond = first\t\t\t \r\n\t\t\tfirst = arr[i] \r\n\r\n\t\t# If arr[i] is in between first and second \t\t \r\n\t\telif arr[i] >= second: \r\n\t\t\tthird  = second; \r\n\t\t\tsecond = arr[i]; \r\n\r\n\t\t# If arr[i] is in between second and third \t\t \r\n\t\telif arr[i] >= third: \r\n\t\t\tthird = arr[i]; \r\n\r\n\t# Return product of first, second and third. \r\n\treturn first * second * third", "id": 611, "avg_similarity_score": 0.2272050132801489}
{"instruction": "Write a python program that sorts a list of numbers in ascending order. Your code should pass these tests:\n\nassert sort_Ascending([8,1,6,9,3]) == [1,3,6,8,9]\nassert sort_Ascending([33,2,-1,5,8]) == [-1,2,5,8,33]", "output": "def sort_Ascending(nums): \r\n    nums.sort() \r\n    return nums", "id": 612, "avg_similarity_score": 0.14242509606756862}
{"instruction": "Write a python function to convert temperature from Celsius to Fahrenheit. Your code should pass these tests:\n\nassert convert_Cel_Fah(0) == 32\nassert convert_Cel_Fah(30) == 86\nassert convert_Cel_Fah(20) == 68", "output": "def convert_Cel_Fah(c): \r\n    return (c * (9/5)) + 32", "id": 613, "avg_similarity_score": 0.0}
{"instruction": "Write a python program to take the input a list of numbers and output the second largest number. Your code should pass these tests:\n\nassert second_Large([7,8,2]) == 7\nassert second_Large([7,6,5,1,2,3]) == 5\nassert second_Large([5,4,2,14,3,6]) == 6", "output": "def second_Large(nums): \r\n    largest = max(nums)\r\n    second_la = 0\n    for i in nums: \r\n        if i > second_la and i < largest: \r\n            second_la = i\r\n    return second_la", "id": 614, "avg_similarity_score": 0.17415074301134267}
{"instruction": "Write a python function to find the sum of even numbers in the list. Your code should pass these tests:\n\nassert find_sum_even([7,12,1,3,9]) == 12\nassert find_sum_even([11,2,4,7,5]) == 6\nassert find_sum_even([45,33,1,4,10]) ==14", "output": "def find_sum_even(nums): \r\n    return sum(num for num in nums if num % 2 == 0)", "id": 615, "avg_similarity_score": 0.19130951708456054}
{"instruction": "Write a python program to reverse the words in a sentence. Your code should pass this test:\n\nassert reverse_Sent('This is a sentence') == 'sentence a is This'", "output": "def reverse_Sent(s): \r\n    words = s.split() \r\n    words.reverse() \r\n    return ' '.join(words)", "id": 616, "avg_similarity_score": 0.10733724645019248}
{"instruction": "Write a python program to count number of vowels in a string. Your code should pass this test:\n\nassert count_Vowel('Hello World') == 3", "output": "def count_Vowel(str): \r\n    vowel = 'aeiou' \r\n    cnt = 0\r\n    for c in str: \r\n        if c in vowel: \r\n            cnt += 1\r\n    return cnt", "id": 617, "avg_similarity_score": 0.1201540950774167}
{"instruction": "Write a python program to check given number is prime or not. Your code should pass this test:\n\nassert prime_Number(7) == True", "output": "def prime_Number(num): \r\n    if num > 1: \r\n        for i in range(2, num): \r\n            if num % i == 0: \r\n                return False\r\n        else: \r\n            return True\n    else: \r\n        return False", "id": 618, "avg_similarity_score": 0.08150548291870414}
{"instruction": "Write a python function to iterate a set of numbers and find the difference between the consecutive numbers. Your code should pass this test:\n\nassert diff_Seq([2,4,6,8]) == [2,2,2]", "output": "def diff_Seq(seq): \r\n    diffs = [] \r\n    for i in range(1,len(seq)): \r\n        diffs.append(seq[i] - seq[i-1]) \r\n    return diffs", "id": 619, "avg_similarity_score": 0.10115453173444168}
{"instruction": "Write a python program to shuffle a given list. Your code should pass this test:\n\nassert shuffle_List([1,4,5,7]) == [5,1,7,4]", "output": "import random \r\ndef shuffle_List(nums): \r\n    random.shuffle(nums) \r\n    return nums", "id": 620, "avg_similarity_score": 0.10591902499548624}
{"instruction": "Write a python program to search given word in a string. Your code should pass this test:\n\nassert search_Word('Hello World', 'World') == True", "output": "def search_Word(str, word): \r\n    if word in str: \r\n        return True\r\n    else: \r\n        return False", "id": 621, "avg_similarity_score": 0.09816537015859368}
{"instruction": "Write a python function to generate a Fibonacci series up to n terms. Your code should pass this test:\n\nassert fibonacci(4) == [0, 1, 1, 2]", "output": "def fibonacci(n):  \r\n    if n <= 0:  \r\n        print(\"Incorrect input\")  \r\n    elif n == 1:  \r\n        return [0]  \r\n    elif n == 2:  \r\n        return [0,1]\r\n    else:  \r\n        fibo = [0,1]  \r\n        for i in range(2, n):  \r\n            fibo.append(fibo[i-1] + fibo[i-2])  \r\n        return fibo", "id": 622, "avg_similarity_score": 0.0316092461321375}
{"instruction": "Write a python function to calculate the sum of digits in a given number. Your code should pass this tests:\n\nassert sum_of_digits(423) == 9\nassert sum_of_digits(1234) == 10\nassert sum_of_digits(999) == 27", "output": "def sum_of_digits(n):\r\n    s = 0\r\n    while n > 0:\r\n        s += n%10\r\n        n = n//10\r\n    return s", "id": 623, "avg_similarity_score": 0.12926682567616482}
{"instruction": "Write a Python function to replace all occurrences of space, comma, or dot with a colon. Your code should pass this test:\n\nassert replace('My name is Robert',' ',':') == \"My:name:is:Robert\"", "output": "def replace(str1,char,rep_char): \r\n    return(str1.replace(char,rep_char))", "id": 624, "avg_similarity_score": 0.08177688441465862}
{"instruction": "Write a Python function to merge two given sorted lists into one sorted list. Your code should pass this test:\n\nassert merge([2, 4, 6], [1, 3, 5]) == [1, 2, 3, 4, 5, 6]", "output": "def merge(list1, list2): \r\n    merged_list = list1 + list2 \r\n    merged_list.sort() \r\n    return merged_list", "id": 625, "avg_similarity_score": 0.04453629453060559}
{"instruction": "Write a Python function to calculate the harmonic mean of two numbers. Your code should pass this test:\n\nassert harmonic_mean(4, 12) == 6", "output": "def harmonic_mean(x, y): \r\n  \r\n    return (2.0 * x * y) / (x + y)", "id": 626, "avg_similarity_score": 0.1097310531400377}
{"instruction": "Write a Python function to check whether an alphabet is vowel or not. Your code should pass this test:\n\nassert is_vowel('a') == True", "output": "def is_vowel(c): \r\n    if (c == 'a' or c == 'e' or c == 'i' \r\n    or c == 'o' or c == 'u'): \r\n        return True\r\n    else: \r\n        return False", "id": 627, "avg_similarity_score": 0.08704992667555239}
{"instruction": "Write a Python function to count the number of vowels and consonants in a given string. Your code should pass this test:\n\nassert count_vowel_consonant('The quick brown fox') == {'vowels': 5, 'consonants': 10}", "output": "def count_vowel_consonant(str): \r\n    v = 0\r\n    c = 0\r\n    for alph in str:  \r\n        if (alph == 'a' or alph == 'e' or alph == 'i' or \r\n            alph == 'o' or alph == 'u'): \r\n            v = v + 1\r\n        else: \r\n            c = c + 1\r\n    return {'vowels': v, 'consonants': c}", "id": 628, "avg_similarity_score": 0.14425331542804412}
{"instruction": "Write a python function to calculate the factorial of a given number. Your code should pass this test:\n\nassert factorial(5)==120", "output": "def factorial(num):\r\n  if (num <= 1):\r\n    return 1\r\n  else:\r\n    return num * factorial(num-1)", "id": 629, "avg_similarity_score": 0.14708186179840702}
{"instruction": "Write a function to find all the prime number in a given range. Your code should pass this test:\n\nassert find_prime_numbers(21,25) == [23, 25]", "output": "def find_prime_numbers(start,end):\r\n  prime_numbers = []\r\n  for num in range(start, end + 1):\r\n    if num > 1:\r\n      for i in range(2, num):\r\n        if (num % i) == 0:\r\n          break\r\n      else:\r\n        prime_numbers.append(num)\r\n  return prime_numbers", "id": 630, "avg_similarity_score": 0.15272569636899816}
{"instruction": "Write a function to reverse the order of words in a given string. Your code should pass this test:\n\nassert reverse_order(\"Hello World\") == 'World Hello'", "output": "def reverse_order(str):\r\n  words = str.split() \r\n  reverse_words = [word[::-1] for word in words] \r\n  return ' '.join(reverse_words)", "id": 631, "avg_similarity_score": 0.1636989040071665}
{"instruction": "Write a function to convert a given string to all lowercase letters.Your code should pass this test:\n\nassert to_lowercase(\"CODeX\") == 'codex'", "output": "def to_lowercase(str): \r\n  return str.lower()", "id": 632, "avg_similarity_score": 0.03803506193473668}
{"instruction": "Write a function for solving 3 equations with 3 unknowns.Your code should pass this test:\n\nassert solve_eqs([4, -1, 3, -15], [-1, 4, 1, 17], [1, -2, -3, 8]) == [-5, 2, 3]", "output": "def solve_eqs(eq1, eq2, eq3):\r\n    a = [[eq1[0], eq1[1], eq1[2]], \r\n         [eq2[0], eq2[1], eq2[2]], \r\n         [eq3[0], eq3[1], eq3[2]]] \r\n  \r\n    b = [eq1[3], eq2[3], eq3[3]] \r\n  \r\n    res = np.linalg.solve(a, b) \r\n  \r\n    return res", "id": 633, "avg_similarity_score": 0.06213388848078744}
{"instruction": "Write a function to find a number in a list using binary search. Your code should pass this test:\n\nassert binary_search([1,2,3,4], 3) == 2", "output": "def binary_Search(arr, l, r, x): \r\n  \r\n    while l <= r: \r\n  \r\n        mid = l + (r - l) // 2; \r\n          \r\n        if arr[mid] == x: \r\n            return mid \r\n          \r\n        elif arr[mid] < x: \r\n            l = mid + 1\r\n  \r\n        else: \r\n            r = mid - 1\r\n  \r\n    return -1", "id": 634, "avg_similarity_score": 0.12600320288514008}
{"instruction": "Write a function to sort a given list of strings, with case-insensitive order. Your code should pass these tests:\n\nassert sort_list(['ABC', 'def', 'ghi'])==['ABC', 'def', 'ghi']\nassert sort_list(['a','C','B'])==['a', 'B', 'C']\nassert sort_list(['banana', 'apple', 'Mango'])==['apple', 'Mango', 'banana']", "output": "def sort_list(string_list): \r\n    return sorted(string_list, key = lambda x:x.lower())", "id": 635, "avg_similarity_score": 0.16342836659527316}
{"instruction": "Write a Python program to find the longest common subsequence (LCS) of two given strings. Your code should pass these tests:\n\nassert lcs(\"abcde\", \"abc\") == 3\nassert lcs(\"ABCDGH\", \"AEDFHR\") == 3\nassert lcs(\"ABC\", \"ABC\") == 3", "output": "def lcs(string1, string2): \r\n    m = len(string1) \r\n    n = len(string2) \r\n  \r\n    l = [[0 for x in range(n+1)] for x in range(m+1)] \r\n  \r\n    for i in range(m+1): \r\n        for j in range(n+1): \r\n            if i == 0 or j == 0: \r\n                l[i][j] = 0\r\n            elif string1[i-1] == string2[j-1]: \r\n                l[i][j] = l[i-1][j-1] + 1\r\n            else: \r\n                l[i][j] = max(l[i-1][j], l[i][j-1]) \r\n  \r\n    return l[m][n]", "id": 636, "avg_similarity_score": 0.1751603687288196}
{"instruction": "Write a function to compute the maximum subarray sum in an array. Your code should pass these tests: \n\nassert max_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4])==6 \nassert max_sum_subarray([2, -2, 1, 4])==7 \nassert max_sum_subarray([-1, 4, -2, 3, -2])==5", "output": "def max_sum_subarray(arr): \r\n    max_sum = arr[0] \r\n    current_sum = arr[0]\r\n  \r\n    for i in range(1,len(arr)): \r\n        current_sum = max(arr[i], current_sum + arr[i]) \r\n        max_sum = max(current_sum, max_sum) \r\n          \r\n    return max_sum", "id": 637, "avg_similarity_score": 0.11300871108516447}
{"instruction": "Write a function to check if a given string is a valid IP address. Your code should pass these tests:\n\nassert valid_IP('10.0.2.1') == True\nassert valid_IP('255.255.255.255') == True\nassert valid_IP('0.0.0.0') == True", "output": "import re\r\n\r\ndef valid_IP(str1): \r\n  \r\n    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)'''\r\n   \r\n    if(re.search(regex, str1)): \r\n        return True\r\n          \r\n    else: \r\n        return False", "id": 638, "avg_similarity_score": 0.15427172566993808}
{"instruction": "Write a function to apply the Gauss algorithm for solving a system of linear equations. Your code should pass these tests:\n\nassert gauss([[5, 2, -1], [3, -2, 4],[2, 3, -5]], [12, -4, 19]) == [3, -2, 4]\nassert gauss([[3, 0, 2], [2, -1, 1], [1, 1, -1]], [-5, 2, 0]) == [2, -1, 1]\nassert gauss([[2 , 3 , -1], [2, 4, -5], [7, 6, 3]], [9, 4, 14]) == [2, 4, -5]", "output": "def gauss(A, b): \r\n    n = len(A) \r\n  \r\n    for row in range(0, n): \r\n  \r\n        # This loop will  reduce the current row by subtracting maximum \r\n        # to make all the elements of current row zero \r\n        for i in range(row+1, n): \r\n            factor = A[i][row]/A[row][row] \r\n            for j in range(row, n): \r\n                A[i][j] -= factor * A[row][j] \r\n  \r\n            # Increment coefficients \r\n            b[i] -= factor * b[row] \r\n              \r\n    # Compute the solution \r\n    x = [0 for i in range(n)] \r\n    x[n-1] = b[n-1]/A[n-1][n-1] \r\n    for i in range(n-2, -1, -1): \r\n        x[i] = b[i] \r\n        for j in range(i+1, n): \r\n            x[i] -= A[i][j] * x[j] \r\n        x[i] = x[i]/A[i][i] \r\n              \r\n    return x", "id": 639, "avg_similarity_score": 0.13094503409146652}
{"instruction": "Write a function to find a node at given index in a Linked List. Your code should pass these tests:\n\nassert get_node(head, 2) == 7\nassert get_node(head, 0) == 1\nassert get_node(head, 4) == 10", "output": "def get_node(head, index): \n    current_node = head \n    counter = 0\n    while (current_node is not None): \n        if (counter == index): \n            return current_node.data \n        counter += 1\n        current_node = current_node.next", "id": 640, "avg_similarity_score": 0.17514806074059575}
{"instruction": "Write a function to sort a list of dictionaries by a particular key value. Your code should pass these tests:\n\nassert sort_list_of_dict([{'name': 'Paul', 'age': 25}, {'name': 'Alice', 'age': 22}, {'name': 'Bob', 'age': 27}], 'name') == [{'name': 'Alice', 'age': 22}, {'name': 'Bob', 'age': 27}, {'name': 'Paul', 'age': 25}]\nassert sort_list_of_dict([{'name': 'Paul', 'age': 25}, {'name': 'Alice', 'age': 22}, {'name': 'Bob', 'age': 27}], 'age') == [{'name': 'Alice', 'age': 22}, {'name': 'Paul', 'age': 25}, {'name': 'Bob', 'age': 27}]", "output": "def sort_list_of_dict(list_of_dict, key): \n    sorted_list = sorted(list_of_dict, key=lambda k: k[key]) \n    return sorted_list", "id": 641, "avg_similarity_score": 0.14522109708406358}
{"instruction": "Write a function to create a 3-dimensional matrix filled with 0s. Your code should pass these tests:\n\nassert create_matrix(2, 3, 4) == [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]\nassert create_matrix(3, 3, 2) == [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]\nassert create_matrix(4, 5, 2) == [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]", "output": "def create_matrix(i, j, k): \n  \n    matrix = [[[0 for col in range(k)] \n               for col in range(j)] \n               for row in range(i)] \n                  \n    return matrix", "id": 642, "avg_similarity_score": 0.08462190833985675}
{"instruction": "Write a function to implement bubble sort in Python. Your code should pass these tests:\n\nassert bubble([12, 3, 5, 7, 19]) == [3, 5, 7, 12, 19]\nassert bubble([10, 20, 30, 40, 0, -5]) == [-5, 0, 10, 20, 30, 40]\nassert bubble([]) == []", "output": "def bubble(list): \n    length = len(list)\n    for i in range(length): \n        for j in range(length-1):\t\n            if list[j] > list[j+1] : \n                temp = list[j] \n                list[j]= list[j+1] \n                list[j+1]= temp\n    return list", "id": 643, "avg_similarity_score": 0.04198229916292445}
{"instruction": "Write a function to convert a decimal number to binary. Your code should pass these tests:\n\nassert decimal_to_binary(8) == 1000\nassert decimal_to_binary(42) == 101010\nassert decimal_to_binary(0) == 0", "output": "def decimal_to_binary(num): \n    if num > 1: \n        decimal_to_binary(num // 2) \n    print(num % 2, end = '')", "id": 644, "avg_similarity_score": 0.005870585411869815}
{"instruction": "Write a python function to find the sum of an array containing numbers in a range. Your code should pass these tests:\n\nassert arr_Sum([5,7,3,9],2,8) == 24\nassert arr_Sum([1,2,3,4],0,5) == 10\nassert arr_Sum([2,4,6,8],4,8) == 20", "output": "def arr_Sum(arr, lowest, highest): \r\n    arr_sum = 0 \r\n    for num in arr: \r\n        if(num >= lowest and num <= highest): \r\n            arr_sum += num \r\n    return arr_sum", "id": 645, "avg_similarity_score": 0.20248764486601026}
{"instruction": "Write a python function to check if the given tree is a full binary tree. Your code should pass these tests:\n\nassert is_Full_Binary_Tree([1,3,4,5,None,6,None,7],0) == False\nassert is_Full_Binary_Tree([1,2,3,4,5,None,7],0) == True\nassert is_Full_Binary_Tree([1,2,3,4],0) == False", "output": "def is_Full_Binary_Tree(arr, i): \n    if i >= len(arr) or not arr[i]: \n        return True \n    if not arr[2*i+1] and not arr[2*i+2]: \n        return True  \n    if arr[2*i+1] and arr[2*i+2]: \n        return is_Full_Binary_Tree(arr,2*i+1) and is_Full_Binary_Tree(arr,2*i+2) \n    return False", "id": 646, "avg_similarity_score": 0.1522507576100396}
{"instruction": "Write a python function to calculate number of distinct subsequences of a given string. Your code should pass these tests:\n\nassert count_Distinct_Subsequences('ababa') == 11\nassert count_Distinct_Subsequences('abba') == 8\nassert count_Distinct_Subsequences('ababbcc') == 35", "output": "def count_Distinct_Subsequences(string): \n    n = len(string) \n    dp = [[0 for y in range(n+1)] for x in range(n+1)] \n    for i in range(n+1): \n        dp[i][i] = 1 \n    for j in range(1,n+1): \n        for i in range(j-1,-1,-1):\n            dp[i][j-1] = (j - i + 1)*dp[i][j-1]\n            if(string[i] == string[j-1]):\n                dp[i][j] = dp[i][j-1] + dp[i+1][j-1] + dp[i][j-1]\n            else: \n                dp[i][j] = dp[i][j-1] - dp[i+1][j-1]\n    return dp[0][n]", "id": 647, "avg_similarity_score": 0.18281578572091792}
{"instruction": "Write a function to search an element in a sorted array. Your code should pass these tests:\n\nassert search(arr, 12) == 4\nassert search(arr, 4) == -1\nassert search([],7) == -1", "output": "def search(arr, x): \r\n    for i in range(len(arr)): \r\n        if arr[i] == x: \r\n            return i \r\n    return -1", "id": 648, "avg_similarity_score": 0.12775875168592202}
{"instruction": "Write a python function to detect cycle in a linked list. Your code should pass these tests:\n\nassert find_cycle([3,2,0,-4], 1) == True\nassert find_cycle([1,2], 0) == False\nassert find_cycle([], 0) == False", "output": "def find_cycle(arr, start):\n    visited = set()\n    current = start\n    while current < len(arr):\n        if current in visited:\n            return True\n        visited.add(current)\n        current = arr[current]\n    return False", "id": 649, "avg_similarity_score": 0.1370869213250193}
{"instruction": "Write a function to insert an element at the beginning of a linked list. Your code should pass these tests:\n\nassert insert_at_beginning([2, 3, 4], 5) == [5, 2, 3, 4]\nassert insert_at_beginning([4], 6) == [6, 4]\nassert insert_at_beginning([], 8) == [8]", "output": "def insert_at_beginning(arr, data):\n    arr.insert(0, data) \n    return arr", "id": 650, "avg_similarity_score": 0.17458095688010775}
{"instruction": "Write an algorithm to reverse an  array. Your code should pass these tests:\n\nassert reverse([1,2,3,4,5]) == [5,4,3,2,1]\nassert reverse([1,2,4,7]) == [7,4,2,1]\nassert reverse([1,2]) == [2,1]", "output": "def reverse(arr): \r\n\trev_arr = arr[::-1] \r\n\treturn rev_arr", "id": 651, "avg_similarity_score": 0.03790560145810101}
{"instruction": "Write a Python function to check if a string is a palindrome or not. The function should also ignore all non-alphanumeric characters in the string. Your code should pass these tests:\n\nassert is_Palindrome(\"race%^car\") == True\nassert is_Palindrome(\"A man, a plan, a canal: Panama\") == True\nassert is_Palindrome(\"ABBA\") == True", "output": "import re\ndef is_Palindrome(str): \r\n    str = re.sub(\"[^a-zA-Z0-9]\", \"\",str).lower() \r\n    return str == str[::-1]", "id": 652, "avg_similarity_score": 0.12685053575769886}
{"instruction": "Write a python function to implement a binary search algorithm. Your code should pass these tests:\n\nassert binary_Search([1,2,3,4,5], 3) == 2\nassert binary_Search([4,6,7,8,9], 8) == 3\nassert binary_Search([2,3,4,7,8], 5) == -1", "output": "def binary_Search(arr, x): \r\n  \r\n    l = 0\r\n    r = len(arr) - 1\r\n  \r\n    while l <= r: \r\n  \r\n        mid = l + (r - l) // 2; \r\n          \r\n        # Check if x is present at mid \r\n        if arr[mid] == x: \r\n            return mid \r\n  \r\n        # If x is greater, ignore left half \r\n        elif arr[mid] < x: \r\n            l = mid + 1\r\n  \r\n        # If x is smaller, ignore right half \r\n        else: \r\n            r = mid - 1\r\n      \r\n    # If we reach here, then the element \r\n    # was not present \r\n    return -1", "id": 653, "avg_similarity_score": 0.09360156502932362}
{"instruction": "Write a python function to find the size of a longest pallindromic subarray in a given list. Your code should pass these tests:\n\nassert longest_Pallindromic_Sub_arr([1,1,2,3,2,1,1]) == 6\nassert longest_Pallindromic_Sub_arr([1,2,3,3,2,1]) == 6\nassert longest_Pallindromic_Sub_arr([1,2,3,4]) == 2", "output": "def longest_Pallindromic_Sub_arr(arr): \r\n    n = len(arr) \r\n    table = [[0 for x in range(n)] for y \r\n                                    in range(n)] \r\n    maxLength = 1\r\n    i = 0\r\n    while (i < n): \r\n        table[i][i] = True\r\n        i = i + 1\r\n  \r\n    start = 0\r\n    i = 0\r\n    while (i < n - 1): \r\n        if (arr[i] == arr[i + 1]): \r\n            table[i][i + 1] = True\r\n            start = i \r\n            maxLength = 2\r\n        i = i + 1\r\n\r\n    k = 3\r\n    while (k <= n): \r\n        i = 0\r\n        while(i < (n - k + 1)):  \r\n            j = i + k - 1\r\n            if (table[i + 1][j - 1] and \r\n                        arr[i] == arr[j]): \r\n                table[i][j] = True\r\n  \r\n                if (k > maxLength): \r\n                    start = i \r\n                    maxLength = k \r\n            i = i + 1\r\n        k = k + 1 \r\n    return maxLength", "id": 654, "avg_similarity_score": 0.23352163031549572}
{"instruction": "Write a function to print sum of series 1 + 1/2 + 1/3 + ... + 1/n. Your code should pass these tests:\n\nassert sum_series(4)==2.083333333333333\nassert sum_series(6)==2.45\nassert sum_series(2)==1.5", "output": "def sum_series(n) : \r\n    s = 0\r\n    for i in range(1, n+1) : \r\n        s = s + 1/i \r\n    return s", "id": 655, "avg_similarity_score": 0.06757807692714583}
{"instruction": "Write a function to calculate the compound interest of a given principal amount for given number of years. Your code should pass these tests:\n\nassert compound_interest(20000, 0.1, 4) == 29834.06\nassert compound_interest(10000,0.06,2) == 12360.00\nassert compound_interest(15000,0.07,8) == 28225.32", "output": "def compound_interest(P, r, n) : \r\n    CI = P* (pow((1 + r / 100), n)) \r\n    return CI", "id": 656, "avg_similarity_score": 0.1827520688134879}
{"instruction": "Write a function to compute the number of segregations required to sort the given array. Your code should pass these tests:\n\nassert segregations_count([3,2,1]) == 3\nassert segregations_count([2,1,3,4]) == 2 \nassert segregations_count([1,4,3,2]) == 2", "output": "def segregations_count(arr): \n    count = 0\n  \n    for i in range(len(arr)):          \n        min = i \n        for j in range(i+1, len(arr)):  \n            if arr[min] > arr[j]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n        count = count + 1 \n    return count", "id": 657, "avg_similarity_score": 0.15423615205810878}
{"instruction": "Write a function to multiply two matrices.Your code should pass these tests:\n\nassert matrix_mul([[1,2], [2,1]], [[1,1], [3,4]]) == [[5,7], [7,9]]\nassert matrix_mul([[4,5], [6,7]], [[1,1], [2,3]]) == [[9,14], [13,20]]\nassert matrix_mul([[5,6], [7,8]], [[3,4], [2,1]]) == [[21,16], [33,26]]", "output": "def matrix_mul(X, Y): \n    result = [[0, 0],  \n            [0, 0]] \n    for i in range(len(X)): \n        for j in range(len(Y[0])): \n            for k in range(len(Y)): \n                result[i][j] += X[i][k] * Y[k][j] \n    return result", "id": 658, "avg_similarity_score": 0.024910595227893594}
{"instruction": "Write a python function to generate a list of all the substrings of a given string. Your code should pass these tests:\n\nassert substring('liverpool') == ['l','li','liv','live','liver','liverp','liverpo','liverpoo','liverpool','o', 'ol', 'oli', 'oliv', 'live', 'liver', 'iverp', 'iverpo', \r\n'iverpoo', 'iverpool', 'ver', 'verp', 'verpo', 'verpoo', 'verpool', 'er', 'erp', 'erpo', 'erpoo', 'erpool', 'r', 'rp', 'rpo', 'rpoo', 'rpool', 'p', 'po', 'poo', 'pool']", "output": "def substring(string): \r\n    substrings = [] \r\n    for i in range(len(string)): \r\n        for length in range(1,len(string)+1): \r\n            substrings.append(string[i:length])\r\n    return substrings", "id": 659, "avg_similarity_score": 0.229211488670798}
{"instruction": "Write a python function to check whether three points (x1, y1), (x2, y2) and (x3, y3) lie on the same line or not. Your code should pass these tests:\n\nassert is_on_same_line(1,1,2,2,3,3) == True\nassert is_on_same_line(1,2,4,6,5,10) == True\nassert is_on_same_line(2,3,5,3,4,6) == False", "output": "def is_on_same_line(x1,y1,x2,y2,x3,y3): \r\n    if  ((x3-x2) * (y2-y1) == (x2-x1) * (y3-y2)): \r\n        return True\r\n    else: \r\n        return False", "id": 660, "avg_similarity_score": 0.05998736311839591}
{"instruction": "Write a Python function to compute the sum of first n elements in an array. Your code should pass these tests:\n\nassert compute_sum([1, 2, 3, 4], 2) == 3\nassert compute_sum([2, 4, 6, 8], 4 ) == 20\nassert compute_sum([1, 3, 5, 7], 3) == 12", "output": "def compute_sum(arr, n): \n    result = 0\n    for i in range(n): \n        result += arr[i]  \n    return result", "id": 661, "avg_similarity_score": 0.14903037967249028}
{"instruction": "Write a Python function to compute the first n terms of the Fibonacci sequence. Your code should pass these tests:\n\nassert compute_fibonacci(8) == [1, 1, 2, 3, 5, 8, 13, 21]\nassert compute_fibonacci(5) == [1, 1, 2, 3, 5]\nassert compute_fibonacci(4) == [1, 1, 2, 3]", "output": "def compute_fibonacci(n): \n    result = [0, 1] \n    for i in range(2, n): \n        result.append(result[i-1] + result[i-2]) \n    return result[:n]", "id": 662, "avg_similarity_score": 0.11897337365225018}
{"instruction": "Define a printLog function that prints the current date and time and a message passed in by the user. Your code should pass these tests:\n\nassert printLog(\"Test Log\") == \"Today is Tue Feb 18 2020. Test Log\"\nassert printLog(\"Another Log\") == \"Today is Tue Feb 18 2020. Another Log\"", "output": "import datetime\n\ndef printLog(msg):\r\n  x = datetime.datetime.now()\r\n  return \"Today is \" + x.strftime(\"%a %b %d %Y\") + \". \" + msg", "id": 663, "avg_similarity_score": 0.11559032338346767}
{"instruction": "Write a function that calculates the sum of elements in a given sequence. Your code should pass these tests:\n\nassert sum_Elements([1,5,3,4]) == 13\nassert sum_Elements([2,4,6,10]) == 22", "output": "def sum_Elements(list):\n    s=0\n    for i in list:\n        s = s +i\n    return s", "id": 664, "avg_similarity_score": 0.21387019420311598}
{"instruction": "Define a printMultiples function that prints the multiples of a given number until the given number is reached. Your code should pass these tests:\n\nassert printMultiples(2) == \"2 4 6 8 10\"\nassert printMultiples(3) == \"3 6 9 12 15\"", "output": "def printMultiples(n): \r\n  \r\n    x = 1\r\n    for i in range(1, n+1): \r\n        x = i * n \r\n        print (x, end = \" \")  \r\n    return", "id": 665, "avg_similarity_score": 0.1727056854761758}
{"instruction": "Write a python function to find the total number of possible binary search tree from given keys. Your code should pass these tests:\n\nassert num_Trees(3) == 5\nassert num_Trees(4) == 14\nassert num_Trees(10) == 16796", "output": "def num_Trees(n): \r\n    catalan = [0] * (n + 1) \r\n    catalan[0] = 1\r\n    catalan[1] = 1\r\n    for i in range(2, n + 1): \r\n        catalan[i] = 0\r\n        for j in range(i): \r\n            catalan[i] = catalan[i] + catalan[j] * catalan[i-j-1] \r\n  \r\n    return catalan[n]", "id": 666, "avg_similarity_score": 0.10864993943696027}
{"instruction": "Write a python function to find the minimum points needed from given N sets to achieve M points. Your code should pass these tests:\n\nassert min_Points(3, 6) == [2,1,3]\nassert min_Points(3, 4) == [1,1,2]\nassert min_Points(2, 5) == [3,2]", "output": "def min_Points(N,M): \r\n    L = [0] * (N + 1) \r\n    L[1] = M \r\n    x = [0]*N \r\n  \r\n    for i in range(2, N + 1): \r\n        m = M \r\n        for j in range(1, M + 1): \r\n            if (j > L[i - 1] + 1): \r\n                break\r\n            if (m > L[i - j] + j): \r\n                m = L[i - j] + j \r\n            L[i] = m \r\n      \r\n    k = N \r\n    while (k > 0): \r\n        x[k - 1] = L[k] - L[k - 1] \r\n        k = k - x[k - 1] \r\n  \r\n    return x", "id": 667, "avg_similarity_score": 0.0007055475297720497}
{"instruction": "Write a Python program to find the minimum number of coins required to make a given value from an unlimited supply of coins of specific denominations. Your code should pass these tests: \n\nassert coin_Change(50, [1,2,5]) == 5\nassert coin_Change(50, [2,4,6]) == 6\nassert coin_Change(4, [1,2,3]) == 2", "output": "def coin_Change(num, denom):\r\n    dp = [[0 for i in range(num + 1)] \r\n             for j in range(len(denom) + 1)] \r\n             \r\n    for i in range(len(dp)): \r\n        dp[i][0] = 0\r\n  \r\n    for j in range(1, num + 1): \r\n        dp[0][j] = float(\"inf\") \r\n  \r\n    for i in range(1, len(dp)):\r\n        for j in range(1, num + 1): \r\n            if (denom[i - 1] <= j): \r\n                dp[i][j] = min(dp[i - 1][j], \r\n                               1 + dp[i][j - denom[i - 1]]) \r\n  \r\n            else: \r\n                dp[i][j] = dp[i - 1][j] \r\n  \r\n    return dp[len(denom)][num]", "id": 668, "avg_similarity_score": 0.1224915098943612}
{"instruction": "Write a Python program to print the dictionary in order of key. Your code should pass these tests:\n\nassert print_dict_order({2:1, 1:2, 4:3, 3:4}) == [1,2,3,4]\nassert print_dict_order({a:1, b:2, c:3}) == [\"a\",\"b\",\"c\"]\nassert print_dict_order({5:6, 4:7, 3:8}) == [3,4,5]", "output": "def print_dict_order(d): \r\n    list = [] \r\n    for key in sorted(d.keys()): \r\n        list.append(key) \r\n    return list", "id": 669, "avg_similarity_score": 0.14031592683805277}
{"instruction": "Write a python function to convert RGB to Hex. Your code should pass these tests:\n\nassert RGB_to_Hex(255,255,255) == \"#FFFFFF\"\nassert RGB_to_Hex(255,0,0) == \"#FF0000\"\nassert RGB_to_Hex(123,44,154) == \"#7B2C9A\"", "output": "def RGB_to_Hex(r,g,b): \r\n    hexR = hex(r) \r\n    hexG = hex(g) \r\n    hexB = hex(b) \r\n  \r\n    return \"#\" + hexR[2:] + hexG[2:] + hexB[2:]", "id": 670, "avg_similarity_score": 0.0}
{"instruction": "Write a function to generate a random password string with given length. Your code should pass these tests:\n\nassert random_password_length(10) == 10\nassert random_password_length(7) == 7\nassert random_password_length(15) == 15", "output": "import string \r\nimport random \r\n  \r\ndef random_password_length(n): \r\n    alpha = string.ascii_letters + string.digits \r\n    passwords = random.choice(alpha) \r\n    for i in range(n-1): \r\n        passwords += random.choice(alpha) \r\n    return passwords", "id": 671, "avg_similarity_score": 0.13706053650094518}
{"instruction": "Write a python function to convert a binary number to decimal. Your code should pass these tests:\n\nassert bin2Dec(101) == 5\nassert bin2Dec(1001) == 9\nassert bin2Dec(1111) == 15", "output": "def bin2Dec(binary):\r\n    decimal, i = 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10   \r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return decimal", "id": 672, "avg_similarity_score": 0.001056067588325653}
{"instruction": "Write a python function to check if two given strings are a rotation of each other or not. Your code should pass these tests:\n\nassert is_rotation(\"engineering\",\"gineeringen\") == True\nassert is_rotation(\"code\",\"deco\") == False\nassert is_rotation(\"coconut\",\"conutco\") == True", "output": "def is_rotation(s1, s2): \n    if len(s1) == len(s2): \n        temp = s1 + s1 \n        if s2 in temp: \r\n            return True \r\n    return False", "id": 673, "avg_similarity_score": 0.12926139265712602}
{"instruction": "Write a python function to find the largest subarray with equal no. of 0's and 1's Your code should pass these tests:\n\nassert findSubArr([1, 0, 1, 1, 1, 0, 0]) == 4\nassert findSubArr([1, 1, 0, 0, 1, 1, 1]) == 6\nassert findSubArr([1, 1, 1, 0, 0, 1, 1]) == 8", "output": "def findSubArr(arr): \r\n\r\n\t# Variables to store result values \r\n\tmaxsize = -1\r\n\tstartindex = 0\r\n\tendindex = 0\r\n\t\r\n\t# Take a sum 0 to traverse the given array \r\n\tsum = 0\r\n\t\r\n\t# Traverse the given array \r\n\tfor i in range(0, len(arr)): \r\n\t\t\r\n\t\t# The elements in array can be 0 or 1 \r\n\t\tif(arr[i] == 0): \r\n\t\t\tarr[i] = -1\r\n\t\t\r\n\t\t# Calculate sum till the index \r\n\t\tsum = sum + arr[i] \r\n\t\t\r\n\t\t# If sum is 0 then we'll get our desired \r\n\t\t# subarray , store its length \r\n\t\tif(sum == 0): \r\n\t\t\t\r\n\t\t\t# If length of current subarray is \r\n\t\t\t# greater than maxsize, then update \r\n\t\t\t# maxsize and store the subarray\r\n\t\t\tif(i+1 > maxsize): \r\n\t\t\t\tmaxsize = i+1\r\n\t\t\t\tendindex = i \r\n\t\t\t\t\r\n\t\t# Store the subarray start index \r\n\t\t# after updating maxsize \r\n\t\tif(sum + 1 == 0): \r\n\t\t\tstartindex = i + 1\r\n\t\r\n\t# Return the maximum length subarray \r\n\treturn maxsize", "id": 674, "avg_similarity_score": 0.11282723962679977}
{"instruction": "Write a function to find all the prime numbers up to a specified value. Your code should pass these tests:\n\nassert prime_numbers(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert prime_numbers(15) == [2, 3, 5, 7, 11, 13]\nassert prime_numbers(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "output": "def prime_numbers(limit):\n    primes = []\n    for num in range(2, limit + 1):\n        is_prime = True\n        for factor in range(2, num):\n            if num % factor == 0:\n                is_prime = False\n        if is_prime == True:\n            primes.append(num)\n    return primes", "id": 675, "avg_similarity_score": 0.10421786424664778}
{"instruction": "Write a function to compute the GCD (greatest common divisor) of two integers without using the built-in functions. Your code should pass these tests:\n\nassert gcd(48, 24) == 12\nassert gcd(15, 35) == 5\nassert gcd(100, 150) == 50", "output": "def gcd(a, b):  \r\n    if (a == 0): \r\n        return b \r\n    if (b == 0): \r\n        return a \r\n    if (a == b): \r\n        return a \r\n  \r\n    if (a > b): \r\n        return gcd(a-b, b) \r\n    return gcd(a, b-a)", "id": 676, "avg_similarity_score": 0.11975682613573263}
{"instruction": "Write a function to return the value of the nth prime number. Your code should pass these tests:\n\nassert prime_value(3)==5\nassert prime_value(5)==11\nassert prime_value(7)==17", "output": "def prime_value(n):\n  primes = [2]\n  i = 3\n  while len(primes) < n :\n    for p in primes:\n      if (i % p) == 0:\n        break\n    else:\n      primes.append(i)\n    i += 1\n  return primes[-1]", "id": 677, "avg_similarity_score": 0.136810258229252}
{"instruction": "Write a function to find the n-th Fibonacci number. Your code should pass these tests:\n\nassert fibonacci(4) == 3\nassert fibonacci(7) == 13\nassert fibonacci(2) == 1", "output": "def  fibonacci(n):   \n    if n<0:  \n        print(\"Incorrect input\")  \n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)", "id": 678, "avg_similarity_score": 0.11812457066697143}
{"instruction": "Write a function to search for a given word in a matrix. Your code should pass these tests:\n\nassert find_word([['s', 'a', 't', 'y'], ['o', 'a', 'm', 'e'], ['u', 't', 'o', 'o']], 'tome') == True\nassert find_word([['s', 'a', 't', 'y'], ['o', 'am', 'm', 'e'], ['u', 't', 'o', 'o']], 'toms') == False\nassert find_word([['a', 'b'], ['c', 'd']], 'abcd') == False", "output": "import numpy as np \n  \ndef find_word(mat, word): \n    for i in range(len(mat)): \n        for j in range(len(mat[0])): \n            if is_present(mat, i, j, word): \n                return True\n    return False\n\ndef is_present(mat, row, col, word): \n    if (col > (len(mat[0]) - len(word))): \n        return False;\n  \n    if (row > (len(mat) - len(word))): \n        return False; \n  \n    if (word[0] != mat[row][col]): \n        return False; \n  \n    if (len(word) == 1): \n        return True; \n  \n    return is_present(mat, row+1, col, word[1:]) or is_present(mat, row, col+1, word[1:])", "id": 679, "avg_similarity_score": 0.15407278178317516}
{"instruction": "Write a program to delete alternating elements from a given list. Your code should pass these tests:\n\nassert delete_alt([1,5,2,4,3,7])==[1, 2, 3]\nassert delete_alt([3, 9, 11, 10, 15]) == [3, 11, 15]\nassert delete_alt([2, 4, 6, 8]) == [2, 6]", "output": "def delete_alt(lst): \n  return [item for index, item in enumerate(lst) if index % 2 == 0]", "id": 680, "avg_similarity_score": 0.16615792033496776}
{"instruction": "Write a function to convert a given integer into a binary number. Your code should pass these tests:\n\nassert int_to_bin(18) == '10010'\nassert int_to_bin(48) == '110000'\nassert int_to_bin(127) == '1111111'", "output": "def int_to_bin(n): \n  return bin(n).replace(\"0b\", \"\")", "id": 681, "avg_similarity_score": 0.12585645739837095}
{"instruction": "Write a python program to get the length of the longest increasing subsequence in an array. Your code should pass these tests:\n\nassert longestIncreasingSubsequence([3, 10, 2, 1, 20]) == 3\nassert longestIncreasingSubsequence([50, 3, 10, 7, 40, 80]) == 4\nassert longestIncreasingSubsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) == 6", "output": "def longestIncreasingSubsequence(sequence): \r\n    dp = [1] * len(sequence) \r\n    for i in range (1 , len(sequence)): \r\n        for j in range(0 , i): \r\n            if sequence[i] > sequence[j] and dp[i]< dp[j] + 1 : \r\n                dp[i] = dp[j]+1\r\n    return max(dp)", "id": 682, "avg_similarity_score": 0.13961387131927464}
{"instruction": "Write a python program to find the minimum number of steps to reach the end of a given array of non-negative integers. Your code should pass these tests:\n\nassert minSteps([1, 2, 3]) == 2\nassert minSteps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]) == 3\nassert minSteps([4,2,1,6,8,9,2,7]) == 3", "output": "def minSteps(arr): \r\n    n = len(arr) \r\n    dp = [0 for x in range(n)] \r\n    dp[n-1] = 0\r\n    for i in range(n-2, -1, -1): \r\n        min_val = sys.maxsize \r\n        for j in range(i+1, i + arr[i]+1): \r\n            if ((j<n) and min_val > dp[j]):  \r\n                min_val = dp[j] \r\n        dp[i] = 1 + min_val\r\n    return dp[0]", "id": 683, "avg_similarity_score": 0.20040875423937918}
{"instruction": "Write a python program to merge two sorted arrays of integers in increasing order. Your code should pass these tests:\n\nassert merge([1,5,9],[2,3,8]) == [1,2,3,5,8,9]\nassert merge([2,7,11,15],[3,5,10]) == [2,3,5,7,10,11,15]\nassert merge([-5,-10,0,15,25],[-15,-9,2,10]) == [-15,-10,-9,-5,0,2,10,15,25]", "output": "def merge(arr1, arr2): \r\n    merged_arr = [] \r\n    i = 0\r\n    j = 0\r\n    while (i < len(arr1) and j < len(arr2)): \r\n        if arr1[i] < arr2[j]: \r\n            merged_arr.append(arr1[i]) \r\n            i += 1\r\n        else: \r\n            merged_arr.append(arr2[j]) \r\n            j += 1\r\n    while i < len(arr1): \r\n        merged_arr.append(arr1[i]) \r\n        i += 1\r\n    while j < len(arr2): \r\n        merged_arr.append(arr2[j]) \r\n        j += 1\r\n    return merged_arr", "id": 684, "avg_similarity_score": 0.09277147340744446}
{"instruction": "Write a Python program to sort a given list of elements according to their frequency. Your code should pass these tests:\n\nassert sort_by_frequency([2,3,2,2,6,7,7]) == [2,2,2,3,7,7,6]\nassert sort_by_frequency([0,1,1,3,2,1,0,3,2,2,0]) == [0,0,0,1,1,1,2,2,2,3,3]", "output": "def sort_by_frequency(test_list):\r\n    frequency_dict = {}\r\n    for element in test_list:\r\n        if element in frequency_dict:\r\n            frequency_dict[element] += 1\r\n        else:\r\n            frequency_dict[element] = 1\r\n \r\n    sorted_dict = sorted(frequency_dict.items(), key=lambda element:element[1], reverse=True)\r\n \r\n    sorted_list = []\r\n    for element in sorted_dict:\r\n        sorted_list += [element[0]] * element[1]\r\n \r\n    return sorted_list", "id": 685, "avg_similarity_score": 0.0022391756924131025}
{"instruction": "Write a Python function to calculate the sum of the digits in a given string of numbers. Your code should pass these tests:\n\nassert sum_digits(\"12345\") == 15\nassert sum_digits(\"3456789\") == 45\nassert sum_digits(\"100\") == 1", "output": "def sum_digits(str1): \r\n    sum_digit = 0\r\n    for x in str1: \r\n        if x.isdigit() == True: \r\n            z = int(x) \r\n            sum_digit = sum_digit + z \r\n  \r\n    return sum_digit", "id": 686, "avg_similarity_score": 0.23362188763782096}
{"instruction": "Write a code to determine whether a given list contains an even number. Your code should pass these tests:\n\nassert has_even_number([8,4,10]) == True\nassert has_even_number([3,1,5]) == False\nassert has_even_number([3,2,7]) == True", "output": "def has_even_number(test_list):\r\n  flag = False\r\n  for element in test_list:\r\n    if element % 2 == 0:\r\n      flag = True\r\n  return flag", "id": 687, "avg_similarity_score": 0.15888352051091484}
{"instruction": "Write a Python program to create a dictionary of keys from a list of integers that contains the elements from the given list. Your code should pass the following tests:\n\nassert create_dict_keys([3, 1, 2]) == {1: 3, 2: 1, 3: 2}\nassert create_dict_keys([4, 5, 2, 7]) == {2: 4, 4: 5, 5: 2, 7: 7}", "output": "def create_dict_keys(test_list):\r\n  my_dict = {}\r\n  for value in test_list:\r\n    my_dict[value] = value\r\n  return my_dict", "id": 688, "avg_similarity_score": 0.09269944581422136}
{"instruction": "Write a Python program to find the second largest number in a given list. Your should pass these tests:\n\nassert second_largest_number([1,2,3,4,5]) == 4\nassert second_largest_number([2,5,0,7,17]) == 7", "output": "def second_largest_number(list1):   \r\n  list1.sort() \r\n  return list1[-2]", "id": 689, "avg_similarity_score": 0.1238252875193699}
{"instruction": "Write a Python code to remove duplicates from a given list and sort it in ascending order. Your code should pass these tests:\n\nassert remove_duplicates_sort([6,3,4,2,2,2,4]) == [2,3,4,6]\nassert remove_duplicates_sort([5,8,3,1,3,6]) == [1,3,5,6,8]", "output": "def remove_duplicates_sort(list1):\r\n  list1 = list(dict.fromkeys(list1))  \r\n  list1.sort() \r\n  return list1", "id": 690, "avg_similarity_score": 0.14729415108277435}
{"instruction": "Write a python function to traverse a binary tree in In-Order traversal. Your code should pass these tests:\n\nassert InOrder([1,2,3,4,5]) == [4,2,5,1,3]\nassert InOrder([3,2,5,1,4]) == [2,1,3,5,4]\nassert InOrder([6,3,7,1,4]) == [1,3,4,6,7]", "output": "# Tree node \r\nclass Node: \r\n    def __init__(self,key): \r\n        self.left = None\r\n        self.right = None\r\n        self.data = key \r\n  \r\n# Function to  print in-order traversal of binary tree \r\ndef InOrder(root): \r\n  \r\n    if root: \r\n  \r\n        InOrder(root.left) \r\n  \r\n        print(root.data, end=\" \") \r\n  \r\n        InOrder(root.right)", "id": 691, "avg_similarity_score": 0.096832799606777}
{"instruction": "Write a python function to the frequency of each number in an array.Your code should pass these tests:\n\nassert frequency_Count([1,2,3,3],4) == {1: 1, 2: 1, 3: 2}\nassert frequency_Count([1,2,3,3,3],5) == {1: 1, 2: 1, 3: 3}\nassert frequency_Count([3,1,2,3],4) == {1: 1, 2: 1, 3: 2}", "output": "def frequency_Count(arr, n): \r\n    freq = {} \r\n    for i in range(n): \r\n        if arr[i] in freq.keys(): \r\n            freq[arr[i]] += 1 \r\n        else: \r\n            freq[arr[i]] = 1\r\n    return freq", "id": 692, "avg_similarity_score": 0.16354536866750055}
{"instruction": "Write a python function to solve the Kadane's algorithm for maximum subarray sum.Your code should pass these tests:\n\nassert maxSubarray([6,-3,2,-3,4],5) == 7\nassert maxSubarray([2,-3,-2,7,-8],5) == 7\nassert maxSubarray([-6,2,-3,-2,-3],5) == 2", "output": "def maxSubarray(arr,n): \r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n    \r\n    for i in range(0, n): \r\n        max_ending_here = max_ending_here + arr[i]  \r\n        if (max_ending_here < 0):  \r\n            max_ending_here = 0  \r\n        if (max_so_far < max_ending_here):  \r\n            max_so_far = max_ending_here  \r\n    return max_so_far", "id": 693, "avg_similarity_score": 0.06862949963347435}
{"instruction": "Write a python function to count the number of minimum swaps required to sort an array.Your code should pass these tests:\n\nassert minSwaps([1,3,5,2,4],5) == 3\nassert minSwaps([1,5,2,4],4) == 2\nassert minSwaps([3,6,4,7],4) == 3", "output": "def minSwaps(arr,n): \n    arrpos = [*enumerate(arr)] \n    arrpos.sort(key = lambda it:it[1]) \n    vis = {k:False for k in range(n)} \n    ans = 0\n    for i in range(n): \n        if vis[i] or arrpos[i][0] == i: \n            continue\n        cycle_size = 0\n        j = i \n        while not vis[j]: \n            vis[j] = True \n            j = arrpos[j][0] \n            cycle_size += 1\n        ans += (cycle_size - 1) \n    return ans", "id": 694, "avg_similarity_score": 0.03870948138364896}
{"instruction": "Write a python function to print all sub sets of a given set.Your code should pass these tests:\n\nassert subsets([2,1,3],3) == [[], [2], [1], [3], [2, 1], [2, 3], [1, 3], [2, 1, 3]]\nassert subsets([1,2],2) == [[], [1], [2], [1, 2]]\nassert subsets([3,4],2) == [[], [3], [4], [3, 4]]", "output": "def subsets(arr,n): \r\n    result =[[]] \r\n    for i in range(n): \r\n        size = len(result) \r\n        for j in range(size): \r\n            curr = result[j].copy() \r\n            curr.append(arr[i]) \r\n            result.append(curr) \r\n    return result", "id": 695, "avg_similarity_score": 0.1692014259546815}
{"instruction": "Write a python function to print all possible combinations of a given size of letters from a given list.Your code should pass these tests:\n\nassert combinations(['A','B','C'],2) == [['A', 'B'], ['A', 'C'], ['B', 'C']]\nassert combinations(['A','B','C','D'],3) == [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'C', 'D'], ['B', 'C', 'D']]\nassert combinations(['A','B','C'],1) == [['A'], ['B'], ['C']]", "output": "from itertools import combinations \n\ndef combinations(arr,n): \r\n    result = list(combinations(arr,n)) \r\n    return result", "id": 696, "avg_similarity_score": 0.17143371020849413}
{"instruction": "Write a python function to find the total number of unique substrings of length k from a given string.Your code should pass these tests:\n\nassert unique_Substrings('ABCD',2) == 6\nassert unique_Substrings('ABCD',3) == 10\nassert unique_Substrings('ABCD',4) == 4", "output": "def unique_Substrings(S,k): \r\n    n = len(S) \r\n    result = 0\r\n    count = [0] * 256\r\n  \r\n    # Iterate through all characters of input string  \r\n    for i in range(0, n): \r\n        # Node expansion form every ternminal node \r\n        for j in range(i + 1, n): \r\n            d = S[j] - S[i] \r\n            if d <= k: \r\n                count[ord(S[j])] += 1\r\n            else: \r\n                break\r\n        result += (n - i) * (n - i - 1) // 2\r\n        for j in range(i + 1, n): \r\n            d = S[j] - S[i] \r\n            if d <= k: \r\n                result -= count[ord(S[j])] \r\n  \r\n    return result", "id": 697, "avg_similarity_score": 0.1599793099547465}
{"instruction": "Write a python function for finding the maximum and the minimum element of a given array.Your code should pass these tests:\n\nassert min_Max([2,5,1,3],4) == (1,5)\nassert min_Max([2,4,6,9],4) == (2,9) \nassert min_Max([3,5,2,7],4) == (2,7)", "output": "def min_Max(arr,n): \n    min_ = arr[0] \n    max_ = arr[0] \n  \n    for i in range(1,n): \n        if (arr[i] < min_): \n            min_ = arr[i] \n        elif (arr[i] > max_): \n            max_ = arr[i] \n    return (min_, max_)", "id": 698, "avg_similarity_score": 0.18556372248955852}
{"instruction": "Write a program to join two tuples together and sort the resulting tuple. Your code should pass these tests:\n\nassert sort_tuple((7, 1, 2, 3), (5, 4, 6)) == (1, 2, 3, 4, 5, 6, 7)\nassert sort_tuple((7.5, 1.2, 2.3, 3.6), (5, 4, 6)) == (1.2, 2.3, 3.6, 4, 5, 6, 7.5)", "output": "def sort_tuple(tup1, tup2): \r\n    final_tup = tup1 + tup2 \r\n    final_list = list(final_tup) \r\n    final_list.sort() \r\n    return (tuple(final_list))", "id": 699, "avg_similarity_score": 0.0775048227010827}
{"instruction": "Write a program to find the position of a word in a string ignoring case differences. Your code should pass these tests:\n\nassert find_word_pos(\"This is a python world\", \"python\") == 8\nassert find_word_pos(\"Hello, World.\",\"world\") == 8", "output": "def find_word_pos(str1, wd): \r\n    return (str1.lower().index(wd.lower()))", "id": 700, "avg_similarity_score": 0.1921352733242169}
{"instruction": "Write a program to compute the arithmetic mean of multiple numbers given as an array. Your code should pass these tests:\n\nassert arithmetic_mean([3,2,1,4]) == 2.5\nassert arithmetic_mean([7.2,5.3,6.4]) == 6.3", "output": "def arithmetic_mean(ls): \r\n    sum = 0\r\n    for i in range(0, len(ls)): \r\n        sum += ls[i] \r\n    return sum / len(ls)", "id": 701, "avg_similarity_score": 0.1533581322675892}
{"instruction": "Write program to compute the area of a circle, given its diameter as input. Your code should pass these tests:\n\nassert area_circle(2) == 12.566370614359172\nassert area_circle(5) == 78.53981633974483", "output": "def area_circle(diameter):\r\n  radius = diameter / 2\r\n  area = 3.14 * pow(radius,2)\r\n  return area", "id": 702, "avg_similarity_score": 0.18180036549252068}
{"instruction": "Write a program to generate the power set of a given set. Your code should pass these tests:\n\nassert power_set({\"a\", \"b\"}) == {set(), {\"a\"}, {\"b\"}, {\"a\", \"b\"}}\nassert power_set({\"a\", \"b\", \"c\"}) == {set(), {\"a\"}, {\"b\"}, {\"a\", \"b\"}, {\"c\"}, {\"a\", \"c\"}, {\"b\", \"c\"}, {\"a\", \"b\", \"c\"}}", "output": "from itertools import chain, combinations \r\n  \r\ndef power_set(input_set): \r\n    length = len(input_set) \r\n  \r\n    res = [] \r\n    list_sets = [] \r\n  \r\n    for i in range(2**length): \r\n        list_sets.append(bin(i)[2:].zfill(length)) \r\n  \r\n    for item in list_sets: \r\n        set_ = set() \r\n  \r\n        for j in range(length): \r\n            if item[j] == '1': \r\n                set_.add(input_set[j]) \r\n  \r\n        res.append(set_) \r\n  \r\n    return res", "id": 703, "avg_similarity_score": 0.21385053176060723}
{"instruction": "Write a function to find the Smallest Common Multiple (LCM) of two numbers. Your code should pass these tests:\n\nassert lcm(4,5) == 20\nassert lcm(3,6) == 6", "output": "def lcm(num1, num2): \r\n    if(num1 > num2): \r\n        greater = num1 \r\n    else: \r\n        greater = num2 \r\n  \r\n    while(True): \r\n        if((greater % num1 == 0) and (greater % num2 == 0)): \r\n            lcm = greater \r\n            break\r\n        greater += 1\r\n  \r\n    return lcm", "id": 704, "avg_similarity_score": 0.14727790972636456}
{"instruction": "Write a function that prints a given set of numbers in string format. Your code should pass these tests:\n\nassert get_string_format([1,2,3,5,7]) == \"1,2,3,5,7\"\nassert get_string_format([12,34,67]) == \"12,34,67\"\nassert get_string_format([1,2,3,4,5,6]) == \"1,2,3,4,5,6\"", "output": "def get_string_format(num_list):\r\n  str_list = [str(i) for i in num_list]\r\n  return \",\".join(str_list)", "id": 705, "avg_similarity_score": 0.1635013907811429}
{"instruction": "Write a program to convert an integer from base 10 to any other base. Your code should pass these tests:\n\nassert base_conversion(9,2) == \"1001\"\nassert base_conversion(169,16) == \"A9\"\nassert base_conversion(125,10) == \"125\"", "output": "def base_conversion(n, new_base):\r\n  if new_base == 10:\r\n    return str(n)\r\n  else:\r\n    ans = \"\"\r\n    while n > 0:\r\n      ans = str(n%new_base) + ans\r\n      n //= new_base\r\n    return ans", "id": 706, "avg_similarity_score": 0.002431871356452362}
{"instruction": "Write a program to reverse a given string. Your code should out put these results:\n\nassert reverse_string(\"hello\") == \"olleh\"\nassert reverse_string(\"david\") == \"divad\"\nassert reverse_string(\"Apple\") == \"elppA\"", "output": "def reverse_string(string):\r\n  res = \"\"\r\n  for i in range(len(string)-1, -1, -1):\r\n    res += string[i] \r\n  return res", "id": 707, "avg_similarity_score": 0.08275696951683974}
{"instruction": "Write a program to calculate the number of combinations of N distinct items taken R at a time. Your code should out put these results:\n\nassert combinations(4,2) == 12\nassert combinations(5,3) == 10\nassert combinations(7,4) == 35", "output": "def combinations(n, r):\n  return int (math.factorial(n) / (math.factorial(r) * math.factorial(n-r)))", "id": 708, "avg_similarity_score": 0.09227230234799413}
{"instruction": "Write a program to find the maximum value in a given list. Your code should out put these results:\n\nassert find_max([3,25,9,7,8]) == 25\nassert find_max([12,67,84,32,45]) == 84\nassert find_max([4,2,15,17,19,22]) == 22", "output": "def find_max(list1):\r\n  max_val = list1[0]\r\n  for i in range(1,len(list1)):\r\n    if list1[i] > max_val:\r\n      max_val = list1[i]\r\n  return max_val", "id": 709, "avg_similarity_score": 0.0961545238573728}
{"instruction": "Write a program to calculate the sum of the digits of a number. Your code should out put these results:\n\nassert digit_sum(123) == 6\nassert digit_sum(467) == 18\nassert digit_sum(838) == 17", "output": "def digit_sum(n):\r\n  total = 0\r\n  while n != 0:\r\n    total += n % 10\r\n    n //= 10\r\n  return total", "id": 710, "avg_similarity_score": 0.10535237862651428}
{"instruction": "Write a program to shuffle the elements of a given list. Your code should out put these results:\n\nassert shuffle_list([1,2,3,4,5]) == [3,2,5,1,4]\nassert shuffle_list([7,8,9,10,11]) == [10,7,11,8,9]\nassert shuffle_list([12,13,14,15,16]) == [13,15,14,16,12]", "output": "import random\r\ndef shuffle_list(list1):\r\n  for i in range(len(list1)-1, 0, -1): \r\n    j = random.randint(0, i + 1)       \r\n    list1[i], list1[j] = list1[j], list1[i] \r\n  return list1", "id": 711, "avg_similarity_score": 0.08600908230868574}
{"instruction": "Write a program to print a string between a given range of characters. Your code should out put these results:\n\nassert sub_string(\"Srinivasan\",3,7) == \u201cniva\u201d\nassert sub_string(\"Python\",2,6) == \u201cthon\u201d\nassert sub_string(\"algorithm\",5,11) == \u201crithm\u201d", "output": "def sub_string(str1,start,end):\n  return str1[start:end]", "id": 712, "avg_similarity_score": 0.08901428395256725}
{"instruction": "Write a python function to find the deepest node in a given binary tree. Your code should pass this test:\n\nassert deepest_Node(root) == 11", "output": "def deepest_Node(root): \r\n   if root is None:                                             \r\n        return 0\r\n   else: \r\n        lDepth = deepest_Node(root.left) \r\n        rDepth = deepest_Node(root.right) \r\n     \r\n        if (lDepth > rDepth): \r\n            return lDepth + 1\r\n        else: \r\n            return rDepth + 1", "id": 713, "avg_similarity_score": 0.15123299830490697}
{"instruction": "Write a python function to generate all binary strings of length n. Your code should pass this test:\nassert generate_binary_Strings(3) == ['000', '001', '010', '011', '100', '101', '110', '111']", "output": "def generate_binary_Strings(n): \r\n\tresult = [] \r\n\tbinary_code(n, \"\", result) \r\n\treturn result \r\n      \r\ndef binary_code(n, res, result): \r\n\tif (n == 0): \r\n\t\tresult.append(res) \r\n\t\treturn\r\n\r\n\tbinary_code(n-1, res + \"0\", result) \r\n\tbinary_code(n-1, res + \"1\", result)", "id": 714, "avg_similarity_score": 0.06242578746996964}
{"instruction": "Write a python function to check if a given string is palindrome or not. Your code should pass this test:\n\nassert is_Palindrome(\u201credder\u201d) == True", "output": "def is_Palindrome(str): \n    length = len(str) \r\n    for i in range(length // 2): \n        if str[i] != str[length - 1 - i]: \n            return False\n    return True", "id": 715, "avg_similarity_score": 0.12682032526415157}
{"instruction": "Write a python function to count the total number of paths from given top left to bottom right in a 2D array. Your code should pass this test:\n\nassert count_Paths(3,3 ) == 6", "output": "def count_Paths(m, n): \r\n   if (m == 1 or n == 1): \r\n        return 1\n   return count_Paths(m-1, n) + count_Paths(m, n-1)", "id": 716, "avg_similarity_score": 0.09765465124564407}
{"instruction": "Write a python function to find the maximum product of two integers in a given array. Your code should pass this test:\n\nassert max_Product([2, 5, 7, 9, 6, 5]) == 63", "output": "def max_Product(a): \r\n    a.sort()  \r\n    c = a[-1]*a[-2] \r\n    return c", "id": 717, "avg_similarity_score": 0.1615492739653835}
{"instruction": "Write a python function to search an element in a given binary search tree. Your code should pass this test:\n\nassert search_BST(root, 5) == True", "output": "def search_BST(root, val): \r\n    if root is None or root.val == val: \r\n        return root  \r\n    \r\n    # If value is less than root's \r\n    #val then search in left subtree. \r\n    if root.val < val: \r\n        return search_BST(root.right, val) \r\n\r\n    # Else search in right subtree. \r\n    return search_BST(root.left, val)", "id": 718, "avg_similarity_score": 0.11932927302767916}
{"instruction": "Write a python function to find the maximum cost path in a given 2D array. Your code should pass this test:\n\nassert max_Cost_Path(4, 4,[[0, 0, 0, 0], \n                    [4, 8, 7, 3], \n                    [8, 5, 12, 4], \n                    [10, 9, 11, 7]]) == 35", "output": "def max_Cost_Path(m, n, cost): \r\n       mcost = [[0 for x in range(n + 1)] for x in range(m + 1)] \r\n       mcost[0][0] = cost[0][0] \r\n  \r\n       # Initialize first row of mcost[]. \r\n       for j in range(1, n + 1): \r\n           mcost[0][j] = cost[0][j] + mcost[0][j-1] \r\n  \r\n       # Initialize first column of mcost[]. \r\n       for i in range(1, m + 1): \r\n           mcost[i][0] = cost[i][0] + mcost[i-1][0] \r\n  \r\n       # Construct the rest of the mcost array. \r\n       for i in range(1, m + 1): \r\n           for j in range(1, n + 1): \r\n               mcost[i][j] = max(mcost[i-1][j], mcost[i][j-1]) + cost[i][j] \r\n  \r\n       return mcost[m][n]", "id": 719, "avg_similarity_score": 0.10777051758587326}
{"instruction": "Write a python function to search a given item in a given sorted list. Your code should pass this test:\n\nassert binary_Search([2, 5, 7, 9, 10], 10) == 4", "output": "def binary_Search(A, item): \r\n    low = 0\r\n    high = len(A) - 1\r\n    while(low <= high): \r\n        mid = (low + high) // 2\r\n        if A[mid] == item: \r\n            return mid \r\n        elif A[mid] > item: \r\n            high = mid - 1\r\n        else: \r\n            low = mid + 1\r\n    return -1", "id": 720, "avg_similarity_score": 0.12873882893528102}
{"instruction": "Write a python function to find the intersection point of two linked-lists. Your code should pass this test:\n\nassert find_intersection(list1, list2) == 8", "output": "def find_intersection(head1, head2): \r\n     \r\n    p1 = head1 \r\n    p2 = head2 \r\n  \r\n    while(p1 != p2): \r\n        if(p1 == None): \r\n            p1 = head2  \r\n        else: \r\n            p1 = p1.next\r\n        if(p2 == None): \r\n            p2 = head1 \r\n        else: \r\n            p2 = p2.next\r\n    return p1.data", "id": 721, "avg_similarity_score": 0.11209718041650908}
{"instruction": "Write a function to generate Fibonacci series of n length. Your code should pass these tests:\n\nassert generate_Fibonacci_series(8)==[0, 1, 1, 2, 3, 5, 8, 13]\nassert generate_Fibonacci_series(5)==[0, 1, 1, 2, 3]\nassert generate_Fibonacci_series(11)==[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "output": "def generate_Fibonacci_series(n): \r\n\tresult = []\r\n\ta = 0\r\n\tb = 1\r\n\t\r\n\tif (n == 0): \r\n\t\treturn result \r\n\t\r\n\tresult.append(a)\r\n\tif (n == 1): \r\n\t\treturn result\n\t\t\r\n\tresult.append(b)\r\n\tfor i in range(2,n): \r\n\t\tc = a + b \r\n\t\tresult.append(c) \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn result", "id": 722, "avg_similarity_score": 0.07236395425871706}
{"instruction": "Write a function to replace a given substring in a string with other given substring. Your code should pass these tests:\n\nassert replace_substring(\"panda\",\"da\",\"no\")==\"panono\"\nassert replace_substring(\"tester\",\"te\",\"ej\")==\"ejster\"\nassert replace_substring(\"university\",\"ah\",\"b\")==\"universibty\"", "output": "def replace_substring(input_string, substring, replacement): \r\n\tstr_list = list(input_string) \r\n\r\n\tcount = 0\r\n\tfor i in range(len(input_string)): \r\n\t\tif input_string[i:].startswith(substring): \r\n\t\t\tstr_list[i] = replacement[0] \r\n\t\t\tfor j in range(1, len(replacement)): \r\n\t\t\t\tstr_list[i + j] = replacement[j] \r\n\t\t\t\t\r\n\t\t\t\tcount += 1\r\n\t\t\t\t\r\n\treturn \"\".join(str_list)", "id": 723, "avg_similarity_score": 0.1545928194196515}
{"instruction": "Write a function to remove all consecutive duplicate substrings in a string. Your code should pass these tests:\n\nassert remove_duplicates(\"aabbccccdd\")==\"abcd\"\nassert remove_duplicates(\"ppoolaarrss\")==\"polar\"\nassert remove_duplicates(\"llarrimmeenntt\")==\"larmen\"", "output": "def remove_duplicates(string): \r\n  \r\n    i = 0\r\n    prev = \"\"\r\n    result = \"\"\r\n    while(i < len(string)): \r\n        if (prev != string[i]): \r\n            result += string[i] \r\n        prev = string[i] \r\n        i += 1\r\n    return result", "id": 724, "avg_similarity_score": 0.12180942427289894}
{"instruction": "Write a function to remove all elements in a given list that are in another list. Your code should pass these tests:\n\nassert remove_elements([1,2,3],[2,3])==[1]\nassert remove_elements([2,1,4,5,3],[3,4])==[2,1,5]\nassert remove_elements([10,3,5,7,4],[5,7,10])==[3,4]", "output": "def remove_elements(list1,list2):\r\n    result = [i for i in list1 if i not in list2]\r\n    return result", "id": 725, "avg_similarity_score": 0.1604938658644968}
{"instruction": "Write a function to convert a given decimal number to octal number. Your code should pass these tests:\n\nassert convert_decimal_to_octal(7)==7 \nassert convert_decimal_to_octal(128)==200\nassert convert_decimal_to_octal(191)==277", "output": "def convert_decimal_to_octal(n):\r\n    octal = \"\"\r\n    while n!=0:\r\n        octal = str(n%8) + octal\r\n        n = int(n/8)\r\n    return int(octal)", "id": 726, "avg_similarity_score": 0.02982127835805565}
{"instruction": "Write a python function to print zig-zag order of tree levels of a binary tree. Your code should pass these tests:\n\nassert print_tree_zigzag_level([1,2,3,4,5,6,7]) == [[1], [3,2], [4,5,6,7]]\nassert print_tree_zigzag_level([1,2,3,4,5,6]) == [[1], [3,2], [4,5,6]]\nassert print_tree_zigzag_level([1]) == [[1]]", "output": "def print_tree_zigzag_level(tree): \r\n   level = 0 \r\n   prev_level = 0\r\n   level_order = [] \r\n\r\n   q = [] \r\n   q.append(tree) \r\n   while (len(q)) : \r\n       \r\n       curr_data = q[0].data \r\n       level = q[0].level \r\n\r\n      \r\n       if (level_order == []): \r\n           level_order.append([curr_data]) \r\n\r\n          \r\n       elif (prev_level == level): \r\n           level_order[level-1].append(curr_data) \r\n\r\n          \r\n       else: \r\n           level_order.append([curr_data]) \r\n\r\n      \r\n       if (q[0].left): \r\n           q[0].left.level = level + 1\r\n           q.append(q[0].left) \r\n\r\n      \r\n       if (q[0].right): \r\n           q[0].right.level = level + 1\r\n           q.append(q[0].right) \r\n\r\n\r\n       q.pop(0) \r\n       prev_level = level \r\n\r\n   for i in range(len(level_order)): \r\n       if (i % 2): \r\n           level_order[i].reverse() \r\n\r\n   return level_order", "id": 727, "avg_similarity_score": 0.10878948995092964}
{"instruction": "Write a python function to check if an integer is a palindrome. Your code should pass these tests:\n\nassert is_palindrome(12321) == True \nassert is_palindrome(1241) == False\nassert is_palindrome(0) == True", "output": "def is_palindrome(num): \r\n\r\n    temp = num\r\n    rev = 0\r\n\r\n    while (temp > 0): \r\n        dig = temp % 10\r\n        rev = rev * 10 + dig \r\n        temp = temp // 10\r\n\r\n    return (rev == num)", "id": 728, "avg_similarity_score": 0.11288822670463258}
{"instruction": "Write a python function to find the maximum non-adjacent subarray sum. Your code should pass these tests:\n\nassert max_non_adjacent_subarray_sum([2,4,6,2,5]) == 13\nassert max_non_adjacent_subarray_sum([5,1,1,5]) == 10\nassert max_non_adjacent_subarray_sum([2,1,1,2]) == 4", "output": "def max_non_adjacent_subarray_sum(arr): \r\n    incl_max = 0\r\n    excl_max = 0\r\n  \r\n    for i in range(len(arr)): \r\n        temp = incl_max \r\n        incl_max = max(excl_max + arr[i], incl_max) \r\n        excl_max = temp \r\n  \r\n    return incl_max", "id": 729, "avg_similarity_score": 0.09383408958352928}
{"instruction": "Write a Python program to calculate the sum of the digits of an integer that is passed as an argument. Your code should pass this test: \n\nassert sum_digits(345)==12", "output": "def sum_digits(n): \n    sum = 0 \n    for i in str(n): \n        sum += int(i) \n    return sum", "id": 730, "avg_similarity_score": 0.10564318197032238}
{"instruction": "Given a list of numbers,Write a function to find the largest number in the list. Your code should pass these tests:\n\nassert largest_number([2,6,4,10,7])==10\nassert largest_number([-4,1,2,6])==6", "output": "def largest_number(list): \n    max_num = list[0] \n    for i in range(0,len(list)):  \n        if max_num < list[i]: \n            max_num = list[i] \n    return max_num", "id": 731, "avg_similarity_score": 0.17629232840001122}
{"instruction": "Write a Python program to sort a list of tuples by a specific index of the tuple. Your code should pass this test:\n\nassert sort_by_index([(2 , 'b'), (3 , 'a'), (1 , 'c')], 0)==[(1 , 'c'), (2 , 'b'), (3 , 'a')]", "output": "def sort_by_index(list, index): \n    return sorted(list, key=lambda x: x[index])", "id": 732, "avg_similarity_score": 0.10703814791348346}
{"instruction": "Write a Python program to remove consecutive duplicates from a given list. Your code should pass this test:\n\nassert remove_consecutives([2,2,3,3,3,4,4,5,6,7,7,7])==[2,3,4,5,6,7]", "output": "def remove_consecutives(list): \n    final_list=[] \n    for i in list: \n        if i not in final_list: \n            final_list.append(i) \n    return final_list", "id": 733, "avg_similarity_score": 0.09361036918740248}
{"instruction": "Write a Python program to filter a given list of strings by substring. Your code should pass this test:\n\nassert filter_by_substring(['bar','foo','apple'], 'oo')==['foo']", "output": "def filter_by_substring(list, substring): \n    return [i for i in list if substring in i]", "id": 734, "avg_similarity_score": 0.11963926471441448}
{"instruction": "Write a Python program to print the first n Fibonacci numbers. Your code should pass this test:\n\nassert fibonacci(10)==[0,1,1,2,3,5,8,13,21,34]", "output": "def fibonacci(n):\r\n    fib=[0,1]\r\n    for i in range(2,n):\r\n        fib.append(fib[i-1] + fib[i-2])\r\n    return fib[:n]", "id": 735, "avg_similarity_score": 0.07684240859549585}
{"instruction": "Write a python function to check if two strings have the same length. Your code should pass these tests:\n\nassert is_same_length(\"hello\",\"world\")==True\nassert is_same_length(\"abc\",\"d\")==False\nassert is_same_length(\"shorter\",\"longer\")==False", "output": "def is_same_length(str1,str2):\r\n  return len(str1) == len(str2)", "id": 736, "avg_similarity_score": 0.09076363529673577}
{"instruction": "Write a python function to find the sum of natural numbers until n. Your code should pass these tests:\n\nassert sum_of_naturals(5) == 15\nassert sum_of_naturals(10) == 55\nassert sum_of_naturals(6) == 21", "output": "def sum_of_naturals(n):\r\n  sum = 0\r\n  for i in range(1, n+1):\r\n    sum+=i\r\n  return sum", "id": 737, "avg_similarity_score": 0.14604777217804543}
{"instruction": "Write a python function to check if a given character is an alphabetic character. Your code should pass these tests:\n\nassert is_alphabetic('h') == True\nassert is_alphabetic('1') == False\nassert is_alphabetic('X') == True", "output": "def is_alphabetic(c):\r\n  return c.isalpha()", "id": 738, "avg_similarity_score": 0.14299918478992787}
{"instruction": "Write a python function to multiply two matrices using dynamic programming. Your code should pass these tests:\n\nassert multiply_Matrix(1, 2, 3, 5) == 13\nassert multiply_Matrix(2, 3, 5, 7) == 57\nassert multiply_Matrix(3, 5, 7, 11) == 109", "output": "def multiply_Matrix(m1,m2,m3,m4): \n    dp = [[0 for i in range(m4 + 1)] \n              for j in range(m2 + 1)] \r\n  \r\n    for i in range(1, m1 + 1): \r\n        for j in range(1, m4 + 1): \r\n            for k in range(1, m3 + 1): \r\n                dp[i][j] += dp[i - 1][k] * dp[k][j];  \r\n    return dp[m1][m4];", "id": 739, "avg_similarity_score": 0.023858782405488974}
{"instruction": "Write a python function to reverse a string without using any built-in function. Your code should pass these tests:\n\nassert reverse('Hello') == 'olleH'\nassert reverse('Python') == 'nohtyP'\nassert reverse('codex') == 'xedoc'", "output": "def reverse(s): \r\n    ans = ''\r\n    length = len(s) \r\n  \r\n    for i in range(length - 1,-1,-1): \r\n        ans += s[i] \r\n  \r\n    return ans", "id": 740, "avg_similarity_score": 0.10556788814901218}
{"instruction": "Write a python function to find the number of possible rearrangements of a given string that will not contain any consecutive repeating characters. Your code should pass these tests:\n\nassert possible_Rearrangements('ABC') == 6\nassert possible_Rearrangements('ABAB') == 12\nassert possible_Rearrangements('AAABBCCD') == 8640", "output": "def possible_Rearrangements(str): \r\n    n = len(str); \r\n  \r\n    # To store the count. \r\n    count = 1; \r\n  \r\n    # Count of the number \r\n    # of current character. \r\n    cur_count = 1; \r\n  \r\n    for i in range(1, n): \r\n  \r\n        # If current and previous \r\n        # characters are same. \r\n        if (str[i] == str[i - 1]): \r\n            cur_count = cur_count + 1; \r\n  \r\n        # Else count \r\n        # of the current character. \r\n        else: \r\n            count = count * factorial(cur_count); \r\n            cur_count = 1; \r\n  \r\n    # Multiplication of last \r\n    # counted characters. \r\n    count = count * factorial(cur_count); \r\n  \r\n    # Total number of possible \r\n    # rearrangements. \r\n    return factorial(n) // count; \r\n  \r\n# Utility function  \r\n# to calculate factorial. \r\ndef factorial(n): \r\n    fact = 1; \r\n    for i in range(1, n + 1): \r\n        fact = fact * i; \r\n    return fact;", "id": 741, "avg_similarity_score": 0.16884380394520077}
{"instruction": "Write a function to check whether two lists have the same first element or not. Your code should pass these tests:\n\nassert same_first_elem([1,2,3], [4,2,3]) == False\nassert same_first_elem([1,2,3], [1,5,6]) == True\nassert same_first_elem([4,5,6], [4,8,9]) == True", "output": "def same_first_elem(list1, list2):\n  if list1[0] == list2[0]:\n    return True\n  else:\n    return False", "id": 742, "avg_similarity_score": 0.0854978118593562}
{"instruction": "Write a function to compare two strings and return the longest one. Your code should pass these tests:\n\nassert longest_string(\"Hello\", \"World\") == \"World\"\nassert longest_string(\"ABCD\", \"ABC\") == \"ABCD\"\nassert longest_string(\"Hello World\", \"Hi\") == \"Hello World\"", "output": "def longest_string(string1, string2):\n  if len(string1) > len(string2):\n    return string1\n  else:\n    return string2", "id": 743, "avg_similarity_score": 0.08319538389438738}
{"instruction": "Write a python function to calculate the sum of the squares of the first n positive integers. Your code should pass these tests:\n\nassert sum_squares(5) == 55\nassert sum_squares(10) == 385\nassert sum_squares(7) == 140", "output": "def sum_squares(n): \r\n    return (n * (n + 1) * (2 * n + 1)) // 6", "id": 744, "avg_similarity_score": 0.12181612707839037}
{"instruction": "Write a python program to print out the pattern for the given n number of rows. Your code should pass these tests:\n\nassert pattern(4) == '1 1 1 1 \\n2 2 2 \\n3 3 \\n4'\nassert pattern(3) == '1 1 1 \\n2 2 \\n3'", "output": "def pattern(n): \r\n    res = \"\" \r\n    for i in range(1, n + 1): \r\n        for j in range(1, n - i + 2): \r\n            res = res + str(i)+\" \"\r\n        res = res +\"\\n\"\r\n    return res", "id": 745, "avg_similarity_score": 0.1436037808347488}
{"instruction": "Write a python program to print out all the anagrams of a given word. Your code should pass these tests:\n\nassert anagrams('attic',['tactic','cat','act']) == ['tactic']\nassert anagrams('bad',['dab','bad','dab','bead','dab']) == ['dab','bad']", "output": "def anagrams(word, l):\r\n  word = ''.join(sorted(word))\r\n  out = []\r\n  for s in l:\r\n    if ''.join(sorted(s))== word:\r\n      out.append(s)\r\n  return out", "id": 746, "avg_similarity_score": 0.20703607498052415}
{"instruction": "Write a python program to find all the prime numbers before a given number. Your code should pass these tests:\n\nassert get_primes(25) == [2, 3, 5, 7, 11, 13, 17, 19, 23]\nassert get_primes(10) == [2, 3, 5, 7]", "output": "def get_primes(n): \r\n    result = [] \r\n  \r\n    for i in range(2, n+1): \r\n        flag = 0\r\n        for j in range(2, i): \r\n            if (i % j == 0): \r\n                flag = 1\r\n                break\r\n\r\n        if (flag == 0): \r\n            result.append(i) \r\n  \r\n    return result", "id": 747, "avg_similarity_score": 0.20436377126040062}
{"instruction": "Write a python program to print unique common elements of two lists. Your code should pass these tests:\n\nIn: l1 = [2,5,7,8] l2 = [8,6,2]\nOut: [2, 8]\n\nIn: l1 =[1,2,4,6] l2 = [2,4,7,5]\nOut: [2, 4]", "output": "def print_unique_common_elements(l1,l2):\n  return list(set(l1).intersection(l2))", "id": 748, "avg_similarity_score": 0.08584421733378424}
{"instruction": "Write a function to generate a Fibonacci series with given number of terms. Your code should pass these tests:\n\nassert generate_Fibonacci_series(4) == [0,1,1,2]\nassert generate_Fibonacci_series(9) == [0,1,1,2,3,5,8,13,21]\nassert generate_Fibonacci_series(5) == [0,1,1,2,3]", "output": "def generate_Fibonacci_series(n): \r\n    fib_List = [0, 1] \r\n  \r\n    for i in range(2,n): \r\n        fib_List.append(fib_List[i-1]+fib_List[i-2]) \r\n  \r\n    return fib_List", "id": 749, "avg_similarity_score": 0.15869866741357494}
{"instruction": "Write a function to replace each character of a given string with the next one in the english alphabet. Your code should pass these tests:\n\nassert alphabet_Shift(\"ABCDE\") == \"BCDEF\"\nassert alphabet_Shift(\"BXABC\") == \"CYBCD\"\nassert alphabet_Shift(\"ABC\") == \"BCD\"", "output": "def alphabet_Shift(string): \r\n    char_list = list(string)  \r\n    for i in range(len(char_list)): \r\n        char = char_list[i]  \r\n        if (char == 'Z'): \r\n           char_list[i] = 'A'  \r\n        else: \r\n            char_list[i] = chr(ord(char)+1)  \r\n  \r\n    return \"\".join(char_list)", "id": 750, "avg_similarity_score": 0.15400874271437026}
{"instruction": "Write a function to print out the sum of the elements of a given array.Your code should pass these tests:\n\nassert sum_ArrayElements([1,2,3,4]) == 10\nassert sum_ArrayElements([1,2,7,3]) == 13\nassert sum_ArrayElements([9,2,1,5]) == 17", "output": "def sum_ArrayElements(arr): \r\n    return sum(arr)", "id": 751, "avg_similarity_score": 0.21232656731393448}
{"instruction": "Write a function to reverses an array without using the inbuilt reverse function. Your code should pass these tests:\n\nassert reverse_Array([1,2,3,4,5]) == [5,4,3,2,1]\nassert reverse_Array([6,7,8,9]) == [9,8,7,6]\nassert reverse_Array([1,0,2,3]) == [3,2,0,1]", "output": "def reverse_Array(arr): \r\n    start = 0\r\n    end = len(arr)-1\r\n    while start < end: \r\n        arr[start], arr[end] = arr[end], arr[start]  \r\n        start += 1\r\n        end -= 1\r\n    return arr", "id": 752, "avg_similarity_score": 0.0755601974030736}
{"instruction": "Write a function to calculate the factorial of a given number. In mathematics, the factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n. Your code should pass these tests:\n\nassert factorial(5) == 120\nassert factorial(6) == 720\nassert factorial(7) == 5040", "output": "def factorial(num): \r\n    if num == 0: \r\n        return 1\r\n    else: \r\n        return num * factorial (num-1)", "id": 753, "avg_similarity_score": 0.1207594438425274}
{"instruction": "Write a Python program to convert an integer to a roman numeral. Your code should pass this test:\n\nassert roman_numeral(3999)==\"MMMCMXCIX\"", "output": "def roman_numeral(number):\r\n    numeral_map = {1:\"I\", 4:\"IV\", 5:\"V\", 9:\"IX\", 10:\"X\", 40:\"XL\", 50:\"L\", 90:\"XC\", 100:\"C\", 400:\"CD\", 500:\"D\", 900:\"CM\", 1000:\"M\"}\r\n    result = \"\"\r\n    for value, numeral in sorted(numeral_map.items(), reverse=True):\r\n        while number >= value:\r\n            result += numeral\r\n            number -= value\r\n    return result", "id": 754, "avg_similarity_score": 0.08355986346436438}
{"instruction": "Write a Python function to calculate the maximum of three numbers. Your code should pass this test:\n\nassert maximum3(2, 5, 7) == 7", "output": "def maximum3(a, b, c):\r\n  return max(a, b, c)", "id": 755, "avg_similarity_score": 0.11797713720441598}
{"instruction": "Write a Python function to generate a list containing tuples. Each tuple should contain a pair of elements, one being a number and the other being the cube of the number. Your code should pass this test:\n\nassert cub_pairs(2, 3) == [(2, 8), (3, 27)]", "output": "def cub_pairs(min_val, max_val):\r\n  cubed_list = []\r\n  for i in range(min_val, max_val+1):\r\n    cubed_list.append((i, i**3))\r\n  return cubed_list", "id": 756, "avg_similarity_score": 0.10527564136779027}
{"instruction": "Write a Python program to print a dictionary of numbers and the square of numbers from 1 to a given number. Your code should pass this test:\n\nassert numbers_sq_dict(3) == {1: 1, 2: 4, 3: 9}", "output": "def numbers_sq_dict(n):\r\n  d = dict()\r\n  for i in range(1,n+1):\r\n    d[i] = i**2\r\n  return d", "id": 757, "avg_similarity_score": 0.12147673566813652}
{"instruction": "Write a Python program to sort a list of tuples by the second element in each tuple. Your code should pass this test:\n\nassert sort_tup_list([(5,1),(3,2),(1,3)]) == [(1,3),(3,2),(5,1)]", "output": "def sort_tup_list(tup_list):\r\n  return sorted(tup_list, key=lambda x: x[1])", "id": 758, "avg_similarity_score": 0.11069110469334502}
{"instruction": "WritePython program for inserting a given element at the start of all sublists of a given nested list. Your code should pass this test:\n\nassert insert_start([[1,2,3],[4,5], [6]], 0) == [[0,1,2,3],[0,4,5], [0,6]]", "output": "def insert_start(list_in, elem):\r\n  new_list = []\r\n  for list_ind in list_in:\r\n    list_ind.insert(0,elem)\r\n    new_list.append(list_ind)\r\n  return new_list", "id": 759, "avg_similarity_score": 0.1215750936414244}
{"instruction": "Write a Python function to append an item at the end of the list. Your code should pass this test:\n\nassert append_item([1,2,3], 4) == [1,2,3,4]", "output": "def append_item(list1, elem):\r\n  list1.append(elem)\r\n  return list1", "id": 760, "avg_similarity_score": 0.1087200838433082}
{"instruction": "Write a Python function to remove all indentation from a soup string. Your code should pass this test: \n\nassert strip_indent(\"    <html> \\n    <head> \\n    <title>testing indent</title> \\n    </head> \\n    <body> \\n    <h1>Hello World!</h1> \\n    </body> \\n    </html> \") == \"<html> \\n<head> \\n<title>testing indent</title> \\n</head> \\n<body> \\n<h1>Hello World!</h1> \\n</body> \\n</html> \"", "output": "import re\r\ndef strip_indent(string):\r\n  return re.sub(r'^( +)', '', string, flags=re.MULTILINE)", "id": 761, "avg_similarity_score": 0.046290766974762525}
{"instruction": "Write a Python program that implements a sliding window calculation, where the window size is specified by the user. Your code should pass this test:\n\nassert sliding_window(3, [2, 5, 6, 7, 8, 9]) = [[2, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]", "output": "def sliding_window(n, seq):\r\n  return [seq[i:i+n] for i in range(len(seq)-n+1)]", "id": 762, "avg_similarity_score": 0.07479636012727175}
{"instruction": "Write a Python program to create two different sets containing integers from 1 to 10 and divisions of numbers from 1 to 10 using only list comprehensions. Your code should pass this test:\n\nassert set_ints == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "output": "set_ints = {int for int in range(1,11)}\ndivisions = {int/10 for int in range(1,11)}", "id": 763, "avg_similarity_score": 0.05715705239686279}
{"instruction": "Write a program to calculate compound interest using these parameters: principle, rate and number of years.", "output": "def compound_interest(p,r,n):\r\n  return p * (1 + r/100) ** n", "id": 764, "avg_similarity_score": 0.06975086622542147}
{"instruction": "Write a python program to combine two dictionaries into one. Your code should handle empty dictionaries.", "output": "def combine_dictionary(dicta,dictb): \n  result = {} \r\n  # If both dictionaries are empty \n  if not dicta and not dictb: \r\n      return result \r\n  # Update the result dictionary by merged two dictionaries \r\n  result.update(dicta) \r\n  result.update(dictb) \n  return result", "id": 765, "avg_similarity_score": 0.02419553965416858}
{"instruction": "Write a program to find the combination of two strings using their characters.", "output": "def combine_strings(str1, str2): \r\n    return set(str1 + str2)", "id": 766, "avg_similarity_score": 0.1397305757529778}
{"instruction": "Write a program to find the average of an array of numbers.", "output": "def average(list1): \r\n    return sum(list1)/len(list1)", "id": 767, "avg_similarity_score": 0.16247668836264967}
{"instruction": "Write a function to convert a list of character strings into a character list.", "output": "def convert_strings_to_list(string_list): \n    return [c for char in string_list for c in char]", "id": 768, "avg_similarity_score": 0.13234534112755825}
{"instruction": "Write a program to search for a given string in a given list of strings.", "output": "def string_search(string, string_list): \r\n    return [s for s in string_list if string in s]", "id": 769, "avg_similarity_score": 0.18774940264434278}
{"instruction": "Write a python function to find the frequency of all characters in a string. Your code should pass these tests:\n\nassert frequency_Of_Char(\"Hello world!\")=={'H':1, 'e':1, 'l':3, 'o':2, ' ': 1, 'w':1, 'r':1, 'd':1, '!':1}\nassert frequency_Of_Char(\"AAAA\")=={'A':4}\nassert frequency_Of_Char(\"\")=={}", "output": "def frequency_Of_Char(string):\r\n    freq = {} \r\n    for i in string: \r\n        if i in freq: \r\n            freq[i] += 1\r\n        else: \r\n            freq[i] = 1\r\n    return freq", "id": 770, "avg_similarity_score": 0.21133149109666166}
{"instruction": "Write a python program to find the area of an isosceles triangle. Your code should pass these tests:\n\nassert isosceles_Area(3,3,4) == 6\nassert isosceles_Area(3,5,5) == 10.8\nassert isosceles_Area(8,8,11) == 32", "output": "def isosceles_Area(a,b,c): \n    s=(a + b + c) / 2.0\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5", "id": 771, "avg_similarity_score": 0.1418275544940753}
{"instruction": "Write a python program to print the numbers from 1 to 10 in descending order. Your code should pass these tests:\n\nassert descending_Order() == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert descending_Order() != [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def descending_Order(): \r\n    array = []\r\nfor i in range(10, 0 ,-1): \r\n        array.append(i) \r\n    return array", "id": 772, "avg_similarity_score": 0.04283953252537211}
{"instruction": "Write a python function to find the maximum sum subarray using dynamic programming. Your code should pass these tests:\n\nassert max_Sum_Subarray_DP([1, -3, 2, -5, 7, 6, -1, -4, 11, -23]) == 20\nassert max_Sum_Subarray_DP([-2, 11, -4, 13, -5, 2]) == 20\nassert max_Sum_Subarray_DP([3, -2, -1, 4, -5]) == 6", "output": "def max_Sum_Subarray_DP(list1): \r\n    sum = 0\r\n    max_sum = 0\r\n    for i in range(len(list1)): \r\n        sum += list1[i] \r\n        if (sum < 0): \r\n            sum = 0\r\n        if (sum > max_sum): \r\n            max_sum = sum \r\n    return max_sum", "id": 773, "avg_similarity_score": 0.0927280003578786}
{"instruction": "Write a python function to divide two integers without using multiplication, division and mod operator. Your code should pass these tests:\n\nassert divide(20, 5) == 4\nassert divide(14, 2) == 7\nassert divide(56, -7) == -8", "output": "def divide(x, y): \n    sign = -1 if (x * y) < 0 else 1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\r\n    while x >= y: \r\n        x -= y \r\n        result += 1\n  \n    return sign * result", "id": 774, "avg_similarity_score": 0.032106847345523305}
{"instruction": "Write a python program to convert an array into zig-zag fashion. Your code should pass these tests:\n\nassert zigzag_Array([4, 3, 7, 8, 6, 2, 1]) == [3, 7, 4, 8, 2, 6, 1]\nassert zigzag_Array([1, 4, 3, 2]) == [1, 4, 2, 3]\nassert zigzag_Array([0, 0, 0, 0]) == [0, 0, 0, 0]", "output": "def zigzag_Array(array): \r\n    for i in range(len(array)-1): \r\n        if i%2 == 0: \r\n            if array[i] > array[i+1]: \r\n                array[i], array[i+1] = array[i+1], array[i] \r\n        elif array[i] < array[i+1]: \r\n            array[i], array[i+1] = array[i+1], array[i] \r\n    return array", "id": 775, "avg_similarity_score": 0.00036396724294813473}
{"instruction": "Write a python function to sort a dictionary by value in descending order. Your code should pass these tests:\n\nassert sort_dict_by_value({'a':2,'b':1}) == {'a': 2, 'b': 1}\nassert sort_dict_by_value({'a':2,'b':3,'c':1}) == {'b': 3, 'a': 2, 'c': 1}\nassert sort_dict_by_value({'a':2,'b':3,'c':2}) == {'b': 3, 'a': 2, 'c':2}", "output": "def sort_dict_by_value(dictionary):\r\n  sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1], reverse = True)\r\n  return dict(sorted_dictionary)", "id": 776, "avg_similarity_score": 0.10126817299297973}
{"instruction": "Write a python function to generate n prime numbers. Your code should pass this test:\n\nassert get_n_primes(3) == [2, 3, 5]", "output": "def get_n_primes(n): \r\n    prime_numbers = []\r\n    num = 2\r\n    while len(prime_numbers) < n:\r\n        if is_prime(num):\r\n            prime_numbers.append(num)\r\n        num += 1\r\n    return prime_numbers", "id": 777, "avg_similarity_score": 0.059400668041683216}
{"instruction": "Write a python function to find the longest substring that is present in both the given strings. Your code should pass this test:\n\nassert longest_substring(\"abcd\", \"bcdg\") == \"bcd\"", "output": "def longest_substring(string1, string2): \r\n    answer = \"\"  \r\n    len1, len2 = len(string1), len(string2) \r\n    for i in range(len1): \r\n        match = \"\" \r\n        for j in range(len2): \r\n            if (i + j < len1 and string1[i + j] == string2[j]): \r\n                match += string2[j] \r\n            else: \r\n                if (len(match) > len(answer)): \r\n                    answer = match \r\n                match = \"\" \r\n            \r\n    return answer", "id": 778, "avg_similarity_score": 0.12103072383075934}
{"instruction": "Write a python function to find the degree of overlap between two given ranges. Your code should pass this test:\n\nassert overlap_degree((1, 10), (3, 12)) == 0.56", "output": "def overlap_degree(r1, r2):\r\n  left = max(r1[0],r2[0])\r\n  right = min(r1[1],r2[1])\r\n  overlap = right - left\r\n  total = max(r1[1], r2[1]) - min(r1[0], r2[0])\r\n\r\n  return overlap/total", "id": 779, "avg_similarity_score": 0.1309346989938222}
{"instruction": "Write a python function to generate a list of Pascal's triangles with the given size. Your code should pass this test:\n\nassert generate_pascal_triangles(5) ==[ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ]", "output": "def generate_pascal_triangles(rows): \r\n    triangle = [] \r\n  \r\n    for row in range(rows): \r\n        l = [0 for i in range(row + 1)] \r\n        l[0], l[-1] = 1, 1\r\n  \r\n        for i in range(1, row): \r\n            l[i] = triangle[row-1][i-1] + triangle[row-1][i] \r\n  \r\n        triangle.append(l) \r\n      \r\n    return triangle", "id": 780, "avg_similarity_score": 0.10685248937380412}
{"instruction": "Write a python function to map a given set of words to their lengths. Your code should pass this test:\n\nassert word_length_mapping([\"lazy\", \"dog\"]) == { \"lazy\": 4, \"dog\": 3 }", "output": "def word_length_mapping(words):\r\n  res_dict = {}\r\n  for word in words:\r\n    res_dict[word] = len(word)\r\n  return res_dict", "id": 781, "avg_similarity_score": 0.04198373983870414}
{"instruction": "Write a Python function to check if an array contains an element or not. Your code should pass these tests:\n\nassert contains_element([1,4,6],4) == True\nassert contains_element([1,2,3],5) == False\nassert contains_element(['a','b','c','g'], 'g') == True", "output": "def contains_element(arr, element): \n    if element in arr: \n        return True\n    else: \n        return False", "id": 782, "avg_similarity_score": 0.05520300215965807}
{"instruction": "Write a Python function to find the length of longest common subarray between two given arrays. Your code should pass these tests:\n\nassert sub_array_length([2,3,7,2,1,4,6], [7,2,5]) == 3\nassert sub_array_length([6,7,2,3,7,2,1], [1,2,7]) == 4\nassert sub_array_length([3,7,2,4], [9,2]) == 2", "output": "def sub_array_length (A,B): \r\n    result = 0\r\n    idx_A = 0\r\n    len_A = len(A)\r\n    len_B = len(B)\r\n    while (idx_A <= len_A - 1) and (idx_B <= len_B - 1): \r\n        if (A[idx_A] == B[idx_B]): \r\n            count = 0 \r\n            while (idx_A <= len_A - 1) and (idx_B <= len_B - 1) and (A[idx_A] == B[idx_B]): \r\n                count = count + 1 \r\n                idx_A = idx_A + 1 \r\n                idx_B = idx_B + 1 \r\n        if result < count: \r\n            result = count \r\n    return result", "id": 783, "avg_similarity_score": 0.16128819545719494}
{"instruction": "Write a python program to make a copy of a list. Your code should pass these tests:\n\nassert copy_list([1,2,3]) == [1,2,3]\nassert copy_list([\"a\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]\nassert copy_list([2,4,6]) == [2,4,6]", "output": "def copy_list(in_list): \r\n    new_list = []\r\n    for e in in_list:\r\n        new_list.append(e)\r\n    return new_list", "id": 784, "avg_similarity_score": 0.1667237288500807}
{"instruction": "Write a python funtion to return the index of an item in a list if it exists. Your code should pass these tests:\n\nassert index_of([1,2,3], 2) == 1\nassert index_of([\"a\",\"b\",\"c\"], \"b\") == 1\nassert index_of([3,4,5], 1) == -1", "output": "def index_of(my_list, item):\r\n    for index, value in enumerate(my_list):\r\n        if value == item:\r\n            return index\r\n    return -1", "id": 785, "avg_similarity_score": 0.17469891654624434}
{"instruction": "Write a function to increase the value of an item in a given list at the given index. Your code should pass these tests:\n\nassert update_item([1,2,3,4], 0, 1) ==[2,2,3,4]\nassert update_item([56,12,78], 2, 50) == [56,12,128]\nassert update_item(['a', 'b', 'c'], 1, 'd') == ['a', 'd', 'c']", "output": "def update_item(list1, index, val): \r\n    list1[index] += val \r\n    return list1", "id": 786, "avg_similarity_score": 0.2013188480136513}
{"instruction": "Write a function to process a given list of strings and concatenate the strings in the same order. Your code should pass the following tests:\n\nassert process_list(['My', 'name', 'is', 'Codex']) == 'MynameisCodex'\nassert process_list(['Python', 'Programming', 'language']) == 'PythonProgramminglanguage'\nassert process_list(['So', 'Coding', 'Makes', 'Fun']) == 'SoCodingMakesFun'", "output": "def process_list(list1):\r\n    result = \"\"\r\n    for i in range(0, len(list1)):\r\n        result += list1[i]\r\n    return result", "id": 787, "avg_similarity_score": 0.09758814907542691}
{"instruction": "Write a function to remove duplicates from a given list of strings. Your code should pass the following tests:\n\nassert remove_duplicates(['My', 'Name', 'is', 'Codex', 'My']) ==  ['Name', 'is', 'Codex']\n assert remove_duplicates(['Python', 'Programming', 'language', 'Python']) ==  ['Programming', 'language']\n assert remove_duplicates(['So', 'Coding', 'Makes', 'Fun', 'So']) ==  ['Coding', 'Makes', 'Fun']", "output": "def remove_duplicates(lst): \r\n    res = [] \r\n  \r\n    for num in lst: \r\n        if num not in res: \r\n            res.append(num) \r\n              \r\n    return res", "id": 788, "avg_similarity_score": 0.08494528574281587}
{"instruction": "Write a function to sort a given list of strings in descending order according to the number of characters in the strings. Your code should pass these tests:\n\nassert desc_sort_chars(['My', 'Name', 'is', 'Codex']) == ['Name', 'Codex', 'My', 'is']\nassert desc_sort_chars(['Python', 'Programming', 'language']) == ['Programming', 'Python', 'language']\nassert desc_sort_chars(['So', 'Coding', 'Makes', 'Fun']) == ['Coding', 'Makes', 'Fun', 'So']", "output": "def desc_sort_chars(lst): \r\n    lst.sort(key = len, reverse = True) \r\n    return lst", "id": 789, "avg_similarity_score": 0.16903292057067335}
{"instruction": "Write a function to print items of a given list which are divisible by a given number. Your code should pass the following tests:\n\nassert divisible_list([2, 4, 6, 7, 8], 3) == [6]\nassert divisible_list([1, 2, 3, 4, 5], 3) == [3]\nassert divisible_list([1, 2, 3, 6, 7], 3) == [3, 6]", "output": "def divisible_list(lst, n): \r\n    res = [] \r\n    for ele in lst: \r\n        if ele % n == 0: \r\n            res.append(ele) \r\n  \r\n    return res", "id": 790, "avg_similarity_score": 0.09878584631172066}
{"instruction": "Write a function to return a dictionary containing the number of occurrences of each word in the given string. Your code should pass the following tests:\n\nassert count_words('My name is Codex') == {'My': 1, 'name': 1, 'is': 1, 'Codex': 1}\nassert count_words('Python is a popular programming language') == {'Python': 1, 'is': 1, 'a': 1, 'popular': 1, 'programming': 1, 'language': 1}\nassert count_words('So coding makes fun') == {'So': 1, 'coding': 1, 'makes': 1, 'fun': 1}", "output": "def count_words(string):  \r\n    w_list = string.split()  \r\n    count = dict() \r\n    for char in w_list:  \r\n        if char in count:  \r\n            count[char]+= 1\r\n        else:  \r\n            count[char] = 1\r\n  \r\n    return count", "id": 791, "avg_similarity_score": 0.07980578597428314}
{"instruction": "Write a function to obtain all possible permutations of a given list of strings. Your code should pass the following tests:\n\nassert all_permutations(['My', 'Name', 'is', 'Codex']) == [['My', 'Name', 'is', 'Codex'], ['My', 'Name', 'Codex', 'is'], ['My', 'is', 'Name', 'Codex'], ['My', 'is', 'Codex', 'Name'], ['My', 'Codex', 'Name', 'is'], ['My', 'Codex', 'is', 'Name'], ['Name', 'My', 'is', 'Codex'], ['Name', 'My', 'Codex', 'is'], ['Name', 'is', 'My', 'Codex'], ['Name', 'is', 'Codex', 'My'], ['Name', 'Codex', 'My', 'is'], ['Name', 'Codex', 'is', 'My'], ['is', 'My', 'Name', 'Codex'], ['is', 'My', 'Codex', 'Name'], ['is', 'Name', 'My', 'Codex'], ['is', 'Name', 'Codex', 'My'], ['is', 'Codex', 'My', 'Name'], ['is', 'Codex', 'Name', 'My'], ['Codex', 'My', 'Name', 'is'], ['Codex', 'My', 'is', 'Name'], ['Codex', 'Name', 'My', 'is'], ['Codex', 'Name', 'is', 'My'], ['Codex', 'is', 'My', 'Name'], ['Codex', 'is', 'Name', 'My']]", "output": "def all_permutations(words):\n    if len(words) == 0:\n        return []\n    if len(words) == 1:\n        return [words]\n    res = []\n    for i in range(len(words)):\n        first = words[i]\n        remainder = words[:i] + words[i+1:]\n        for p in all_permutations(remainder):\n            res.append([first] + p)\n    return res", "id": 792, "avg_similarity_score": 0.04121649500715515}
{"instruction": "Write a function to find the second last element in a given list. Your code should pass the following tests:\n\nassert second_last([1,2,3,4,5]) == 4\nassert second_last(['a','b','c','d']) == 'c'\nassert second_last([8,6,7,5,3,0,9]) == 7", "output": "def second_last(lst): \r\n    if (len(lst)<2): \r\n        return None \r\n    return lst[-2]", "id": 793, "avg_similarity_score": 0.1140826791462777}
{"instruction": "Write a python program to remove an element from a given list using the pop() method. Your code should pass these tests:\n\nassert remove_element ([10,20,30],1) == [10,30]\nassert remove_element ([3,4,2],0) == [4,2]\nassert remove_element ([10,20,30],2)== [10,20]", "output": "def remove_element(list,index):\n    list.pop(index)\n    return list", "id": 794, "avg_similarity_score": 0.15958237092456903}
{"instruction": "Write a function to print all items in a given dictionary in a readable format. Your code should pass these tests:\n\nassert print_dict({\"key1\":5,\"key2\":7})==\"key1: 5, key2: 7\"\nassert print_dict({\"key1\":\"A\",\"key2\":\"BC\"})==\"key1: A, key2: BC\"\nassert print_dict({\"key1\":8.4,\"key2\":34.2})==\"key1: 8.4, key2: 34.2\"", "output": "def print_dict(dict_): \r\n  output = \"\"\r\n  for key, value in dict_.items():\r\n    output += key+\": \"+str(value)+\", \"\r\n  output = output[:-2]\r\n  return output", "id": 795, "avg_similarity_score": 0.1449154004806983}
{"instruction": "Write a function to perform sorting based on a given value. Your code should pass these tests:\n\nassert sort_by_value([(6,3),(2,3),(21,24),(9,25)],24) == [(21,24),(2,3),(6,3),(9,25)]\nassert sort_by_value([(63,2),(29, 3)],3) == [(29, 3),(63,2)]\nassert sort_by_value([(2,7) ,(1,6),(3,7)], 7) == [(2,7),(3,7),(1,6)]", "output": "def sort_by_value(seq, val): \n    return sorted(seq, key=lambda key: key[1] == val, reverse=True)", "id": 796, "avg_similarity_score": 0.12319000194487988}
{"instruction": "Write a function to clear the most significant bit of a given number. Your code should pass these tests:\n\nassert clearMSB(100) == 4\nassert clearMSB(0b101) == 110\nassert clearMSB(37) == 36", "output": "def clearMSB(num): \n  i = 0\n  while num >= 1: \n    num = num/2\n    i = i+1    \n  res = num ^ (1 << (i - 1))   \n  return res", "id": 797, "avg_similarity_score": 0.20186625987958143}
{"instruction": "Write a python program to generate a 3x3 matrix filled with random numbers, and then find the sums of the row, column and diagonal elements. Your code should pass these tests:\n\nassert row_sums([[1,2,3],[4,5,6],[7,8,9]]) == [6,15,24]\nassert col_sums([[1,2,3],[4,5,6],[7,8,11]]) == [12,15,13]\nassert diagonal_sums([[1,2,3],[4,5,6],[7,8,9]]) == [4,15,16]", "output": "import numpy as np\r\n\r\ndef row_sums(matrix):\r\n    row_sum = []\r\n    for row in matrix: \r\n        row_sum.append(sum(row))\r\n    return row_sum\r\n    \r\ndef col_sums(matrix):\r\n    col_sum = []\r\n    for col in zip(*matrix): \r\n        col_sum.append(sum(col))\r\n    return col_sum\r\n    \r\ndef diagonal_sums(matrix):\r\n    diagonal_sum = []\r\n    for i in range(len(matrix)): \r\n        diagonal_sum.append(matrix[i][i])\r\n    diagonal_sum.append(sum(diagonal_sum))\r\n    return diagonal_sum", "id": 798, "avg_similarity_score": 0.12263733184438745}
{"instruction": "Write a Python program to print the elements in a set without duplicates and in the same order as declared.\n\nExample: set1 = {5, 2, 3, 6, 2, 1}\n\nOutput: 5\t2\t3\t6\t1", "output": "set1 = {5, 2, 3, 6, 2, 1}\r\n\r\nfor i in set1:\r\n  print(i,end=\"\\t\")", "id": 799, "avg_similarity_score": 0.09976354381394523}
{"instruction": "Write a Python program to count the frequency of each unique word in a string. Your code should pass these tests:\n\nassert frequency_count(\"find the frequency of the words in this string\") == {'find':1, 'the':2, 'frequency':1, 'of':1, 'words':1, 'in':1, 'this':1, 'string':1}\nassert frequency_count(\"The cat in the hat\") == {'the':2, 'cat':1, 'in':1, 'hat':1}", "output": "def frequency_count(str1): \r\n    list1 = str1.split() \r\n    unique_words = set(list1) \r\n    words_count = {word:list1.count(word) for word in unique_words} \r\n    return words_count", "id": 800, "avg_similarity_score": 0.1812125323670064}
{"instruction": "Write a Python program to merge two dictionaries into a new dictionary preserving the values of common keys. Your code should pass these tests:\n\nassert merge_dicts({2: 4, 1: 2}, {3: 6, 2: 3}) == {2: 3, 1: 2, 3: 6}\nassert merge_dicts({1: 2}, {3: 6, 2: 3}) == {2: 3, 1: 2, 3: 6}", "output": "def merge_dicts(dict1, dict2): \r\n    res = {**dict1, **dict2} \r\n    for key, value in dict1.items(): \r\n        if key in dict2: \r\n            res.update({key: min(value, dict2[key])}) \r\n    return res", "id": 801, "avg_similarity_score": 0.14408232967585294}
{"instruction": "Write a python program to calculate the total number of occurrences of all given words in a string. Your code should pass these tests:\n\nassert count_words(\"Test the code with different test cases\", \"test\", \"code\", \"cases\") == 3\nassert count_words(\"Analyze the given string\", \"analyze\", \"string\") == 2", "output": "def count_words(string, *words): \r\n    result = 0\r\n    for word in words: \r\n        result += string.count(word) \r\n    return result", "id": 802, "avg_similarity_score": 0.15530306895723392}
{"instruction": "Write a python function that takes a string and a number n and returns a list of all substrings of size n from the given string. Your code should pass these tests:\n\nassert substrings_of_size('teststring', 3) == ['tes', 'est', 'stt', 'str', 'tri', 'rin', 'ing']\nassert substrings_of_size('tech', 2) == ['te', 'ec', 'ch']", "output": "def substrings_of_size(string, n):\r\n    res=[]\r\n    for i in range(len(string)+1-n):\r\n        res.append(string[i:i+n])\r\n    return res", "id": 803, "avg_similarity_score": 0.13117383162421878}
{"instruction": "Write a python program to convert a list of character into a string. Your code should pass this test:\n\nassert list_to_string(['t', 'e', 's', 't']) == 'test'", "output": "def list_to_string(list1): \r\n    return ''.join(list1)", "id": 804, "avg_similarity_score": 0.109115652490759}
{"instruction": "Write a python program to count vowels in a given string. Your code should pass this test:\n\nassert count_vowels(\"hello, how are you today\") == 8", "output": "def count_vowels(string): \r\n    vowels = \"aeiou\"\r\n    count = 0\r\n    for char in string: \r\n        if char in vowels: \r\n            count += 1 \r\n    return count", "id": 805, "avg_similarity_score": 0.12428900056475711}
{"instruction": "Write a Python program to find the maximum and minimum value in a given list. Your code should pass this test:\n\nassert min_max([1, 2, 3, 4, 5, 6]) == (1, 6)", "output": "def min_max(list1): \r\n  return (min(list1), max(list1))", "id": 806, "avg_similarity_score": 0.15728809634614824}
{"instruction": "Write a program to print the numbers from 1 to 10 in reverse order using loop. Your code should pass these tests:\n\nassert reverse_loop(10) == [10,9,8,7,6,5,4,3,2,1]\nassert reverse_loop(5) == [5,4,3,2,1]", "output": "def reverse_loop(num): \r\n  list1 = list(range(1, num+1)) \r\n  list1.reverse() \r\n  return list1", "id": 807, "avg_similarity_score": 0.04800439731094968}
{"instruction": "Write an algorithm to implement the selection sort algorithm. Your code should pass these tests:\n\nassert selection_sort([2,5,3,1,4]) == [1,2,3,4,5]\nassert selection_sort([9,7,8,2,3,2]) ==[2,2,3,7,8,9]", "output": "def selection_sort(list):\r\n    n = len(list)\r\n    for i in range(0, n):\r\n        for j in range(i , n):\r\n            if list[i] > list[j]:\r\n                temp = list[i]\r\n                list[i] = list[j]\r\n                list[j] = temp\r\n    return list", "id": 808, "avg_similarity_score": 0.07327073790081604}
{"instruction": "Write a python program that takes the base and the height of a triangle and computes the area. Your code should pass these tests:\n\nassert triangleArea(2,3) == 3\nassert triangleArea(5,6) == 15", "output": "def triangleArea(base , height):\n    area = (1/2 * base * height)\n    return area", "id": 809, "avg_similarity_score": 0.13968794662841874}
{"instruction": "Write a program to print all prime numbers in a given range. Your code should pass this test:\n\nassert print_Prime(1,10) == [2,3,5,7]", "output": "def print_Prime(begin,end): \r\n    prime_list = [] \r\n    for i in range(begin, end+1): \r\n        count = 0\r\n        for j in range (2, i//2 + 1): \r\n            if(i % j == 0): \r\n                count = 1\r\n                break\r\n        if (count == 0 and i !=1): \r\n            prime_list.append(i) \r\n    return prime_list", "id": 810, "avg_similarity_score": 0.13086933207942633}
{"instruction": "Write a function to check if two strings are anagrams. Your code should pass this test:\n\nassert is_Anagram(\"silent\", \"listen\") == True", "output": "def is_Anagram(s1,s2):\r\n   s1 = s1.replace(\" \",\"\")\r\n   s2= s2.replace(\" \",\"\")\r\n   if(len(s1)!=len(s2)):\r\n      return False\r\n   sort_s1 = sorted(s1)\r\n   sort_s2 = sorted(s2)\r\n   if (sort_s1 == sort_s2):\r\n      return True\r\n   return False", "id": 811, "avg_similarity_score": 0.07043046916719985}
{"instruction": "Write a function for binary search on an array. Your code should pass these tests: \n\nassert binarySearch([4, 5, 7, 8, 9, 10, 11], 5) == 4\nassert binarySearch([4, 5, 7, 8, 9, 10, 11], 8) == 3\nassert binarySearch([4, 5, 7, 8, 9, 10, 11], 13) == -1", "output": "def binarySearch(arr, key): \r\n    high = len(arr)-1\r\n    low = 0\r\n    mid = 0\r\n\r\n    while(low<=high): \r\n        mid = (high + low)//2; \r\n          \r\n        # Check if key is present at mid \r\n        if (arr[mid] < key): \r\n            low = mid + 1\r\n  \r\n        # If key is greater, ignore left part \r\n        elif (arr[mid] > key): \r\n            high = mid - 1\r\n  \r\n        # If key is equal, return mid \r\n        else: \r\n            return mid \r\n  \r\n    # If not found \r\n    return -1", "id": 812, "avg_similarity_score": 0.09794012946679767}
{"instruction": "Write a function to calculate sum of a given list, considering the largest and smallest numbers separately. Your code should pass these tests:\n\nassert sum_largest_smallest([2,4,6,8,10]) == 24\nassert sum_largest_smallest([6,2,3,9,7]) == 20", "output": "def sum_largest_smallest(nums): \n  \n    min = nums[0]\n    max = nums[0]\n    sm = 0\n    lg = 0\n    # traverse the array \n    for i in range(len(nums)):  \n        # minimum element \n        if(nums[i] < min): \n            min = nums[i] \n        # maximum element \n        if(nums[i] > max): \n            max = nums[i]\n        \n    # calculate small and large sum \n    sm = sm + min \n    lg = lg + max\n    \n    # returning required sum \n    return (sm + lg)", "id": 813, "avg_similarity_score": 0.17251485542644865}
{"instruction": "Write a function to sort the given dictionary by its values. Your code should pass this test:\n\nassert sort_Dictionary({'man':28, 'woman':32, 'girl':19}) == {'girl':19, 'man':28, 'woman':32}", "output": "def sort_Dictionary(dictionary): \n    sorted_dict = dict(sorted(dictionary.items(), key = lambda kv:(kv[1], kv[0]))) \n    \n    return sorted_dict", "id": 814, "avg_similarity_score": 0.08255037993119788}
{"instruction": "Write a function to generate all permutations of a given string. Your code should pass this test:\n\nassert get_Permutations(\"abc\") == [\"abc\",\"bac\",\"bca\",\"acb\",\"cab\",\"cba\"]", "output": "def get_Permutations(string): \r\n  \r\n    # base case \r\n    if len(string) == 0: \r\n        return [''] \r\n  \r\n    prev_list = get_Permutations(string[1:len(string)]) \r\n    next_list = [] \r\n    ch = string[0] \r\n  \r\n    # Loop through all words in prev_list \r\n    for i in range(0,len(prev_list)): \r\n        for j in range(0,len(prev_list[i])+1): \r\n            new_str = prev_list[i][0:j]+ch+prev_list[i][j:len(prev_list[i])] \r\n            if new_str not in next_list: \r\n                next_list.append(new_str) \r\n    return next_list", "id": 815, "avg_similarity_score": 0.1310988825350684}
{"instruction": "Write a function to convert a given value from Fahrenheit to Celsius scaled numbers with 2 decimal points of precision. Your code should pass these tests:\n\nassert to_Celsius(32) == 0.00\nassert to_Celsius(212) == 100.00\nassert to_Celsius(98.4) == 36.89", "output": "def to_Celsius(f): \r\n    return round((f-32)*5/9,2)", "id": 816, "avg_similarity_score": 0.05855624054901818}
{"instruction": "Write a function that takes two lists of integers and merges them while maintaining the relative order. Your code should pass these tests:\n\nassert merge_lists([2,4,6],[1,3,5])==[1,2,3,4,5,6]\nassert merge_lists([2,4,6,8],[2,4,7])==[2,2,4,4,6,7,8]\nassert merge_lists([13,11,9],[15,10,7,8])==[7,8,9,10,11,13,15]", "output": "def merge_lists(lst1, lst2): \r\n    sorted_list = [] \r\n \r\n    i, j = 0, 0\r\n    n1 = len(lst1)\r\n    n2 = len(lst2)\r\n \r\n    while i<n1 and j<n2: \r\n        if lst1[i] < lst2[j]: \r\n            sorted_list.append(lst1[i]) \r\n            i += 1\r\n \r\n        else: \r\n            sorted_list.append(lst2[j]) \r\n            j += 1\r\n  \r\n    while i < n1: \r\n        sorted_list.append(lst1[i]) \r\n        i += 1\r\n \r\n    while j < n2: \r\n        sorted_list.append(lst2[j]) \r\n        j += 1\r\n\r\n    return sorted_list", "id": 817, "avg_similarity_score": 0.10961765954044908}
{"instruction": "Write a function to validate a given IP address. Your code should pass these tests:\n\nassert validate_IP(\"192.168.0.1\") == True\nassert validate_IP(\"125.0.208.195\") == True\nassert validate_IP(\"0.0.0.0\") == False", "output": "def validate_IP(ip):   \r\n    octet = ip.split('.')\r\n    valid = [int(i) for i in octet if int(i) >= 0 and int(i) <= 255]\r\n    return len(valid) == 4", "id": 818, "avg_similarity_score": 0.1361127880676882}
{"instruction": "Write a python program to delete a node from a linked list given the head of the list and the node to be deleted. Your code should pass these tests:\n\nassert delete_node([1,2,3,4],2) == [1,3,4]\nassert delete_node([1,2,3],3) == [1,2]\nassert delete_node([1,2,3,4,5],1) == [2,3,4,5]", "output": "def delete_node(head,node_data): \n  \n    # Store head node \n    temp = head  \n  \n    # If head node itself holds the data to be deleted \n    if (temp is not None): \n        if (temp.data == node_data): \n            head = temp.next\n            temp = None\n            return head \n  \n    # Search for the data to be deleted, keep track of the \n    # previous node as we need to change 'prev->next' \n    while(temp is not None): \n        if temp.data == node_data: \n            break \n        prev = temp \n        temp = temp.next\n  \n    # if data is not present in linked list \n    if(temp == None): \n        return head \n  \n    # Unlink the node from linked list \n    prev.next = temp.next\n  \n    temp = None\n    return head", "id": 819, "avg_similarity_score": 0.0008059912118291232}
{"instruction": "Write a python program to insert a node in a doubly linked list at a specified position. Your code should pass these tests:\n\nassert insert_node([1,2,3,4],2,5) == [1,2,5,3,4]\nassert insert_node([1,2],1,3) == [1,3,2]\nassert insert_node([1,2,3],0,4) == [4,1,2,3]", "output": "def insert_node(head, position, data): \n      \n    if head == None: \n        return None \n  \n    temp = Node(data) \n  \n    if position == 0: \n        temp.next = head \n        head.prev = temp \n        head = temp \n        return head \n  \n    count = 0\n    curr = head \n  \n    while curr and count < position: \n        prev = curr \n        curr = curr.next\n        count += 1\n  \n    temp.next = curr \n    prev.next = temp \n    temp.prev = prev \n    if curr is not None: \n        curr.prev = temp \n  \n    return head", "id": 820, "avg_similarity_score": 0.11301878519169864}
{"instruction": "Write a python program to find the numbers of distinct paths from top left corner to bottom right corner of a matrix. Your code should pass these tests:\n\nassert matrixPaths(2,2) == 2\nassert matrixPaths(3,3) == 6\nassert matrixPaths(4,4) == 20", "output": "def matrixPaths(m, n): \n  \n    # Create a 2D matrix to \n    # store results of subproblems \n    dp = [[1 for i in range(n)] for j in range(m)] \n  \n    # Fill d[][] in bottom up manner \n    for i in range(m): \n        for j in range(n): \n            if(i!=0 or j!=0): \n                dp[i][j] = dp[i-1][j] + dp[i][j-1] \n              \n    return dp[m-1][n-1]", "id": 821, "avg_similarity_score": 0.12330608151699529}
{"instruction": "Write a python function which takes a string and converts it into a 3D grid. Your code should pass these tests:\n\nassert grid_3D(\"Python\") == [[[\"P\"], [\"y\"], [\"t\"], [\"h\"], [\"o\"], [\"n\"]]]\nassert grid_3D(\"Hello\") == [[[\"H\"], [\"e\"], [\"l\"], [\"l\"], [\"o\"]]]\nassert grid_3D(\"Codecup\") == [[[\"C\"], [\"o\"], [\"d\"], [\"e\"], [\"c\"], [\"u\"], [\"p\"]]]", "output": "def grid_3D(string): \n    result_list = [list(string)] \n    threeD_list=[] \n    for k in result_list: \n        l1 = [] \n        l2 = []\n        for i in k:  \n            l1.append([i]) \n        l2.append(l1) \n        threeD_list.append(l2) \n    \n    return threeD_list", "id": 822, "avg_similarity_score": 0.09514618097657206}
{"instruction": "Write a python function which takes a sorted list of integers and returns the index of a given number. Your code should pass these tests:\n\nassert binary_search([2, 3, 4, 10, 40], 4) == 2\nassert binary_search([-2, 0, 3, 10, 40], -2) == 0\nassert binary_search([12, 25, 46, 67, 78, 89], 67) == 3", "output": "def binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n    while low <= high: \n        mid = (high + low) // 2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid  \n    return -1", "id": 823, "avg_similarity_score": 0.1710892927075107}
{"instruction": "Write a python program to compare two strings and store the common and unique elements in different lists. Your code should pass these tests:\n\nassert compare_Strings(['a', 'b', 'c'], ['b', 'a', 'h', 'i']) == (['a', 'b'], ['c', 'h', 'i'])\nassert compare_Strings([\"apple\", \"orange\"], [\"orange\", \"banana\"]) == ([\"orange\"], [\"apple\", \"banana\"])\nassert compare_Strings([], []) == ([], [])", "output": "def compare_Strings(a, b): \n    list_common = [] \n    list_unique = a + b \n    for i in a: \n        for j in b: \n            if(i == j): \n                list_common.append(i) \n                list_unique.remove(j)  \n    return list_common, list_unique", "id": 824, "avg_similarity_score": 0.09814009405839422}
{"instruction": "Write a python function to find the number of single uppercase letters in a given string.  Your code should pass these tests:\n\nassert num_UpperCaseLetters(\"123Hello\") == 2\nassert num_UpperCaseLetters(\"abc123\") == 0\nassert num_UpperCaseLetters(\"CODECUP\") == 7", "output": "def num_UpperCaseLetters(input_str): \n    num = 0\n    for char in input_str:  \n        if(char.istitle()):  \n            num += 1  \n    return num", "id": 825, "avg_similarity_score": 0.22758013386100964}
{"instruction": "Write a python function to check whether a given string ends with a given substring. Your code should pass these tests:\n\nassert ends_with( \"abcde\", \"de\") == True  \nassert ends_with( \"codecup\", \"odecu\") == False \nassert ends_with( \"codeup\", \"up\") == True", "output": "def ends_with(input_str, target): \n    n = len(target)  \n    if (input_str[-n:] == target): \n   \t    return True\n    return False", "id": 826, "avg_similarity_score": 0.14577423987391094}
{"instruction": "Write a python function to find if its possible to construct a specified no. of squares with a given no. of matchsticks. Your code should pass these tests:\n\nassert make_Squares(6,3) == True\nassert make_Squares(5,3) == False  \nassert make_Squares(10,1) == False", "output": "def make_Squares(matchsticks, num): \n    if(num == 0): \n        return True\n    elif(matchsticks < num or matchsticks == 0): \n        return False\n    else: \n        return make_Squares(matchsticks - num, num) or make_Squares(matchsticks - 1,num - 1)", "id": 827, "avg_similarity_score": 0.15022120551565085}
{"instruction": "Write a python function to return the determinant of a given matrix. Your code should pass these tests:\n\nassert determinant([[1,2,3], \n                    [4,5,6], \n                    [7,8,9]]) == 0\nassert determinant([[4,2,5], \n                    [3,6,9], \n                    [1,7,8]]) == -250\nassert determinant([[2,3], \n                    [1,4]]) == -2", "output": "def determinant(matrix): \r\n  \r\n    # base case for 2x2 matrix \r\n    if len(matrix) == 2: \r\n        return matrix[0][0]*matrix[1][1]-matrix[0][1]*matrix[1][0] \r\n  \r\n    # stores coefficient and sign \r\n    # (needed for updating the determinant \r\n    coefficient = 1 \r\n    sign = 1 \r\n  \r\n    # Iterate for each element of first row \r\n    for i in range(len(matrix)): \r\n  \r\n        # Getting Cofactor of A[0][i] \r\n        sub_matrix = get_submatrix(matrix, 0, i) \r\n  \r\n        # TODO: sign of the element \r\n        # signing the co-factor with sign variable \r\n        sign = (-1) ** (2 + i) \r\n  \r\n        # TODO: Calculating determinant of submatrix \r\n        # saddle point entry \r\n        sub_det = determinant(sub_matrix) \r\n  \r\n        # TODO: Convoluting determinants \r\n        # convoluting sub_det to with a[0][i] and sign \r\n        coefficient += sign * matrix[0][i] * sub_det \r\n  \r\n    return coefficient \n\n \n# function to get submatrix of matrix  \r\n# recieving parent matrix, row and columns to be \r\n# deleted to make submatrix \r\ndef get_submatrix(matrix, deleting_row, deleting_col): \r\n    submat = [] \r\n  \r\n    # iterating parent matrix to make submatrix \r\n    for i in range(len(matrix)): \r\n  \r\n        # avoiding the row to be deleted \r\n        if i == deleting_row: \r\n            continue\r\n  \r\n        row = [] \r\n        for j in range(len(matrix[0])): \r\n  \r\n            # avoiding the columns to be deleted \r\n            if j == deleting_col: \r\n                continue\r\n  \r\n            # adding element to row array \r\n            # for making submatrix \r\n            row.append(matrix[i][j]) \r\n  \r\n        # adding row to submatrix array \r\n        # for finally creating submatrix \r\n        submat.append(row) \r\n  \r\n    # returning submatrix \r\n    return submat", "id": 828, "avg_similarity_score": 0.2152787012947788}
{"instruction": "Write a python function to identify if a given number is prime. Your code should pass these tests:\n\nassert is_Prime(2) == True\nassert is_Prime(7) == True\nassert is_Prime(15) == False", "output": "def is_Prime(n): \r\n      \r\n    # Corner case \r\n    if (n <= 1): \r\n        return False\r\n  \r\n    # Check from 2 to n-1 \r\n    for i in range(2, n): \r\n        if (n % i == 0): \r\n            return False; \r\n  \r\n    return True", "id": 829, "avg_similarity_score": 0.15242725985926903}
{"instruction": "Write a function to calculate the Z-score for a given array. Your code should pass these tests:\n\nassert z_score([ 23, 24, 25, 26, 27, 28, 29, 30]) == [ -1.0727726, -0.7277259, -0.3826792, 0.06236854, 0.40741, 0.7524513, 1.097493, 1.442534 ]", "output": "from statistics import mean, stdev\ndef z_score(num_list):\n    z_scores = []\n    m = mean(num_list)\n    s = stdev(num_list)\n    for num in num_list:\n        z = (num - m )/s\n        z_scores.append(z)\n    return z_scores", "id": 830, "avg_similarity_score": 0.18132991063993487}
{"instruction": "Write a function to convert a string to CamelCase. Your code should pass these tests:\n\nassert camel_case(\"the quick brown fox\")==\"TheQuickBrownFox\"\nassert camel_case(\"this is a test\")==\"ThisIsATest\"\nassert camel_case(\"Hello World\")==\"HelloWorld\"", "output": "def camel_case(str):\n    ans = \"\"\r\n    str = str.split(\" \")\r\n    for word in str:\r\n        ans += word.capitalize()    */\n    return ans", "id": 831, "avg_similarity_score": 0.0}
{"instruction": "Write a function to calculate the root of quadratic equation. Your code should pass these tests:\n\nassert quadratic_equation(2,7,-3) == [-0.49999, 1.5]\nassert quadratic_equation(1,-4,4) == [2,2]\nassert quadratic_equation(3,2,1) == [-0.3333, -1]", "output": "from math import sqrt\ndef quadratic_equation(a,b,c): \n    d = (b**2) - (4*a*c)\n    root1 = (-b + sqrt(d)) / (2*a)\n    root2 = (-b - sqrt(d)) / (2*a)\n    return [root1,root2]", "id": 832, "avg_similarity_score": 0.1243354788465825}
{"instruction": "Write a function to check if two rectangles are overlapping or not. Your code should pass these tests:\n\nassert is_Overlapping(3,7,7,10,5,4,8,11) == True\nassert is_Overlapping(5,3,9,4,8,1,11,5) == True\nassert is_Overlapping(4,2,6,3,3,5,8,9) == False", "output": "def is_Overlapping(x1, y1, x2, y2, x3, y3, x4, y4): \r\n    if (x3 < x2 and y3 < y2 and x1 < x4 and y1 < y4): \r\n        return True \r\n    else: \r\n        return False", "id": 833, "avg_similarity_score": 0.04637689977199096}
{"instruction": "Write a Python function to detect if the given string is a palindrome. Your code should pass this test:\n\nassert palindrome('hello') == False", "output": "def palindrome(inp_string): \r\n\trev_str = inp_string[::-1] \r\n\tif (inp_string == rev_str): \r\n\t\treturn True\r\n\treturn False", "id": 834, "avg_similarity_score": 0.13904130471045478}
{"instruction": "Write a function to get the position index of integer 2 in a givenmatrix. Your code should pass these tests:\n\nassert get_index(4, [[1, 2, 3], [4, 5, 6], [7, 8, 2]]) == (2, 2)\nassert get_index(7, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (2, 0)\nassert get_index(2, [[8, 7, 6], [4, 5, 2], [3, 1, 0]]) == (1, 2)", "output": "def get_index(val, matrix):\n    x_idx, y_idx = -1, -1\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == val:\n                x_idx = i\n                y_idx = j\n                break\n        if x_idx != -1 and y_idx != -1:\n            break\n    return (x_idx, y_idx)", "id": 835, "avg_similarity_score": 0.16790154729996457}
{"instruction": "Write a Python script to sort a list of dictionaries by values of the dictionary key. Your code should pass this test:\n\nassert sort_dict([{'a': 1, 'b': 4}, {'a': 3, 'b': 2}, {'a': 5, 'b': 0}], 'b') == [{'a': 5, 'b': 0}, {'a': 3, 'b': 2}, {'a': 1, 'b': 4}]", "output": "def sort_dict(list_of_dicts, key1): \n     return sorted(list_of_dicts, key = lambda k: k[key1])", "id": 836, "avg_similarity_score": 0.09541344357239125}
{"instruction": "Write a python program to remove duplicate elements from a list. Your code should pass this test:\n\nassert remove_duplicate([1, 1, 5, 8, 4, 4]) == [1, 5, 8, 4]", "output": "def remove_duplicate(inp_list): \r\n\tfinalList = [] \r\n\tfor num in inp_list: \r\n\t\tif num not in finalList: \r\n\t\t\tfinalList.append(num) \r\n\treturn finalList", "id": 837, "avg_similarity_score": 0.09743513987302471}
{"instruction": "Write a Python script to generate the frequency of the numbers in a given list. Your code should pass this test:\n\nassert frequency([1, 7, 4, 5, 7, 1, 3, 4]) == {1: 2, 3: 1, 4: 2, 5: 1, 7: 2}", "output": "from collections import Counter \r\ndef frequency(inp_list): \r\n    return Counter(inp_list)", "id": 838, "avg_similarity_score": 0.14508998047682573}
{"instruction": "Write a python script to find the SUM of all the Elements in a given Matrix. Your code should pass this test:\n\nassert matrix_sum([[1,2,3], [4,5,6], [7,8,9]]) == 45", "output": "def matrix_sum(inp_matrix): \n    sum = 0\n    for row in inp_matrix: \r\n        for ele in row: \r\n            sum += ele \r\n    return sum", "id": 839, "avg_similarity_score": 0.16506352898966048}
{"instruction": "Create a function to check if a given number is prime. Your code should pass these tests:\n\nassert is_prime(3) == True\nassert is_prime(18) == False\nassert is_prime(13) == True", "output": "def is_prime(n):\n  if n < 2:\n    return False\n  \n  for i in range(2, n):\n    if n % i == 0:\n      return False\n    \n  return True", "id": 840, "avg_similarity_score": 0.15319750173610183}
{"instruction": "Write a function to merge two lists. Your code should pass these tests:\n\nassert merge_list([2,4,6], [1,3,5]) == [2,4,6,1,3,5]\nassert merge_list([1,3], [5,7,9]) == [1,3,5,7,9]\nassert merge_list([1,2], [4,5,6]) == [1,2,4,5,6]", "output": "def merge_list(list1, list2):\n  return list1 + list2", "id": 841, "avg_similarity_score": 0.026384801183214582}
{"instruction": "Write a python function to calculate the exponent of a positive integer using a linear recursive approach. Your code should pass these tests:\n\nassert calculate_exponent(2,0) == 1\nassert calculate_exponent(2,1) == 2\nassert calculate_exponent(2,3) == 8", "output": "def calculate_exponent(base, exponent): \r\n    if (exponent == 0): \r\n        return 1\r\n    else: \r\n        return base * calculate_exponent(base, exponent-1)", "id": 842, "avg_similarity_score": 0.14949386175678275}
{"instruction": "Write a python function to check if a given sequence of parentheses () and braces {} are valid or not. Your code should pass these tests:\n\nassert valid_parentheses('{()}[]') == True\nassert valid_parentheses('([()]{})') == True\nassert valid_parentheses('([))]{}') == False", "output": "def valid_parentheses(string): \r\n  \r\n    stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"} \r\n  \r\n    for parenthese in string: \r\n  \r\n        if parenthese in pchar: \r\n            stack.append(parenthese) \r\n  \r\n        elif len(stack) == 0 or pchar[stack.pop()] != parenthese: \r\n            return False\r\n  \r\n    return len(stack) == 0", "id": 843, "avg_similarity_score": 0.13860478288539713}
{"instruction": "Write a python program to convert a given list into a dictionary of key-value pairs. Your code should pass these tests:\n\nassert listToDict([('a',1),('b',2),('c',3)]) == {'a': 1, 'b': 2, 'c': 3}\nassert listToDict([(1, 'a'), (2, 'b'), (3, 'c')]) == {1: 'a', 2: 'b', 3: 'c'}", "output": "def listToDict(list): \n\n    res = {} \n    for key,value in list: \n        res[key] = value \r\n    return res", "id": 844, "avg_similarity_score": 0.1193056878273008}
{"instruction": "Write a python function to find the union of two given arrays. Your code should pass these tests:\n\nassert union([[1,2], [3,4]], [[2,4], [6,8]]) == [1,2,3,4,6,8]\nassert union([[1,2,3], [2,4,5]], [[6], [2,3,4,5]]) == [1,2,3,4,5,6]", "output": "def union(arr1,arr2): \r\n    res = [] \r\n    for i in arr1: \r\n        res = res + i \r\n        for j in arr2: \r\n            res = res + j\r\n    return list(set(res))", "id": 845, "avg_similarity_score": 0.18590789850527767}
{"instruction": "Write a python function to find the factorial of a number using a recursive approach. Your code should pass these test:\n\nassert factorial(6) == 720\nassert factorial(9) == 362880\nassert factorial(10) == 3628800", "output": "def factorial(num): \r\n    if (num == 1): \r\n        return 1\r\n    else: \r\n        return num * factorial(num - 1)", "id": 846, "avg_similarity_score": 0.10189299780926835}
{"instruction": "Write a python function to find the missing element in a given array of distinct elements between 1 and n. Your code should pass these tests:\n\nassert missingElement([1,3,5]) == 2\nassert missingElement([2,4,6,8,9,10]) == 7\nassert missingElement([4,5,6,7,8]) == 1", "output": "def missingElement(arr): \r\n    n = len(arr) \r\n  \r\n    total = (n + 1)*(n + 2)//2\r\n  \r\n    # Sum of array elements  \r\n    total_arr_sum = sum(arr) \r\n  \r\n    return total - total_arr_sum", "id": 847, "avg_similarity_score": 0.18577611981143421}
{"instruction": "Write a program to get the second largest number in a list. Your code should pass these tests:\n\nassert second_largest([8,11,2,10])==10\nassert second_largest([6,9,-4,-7])==-4", "output": "def second_largest(lst):\n  largest = max(lst[0], lst[1])\n  second_largest = min(lst[0], lst[1])\n  for i in range(2, len(lst)):\n    if lst[i] > largest:\n      second_largest = largest\n      largest = lst[i]\n    elif lst[i] > second_largest:\n      second_largest = lst[i]\n  return second_largest", "id": 848, "avg_similarity_score": 0.17786627186475415}
{"instruction": "Write a program to transpose a matrix (turn rows into columns and vice versa).\n\nYour code should pass these tests:\n\nassert transpose([[1,2],[3,4]])==[[1,3],[2,4]]\nassert transpose([[7,8,9],[4,5,6]])==[[7,4],[8,5],[9,6]]", "output": "def transpose(matrix):\r\n    return [list(i) for i in zip(*matrix)]", "id": 849, "avg_similarity_score": 0.012929756925525712}
{"instruction": "Write a program to find the number of occurrences of a word in a sentence. Your code should pass these tests:\n\nassert count_words(\"The quick brown fox jumps over the lazy dog\", \"dog\")==1\nassert count_words(\"This is is a is a test\", \"is\")==3", "output": "def count_words(sentence, word):\r\n  return sentence.count(word)", "id": 850, "avg_similarity_score": 0.19753807309692756}
{"instruction": "Write a program to replace a sub-string in a given string. Your code should pass these tests:\n\nassert replace_substring('this is coding', 'coding', 'programming')=='this is programming'\nassert replace_substring('this is programming', 'programming', 'an assignment')=='this is an assignment'", "output": "def replace_substring(str1, sub_str, new_str):\r\n  return str1.replace(sub_str, new_str)", "id": 851, "avg_similarity_score": 0.16761039927529983}
{"instruction": "Write a python function to find the maximum subarray sum which starts from the given index. Your code should pass these tests:\n\nassert maxSubArrSum(arr, 0) == 10\nassert maxSubArrSum(arr, 2) == -1\nassert maxSubArrSum(arr, 4) == 4", "output": "def maxSubArrSum(arr, index): \r\n    curr_max = arr[index] \r\n    max_so_far = arr[index] \r\n    for i in range(index+1,len(arr)): \r\n             curr_max = max(arr[i]-arr[index-1], curr_max + arr[i]) \r\n             max_so_far = max(max_so_far, curr_max) \r\n    \r\n    return max_so_far", "id": 852, "avg_similarity_score": 0.1298832976931496}
{"instruction": "Write a python function to count the number of times the target is found in an array. Your code should pass these tests:\n\nassert countTarget([1, 2, 3, 4, 5], 3) == 1\nassert countTarget([1, 1, 1, 3, 4, 4], 4) == 2\nassert countTarget([1, 2, 2, 3, 3, 3], 3) == 3", "output": "def countTarget(arr,target): \r\n    res = 0 \r\n    for i in range(len(arr)): \r\n        if arr[i] == target: \r\n            res += 1 \r\n    return res", "id": 853, "avg_similarity_score": 0.14554994090489914}
{"instruction": "Write a python program to calculate the value of nCr. Your code should pass these tests:\n\nassert nCr(5, 3) == 10 \nassert nCr(10, 5) == 252\nassert nCr(20, 17) == 13635", "output": "def nCr(n,r): \r\n    return (math.factorial(n) // (math.factorial(r)  \r\n            * math.factorial(n - r)))", "id": 854, "avg_similarity_score": 0.1346105525084245}
{"instruction": "Write a function to replace the odd elements by the square root of their index in the given stream. Your code should pass these tests:\n\nassert replace_elements([4, 5, 8], 3) == [2, 5, 8]\nassert replace_elements([1,2,3], 3) == [1, 2, 3]\nassert replace_elements([1, 3, 9], 3) == [1, sqrt(2), 9]", "output": "def replace_elements(stream, size):\n  for i in range(size):\n    if (stream[i] % 2 != 0):\n      stream[i] = sqrt(i) \n  return (stream)", "id": 855, "avg_similarity_score": 0.13718342176813517}
{"instruction": "Write a python function to generate random numbers with the given range and the number of elements. Your code should pass these tests:\n\nassert rand_num(1, 10, 5) == [9, 5, 2, 6, 3]\nassert rand_num(2, 15, 10) == [13, 14, 10, 4, 12, 5, 9, 6, 8, 11]\nassert rand_num(-5, 5, 8) == [-1, -3, -4, 0, 3, 1, 4, -2]", "output": "import random\r\ndef rand_num(start, end, num_gen): \r\n  \r\n    result = [] \r\n  \r\n    for i in range(num_gen): \r\n        result.append(random.randint(start, end))  \r\n  \r\n    return result", "id": 856, "avg_similarity_score": 0.1475357032419622}
{"instruction": "Write a python function to extract a given number of random elements from a given list. Your code should pass these tests:\n\nassert Ext_rand([1, 4, 5, 2], 3) == [1, 5, 2]\nassert Ext_rand([2, 6, 4, 9], 2) == [6, 4]\nassert Ext_rand([7, 2, 3, 8], 5) == [7, 2, 3, 8]", "output": "def Ext_rand(lis, num_of_ex): \n  \n    # Using random.sample() \n    # to extract num_of_ex elements \n    random_ele = random.sample(lis, num_of_ex)  \n  \n    return random_ele", "id": 857, "avg_similarity_score": 0.19132651877812049}
{"instruction": "Write a function to create a frequency table from a given list. Your code should pass these tests:\n\nassert freq([1, 0, 3, 0, 1, 3, 5, 0, 4, 8])== {0:3,1:2,3:2, 4:1, 5:1, 8:1}", "output": "def freq(collection):\r\n   freq_table = {}\r\n   for item in collection:\r\n        if item in freq_table:\r\n            freq_table[item] += 1\r\n        else:\r\n            freq_table[item] = 1\r\n   return freq_table", "id": 858, "avg_similarity_score": 0.16085816535453662}
{"instruction": "Write a function to create a transposition of a given matrix. Your code should pass these tests:\n\nassert transpose([[1,2,3],[4,5,6],[7,8,9]], 3,3)== [[1,4,7],[2,5,8],[3,6,9]]", "output": "def transpose(matrix, rows, cols): \r\n    for i in range(rows): \r\n        for j in range(i, cols): \r\n            temp = matrix[i][j] \r\n            matrix[i][j] = matrix[j][i] \r\n            matrix[j][i] = temp \r\n    return matrix", "id": 859, "avg_similarity_score": 0.18501742619235906}
{"instruction": "Write a function to print the most common elements in a given list. Your code should pass these tests:\n\nassert most_common(['a', 'a', 'b', 'c', 'c', 'c'])== ['c']\nassert most_common([1,2,3,4,5,3,3,2])== [3,2]", "output": "def most_common(collection):\n  collection.sort()\r\n  most_common_el=[]\r\n  count = 1 \r\n  max_count = 1\r\n    \r\n  for i in range(0,len(collection)):\r\n    count += 1\r\n    if i < len(collection) - 1 :\r\n      if collection[i] != collection[i+1] :\r\n        if count > max_count :\r\n          max_count= count \r\n          most_common_el.clear()\r\n          most_common_el.append(collection[i])\r\n        elif count == max_count :\r\n          most_common_el.append(collection[i])\r\n        count= 0 \r\n  return most_common_el", "id": 860, "avg_similarity_score": 0.20973070262457283}
{"instruction": "Write a function to find the first common ancestor of two given nodes in a binary search tree. Your code should pass this test:\n\nassert common_ancestor(root, node1, node2) == node0", "output": "def commonAncestor(root, node1, node2): \n    if root == None: \r\n        return None\r\n  \r\n    if node1 == root or node2 == root: \r\n        return root \r\n  \r\n    left_search = commonAncestor(root.left, node1, node2) \r\n    right_search = commonAncestor(root.right, node1, node2) \r\n  \r\n    if left_search and right_search: \r\n        return root \r\n  \r\n    return left_search if left_search is not None else right_search", "id": 861, "avg_similarity_score": 0.12405705838136417}
{"instruction": "Write a function to compute the sum of values in a given dictionary. Your code should pass this test:\n\nassert sum_dic({1:4,2:6,3:7})== 17", "output": "def sum_dic(dic):\n    sum = 0 \r\n    for k,v in dic.items():\r\n        sum += v\r\n    return sum", "id": 862, "avg_similarity_score": 0.16372630759973095}
{"instruction": "Write a function to concatenate two given strings using the greedy strategy. Your code should pass this test:\n\nassert greedy_string('abc', 'd' 'abcd')", "output": "def greedy_string(s1, s2): \n    i = 0\n    j = 0      \n\t\t\n    result = \"\" \r\n  \r\n    while i < len(s1) and j < len(s2):  \r\n        if s1[i] == s2[j]: \r\n            result += s1[i] \r\n            i += 1\r\n            j += 1\n        else: \r\n            result += s1[i] \r\n            i += 1\r\n    result += s1[i:] + s2[j:] \r\n    return result", "id": 863, "avg_similarity_score": 0.10345401791833983}
{"instruction": "Write a function to convert a given string to a list of characters. Your code should pass this test:\n\nassert to_char_list('Hello')== ['H', 'e', 'l', 'l', 'o']", "output": "def to_char_list(s): \n    return list(s)", "id": 864, "avg_similarity_score": 0.11566572103715604}
{"instruction": "Write a query using Python to show all the distinct cities in the table population. Your code should return these rows:\n\n[London, Birmingham, Newcastle]", "output": "SELECT DISTINCT city FROM population;", "id": 865, "avg_similarity_score": 0.08382577045188337}
{"instruction": "Write a code to reverse the list using the slicing operation. Your code should pass this test:\n\nassert reverse([0, 1, 2, 3, 4]) == [4, 3, 2, 1, 0]", "output": "def reverse(lst):\r\n  return lst[::-1]", "id": 866, "avg_similarity_score": 0.09699388444540907}
{"instruction": "Write a function to find all possible sub-lists of the given list. Your code should pass this test:\n\nassert sub_list([0, 1, 2, 3, 4]) == [[0], [1], [2], [3], [4], [0, 1], [1, 2], [2, 3], [3, 4], [0, 1, 2], [1, 2, 3], [2, 3, 4], [0, 1, 2, 3], [1, 2, 3, 4], [0, 1, 2, 3, 4]]", "output": "def sub_list(lst): \r\n  sub_list = [] \r\n    \r\n  # Iterating over the list \r\n  for i in range(len(lst)): \r\n    for j in range(i+1, len(lst)+1): \r\n      # slicing the list to generate sublist  \r\n      sub_list.append(lst[i:j]) \r\n  \r\n  return sub_list", "id": 867, "avg_similarity_score": 0.07962733963544832}
{"instruction": "Write a function to calculate the greatest common divisor of two numbers. Your code should pass this test:\n\nassert gcd(54, 24) == 6", "output": "def gcd(p, q):\r\n  if not q: \r\n    return p \r\n  return gcd(q, p % q)", "id": 868, "avg_similarity_score": 0.1251073456427475}
{"instruction": "Write a function to cut a given string into substrings and return them as a list. Your code should pass this test:\n\nassert split_string(\"Welcome to Python\") == ['Welcome', 'to', 'Python']", "output": "def split_string(s): \r\n  return [i for i in s.split(' ')]", "id": 869, "avg_similarity_score": 0.10332398797396974}
{"instruction": "Write a python code to find all the words in a given string which start and end with the same letter. Your code should pass this test:\n\nassert same_ending('algorithm') == ['go', 'ithm']", "output": "def same_ending(str1): \r\n  words = str1.split()\r\n  res = [word for word in words if word[0] == word[-1]] \r\n\r\n  return res", "id": 870, "avg_similarity_score": 0.1514897877449636}
{"instruction": "Write a python function to find out the exponentiation of a base raised to the power of an exponent. Your code should pass these tests:\n\nassert exponentiation(3,3) == 27\nassert exponentiation(5,4) == 625\nassert exponentiation(2,3) == 8", "output": "def exponentiation(a, b):\r\n    return pow(a,b)", "id": 871, "avg_similarity_score": 0.13288651695718187}
{"instruction": "Write a python function to combine two lists of interest and sort them in ascending order by merge sort algorithm. Your code should pass these tests:\n\nl1 = [3, 1, 5, 2, 4, 6]\nl2 = [9, 8, 7, 4, 10]\nassert combine_Sort(l1,l2) == [1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]\nl3 = [25, 40, 16, 30, 10, 61, 28]\nl4 = [2, 7, 5, 4, 3]\nassert combine_Sort(l3,l4) == [2, 3, 4, 5, 7, 10, 16, 25, 28, 30, 40, 61]", "output": "def combine_Sort(list1,list2): \r\n    res = list1 + list2 \r\n    res.sort() \r\n    return res", "id": 872, "avg_similarity_score": 0.0799400364229032}
{"instruction": "Write a python function to sort a dictionary by values. Your code should pass these tests:\n\ntest_dict = {3:2, 2:4, 4:1, 1:5, 0:6}\nassert sort_by_value(test_dict) == {4: 1, 3: 2, 2: 4, 1: 5, 0: 6}\ntest_dict = {'a':3, 'b':4, 'c':1, 'd':3}\nassert sort_by_value(test_dict) == {'c':1, 'a':3, 'd':3, 'b':4}", "output": "def sort_by_value(dict): \r\n    result = sorted(dict.items(), key=lambda x:x[1]) \r\n    return dict(result)", "id": 873, "avg_similarity_score": 0.09527518561509515}
{"instruction": "Write a python function to determine the highest frequency element in a given list. Your code should pass these tests:\n\nassert highest_frequency([4, 4, 7, 3, 4, 2, 8, 8, 6, 4]) == 4\nassert highest_frequency([7, 3, -1, 0, 9, 3, -5]) == 3", "output": "def highest_frequency(list): \r\n    d = dict() \r\n    for i in list: \r\n        if i in d: \r\n            d[i] += 1\r\n        else: \r\n            d[i] = 1\r\n    m = max(d.values())\r\n    r = [k for k,v in d.items() if v == m] \r\n    return r[0]", "id": 874, "avg_similarity_score": 0.20044501309042193}
{"instruction": "Write a function to generate the Fibonacci series using recursion. Your code should pass this test:\n\nassert generate_Fibonacci(6) == [0,1,1,2,3,5]", "output": "def generate_Fibonacci(n): \r\n      \r\n    if n < 0: \r\n        print(\"Incorrect input\") \r\n    elif n == 0: \r\n        return 0\r\n    elif n == 1: \r\n        return 1\r\n    else: \r\n        return generate_Fibonacci(n-1) + generate_Fibonacci(n-2)", "id": 875, "avg_similarity_score": 0.08801932599475015}
{"instruction": "Write a program to find the size of a given list. Your code should pass the test:\n\nassert get_ListSize([1,2,3,4,5]) == 5", "output": "def get_ListSize(list): \r\n    n = 0\r\n    for i in list: \r\n        n = n + 1\r\n    return n", "id": 876, "avg_similarity_score": 0.18694896446070464}
{"instruction": "Write a function to count the frequency of every word in a given text. Your code should pass the tests:\n\nassert count_WordFrequency('This is a sample string') == {'this':1, 'is':1, 'a':1, 'sample':1, 'string':1}", "output": "def count_WordFrequency(string): \r\n    words = string.split() \r\n    word_frequency = {} \r\n  \r\n    for word in words: \r\n        if word in word_frequency: \r\n            word_frequency[word] += 1\r\n        else: \r\n            word_frequency[word] = 1\r\n   \r\n    return word_frequency", "id": 877, "avg_similarity_score": 0.1379625540311757}
{"instruction": "Write a function to delete a given node from the Linked List. Your code should pass the test:\n\nassert delete_Node('head', 0) == 'head->next'", "output": "def delete_Node(head, node): \r\n  \r\n    temp = head \r\n  \r\n    # If head node is node to be deleted \r\n    if (temp is not None): \r\n        if (temp.data == node): \r\n            head = temp.next\r\n            temp = None\r\n            return head \r\n  \r\n    # Search for the node to be deleted, keep track of the \r\n    # previous node as we need to change 'prev->next' \r\n    while(temp is not None): \r\n        if (temp.data == node): \r\n            break\r\n        prev = temp \r\n        temp = temp.next\r\n  \r\n    # if node was not present in linked list \r\n    if (temp == None): \r\n        return head \r\n  \r\n    # Unlink the node from linked list \r\n    prev.next = temp.next\r\n  \r\n    temp = None\r\n  \r\n    return head", "id": 878, "avg_similarity_score": 0.13522975343824328}
{"instruction": "Write a function to check if a number is divisible by 9. Your code should pass this test:\n\nassert is_DivisibleBy9(15) == True", "output": "def is_DivisibleBy9(n): \r\n      \r\n    while (n > 0 and n != 9): \r\n        n = int(str(n).replace('9','')) \r\n    \r\n    return (n == 9)", "id": 879, "avg_similarity_score": 0.11070450372429723}
{"instruction": "Write a program to implement the Binary Search Tree (BST) insertion. Your code should pass this test:\n\nassert bst_Insert(8,15) == True", "output": "class Node: \r\n    def __init__(self, key): \r\n        self.left = None\r\n        self.right = None\r\n        self.val = key \r\n  \r\n# A utility function to insert a new node with the given key \r\ndef bst_Insert(root, node): \r\n  \r\n    if root is None: \r\n        root = node \r\n    else: \r\n        if root.val < node.val: \r\n            if root.right is None: \r\n                root.right = node \r\n            else: \r\n                bst_Insert(root.right, node) \r\n        else: \r\n            if root.left is None: \r\n                root.left = node \r\n            else: \r\n                bst_Insert(root.left, node) \n    return True", "id": 880, "avg_similarity_score": 0.08194038330020463}
{"instruction": "Write a python program to generate all permutations of a given string. Your code should pass this test:\n\nassert generate_Permutations('123') == ['123', '132', '213', '231', '312', '321']", "output": "def generate_Permutations(string): \r\n    if len(string) == 0: \r\n        return [] \r\n  \r\n    if len(string) == 1: \r\n        return [string] \r\n  \r\n    l = [] \r\n  \r\n    for i in range(len(string)): \r\n        part = string[:i] + string[i+1:] \r\n      \r\n        for permutation in generate_Permutations(part): \r\n            l.append(string[i] + permutation) \r\n    return l", "id": 881, "avg_similarity_score": 0.13530713879912837}
{"instruction": "Write a function to replace all occurrences of a substring with a given string given a string. Your code should pass these tests:\n\nassert replace_str(\"GeekGeek\",\"Geek\",\"Geeks\")==\"GeeksGeeks\"\nassert replace_str(\"HeyHey\",\"Hey\",\"Hi\")==\"HiHi\"\nassert replace_str(\"OhOhoh\",\"Oh\",\"No\")==\"NoNoNo\"", "output": "def replace_str(str1, sub_str, rep_str):\r\n   result = str1.replace(sub_str,rep_str)\r\n   return result", "id": 882, "avg_similarity_score": 0.15362871953626037}
{"instruction": "Write a program to multiply all the elements of a list using recursive method. Your code should pass these tests:\n\nassert multiply_list([2,3,4])==24\nassert multiply_list([1,2,3,4,5])==120\nassert multiply_list([5,6,7,8])==2160", "output": "def multiply_list(list1): \r\n   if len(list1) == 1: \r\n        return list1[0] \r\n   else: \r\n        return list1[0] * multiply_list(list1[1:])", "id": 883, "avg_similarity_score": 0.1761442420102391}
{"instruction": "Write a function to replace a specified word in a sentence. Your code should pass these tests:\n\nassert replace_word(\"Let us learn python\", \"python\", \"AppleScript\") == \"Let us learn AppleScript\"\nassert replace_word(\"I love programming\", \"love\", \"adore\") == \"I adore programming\"\nassert replace_word(\"The weather is bad today\", \"bad\", \"good\") == \"The weather is good today\"", "output": "def replace_word(sentence, word, replacement):\r\n    words = sentence.split()\r\n    new_words = [replacement if word == w else w for w in words]\r\n    return ' '.join(new_words)", "id": 884, "avg_similarity_score": 0.12138640062957008}
{"instruction": "Write a function to identify all the consecutive equal items in a given list. Your code should pass these tests:\n\nassert consecutive_equal([4, 4, 7, 8, 8, 9, 9]) == [[4, 4], [8, 8], [9, 9]]\nassert consecutive_equal([1, 1, 2, 4, 4, 5, 5]) == [[1, 1], [4, 4], [5, 5]]\nassert consecutive_equal([2, 3, 3, 4, 5, 6, 6, 7]) == [[3, 3], [6, 6]]", "output": "def consecutive_equal(my_list): \r\n    res = [] \r\n    temp = [my_list[0]] \r\n    for i in range(1, len(my_list)): \r\n        if my_list[i] == my_list[i - 1]: \r\n            temp.append(my_list[i]) \r\n        else: \r\n            if len(temp) > 1: \r\n                res.append(temp) \r\n            temp = [my_list[i]] \r\n  \r\n    if len(temp) > 1: \r\n        res.append(temp) \r\n\r\n    return res", "id": 885, "avg_similarity_score": 0.19302265321443152}
{"instruction": "Write a function to calculate the average of a given list of numbers within a specified range. Your code should pass these tests:\n\nassert average_inrange([2, 4, 8, 9, 11, 17], 8, 11) == 9.25\nassert average_inrange([0, 6, 12, 20, 28, 35], 20, 28) == 24.5\nassert average_inrange([5, 7, 9, 11, 16, 37], 5, 9) == 7.5", "output": "def average_inrange(input_list, lower, upper):\r\n  \r\n  sum = 0\r\n  count = 0\r\n  \r\n  for i in range(len(input_list)):\r\n    if lower <= input_list[i] <= upper:\r\n      sum += input_list[i]\r\n      count += 1\r\n  \r\n  average = sum / count\r\n  return average", "id": 886, "avg_similarity_score": 0.20597700029333538}
{"instruction": "Write a function to print all the possible pairs in a given list. Your code should pass these tests:\n\nassert pairs([1,2,3]) == [(1, 2), (1, 3), (2, 3)]\nassert pairs([1,1,-1,2]) == [(1, 1), (1, -1), (1, 2), (-1, 2)]\nassert pairs([-3,-2,-1,0,1,2]) == [(-3, -2), (-3, -1), (-3, 0), (-3, 1), (-3, 2), \n(-2, -1), (-2, 0), (-2, 1), (-2, 2), (-1, 0), (-1, 1), (-1, 2), (0, 1), (0, 2),\n (1, 2)]", "output": "def pairs(input_list):\r\n    result = []\r\n    for i in range(0, len(input_list)-1):\r\n        for j in range(i+1, len(input_list)):\r\n            result.append((input_list[i], input_list[j]))\r\n    return result", "id": 887, "avg_similarity_score": 0.20732033698155733}
{"instruction": "Write a Python function to generate all the numbers in a given range which are divisible by a given number. Your code should pass these tests:\n\nassert num_divisible(5, 25) == [5, 10, 15, 20, 25]\nassert num_divisible(18, 60) == [18, 36, 54]\nassert num_divisible(19, 79) == [19, 38, 57, 76]", "output": "def num_divisible(number, limit):\n    result = []\n    for i in range(number, limit + 1):\n        if i % number == 0:\n            result.append(i)\n    return result", "id": 888, "avg_similarity_score": 0.17182493386235234}
{"instruction": "Write a Python function to find the spot in a Binary Search Tree (BST) with the given parent node and the specified key. Your code should pass these tests:\n\nassert find_spot(tree.root, \"b\") == 4\nassert find_spot(tree.root, \"d\") == 5\nassert find_spot(tree.root, \"e\") == 6", "output": "def find_spot(node, key): \n    \n    # If node is None \n    if node == None: \n        return -1 \n  \n    # If node's data is equal to key  \n    if node.data == key: \n        return node.position \n  \n    # If key is less than node's data \n    if node.data > key: \n        return find_spot(node.left, key) \n  \n    # If key is more than node's data \n    if node.data < key: \n        return find_spot(node.right, key)", "id": 889, "avg_similarity_score": 0.15405036446206102}
{"instruction": "Write a Python function which takes a string input and checks whether it is composed of all unique characters. Your code should pass these tests:\n\nassert is_unique(\"computer\") == False\nassert is_unique(\"programming\") == True\nassert is_unique(\"python\") == False", "output": "def is_unique(string): \n  # convert the string to a set  \n  # set removes duplicate character \n  Unique_string = set(string)  \n  \n  # compare length of the original \n  # string and unique string \n  if len(string) == len(Unique_string): \n    return True\n  return False", "id": 890, "avg_similarity_score": 0.10055127930100313}
{"instruction": "Write a Python function to find the area of a circle when the radius is given. Your code should pass these tests:\n\nassert circle_area(3) == 28.27\nassert circle_area(4) == 50.27\nassert circle_area(5) == 78.54", "output": "def circle_area(radius): \n   pi = 3.14\n   #Calculate the area of circle  \n   area = pi * (radius * radius)  \n  \n   #Print the area of circle  \n   print(\"%.2f\" %area)", "id": 891, "avg_similarity_score": 0.20272559167068965}
{"instruction": "Write a Python function to calculate the Euclidean distance between two points. Your code should pass these tests:\n\nassert euclidean_distance((3, 5), (4, 6)) == 1.4142135623730951\nassert euclidean_distance((3, 2), (2, 3)) == 1.4142135623730951\nassert euclidean_distance((0, 0), (1, 1)) == 1.4142135623730951", "output": "def euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)", "id": 892, "avg_similarity_score": 0.08599697448686967}
{"instruction": "Write a python function to count the number of words in the given sentence. Your code should pass these tests:\n\nassert count_words(\"Python is great!\")==3\nassert count_words(\"Mathematics is fun.\")==3\nassert count_words(\"I love programming!\")==4", "output": "def count_words(sentence): \r\n    count = 0\r\n    for word in sentence.split(): \r\n        count += 1\r\n    return count", "id": 893, "avg_similarity_score": 0.18287792492808022}
{"instruction": "Write a python function to divide a given list of numbers into a lists of two and add their elements separately. Your code should pass these tests:\n\nassert divide_list([1, 3, 4, 5, 7]) == [[1, 3, 4], [5, 7]]\nassert divide_list([2, 5, 8, 9]) == [[2, 5, 8], [9]]\nassert divide_list([1, 4, 7, 8, 9]) == [[1, 4, 7], [8, 9]]", "output": "def divide_list(numList): \r\n    mid = len(numList)//2\r\n    first = numList[:mid] \r\n    second = numList[mid:]  \r\n    res = []\r\n    res.append(first)\r\n    res.append(second) \r\n    return res", "id": 894, "avg_similarity_score": 0.1206289843171206}
{"instruction": "Write a python function to check if the two given lists are identical. Your code should pass these tests:\n\nassert is_identical([1, 2, 3], [1, 2, 3]) == True\nassert is_identical([1, 2, 3], [3, 2, 1]) == False\nassert is_identical([2, 3, 4], [3, 4, 5]) == False", "output": "def is_identical(list1, list2): \r\n    if len(list1) != len(list2): \r\n        return False \r\n  \r\n    for x, y in zip(list1, list2): \r\n        if x != y: \r\n            return False \r\n    return True", "id": 895, "avg_similarity_score": 0.13531461841827197}
{"instruction": "Write a python function to check whether a given list of numbers contains any duplicate number or not. Your code should pass these tests:\n\nassert is_duplicate([7, 1, 3, 1, 4]) == True\nassert is_duplicate([7, 2, 3, 4, 5]) == False\nassert is_duplicate([1, 4, 7, 2, 8]) == False", "output": "def is_duplicate(list1): \r\n    return (len(list1) != len(set(list1)))", "id": 896, "avg_similarity_score": 0.1599766384067149}
{"instruction": "Write a python function to output a list containing only the first and last elements of a given list. Your code should pass these tests:\n\nassert first_last([1, 2, 3, 4, 5]) == [1, 5]\nassert first_last([7, 4, 8]) == [7, 8]\nassert first_last([7, 2, 3, 4]) == [7, 4]", "output": "def first_last(list1): \r\n    result = [] \r\n    result.append(list1[0]) \r\n    result.append(list1[-1]) \r\n    return result", "id": 897, "avg_similarity_score": 0.19350196138615744}
{"instruction": "Write a python function to copy a given list into another list removing the even numbers. Your code should pass these tests:\n\nassert remove_even([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert remove_even([8, 10, 12, 14, 15]) == [15]\nassert remove_even([7, 4, 8, 9, 11]) == [7, 9, 11]", "output": "def remove_even(list1): \r\n    res = [ele for ele in list1 if ele % 2 != 0] \r\n    return res", "id": 898, "avg_similarity_score": 0.09452865289038598}
{"instruction": "Write a python function to generate a list of squares of the numbers up to the given range. Your code should pass these tests:\n\nassert list_squares(4) == [1, 4, 9, 16]\nassert list_squares(7) == [1, 4, 9, 16, 25, 36, 49]\nassert list_squares(3) == [1, 4, 9]", "output": "def list_squares(limit): \r\n    result = [i*i for i in range(1,limit+1 )] \r\n    return result", "id": 899, "avg_similarity_score": 0.14266512710332493}
{"instruction": "Write a python function to interpolate the given list of numbers linearly. Your code should pass these tests:\n\nassert linear_interpolation([5, 8, 11]) == [6,9,10]\nassert linear_interpolation([-1, 4, 10]) == [1, 6, 8]\nassert linear_interpolation([2, 15, 20, 35]) == [7, 17, 25, 30]", "output": "def linear_interpolation(list1): \r\n    result = []\r\n    for i in range (0, len(list1) - 1): \r\n        result.append((list1[i] + list1[i + 1]) // 2) \r\n    return result", "id": 900, "avg_similarity_score": 0.1705254427297771}
{"instruction": "Write a python program for deleting given words from a sentence. Your code should pass these tests:\n\nassert delete_words(\"I love coding in python.\",[\"love\",\"in\"]) == \"I coding python.\"\nassert delete_words(\"This is lecture 3 programming\",[\"This\",\"3\"]) == \"is lecture programming\"", "output": "def delete_words(sentence, words_list): \r\n    for word in words_list: \r\n        sentence = sentence.replace(word, \"\") \r\n    return sentence", "id": 901, "avg_similarity_score": 0.11882844016337382}
{"instruction": "Write a function to find the remainder of a number when divided by another given number. Your code should pass these tests:\n\nassert remainder(5, 2) == 1\nassert remainder(10, 3) == 1\nassert remainder(13, 5) == 3", "output": "def remainder(num1, num2):\r\n  diff = num1 - num2*(num1//num2)\r\n  return diff", "id": 902, "avg_similarity_score": 0.19359877968867345}
{"instruction": "Write a function to create a dictionary from a list of tuples. Your code should pass these tests:\n\nassert dict_from_tuples([(1, \"A\"), (2, \"B\"), (3, \"C\")]) == {1: 'A', 2: 'B', 3: 'C'}\nassert dict_from_tuples([(2, \"P\"), (3, \"Q\"), (4, \"R\")]) == {2: 'P', 3: 'Q', 4: 'R'}", "output": "def dict_from_tuples(list_tuples): \r\n    dict_res = {}\r\n    for i in list_tuples: \r\n        dict_res[i[0]] = i[1] \r\n    return dict_res", "id": 903, "avg_similarity_score": 0.15042005481421658}
{"instruction": "Write a function that takes a number as an argument and prints the decimals. Your code should pass these tests:\n\nassert print_decs(24) == [0, 0.3, 0.6, 0.9]\nassert print_decs(6) == [0, 0.1, 0.2, 0.3, 0.4, 0.5]", "output": "def print_decs(num): \r\n    res = []\r\n    for i in range(num): \r\n        res.append(i/num) \r\n    return res", "id": 904, "avg_similarity_score": 0.1161071477135375}
{"instruction": "Write a function to capitalize all letters of a sentence. Your code should pass these tests:\n\nassert capitalize_string(\"hello world\") == \"HELLO WORLD\"\nassert capitalize_string(\"welcome to python\") == \"WELCOME TO PYTHON\"", "output": "def capitalize_string(s): \n    return s.upper()", "id": 905, "avg_similarity_score": 0.13071034598437356}
{"instruction": "Write a program to generate the Fibonacci numbers from 0 to 50. Your code should pass these tests:\n\nassert fibonacci(5) == [0, 1, 1, 2, 3]\nassert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "output": "def fibonacci(limit): \r\n    res = [] \r\n    prev, curr = 0, 1\r\n    while curr < limit: \r\n        res.append(curr) \r\n        prev, curr = curr, curr + prev \r\n    return res", "id": 906, "avg_similarity_score": 0.0}
{"instruction": "Write a python function to generate all subset combinations of a given set.  Your code should pass these tests:\n\nassert subsets({\"A\", \"B\", \"C\"}) == [[], [\"A\"], [\"B\"], [\"C\"], [\"A\", \"B\"], [\"A\", \"C\"], [\"B\", \"C\"], [\"A\", \"B\", \"C\"]]\nassert subsets({\"A\", \"B\", \"C\", \"D\"}) == [[], [\"A\"], [\"B\"], [\"C\"], [\"D\"], [\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\"], [\"B\", \"C\"], [\"B\", \"D\"], [\"C\", \"D\"], [\"A\", \"B\", \"C\"], [\"A\", \"B\", \"D\"], [\"A\", \"C\", \"D\"], [\"B\", \"C\", \"D\"], [\"A\", \"B\", \"C\", \"D\"]]", "output": "def subsets(s):\r\n  \r\n  result = [[]]\r\n  \r\n  for x in s:\r\n      result.extend([subset + [x] for subset in result])\r\n  \r\n  return result", "id": 907, "avg_similarity_score": 0.16657228858502296}
{"instruction": "Write a python script to find the nth item in Fibonacci sequence. Your code should pass these tests:\n\nassert Fibonacci_sequence(7) == 13\nassert Fibonacci_sequence(2) == 1\nassert Fibonacci_sequence(8) == 21", "output": "def Fibonacci_sequence(n):  \r\n    a = 0\r\n    b = 1\r\n    if n < 0: \r\n        return print(\"Incorrect input\") \r\n    elif n == 0: \r\n        return a \r\n    elif n == 1: \r\n        return b \r\n    else: \r\n        for i in range(2,n): \r\n            c = a + b \r\n            a = b \r\n            b = c \r\n        return b", "id": 908, "avg_similarity_score": 0.11385871052555953}
{"instruction": "Write a python function to calculate the sum of the natural numbers up to a number n using recursion. Your code should pass these tests:\n\nassert natural_number_sum_recur(4) == 10\nassert natural_number_sum_recur(10) == 55\nassert natural_number_sum_recur(1) == 1", "output": "def natural_number_sum_recur(n):\n    # base case \r\n    if (n == 0): \r\n        return 0\r\n    # recursive case\r\n    else: \r\n        return (n + natural_number_sum_recur(n-1))", "id": 909, "avg_similarity_score": 0.11064983415801041}
{"instruction": "Write a python script to make given a nested list become a flat list. Your code should pass these tests:\n\nassert flatten([[1,2],[3,4]]) == [1, 2, 3, 4] \nassert flatten([[1,2,[3,[4,[5]]]]]) == [1, 2, 3, 4, 5] \nassert flatten([1,2,3]) == [1, 2, 3]", "output": "def flatten(nested_list): \r\n    output = []  \r\n    for item in nested_list:  \r\n        if type(item) != list: \r\n            output.append(item) \r\n        else: \r\n            output.extend(flatten(item))   \r\n    return output", "id": 910, "avg_similarity_score": 0.11642193876379539}
{"instruction": "Write a python function to create a castle on a chess board. Each cell is either empty wrt to the castle or occupied by its stones/blocks of the castle. Your code should pass this test:\n\nassert castleOnChess([[0,0,0],\r\n                     [0,1,0],\r\n                     [0,0,0]], 2,2) == [[1, 1, 0],\r\n                                       [1, 1, 0],\r\n                                       [0, 0, 0]]", "output": "def castleOnChess(board, i, j): \r\n   if (i != 0 and j != 0): \r\n        board[i-1][j-1] = 1\r\n   if (i != 0 and j != 0): \r\n        board[i-1][j] = 1\r\n   if (i != 0 and j != board[0].length-1): \r\n        board[i-1][j+1] = 1\r\n   if (j != 0): \r\n        board[i][j-1] = 1\r\n   if (j != board[0].length-1):  \r\n        board[i][j+1] = 1\r\n   if (i != board.length-1 and j != 0): \r\n        board[i+1][j-1] = 1\r\n   if (i != board.length-1): \r\n        board[i+1][j] = 1\r\n   if (i != board.length-1 and  \r\n            j != board.length-1): \r\n        board[i+1][j+1] = 1\r\n   return board;", "id": 911, "avg_similarity_score": 0.08423123747239529}
{"instruction": "Write a python function to find the closest pair from two sorted arrays. Your code should pass this test:\n\nassert findPaths([1, 3, 5], [2, 4], 3) == [3, 2]", "output": "def findClosestPair(A, B, k): \r\n    m = len(A) \r\n    n = len(B) \r\n  \r\n    min_diff = float('inf') \r\n    res = [] \r\n  \r\n    for i in range(m): \r\n        low = 0\r\n        high = n - 1\r\n        while low <= high: \r\n            mid = (low + high)//2\r\n            if A[i] + B[mid] == k: \r\n                return [A[i], B[mid]] \r\n            elif A[i] + B[mid] < k: \r\n                low = mid + 1\r\n            elif A[i] + B[mid] > k: \r\n                if abs(A[i] + B[mid] - k) < min_diff: \r\n                    min_diff = abs(A[i] + B[mid] - k) \r\n                    res = [A[i], B[mid]] \r\n                high = mid - 1\r\n  \r\n    return res", "id": 912, "avg_similarity_score": 0.10030867823130983}
{"instruction": "Write a python function to check if the given array is stack or not. Your code should pass this test:\n\nassert is_stack([1,2,3,4,5]) == False\nassert is_stack([5,4,3,2,1]) == True", "output": "def is_stack(lst): \r\n    n = len(lst) \r\n    i = 0\r\n    while (i < n): \r\n        if (lst[i] < lst[i + 1]): \r\n            return False\r\n        i += 1\r\n    return True", "id": 913, "avg_similarity_score": 0.10796685478126693}
{"instruction": "Write a python function to generate the Fibonacci sequence up to a certain number. Your code should pass these tests:\n\nassert Fibonacci(7) == [1, 1, 2, 3, 5, 8, 13]\nassert Fibonacci(10) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\nassert Fibonacci(3) == [1,1,2]", "output": "def Fibonacci(n): \n    fibonacci_list = []\n    a, b = 0, 1\n    while a < n: \n        fibonacci_list.append(a)\n        a, b = b, a + b  \n    return fibonacci_list", "id": 914, "avg_similarity_score": 0.11589495965997229}
{"instruction": "Write a python function to convert a string to camel case. Your code should pass this test: \n\nassert camelcase(\"the quick brown fox\") == \"theQuickBrownFox\"", "output": "def camelcase(str1): \r\n    output = ''.join(x for x in str1.title() if x.isalnum()) \r\n    return output[0].lower() + output[1:]", "id": 915, "avg_similarity_score": 0.08132168249196822}
{"instruction": "Write a python function to remove the punctuation from a given string. Your code should pass this test:\n\nassert remove_punctuation(\"Let's try, Mike.\") == \"Lets try Mike\"", "output": "import string\ndef remove_punctuation(s): \n    for c in string.punctuation: \n        s = s.replace(c, \"\") \n    return s", "id": 916, "avg_similarity_score": 0.13915157175911477}
{"instruction": "Write a python function to find the longest palindromic substring in a given string. Your code should pass this test: \n\nassert longest_palindromic_substring(\"abaxyzzyxf\") == \"xyzzyx\"", "output": "def longest_palindromic_substring(s): \n    n = len(s) \n    dp = [[False for _ in range(n)] for _ in range(n)] \n  \n    maxLength = 1\n    start = 0 \n    for i in range(n): \n        dp[i][i] = True\n    for i in range(n - 1): \n        if s[i] == s[i + 1]: \n            dp[i][i + 1] = True \n            maxLength = 2\n            start = i; \n    for j in range(2, n): \n        for i in range(0 , j-1): \n            if s[i] == s[j] and dp[i + 1][j - 1] : \n                    dp[i][j] = True\n                    if maxLength < j - i + 1: \n                        maxLength = j - i + 1\n                        start = i \n    return s[start:start + maxLength]", "id": 917, "avg_similarity_score": 0.1683218687619824}
{"instruction": "Write a python function to find the number of elements in a given array that are not larger than a given number. Your code should pass these tests:\n\nassert not_larger_than(5,[2,4,1,3,7]) == 4\nassert not_larger_than(6,[2,4,1,3,7]) == 5", "output": "def not_larger_than(t,arr): \n    count = 0\n    for i in arr: \n        if i <= t: \n            count+=1\n    return count", "id": 918, "avg_similarity_score": 0.1988254226217995}
{"instruction": "Write a program to compute the longest palindromic substring in a given string.Your code should pass these tests:\n\nassert longest_palindrome(\"abaabc\") == \"aba\"\nassert longest_palindrome(\"kayak\") == \"kayak\"\nassert longest_palindrome(\"level\") == \"level\"", "output": "def longest_palindrome(string):\r\n  x = [[False for i in range(len(string))] for j in range(len(string))] \r\n  max_length = 1\r\n  i = 0\r\n  while(i< len(string)):\r\n   x[i][i] = True\r\n   i = i+1\r\n  start = 0\r\n  i = 0\r\n  while(i< len(string)-1):\r\n   if(string[i] == string[i+1]):\r\n    x[i][i+1] = True\r\n    start = i\r\n    max_length = 2\r\n   i = i+1\r\n  k = 3\r\n  while(k<=len(string)):\r\n   i = 0\r\n   while(i<(len(string)-k+1)):\r\n    j = i+k-1\r\n    if(x[i+1][j-1] and string[i] == string[j]):\r\n     x[i][j] = True\r\n     if k>max_length:\r\n      start = i\r\n      max_length = k\r\n    i = i+1\r\n   k = k+1\r\n  return string[start:start+max_length]", "id": 919, "avg_similarity_score": 0.19237144502940143}
{"instruction": "Write a function to get intersection of two given dictionaries. Your code should pass these tests:\n\nassert get_intersection({1:3, 4:8}, {1:3, 7:2}) == {1:3}\nassert get_intersection({1:3, 4:8}, {1:1, 2:4}) == {1:3}\nassert get_intersection({1:3, 4:8, 11:3}, {2:4}) == {}", "output": "def get_intersection(dict1, dict2): \n  return {k: dict1[k] for k in dict1 if k in dict2 and dict1[k] == dict2[k]}", "id": 920, "avg_similarity_score": 0.12229276074352627}
{"instruction": "Write a program to generate all substrings in a given string. Your code should pass these tests:\n\nassert all_substrings(\"abcde\") == ['a', 'ab', 'abc', 'abcd', 'abcde', 'b', \n'bc', 'bcd', 'bcde', 'c', 'cd', 'cde', 'd', 'de', 'e']\nassert all_substrings(\"ab\") == ['a', 'ab', 'b']\nassert all_substrings(\"xyz\") == ['x', 'xy', 'xyz', 'y', 'yz', 'z']", "output": "def all_substrings(string): \r\n  length = len(string) \r\n  sub_strings = [] \r\n  for i in range(length): \r\n    for j in range(i,length):  \r\n      sub_strings.append(string[i:j+1]) \r\n  return sub_strings", "id": 921, "avg_similarity_score": 0.1732011464631554}
{"instruction": "Write a function to compare two given strings and sort them lexicographically. Your code should pass these tests:\n\nassert lexicographical_sort(\"bca\", \"abc\") == ['abc', 'bca']\nassert lexicographical_sort(\"abc\", \"def\") == ['abc', 'def']\nassert lexicographical_sort(\"abcd\", \"efgh\") == ['abcd', 'efgh']", "output": "def lexicographical_sort(str1, str2): \r\n    if str1 > str2: \r\n        return [str2, str1] \r\n    else: \r\n        return[str1, str2]", "id": 922, "avg_similarity_score": 0.07997750867909718}
{"instruction": "Write a python function to compose a list of the common elements between two integer arrays. Your code should pass these tests:\n\nassert common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]\nassert common_elements([3,4,5], [3, 4, 5, 6, 7]) == [3, 4, 5]\nassert common_elements([1, 2, 3], [3, 4, 5]) == [3]", "output": "def common_elements(arr1, arr2): \n  res = [] \n  for i in range(len(arr1)): \n    for j in range(len(arr2)): \n      if arr1[i] == arr2[j]: \n        res.append(arr1[i]) \n  return res", "id": 923, "avg_similarity_score": 0.14732396815371915}
{"instruction": "Write a python function to calculate the running total of an array. Your code should pass these tests:\n\nassert runningTotal([2,3,4,5]) == [2, 5, 9, 14]\nassert runningTotal([3,4,7]) == [3, 7, 14]\nassert runningTotal([3,2,5]) == [3, 5, 10]", "output": "def runningTotal(arr): \n    runningTotal = 0\n    output = []\n    for num in arr:\n        runningTotal += num\n        output.append(runningTotal)\n    return output", "id": 924, "avg_similarity_score": 0.08981548750105389}
{"instruction": "Write a program to find out the mode of a given list of numbers. Your code should pass these tests:\n\nassert mode([1,2,2,3,4]) == 2\nassert mode([4,5,5,6,6,7,7,7]) == 7\nassert mode([1,2,2,3,3,3,4]) == 3", "output": "def mode(arr): \n    dict = {} \n    maximum = 0\n    num = 0\n    for item in arr:  \n        if (item in dict.keys()): \n            dict[item] += 1\n        else: \n        \tdict[item] = 1\n        if (dict[item] > maximum): \n            maximum = dict[item]\n            num = item\n    return num", "id": 925, "avg_similarity_score": 0.2377789005958434}
{"instruction": "Write a program to calculate the sum of all the elements of an array. Your code should pass these tests:\n\nassert sumArray([2,3,4,5,6]) == 20\nassert sumArray([1,2,3,4]) == 10\nassert sumArray([7,5,3,2]) == 17", "output": "def sumArray(arr): \n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum", "id": 926, "avg_similarity_score": 0.1508929338894957}
{"instruction": "Write a python function to split an array of specified size. Your code should pass these tests:\n\nassert split_array([1,2,3,4],2) == [[1,2],[3,4]]\nassert split_array([1,2,3,4,5],3) == [[1,2,3],[4,5]]\nassert split_array([1,2,3,4,5,6],3) == [[1,2,3],[4,5,6]]", "output": "def split_array(arr, size): \n    split_arr = [] \n    while len(arr) > size: \n        split_arr.append(arr[:size]) \n        arr = arr[size:] \n    split_arr.append(arr) \n    return split_arr", "id": 927, "avg_similarity_score": 0.07663134084420824}
{"instruction": "Write a function to flatten the given array of arrays into a single array. Your code should pass these tests:\n\nassert flatten([[1, 2, [3, 4]], [5, 6]])==[1, 2, 3, 4, 5, 6]\nassert flatten([[[1], 3, [4]], 5, [[6], 7]])==[1, 3, 4, 5, 6, 7]\nassert flatten([[['abc'],3],[['ab'],5]])==['abc',3,'ab',5]", "output": "def flatten(arr):\r\n  flattened = []\r\n  for i in arr:\r\n    if type(i) == list:\r\n      flattened += flatten(i)\r\n    else:\r\n      flattened += [i]\r\n  return flattened", "id": 928, "avg_similarity_score": 0.11027090260390819}
{"instruction": "Write a function to get the string representation of a given integer. Your code should pass these tests:\n\nassert int_to_string(102)==\"102\"\nassert int_to_string(-3)==\"-3\"\nassert int_to_string(123456789)==\"123456789\"", "output": "def int_to_string(num):\r\n  return str(num)", "id": 929, "avg_similarity_score": 0.20733444379640345}
{"instruction": "Write a function to sort a given list of tuples by the last element of each tuple. Your code should pass these tests:\n\nassert sort_tuple([(2, 5), (1, 2), (4, 4), (2, 3)])==[(1, 2), (2, 3), (4, 4), (2, 5)]\nassert sort_tuple([(0, 1), (1, 2), (-1, 0)])==[(-1, 0), (0, 1), (1, 2)]\nassert sort_tuple([(3, 3), (3, 2), (3, 1)])==[(3, 1), (3, 2), (3, 3)]", "output": "def sort_tuple(tuple_list):\r\n  return sorted(tuple_list, key=lambda x: x[1])", "id": 930, "avg_similarity_score": 0.16423324514610685}
{"instruction": "Write a function to rotate a two dimensional NxN matrix by 90 degrees clockwise. Your code should pass these tests:\n\nassert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])==[[7,4,1], [8,5,2], [9,6,3]]\nassert rotate_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]])==[[3,2,1], [3,2,1], [3,2,1]]\nassert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[13,9,5,1], [14,10,6,2], [15,11,7,3], [16,12,8,4]]", "output": "def rotate_matrix(matrix):\r\n   res = [[None] * len(matrix) for _ in range(len(matrix))]\r\n   for i in range(len(matrix)):\r\n      for j in range(len(matrix[0])):\r\n         res[j][len(matrix)-i-1] = matrix[i][j]\r\n   return res", "id": 931, "avg_similarity_score": 0.07991511883775676}
{"instruction": "Write a Python program to remove all duplicate elements from a list. Your code should pass this test:\n\nassert delete_duplicates([1,2,3,1,2]) == [1,2,3]", "output": "def delete_duplicates(nums):\r\n    for i in range(len(nums)-1, 0, -1):\r\n        if nums[i] == nums[i-1]:\r\n            del nums[i]\r\n    return nums", "id": 932, "avg_similarity_score": 0.11351372269458064}
{"instruction": "In Python, write the code for a calculator which takes two numbers and performs the addition operation. Your code should pass this test:\n\nassert addition(2, 3) == 5", "output": "def addition(num1, num2):\r\n    return num1 + num2", "id": 933, "avg_similarity_score": 0.1258820144670704}
{"instruction": "Write a function to find the largest common substring between two strings. Your code should pass this test:\n\nassert find_common_substring(\"ABCDEF\", \"ABCGHI\")==\"ABC\"", "output": "def find_common_substring(str1, str2): \n\t\n\tl1 = len(str1) \n\tl2 = len(str2) \n\t\n\t# Make a matrix with all 0s \n\tresult = [[0 for x in range(l2+1)] for x in range(l1+1)] \n  \n\tlongest_substr_length = 0\n\tlongest_substr = \"\"\n\t\n\t# Trace every character in str1 \n\tfor i in range(1, l1+1): \n\t\t\n\t\tfor j in range(1, l2+1): \n\t\t\n\t\t\t# if characters match \n\t\t\tif (str1[i-1] == str2[j-1]): \n\t\t\t\tresult[i][j] = result[i-1][j-1] + 1\n\t\t\t\t\n\t\t\t\t# Update longest_substr \n\t\t\t\tif (result[i][j] > longest_substr_length): \n\t\t\t\t\tlongest_substr_length = result[i][j] \n\t\t\t\t\tlongest_substr = str1[i-longest_substr_length:i] \n\t\t\t\t\n\t\t\telse: \n\t\t\t\tresult[i][j] = 0\n  \n\treturn longest_substr", "id": 934, "avg_similarity_score": 0.10140944965004255}
{"instruction": "Write a function to convert decimal numbers into binary. Your code should pass this test:\n\nassert dec2Bin(22) == \"10110\"", "output": "def dec2Bin(num): \n   \n    if num > 1: \n        dec2Bin(num // 2) \n    print(num % 2, end = '')", "id": 935, "avg_similarity_score": 0.05453170015598862}
{"instruction": "Write a function to generate a list of power of n. Your code should pass this test:\n\nassert powers(2,8) == [1,2,4,8,16,32,64,128]", "output": "def powers(n,exp):\n\n    result = [1]  \n    for i in range(exp):  \n        result.append(n**i)  \n    return result", "id": 936, "avg_similarity_score": 0.11733429943150211}
{"instruction": "Write a function to compute the median of three unique numbers. Your code should pass these tests:\n\nassert median(4, 3, 8) == 4\nassert median(2, 3, 4) == 3\nassert median(2, 8, 4) == 4", "output": "def median(num1, num2, num3):\r\n    order = sorted([num1, num2, num3])\r\n    return order[1]", "id": 937, "avg_similarity_score": 0.12354055792045017}
{"instruction": "Write a function to create a histogram of occurrences in a given list. Your code should pass these tests:\n\nassert histogram([0,4,0,4,8]) == {0: 2, 4: 2, 8: 1}\nassert histogram([1,3,2,4]) == {1: 1, 3: 1, 2: 1, 4: 1}\nassert histogram([8,9,8,7]) == {8: 2, 9: 1, 7: 1}", "output": "def histogram(array): \r\n    dict1 = {} \r\n    for i in array: \r\n        if i in dict1: \r\n            dict1[i] += 1\r\n        else: \r\n            dict1[i] = 1\r\n    return dict1", "id": 938, "avg_similarity_score": 0.20783667258572522}
{"instruction": "Write a function to search for a value in an unsorted linked list. Your code should pass these tests:\n\nassert search_unsorted_ll([8,7,3,4], 4) == True\nassert search_unsorted_ll([3,1,9], 10) == False\nassert search_unsorted_ll([], 8) == False", "output": "def search_unsorted_ll(ll, item): \n    curr = ll.head\n    while curr != None:\n        if curr.data == item: \n            return True\n        curr = curr.next\n    return False", "id": 939, "avg_similarity_score": 0.11595578608909758}
{"instruction": "Write a function to compute the intersection of two lists. Your code should pass these tests:\n\nassert intersection([1,3,4],[3,4,5]) == [3, 4]\nassert intersection([2,3,5], [1,3,4,5]) == [3, 5]\nassert intersection([1,2], [2,3,6]) == [2]", "output": "def intersection(list1, list2): \r\n    out_list = [] \r\n    for i in list1: \r\n        if i in list2: \r\n            out_list.append(i) \r\n    return out_list", "id": 940, "avg_similarity_score": 0.13448377450359264}
{"instruction": "Write a function to calculate the longest common subsequence of 2 strings. Your code should pass these tests:\n\nassert LCS(\"ABCD\",\"ACBD\")==\"ABCD\"\nassert LCS(\"RATIO\",\"PROBABILTY\")==\"RAIO\"\nassert LCS(\"PYTHON\",\"FUNCTION\")==\"YTN\"", "output": "def LCS(str1, str2): \r\n    row = len(str1)+1\r\n    col = len(str2)+1\r\n  \r\n    # declaring the array for storing the dp values \r\n    arr = [[0 for i in range(col)]  \r\n                for j in range(row)] \r\n   \r\n    for i in range(row): \r\n        for j in range(col): \r\n  \r\n            # If first string is empty,  \r\n            # only option is to insert  \r\n            # all characters of second string \r\n            if i == 0 or j == 0: \r\n                arr[i][j] = 0\r\n  \r\n            # If characters at i'th index in both  \r\n            # str1 and str2 are same, we are  \r\n            # add 1 to the result\r\n            elif str1[i - 1] == str2[j - 1]: \r\n                arr[i][j] = arr[i - 1][j - 1] + 1\r\n  \r\n            # If characters at i'th index in both  \r\n            # str1 and str2 are different,  \r\n            # result is maximum of two values \r\n            else: \r\n                arr[i][j] = max(arr[i - 1][j],  \r\n                                        arr[i][j - 1]) \r\n  \r\n    # Finding the maximum value in last row \r\n    max_value = 0\r\n    for i in range(col): \r\n        if arr[row - 1][i] > max_value: \r\n            max_value = arr[row - 1][i] \r\n  \r\n    # Creating the output string \r\n    output = \"\" \r\n    i, j = row - 1, col - 1\r\n    while i > 0 and j > 0: \r\n  \r\n        # If current character in str1 \r\n        # and str2 are same, then \r\n        # current character is part of \r\n        # LCS \r\n        if str1[i - 1] == str2[j - 1]: \r\n            output = output + str1[i - 1] \r\n            i -= 1\r\n            j -= 1\r\n  \r\n        # If not same, then find the larger \r\n        # of two and go in the direction \r\n        # of larger value \r\n        elif arr[i - 1][j] > arr[i][j - 1]: \r\n            i -= 1\r\n        else: \r\n            j -= 1\r\n  \r\n    return output[::-1]", "id": 941, "avg_similarity_score": 0.12488719979034862}
{"instruction": "Write a program to check if two strings are anagrams or not, with case-insensitive comparison. Your code should pass these tests:\n\nassert is_anagram('Letter', 'Teller') == True\nassert is_anagram('Invisible', 'Visibly') == False\nassert is_anagram('Flag', 'Flag') == True", "output": "def is_anagram(str1, str2): \r\n\t# convert strings to lowercase \r\n\tstr1 = str1.lower() \r\n\tstr2 = str2.lower() \r\n\t\t\r\n\t# sorting both strings \r\n\tstr_sorted1 = ''.join(sorted(str1)) \r\n\tstr_sorted2 = ''.join(sorted(str2)) \r\n\t\t\r\n\t# comparing both the strings \r\n\tif str_sorted1 == str_sorted2: return True\r\n\telse: return False", "id": 942, "avg_similarity_score": 0.048136659772375}
{"instruction": "Write a program to find the maximum and minimum from a list of numbers. Your code should pass these tests:\n\nassert find_maxmin([22, 4, 15, 12, 40]) == (40,4)\nassert find_maxmin([57, 5, 11, 2, 19]) == (57, 2)\nassert find_maxmin([58, 105, 3, 20, 67]) == (105, 3)", "output": "def find_maxmin(num_list): \r\n    min = num_list[0] \r\n    max = num_list[0] \r\n    for num in num_list: \r\n        if num < min: \r\n            min = num \r\n        elif num > max: \r\n            max = num \r\n  \r\n    return (max, min)", "id": 943, "avg_similarity_score": 0.19158408971902635}
{"instruction": "Write a program to reverse a LinkedList using recursion. Your code should pass these tests:\n\nassert reverseList([1, 2, 5, 8, 18]) == [18, 8, 5, 2, 1]\nassert reverseList([3, 7, 11, 17, 24])  == [24, 17, 11, 7, 3]\nassert reverseList([0, 9, 14, 20, 22]) == [22, 20, 14, 9, 0]", "output": "def reverseList(linkedList): \n    # Base case: \n    if linkedList == None or linkedList.next == None: \n        return linkedList \n  \n    # Reverse the sub-list starting  \n    # from second node \n    smallList = reverseList(linkedList.next) \n    linkedList.next.next = linkedList \n    linkedList.next = None\n  \n    # Join the two lists \n    return smallList", "id": 944, "avg_similarity_score": 0.09237823370199133}
{"instruction": "Write a program to generate N distinct random numbers between 0 and maximum allowed random value. Your code should pass these tests:\n\nassert random_numbers(10,50) == [8, 3, 2, 23, 50, 14, 43, 32, 29, 21]\nassert random_numbers(7, 10) == [3, 8, 0, 9, 4, 5, 2]\nassert random_numbers(30,100) == [38, 83, 32, 77, 61, 97, 89, 42, 17, 11, 6, 78, 67, 92, 53, 9, 80, 66, 16, 26, 73, 31, 4, 63, 54, 50, 99, 20, 74]", "output": "import random \r\n  \r\ndef random_numbers(n, Max): \r\n  res = [] \r\n  for j in range(n): \r\n    res.append(random.randrange(Max)) \r\n  return res", "id": 945, "avg_similarity_score": 0.03684056793685537}
{"instruction": "Write a function to divide a given list into two equal halves. Your code should pass these tests:\n\nassert divide_list([1,2,3], 2) == [[1, 2], [3]]\nassert divide_list([5,2,7,1,3], 4) == [[5,2,7], [1,3]]\nassert divide_list([1,2,33,4,5], 3) == [[1,2,33], [4,5]]", "output": "def divide_list(input_list, size): \r\n    return [input_list[x: x + size] for x in range(0, len(input_list), size)]", "id": 946, "avg_similarity_score": 0.024175345489806672}
{"instruction": "Write a function to separate all numbers in a given list. Your code should pass these tests:\n\nassert separate_list([1,2,\"ABC\",\"CD\"], int) == [[1,2],[ \"ABC\",\"CD\"]]\nassert separate_list([4,4,54,7,\"8\",\"ABC\"], str) == [[4,4,54,7], [\"8\",\"ABC\"]]\nassert separate_list([1,4,9,7,\"Z\",\"A\"], int) == [[1,4,9,7], [\"Z\",\"A\"]]", "output": "def separate_list(input_list, data_type):\r\n    list1 = []\r\n    list2 = []\r\n    for ele in input_list:\r\n        if isinstance(ele, data_type):\r\n            list1.append(ele)\r\n        else:\r\n            list2.append(ele)\r\n    return [list1, list2]", "id": 947, "avg_similarity_score": 0.1827314870202062}
{"instruction": "Write a function to determine the sum of the elements in the list of numbers. Your code should pass these tests:\n\nassert sum_list([1,2,5]) == 8\nassert sum_list([0,0,0,0]) == 0\nassert sum_list([2, -2, 4, 8]) == 12", "output": "def sum_list(numbers):\r\n    return sum(numbers)", "id": 948, "avg_similarity_score": 0.16567563186095025}
{"instruction": "Write a function to add two matrices. Your code should pass these tests:\n\nassert add_matrix([[1,2],[3,4]], [[5,6],[7,8]]) == [[6,8],[10,12]]\nassert add_matrix([[1,2],[-3,4]], [[8,-9],[-7,5]]) == [[9,-7],[-10,9]]\nassert add_matrix([[1,-5],[3,4]], [[7,6],[-2,5]]) == [[8,1],[1,9]]", "output": "def add_matrix(M1, M2): \r\n   return [[M1[i][j] + M2[i][j]  for j in range(len(M1[0]))] for i in range(len(M1))]", "id": 949, "avg_similarity_score": 0.024312247139188385}
{"instruction": "Write a Python program to count the number of prime numbers or composite numbers in a given list. Your code should pass these tests:\n\nassert prime_counting([2,4,6,7,9,11,13,15,17]) == 5\nassert prime_counting([100, 101, 102, 103, 104]) == 2\nassert prime_counting([2, 3, 4, 5, 6, 7]) == 4", "output": "def prime_counting(num_list): \r\n   prime_cnt = 0\r\n   for num in num_list:\n     if all(num % inum != 0 for inum in range(2,int(math.sqrt(num))+1)):\r\n       prime_cnt += 1\r\n   return prime_cnt", "id": 950, "avg_similarity_score": 0.21002892723561645}
{"instruction": "Write a function to interchange rows and columns of a given matrix. Your code should pass these tests:\n\nassert transpose([[4, 3, 2, 1], [8, 6, 5, 9]]) == [[4, 8], [3, 6], [2, 5], [1, 9]]\nassert transpose([[1, -2], [-3, 4], [5, -6]]) == [[1, -3, 5], [-2, 4, -6]]\nassert transpose([[1, 2, 3], [-4, 5, 6], [-7, 8, 9]]) == [[1, -4, -7], [2, 5, 8], [3, 6, 9]]", "output": "def transpose(matrix): \r\n   return [[row[i] for row in matrix] for i in range(len(matrix[0]))]", "id": 951, "avg_similarity_score": 0.15881589154430992}
{"instruction": "Write a Python program for binary search. Your code should pass these tests:\n\nassert binary_search([1, 2, 4, 7, 8, 10, 14],7) == 3\nassert binary_search([1, 8, 13, 25, 24, 39, 43],13) == 2\nassert binary_search([1, 2, 4, 5, 6, 7, 8, 9],9) == 7", "output": "def binary_search(array, target): \r\n    lower = 0\r\n    upper = len(array) \r\n    while lower < upper:  \r\n        x = lower + (upper - lower) // 2\r\n        val = array[x]\r\n        if target == val:\r\n            return x\r\n        elif target > val:\r\n            if lower == x:  \r\n                break        \r\n            lower = x\r\n        elif target < val:\r\n            upper = x \r\n    return -1", "id": 952, "avg_similarity_score": 0.0850732280805873}
{"instruction": "Write a Python script to rotate a list N times left. Your code should pass these tests:\n\nassert leftRotate([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]\nassert leftRotate([7, 8, 9], 2) == [9, 7, 8]\nassert leftRotate([2, 3, 4, 1], 3) == [1, 2, 3, 4]", "output": "def leftRotate(input_list, n): \n    for i in range(n): \n        first = input_list[0] \n        for j in range(len(input_list)-1): \n            input_list[j] = input_list[j+1] \n        input_list[len(input_list)-1] = first  \n    return input_list", "id": 953, "avg_similarity_score": 0.10990972968064615}
{"instruction": "Write a Python script to append a specified list of values at the end of the given list. Your code should pass these tests:\n\nassert append_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert append_list([2, 4, 5], [7, 8, 9]) == [2, 4, 5, 7, 8, 9]\nassert append_list([3, 6, 8], [1, 4, 11]) == [3, 6, 8, 1, 4, 11]", "output": "def append_list(list1, list2): \n    return list1 + list2", "id": 954, "avg_similarity_score": 0.1767108349389405}
{"instruction": "Write a Python function to check whether a string contains any special character or not. Your code should pass these tests:\n\nassert detect_special(\"hello\") == False\nassert detect_special(\"P@$$w0rd\") == True\nassert detect_special(\"$PlasticBanana!\") == True", "output": "import re\ndef detect_special(input_str): \n    return bool(re.search(r\"\\W\", input_str))", "id": 955, "avg_similarity_score": 0.09579597616836732}
{"instruction": "Write a python function to count the number of slices which have the same sum in a given array. Your code should pass these tests:\n\nassert count_Equal_Sums_Slice([1,2,1,2,1,2,1],3) == 4\nassert count_Equal_Sums_Slice([8,5,2,4,6],3) == 3\nassert count_Equal_Sums_Slice([1,2,3],2) == 0", "output": "def count_Equal_Sums_Slice(arr,slice_len):\r\n  n = len(arr)\r\n  counts = 0\r\n  for i in range(n-slice_len+1):\r\n    check_sum = 0\r\n    for j in range(i,i+slice_len):\r\n      check_sum += arr[j]\r\n    if check_sum == arr[i] * slice_len:\r\n      counts += 1\r\n  return counts", "id": 956, "avg_similarity_score": 0.19125296911646883}
{"instruction": "Write a python function to print the matrix in the given spiral form. Your code should pass these tests:\n\nassert spiral_Print([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,6,9,8,7,4,5]\nassert spiral_Print([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == [1,2,3,4,8,12,11,10,9,5,6,7]", "output": "def spiral_Print(mat): \n  \n    # Defining the four edge boundaries of the matrix\n    top = 0\n    bottom = len(mat)-1 \n    left = 0\n    right = len(mat[0])-1\n  \n    # The direction of traversal\n    dir = 0\n    trav_list = []\n  \n    while top<=bottom and left<=right: \n  \n        if dir==0: \n            for i in range(left, right+1): \n                trav_list.append(mat[top][i])\n            top += 1\n            dir = 1 \n  \n        elif dir==1: \n            for i in range(top, bottom+1): \n                trav_list.append(mat[i][right])\n            right -= 1\n            dir = 2\n        elif dir==2: \n            for i in range(right, left-1, -1): \n                trav_list.append(mat[bottom][i])\n            bottom -= 1\n            dir = 3\n        elif dir==3: \n            for i in range(bottom, top-1, -1): \n                trav_list.append(mat[i][left])\n            left += 1\n            dir = 0\n  \n    return trav_list", "id": 957, "avg_similarity_score": 0.14001725542698953}
{"instruction": "Write a python program to find the first non-repeating character in the given string. Your code should pass these tests:\n\nassert first_Non_Repeating('programming') == 'r'\nassert first_Non_Repeating('abca') == 'b'\nassert first_Non_Repeating('aaaaa') == '_'", "output": "def first_Non_Repeating(str): \n    all_Freq = {} \n    for i in str: \n        if i in all_Freq: \n            all_Freq[i] += 1\n        else: \n            all_Freq[i] = 1\n    for char,freq in all_Freq.items(): \n        if freq == 1: \n            return char \n    return '_'", "id": 958, "avg_similarity_score": 0.15226894068528596}
{"instruction": "Write a python function to get the difference between two lists. Your code should pass these tests:\n\nassert diff_Lists([1,2,3,4],[1,2,4,5]) == [3,5]\nassert diff_Lists([1,2,3,4],[1,3,4]) == [2]\nassert diff_Lists([2,9],[1,2,3]) == [9,1,3]", "output": "def diff_Lists(list1, list2):\n  res = [] \n  m = len(list1)\n  n = len(list2)\n  i,j = 0,0\n  while i < m and j < n:\n    if list1[i] < list2[j]:\n      res.append(list1[i])\n      i += 1 \n    elif list1[i] > list2[j]:\n      res.append(list2[j])\n      j += 1\n    else:\n      i += 1\n      j += 1\n  while i < m:\n    res.append(list1[i])\n    i += 1\n  while j < n:\n    res.append(list2[j])\n    j += 1\n  return res", "id": 959, "avg_similarity_score": 0.08907291711759385}
{"instruction": "Write a function to calculate the value of power b raised to the power n. Your code should pass these tests:\n\nassert power(2, 5) == 32\nassert power(7, 2) == 49\nassert power(2, 0) == 1", "output": "def power(b, n):\r\n  if n == 0:\r\n    return 1\r\n  elif n % 2 == 0: \r\n    return power(b, n/2)*power(b, n/2) \r\n  elif n % 2 == 1:  \r\n    return b * power(b, n//2) *  \r\n             power(b, n//2)", "id": 960, "avg_similarity_score": 0.08484030605660334}
{"instruction": "Write a function to return the position of maximum number in a list. Your code should pass these tests:\n\nassert maxposition([2, 1, 7, 4, 5]) == 2\nassert maxposition([1, 3, 4, 6]) == 3\nassert maxposition([2, 2, 2, 7]) == 3", "output": "def maxposition(list1): \r\n    maxElement = max(list1) \r\n    return list1.index(maxElement)", "id": 961, "avg_similarity_score": 0.20202639064039826}
{"instruction": "Write a function to truncate a string to a given length. Your code should pass these tests:\n\nassert truncateString(\"GeeksforGeeks\", 5) == \"Geeks\"\nassert truncateString(\"hello world\", 8) == \"hello wo\"\nassert truncateString(\"hello world\", 15) == \"hello world\"", "output": "def truncateString(str1, length): \r\n    return str1[0:length]", "id": 962, "avg_similarity_score": 0.16074121188825788}
{"instruction": "Create a python program to check if two strings are anagrams of each other or not. Your code should pass these tests:\n\nassert is_Anagrams(\"test\",\"esst\") == True\nassert is_Anagrams(\"abcd\",\"dcba\") == True\nassert is_Anagrams(\"dog\",\"God\") == False", "output": "def is_Anagrams(s1, s2):  \r\n    s1_list = sorted(s1) \r\n    s2_list = sorted(s2) \r\n    if(s1_list==s2_list): \r\n        return True  \r\n    else: \r\n        return False", "id": 963, "avg_similarity_score": 0.10637748271105314}
{"instruction": "Design a Python program to calculate the sum of two numbers. Your code should pass these tests:\n\nassert sum_two_nums(2,3) == 5\nassert sum_two_nums(-1,-10) == -11\nassert sum_two_nums(2.5,3.2) == 5.7", "output": "def sum_two_nums(num1,num2):  \r\n    return num1+num2", "id": 964, "avg_similarity_score": 0.16120023828560065}
{"instruction": "Create a function to convert a string to uppercase. Your code should pass these tests:\n\nassert convert_to_upper(\"Hello World!\") == \"HELLO WORLD!\"\nassert convert_to_upper(\"A Quick Brown Fox\") == \"A QUICK BROWN FOX\"\nassert convert_to_upper(\"Good morning\") == \"GOOD MORNING\"", "output": "def convert_to_upper(string): \r\n    return string.upper()", "id": 965, "avg_similarity_score": 0.10474621816782655}
{"instruction": "Write a python script to search a given string x for a given character. Your code should pass these tests:\n\nassert search_char(\"hello\",\"o\") == 4\nassert search_char(\"coding\",\"g\") == 5\nassert search_char(\"hello world\",\"z\") == -1", "output": "def search_char(string, char): \r\n  \r\n    for i in range(len(string)): \r\n        if (string[i] == char): \r\n            return i \r\n  \r\n    return -1", "id": 966, "avg_similarity_score": 0.14152557344492642}
{"instruction": "Design a python program to reverse a given string. Your code should pass these tests:\n\nassert reverse_string(\"Hello\") == \"olleH\"\nassert reverse_string(\"Coding\") == \"gnidoC\"\nassert reverse_string(\"swag\") == \"gaws\"", "output": "def reverse_string(string): \r\n    rev = ''.join(reversed(string)) \r\n    return rev", "id": 967, "avg_similarity_score": 0.14313609228382995}
{"instruction": "Write a function to find all the paths from top-left corner to bottom-right corner in a maze using backtracking. Your code should pass these tests:\n\nassert solve_maze(maze) == True", "output": "def solve_maze(maze): \r\n      \r\n    # Creating a copy of the maze originally generated by the user \r\n    solution = [[0 for j in range(len(maze[0]))] for i in range(len(maze))] \r\n  \r\n    # Create arbitrary starting point. \r\n    solution[0][0] = 1\r\n  \r\n    # Scratch the marks to help navigation. \r\n    if(solvemazeUtil(maze, 0, 0, solution) == False): \r\n        return False\r\n  \r\n    # Print the solution. \r\n    for i in range(len(solution)): \r\n        for j in range(len(solution[0])): \r\n            print(solution[i][j], end = \" \") \r\n        print(\"\") \r\n  \r\n    return True\r\n  \r\n# A recursive utility function to solve Maze problem \r\ndef solvemazeUtil(maze, row, col, solution): \r\n      \r\n    # Check if the current cell is the destination cell \r\n    if (row == len(maze) - 1 and col == len(maze[0]) - 1): \r\n        return True\r\n  \r\n    # Check if the current cell is valid \r\n    if (row < 0 or col < 0 or row >= len(maze) or col >= len(maze[0])  or  maze[row][col] == 0): \r\n        return False\r\n  \r\n    # Make the current cell visited by changing it \r\n    solution[row][col] = 1\r\n  \r\n    # Check if moving in each direction is feasible \r\n    if (solvemazeUtil(maze, row + 1, col, solution)): \r\n        return True\r\n    if (solvemazeUtil(maze, row, col - 1, solution)): \r\n        return True\r\n    if (solvemazeUtil(maze, row, col + 1, solution)): \r\n        return True\r\n    if (solvemazeUtil(maze, row - 1, col, solution)): \r\n        return True\r\n  \r\n    solution[row][col] = 0\r\n    return False", "id": 968, "avg_similarity_score": 0.09680935391613865}
{"instruction": "Write a python program to create a dictionary with an array of duplicate elements removed. Your code should pass this tests:\n\nassert create_dict([11,2,3,4,3,4,5]) == {11:None, 2:None, 3:None, 4:None, 5:None}", "output": "def create_dict(arr): \r\n    my_dict = {} \r\n    for i in set(arr): \r\n        my_dict[i] = None\r\n    return my_dict", "id": 969, "avg_similarity_score": 0.09006231224419044}
{"instruction": "Write a python program to extract the digits from a given number. Your code should pass these tests:\n\nassert extract_digits(12345) == [1,2,3,4,5]\nassert extract_digits(992128645) == [9,9,2,1,2,8,6,4,5]", "output": "def extract_digits(n): \r\n    digits = [] \r\n    while n != 0: \r\n        digit = n % 10\r\n        digits.append(digit) \r\n        n = n // 10\r\n    digits.reverse() \r\n    return digits", "id": 970, "avg_similarity_score": 0.1923258023327643}
{"instruction": "Write a Python program to shuffle the elements of a given array. Your code should pass this test:\n\nassert shuffle([2,4,5,2,1]) == [5,1,2,2,4]", "output": "import random \r\n  \r\ndef shuffle(arr): \r\n    n = len(arr) \r\n    for i in range(n-1,0,-1): \r\n        j = random.randint(0,i+1) \r\n        arr[i],arr[j] = arr[j],arr[i] \r\n    return arr", "id": 971, "avg_similarity_score": 0.1597397255878265}
{"instruction": "Write a python function to generate the product of all the elements from a given array. Your code should pass this test:\n\nassert product([2,3,5,7]) == 210", "output": "def product(arr): \r\n    p = 1\r\n    for i in arr: \r\n        p = p * i  \r\n    return p", "id": 972, "avg_similarity_score": 0.175652089894198}
{"instruction": "Write a python program to check if the elements in an array are the same or not. Your code should pass this test:\n\nassert are_elements_same([2,2,2]) == True", "output": "def are_elements_same(arr): \r\n    element = arr[0] \r\n    for i in arr: \r\n        if i != element: \r\n            return False\r\n    return True", "id": 973, "avg_similarity_score": 0.11804590908247192}
{"instruction": "Write a python program to create a checkerboard pattern using only user inputted size. Your code should pass these tests:\n\nassert checkerboard(5) == [['x', 'o', 'x', 'o', 'x'], ['o', 'x', 'o', 'x', 'o'], ['x', 'o', 'x', 'o', 'x'], ['o', 'x', 'o', 'x', 'o'], ['x', 'o', 'x', 'o', 'x']]\nassert checkerboard(3) == [['x', 'o', 'x'], ['o', 'x', 'o'], ['x', 'o', 'x']]", "output": "def checkerboard(size):\n    board = []\n    for i in range(size):\n        sub_list = []\n        for j in range(size):\n            if (i+j)%2 == 0:\n                sub_list.append('x')\n            else:\n                sub_list.append('o')\n        board.append(sub_list)\n    return board", "id": 974, "avg_similarity_score": 0.07377098012189165}
{"instruction": "Write a function to convert a string to a list of words, and remove all punctuation. Your code should pass these tests:\n\nassert convert_and_strip(\"I love coding!\") == [\"I\", \"love\", \"coding\"]\nassert convert_and_strip(\"Hi, my name is John.\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]", "output": "import string\ndef convert_and_strip(s):\n    remove = string.punctuation\n    table = str.maketrans('', '', remove)\n    return s.translate(table).split()", "id": 975, "avg_similarity_score": 0.13589651367167507}
{"instruction": "Write a function to calculate the Fibonacci sequence. Your code should pass these tests:\n\nassert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\nassert fibonacci(7) == [0, 1, 1, 2, 3, 5, 8, 13]\nassert fibonacci(3) == [0, 1, 1, 2]", "output": "def fibonacci(n):\n    if n == 0: \n        return [0]\n    elif n == 1: \n        return [0, 1]\n    else: \n        fib_list = [0, 1]\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-2] + fib_list[i-1])\n        return fib_list", "id": 976, "avg_similarity_score": 0.08600615061475057}
{"instruction": "Write a python function to find the closest pair of given numbers in an array. Your code should pass these tests:\n\nassert closest_Pair([2,3,5,6,7,1], 6) == [5, 7]\nassert closest_Pair([7,60,3,2,1,45,50],45) == [50, 45]\nassert closest_Pair([56.3, 24.7, 58.7, 15.2], 15) == [15.2, 24.7]", "output": "def closest_Pair(arr,num):\r\n    arr.sort() \r\n    min_diff = 9999999\r\n    n = len(arr)\r\n    pair = [0, 0]\r\n    for i in range(0, n - 1): \r\n        if (abs(arr[i] - num) < min_diff): \r\n            min_diff = abs(arr[i] - num) \r\n            pair[0] = arr[i] \r\n        if (abs(arr[i + 1] - num) < min_diff): \r\n            min_diff = abs(arr[i + 1] - num) \r\n            pair[1] = arr[i + 1] \r\n    return pair", "id": 977, "avg_similarity_score": 0.18455673334969167}
{"instruction": "Create a function to calculate the total number of possible dice rolls from n number of dice. Your code should pass these tests:\n\nassert dice_rolls(2) == 36\nassert dice_rolls(3) == 216\nassert dice_rolls(4) == 1296", "output": "def dice_rolls(n): \r\n    return pow(6, n);", "id": 978, "avg_similarity_score": 0.13410398879811986}
{"instruction": "Define a function to find the mode of a given list. Your code should pass these tests:\n\nassert mode([7,5,2,5,7,8]) == 5\nassert mode([3,1,7,3,5,1,3]) == 3\nassert mode([9, 8, 8, 9, 6, 3, 9]) == 9", "output": "def mode(n) : \n    # insert the list item to the count dictionary  \n    count = dict() \n    for i in n: \n        if i in count: \n            count[i] += 1\n        else: \n            count[i] = 1\n    # find the mode of the list and returns the mode  \n    max_value = max(count.values())\n    \n    mode = [k for k, v in count.items() if v == max_value]\n    \n    if len(mode) == 1: \n        return mode[0] \n    else: \n        return mode", "id": 979, "avg_similarity_score": 0.22849176988526274}
{"instruction": "Create a function that takes in a list of names and returns a dictionary containing the number of occurrences of each name as its key-value pair. Your code should pass these tests:\n\nassert occurences([\"Alice\", \"Alice\", \"Bob\", \"Bob\", \"Charlie\"]) == {\"Alice\" : 2, \"Bob\" : 2, \"Charlie\" : 1}\nassert occurences([\"John\", \"John\", \"John\", \"Steve\", \"Steve\"]) == {\"John\" : 3, \"Steve\" : 2}\nassert occurences([\"Daniel\", \"Daniel\", \"Alex\", \"Natalia\", \"Alex\", \"Natalia\", \"Alex\"]) == {\"Daniel\" : 2, \"Alex\" : 3, \"Natalia\" : 2}", "output": "def occurences(names): \n    count = {} \n    for name in names: \n        if name in count: \n            count[name] += 1 \n        else: \n            count[name] = 1 \n  \n    return count", "id": 980, "avg_similarity_score": 0.12475981538114125}
{"instruction": "Create a function to return the length of the longest common substring of two given strings. Your code should pass these tests:\n\nassert longest_substring(\"Code Generation\", \"Generative Code\") == 8\nassert longest_substring(\"ABCDEFGHI\", \"KLMNOP\") == 0\nassert longest_substring(\"programming\", \"mmrrggin\") == 6", "output": "def longest_substring (str1, str2): \r\n      \r\n    # Initialize Setting \r\n    lcs_length = 0    \r\n  \r\n    n = len(str1) \r\n    m = len(str2) \r\n  \r\n    # Output To Store The Longest Common Substring \r\n    lcs_string = \"\"\r\n  \r\n    for i in range(0, n + 1): \r\n  \r\n        # Longest common substring upto this position \r\n        sbstr = \"\"\r\n  \r\n        # Longest common substring starting from last position \r\n        sbstr_prev = \"\"\r\n  \r\n        for j in range(0, m + 1): \r\n            if (i == 0 or j == 0): \r\n                lcs_matrix[i][j] = 0\r\n            elif (str1[i - 1] == str2[j - 1]): \r\n                lcs_matrix[i][j] = lcs_matrix[i - 1][j - 1] + 1\r\n  \r\n                sbstr = str1[i - 1] + sbstr \r\n  \r\n                 # Update maximum length of longest \r\n                # common substring \r\n                if (lcs_length < lcs_matrix[i][j]): \r\n                    lcs_length = lcs_matrix[i][j] \r\n                    lcs_string = sbstr \r\n            else: \r\n                lcs_matrix[i][j] = 0 \r\n  \r\n    return lcs_length", "id": 981, "avg_similarity_score": 0.16860845832087443}
{"instruction": "Write a function to print all the valid substrings of any given string. Your code should pass these tests:\n\nassert substrings(\"codegen\") == [\"c\",\"co\",\"cod\",\"code\",\"codeg\",\"codege\",\"codegen\",\"o\",\"od\",\"ode\",\"odeg\",\"odege\",\"odegen\",\"d\",\"de\",\"deg\",\"dege\",\"degen\",\"e\",\"eg\",\"ege\",\"egen\",\"g\",\"ge\",\"gen\",\"e\",\"en\",\"n\"]\nassert substrings(\"pythons\") == [\"p\",\"py\",\"pyt\",\"pyth\",\"pytho\",\"python\",\"python\",\"y\",\"yt\",\"yth\",\"ythe\",\"ythen\",\"t\",\"th\",\"the\",\"then\",\"h\",\"he\",\"hen\",\"e\",\"en\",\"n\",\"s\"]\nassert substrings(\"software\") == [\"s\",\"so\",\"sof\",\"soft\",\"softw\",\"softwa\",\"softwar\",\"o\",\"of\",\"oft\",\"oftw\",\"oftwa\",\"oftwar\",\"f\",\"ft\",\"ftw\",\"ftwa\",\"ftwar\",\"t\",\"tw\",\"twa\",\"twar\",\"w\",\"wa\",\"war\",\"a\",\"ar\",\"r\",\"e\"]", "output": "def substrings(string): \r\n    result_string = set() \r\n  \r\n    # Generate all possible substrings \r\n    for i in range(len(string)): \r\n        for j in range(i+1,len(string)+1): \r\n            sub_string = string[i:j] \r\n            result_string.add(sub_string) \r\n    return list(result_string)", "id": 982, "avg_similarity_score": 0.16164302770948052}
{"instruction": "Write a program to count the frequency of occurrence of every element in a given list. Your code should pass these tests:\n\nassert count_frequency([1, 2, 3, 1, 2, 3])== {1: 2, 2: 2, 3: 2}\nassert count_frequency([\"apple\", \"orange\", \"apple\", \"mango\"]) == {\"apple\":2, \"orange\":1, \"mango\":1}\nassert count_frequency([])=={}", "output": "def count_frequency(list1):\r\n   freq = {} \r\n    for item in list1: \r\n        if (item in freq): \r\n            freq[item] += 1\r\n        else: \r\n            freq[item] = 1\r\n    return freq", "id": 983, "avg_similarity_score": 0.21055722075993225}
{"instruction": "Write a Python program to calculate the sum of a number and its reverse. Your code should pass these tests:\n\nassert sum_and_reverse(123) = 444\nassert sum_and_reverse(5678) = 14214\nassert sum_and_reverse(-124) = 0", "output": "def sum_and_reverse(num):\r\n  #calculate the sum of the reverse by using str method\r\n  rev_str = str(num)[::-1]\r\n  rev_num = int(rev_str)\r\n  \r\n  #calculate the sum of number and its reverse\r\n  result = num + rev_num\r\n  \r\n  return result", "id": 984, "avg_similarity_score": 0.18171602718424104}
{"instruction": "Write a python function to calculate compound interest with given parameters. Your code should pass these tests:\n\nassert compound_Interest(1000, 12, 3, 0.2) == 964.67\nassert compound_Interest(2000, 24, 3, 0.2) == 1979.68\nassert compound_Interest(3000, 36, 3, 0.2) == 2951.05", "output": "def compound_Interest(P, N, R, T) : \n  return round((P * pow((1 + (R / N)), (N * T))), 2)", "id": 985, "avg_similarity_score": 0.06767122384786621}
{"instruction": "Write a python program to scan a given string and count the number of Capital letters present. Your code should pass these tests:\n\nassert count_Capitals(\"Hello World\") == 2\nassert count_Capitals(\"I am from Los Angeles! \") == 3\nassert count_Capitals(\"PYTHON!\") == 1", "output": "def count_Capitals(s): \n\u00a0 \u00a0 count = 0\n\u00a0 \u00a0 for ch in s:\n\u00a0 \u00a0 \u00a0 \u00a0 if ch.isupper():\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count += 1\n\u00a0 \u00a0 return count", "id": 986, "avg_similarity_score": 0.16923844235569807}
{"instruction": "Write a python script to remove all non-alphabet characters from a given string. Your code should pass these tests:\n\nassert remove_non_alpha(\"This! is 8 a T3e$s#t! S%tring\") == \"ThisisaTestString\"\nassert remove_non_alpha(\"Q@u#i*cK^ brOwn F^o^x\") == \"uicKrownox\"\nassert remove_non_alpha(\"TeSt StRinG!!2\") == \"TeStStRinG\"", "output": "def remove_non_alpha(string):\r\n    result = ''.join(i for i in string if i.isalpha())\r\n    return result", "id": 987, "avg_similarity_score": 0.14097967914453263}
{"instruction": "Write a python code to compress a given string by replacing consecutive characters with count of characters and character. Your code should pass these tests:\n\nassert compress_string(\"bbbccac\") == \"3b2c2a1c\"\nassert compress_string(\"abcd\") == \"1a1b1c1d\"\nassert compress_string(\"aabbbcccdddd\") == \"2a3b3c4d\"", "output": "def compress_string(string): \r\n    count = 1\r\n    result = \"\"\r\n    for i in range(1, len(string)+1): \r\n        if i < len(string) and string[i] == string[i-1]: \r\n            count += 1\r\n        else: \r\n            result += str(count) + string[i-1]\r\n            count = 1\r\n    return result", "id": 988, "avg_similarity_score": 0.12768592115327243}
{"instruction": "Write a python function to interpolate missing values in a given sequence. The missing values are marked by 'None'. Your code should pass these tests:\n\nassert interpolate_values([None, 2, 4, None, 10, 14], 0, 5) == [3.0, 2, 4, 7.0, 10, 14]\nassert interpolate_values([1, None, 5, 12, None, 15], 0, 5) == [1, 3.5, 5, 12, 13.5, 15]\nassert interpolate_values([3, None, 12, 14, None, 17], 0, 5) == [3, 7.5, 12, 14, 15.5, 17]", "output": "def interpolate_values(lst, start, end): \r\n    result = [] \r\n    \r\n    for index in range(start,end + 1): \r\n        if lst[index] == None: \r\n            prev, next = -1, -1\r\n            \r\n            j = index - 1\r\n            while(j >= 0 and lst[j] == None): \r\n                j -= 1\r\n                \r\n            if j >= 0 : \r\n                prev = lst[j] \r\n\r\n            j = index + 1\r\n            while(j <= end and lst[j] == None): \r\n                j += 1\r\n                \r\n            if j <= end : \r\n                next = lst[j] \r\n            \r\n            if prev != -1 and next != -1 : \r\n                lst[index] = (prev + next) / 2\r\n        result.append(lst[index])\r\n    return result", "id": 989, "avg_similarity_score": 0.12495162085956694}
{"instruction": "Write a Python function to find the potence of the maximum number of Zeros in consecutive number sequence. Your code should pass these tests:\n\nassert max_zeros(14, 15) == 2\nassert max_zeros(25, 12) == 0\nassert max_zeros(44, 10) == 3", "output": "def max_zeros(n, m): \n    max_Pow = 1\r\n    for i in range(2, n+1): \r\n        powVal = 0\r\n        j = i \r\n        while (j%m == 0): \r\n            powVal += 1\r\n            j /= m\n        max_Pow = max(max_Pow, powVal)\r\n    return max_Pow", "id": 990, "avg_similarity_score": 0.1461821718030871}
{"instruction": "Write a Python program to check for balanced parentheses in a given expression. Your code should pass these tests:\n\nassert check_parantheses(\"(((3+4)*5)+((2*4)+3))\") == True\nassert check_parantheses(\"()(())\") == True\nassert check_parantheses(\"(())))\") == False", "output": "def check_parantheses(expr): \n    stack = [] \n    for c in expr: \n        if (c == '('): \n            stack.append(c) \n        elif (c == ')'): \n            if (len(stack) == 0): \n                return False \n            stack.pop() \n  \n    if (len(stack) == 0): \n        return True \n    else: \n        return False", "id": 991, "avg_similarity_score": 0.14681374684994028}
{"instruction": "Write a Python function to check whether a string consists of only alphabets or not. Your code should pass these tests:\n\nassert check_string(\"Python\") == True\nassert check_string(\"12345@\") == False\nassert check_string(\"@12345\") == False", "output": "def check_string(string): \n    check = 0\n    for char in string: \n        if(char.isalpha()): \n            check += 1\n    if check == len(string): \n        return True\n    else: \n        return False", "id": 992, "avg_similarity_score": 0.12186740781308243}
{"instruction": "Write a Python function to generate the staircase element using recursion. Your code should pass these tests:\n\nassert printStairCase(3) == '***'\nassert printStairCase(5) == '*****'\nassert printStairCase(2) == '**'", "output": "def printStairCase(n):\n  if n < 1:\n    return ''\n  else:\n    return '*' + printStairCase(n-1)", "id": 993, "avg_similarity_score": 0.07991247786099721}
{"instruction": "Write a function to evaluate the polynomial expression given by the user. Your code should pass these tests:\n\nassert evaluatePolynomial(3, [1, 0, 1, 6]) == 63\nassert evaluatePolynomial(4, [0, 1, 3, -1, 1]) == 124\nassert evaluatePolynomial(2, [1, 0, 0, 0, 1]) == 9", "output": "def evaluatePolynomial(x, polynomial): \n  \n    ans = 0\n  \n    for i in range(0, len(polynomial)): \n        ans += (x**i)*polynomial[i] \n  \n    return ans", "id": 994, "avg_similarity_score": 0.11215785881982555}
{"instruction": "Create a program to read a string and reverse its content. Your code should pass these tests:\n\nassert reverseString(\"Hello World\") == \"dlroW olleH\"\nassert reverseString(\"Foo Bar\") == \"raB ooF\"\nassert reverseString(\"abcdef\") == \"fedcba\"", "output": "def reverseString(str):\n  return ''.join(reversed(str))", "id": 995, "avg_similarity_score": 0.10157599128260905}
{"instruction": "Create a program to find the longest substring with unique characters. Your code should pass these tests:\n\nassert longestSubstring(\"abcabcbb\") == \"abc\"\nassert longestSubstring(\"bbbbb\") == \"b\"\nassert longestSubstring(\"ababaccc\") == \"abac\"", "output": "def longestSubstring(str):\n    longest_str, prev_char, start_pos = \"\", -1, 0\n\n    for i, char in enumerate(str):\n        if char in str[start_pos:i]:\n            if len(longest_str) < (i - start_pos):\n                longest_str = str[start_pos:i]\n \n            start_pos = prev_char + 1\n\n        prev_char = i\n\n    if len(longest_str) < (len(str) - start_pos):\n        longest_str = str[start_pos:]\n\n    return longest_str", "id": 996, "avg_similarity_score": 0.12222581823534642}
{"instruction": "Write a function which takes a list and a number k and returns a list of sublists of length k. Your code should pass these tests:\n\nassert listPartition([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert listPartition([1,3,5,7], 4) == [[1,3,5,7]]\nassert listPartition([1,2,3,4,5,6,7,8], 3) == [[1,2,3],[4,5,6],[7,8]]", "output": "def listPartition(list, k): \n    res = [] \n  \n    # So that last sublist is not ignored if count of elements  \n    # in list is neither powers of 2 nor divisible by k \n    n = len(list) % k if len(list) % k != 0 else k \n  \n    # Dividing into sublists of size k \n    # Except the last sublist \n    for a in range(0, len(list) - n, k): \n        res.append(list[a:a + k]) \n  \n    # Adding the last sublist \n    res.append(list[len(list) - n:]) \n  \n    return res", "id": 997, "avg_similarity_score": 0.11273662470942884}
{"instruction": "Write a python function to check if two binary trees are identical. Your code should pass these tests:\n\nassert is_tree_identical(Node(1), Node(1)) == True\nassert is_tree_identical(Node(2), Node(3)) == False\nassert is_tree_identical(Node(1, Node(2), Node(3)), Node(1, Node(2), Node(3))) == True", "output": "class Node: \r\n    def __init__(self, data): \r\n        self.data = data  \r\n        self.left = None\r\n        self.right = None\r\n\r\ndef is_tree_identical(a, b): \r\n    if (a is None and b is None): \r\n        return True\r\n    if (a is not None and b is not None): \r\n        return ((a.data == b.data) and  \r\n                is_tree_identical(a.left, b.left)and\r\n                is_tree_identical(a.right, b.right) \r\n               ) \r\n    else: \r\n        return False", "id": 998, "avg_similarity_score": 0.04234845341147585}
{"instruction": "Write a python function to perform an in-place quicksort on a given array. Your code should pass these tests:\n\nassert quicksort([2,5,3,4,6,7,8]) == [2,3,4,5,6,7,8]\nassert quicksort([3,1,4,2,5]) == [1,2,3,4,5]\nassert quicksort([0,4,2,1,8,5]) == [0,1,2,4,5,8]", "output": "def quicksort(arr):\r\n    less = []\r\n    pivot_list = []\r\n    more = []\r\n    if len(arr) <= 1:\r\n        return arr\r\n    else:\r\n        pivot = arr[0]\r\n        for i in arr:\r\n            if i < pivot:\r\n                less.append(i)\r\n            elif i > pivot:\r\n                more.append(i)\r\n            else:\r\n                pivot_list.append(i)\r\n        less = quicksort(less)\r\n        more = quicksort(more)\r\n        return less + pivot_list + more", "id": 999, "avg_similarity_score": 0.1453123110759547}
{"instruction": "Write a python function to determine if a given string is an interleaving of two other strings. Your code should pass these tests:\n\nassert is_interleaving(\"AB\", \"CD\", \"ABCD\") == True\nassert is_interleaving(\"AB\", \"CD\", \"ACBD\") == True\nassert is_interleaving(\"AB\", \"CD\", \"ACDB\") == False", "output": "def is_interleaving(A, B, C): \r\n      \r\n    s1 = len(A)  \r\n    s2 = len(B)  \r\n    s3 = len(C)  \r\n  \r\n    if s1 + s2 != s3: \r\n        return False\r\n  \r\n    i, j, k = 0, 0, 0\r\n  \r\n    while i < s1 and j < s2: \r\n        if A[i] == C[k] and B[j] == C[k]: \r\n            i += 1\r\n            j += 1\r\n            k += 1\r\n  \r\n        elif A[i] == C[k]: \r\n            i += 1\r\n            k += 1\r\n  \r\n        elif B[j] == C[k]: \r\n            j += 1\r\n            k += 1\r\n  \r\n        else: \r\n            return False\r\n  \r\n    while i < s1: \r\n        if A[i] == C[k]: \r\n            i += 1\r\n            k += 1\r\n        else: \r\n            return False\r\n  \r\n    while j < s2: \r\n        if B[j] == C[k]: \r\n            j += 1\r\n            k += 1\r\n        else: \r\n            return False\r\n  \r\n    return True", "id": 1000, "avg_similarity_score": 0.1548974679822256}
{"instruction": "Write a python script to find largest and smallest number in a given array. Your code should pass these tests:\n\nassert largest_Smallest([3,2,5,6,1]) == (6,1)\nassert largest_Smallest([0,10,20,-3]) == (20,-3)\nassert largest_Smallest([-14,-1,-8,0]) == (0,-14)", "output": "def largest_Smallest(arr): \r\n    largest = arr[0]; \r\n    smallest = arr[0]; \r\n  \r\n    for i in range(1,len(arr)): \r\n        if arr[i] > largest: \r\n            largest = arr[i]; \r\n  \r\n        if arr[i] < smallest: \r\n            smallest = arr[i]; \r\n    \r\n    return (largest,smallest)", "id": 1001, "avg_similarity_score": 0.1718826304429569}
{"instruction": "Write a python function to shift all the list elements within a range to the beginning of the array. Your code should pass these tests:\n\nassert shift([2,4,1,3,9],1,3)==[1,3,2,4,9]\nassert shift([3,6,5,4,2],1,2)==[3,5,6,4,2]\nassert shift([1,2,3,4,5],2,4)==[3,4,1,2,5]", "output": "def shift(arr, start, end): \r\n    l = len(arr); \r\n    arr[0: l - end - 1] = arr[end + 1:l] \r\n    for i in range(end - start + 1) : \r\n        arr[i] = arr[start + i] \r\n  \r\n    return arr;", "id": 1002, "avg_similarity_score": 0.14846180751683916}
{"instruction": "Write a python function to determine the most frequent element in an array. Your code should pass these tests:\n\nassert most_Frequent([1,2,3,4,1,2,1],2)==1\nassert most_Frequent([1,2,3,2,1,3],2)==2\nassert most_Frequent([1,2,3,4,2,1],2)==2", "output": "def most_Frequent(arr, n): \r\n    max_count = 1; \r\n    max_element = arr[0]; \r\n    for i in range(n):  \r\n        curr_count = 1; \r\n        for j in range(i + 1, n):  \r\n            if (arr[i] == arr[j]): \r\n                curr_count+= 1; \r\n           \r\n        if (curr_count > max_count):  \r\n            max_element = arr[i]; \r\n            max_count = curr_count; \r\n  \r\n    return max_element;", "id": 1003, "avg_similarity_score": 0.10755775147631791}
{"instruction": "Write a python program to calculate the sum of the two largest numbers in a list. Your code should pass these tests:\n\nassert largest_Two_Sum([1,2,3,4,5]) == 9\nassert largest_Two_Sum([0,5,7,10,6]) == 17\nassert largest_Two_Sum([-3,-1,-2,-7,-4]) == -3", "output": "def largest_Two_Sum(arr): \r\n    max1 = 0; \r\n    max2 = 0; \r\n    for i in range(len(arr)): \r\n        if arr[i] > max1: \r\n            max2 = max1; \r\n            max1 = arr[i]; \r\n        elif arr[i] > max2: \r\n            max2 = arr[i];  \r\n            \r\n    return (max1 + max2);", "id": 1004, "avg_similarity_score": 0.2099242370428857}
