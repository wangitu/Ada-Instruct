{"instruction": "def find_symmetric_group(nums):\n    \"\"\" Given an array of integers, find the size of the largest\n    symmetric group in the array (i.e. a subarray in which all the elements \n    have the same absolute value).\n\n    >>> find_symmetric_group([1, -1, 2, -2, 3])\n    3\n    >>> find_symmetric_group([2,2,-2,-2,1,1])\n    6\n    \"\"\"", "output": "pass", "id": 0, "avg_similarity_score": 0.1860817561437241}
{"instruction": "def check_can_place(x, a, b):\n    \"\"\" Given two integers a and b, determine whether x can be placed \n    so that x + a = b.\n\n    >>> check_can_place(2, 3, 5)\n    True\n    >>> check_can_place(3, 2, 5)\n    False\n    \"\"\"", "output": "pass", "id": 1, "avg_similarity_score": 0.13452537009285273}
{"instruction": "def reverse_stack_order(stack):\n    \"\"\" Write a function that reverses the order of a given stack.\n\n\t>>> s = [3,2,1]\n    >>> reverse_stack_order(s)\n    [1,2,3]\n    >>> s\n    [1,2,3]\n    \"\"\"", "output": "pass", "id": 2, "avg_similarity_score": 0.14593756174120714}
{"instruction": "def delete_swap_sort(arr):\n    \"\"\" Write a function that takes an array of integers and sort the array \n    using the following algorithm: for each index, delete the element \n    at that index and move the element one index prior to it to the index.\n\n    >>> delete_swap_sort([2,3,1])\n    [1,2,3]\n    >>> delete_swap_sort([4,1,3,2])\n    [1,2,3,4]\n    \"\"\"", "output": "pass", "id": 3, "avg_similarity_score": 0.16708204131237267}
{"instruction": "def adjacent_min_max(arr):\n    \"\"\" Write a function that given an array of N integers, \n    returns the minimum and maximum values of tech two adjacent elements.\n\n    >>> adjacent_min_max([1,5,2,4,6,3])\n    (1,5)\n    >>> adjacent_min_max([2,1,3,4,2,5])\n    (2,3)\n    \"\"\"", "output": "pass", "id": 4, "avg_similarity_score": 0.2201192264855521}
{"instruction": "def longest_unique_subarray(arr, k):\n    \"\"\" Write a Python program to find the length of the longest \n    subarray of a given array of integers ensuring that the absolute \n    difference between all its values is at least K.\n\n    >>> longest_unique_subarray([1,2,3,2,1], 1)\n    3\n    >>> longest_unique_subarray([1,2,3,4,5], 2)\n    5\n    \"\"\"", "output": "pass", "id": 5, "avg_similarity_score": 0.1983585197348034}
{"instruction": "def find_closest_pair(arr, k):\n    \"\"\" Write a Python program to find the pair of elements in a given \n    array that have the smallest absolute difference between them, and\n    absolute difference greater than or equal to k.\n\n    >>> find_closest_pair([1,12,3,4,5,2,11,3], 5)\n    (3,4)\n    >>> find_closest_pair([-1,4,1], 3)\n    (1,4)\n    \"\"\"", "output": "pass", "id": 6, "avg_similarity_score": 0.20081041212512551}
{"instruction": "def group_reverse_words(sentence):\n    \"\"\" Write a Python program to group all words in a sentence \n    in reverse order.\n\n    >>> group_reverse_words('I love coding')\n    'coding love I'\n    >>> group_reverse_words('coding is fun!')\n    'fun! is coding'\n    \"\"\"", "output": "pass", "id": 7, "avg_similarity_score": 0.150216455006022}
{"instruction": "def transpose_arrays(A, B):\n    \"\"\" Write a Python program to transpose two given arrays A and B of same size \n\tin the respective order.\n\n    >>> transpose_arrays([[1,2,3,4], [7,8,9,0]], [[5,6], [3,2], [4,1], [8,9]])\n    [[1, 6, 4, 8], [2, 3, 1, 9], [3, 2, 9, 0], [4, 1, 0, 7]]\n    >>> transpose_arrays([[1,2], [3,4]], [[5,6,7], [8,9,0]])\n    [[1, 6, 7], [2, 8, 0], [3, 9, 0], [4, 0, 0]]\n    \"\"\"", "output": "pass", "id": 8, "avg_similarity_score": 0.19775896169913695}
{"instruction": "def count_sequences(arr):\n    \"\"\" Write a Python program to count the number of unique subsequences \n\tthat can be formed from a given array of length at least 2.\n\n    >>> count_sequences([4, 6, 2, 2, 7])\n    6\n    >>> count_sequences([3, 4, 5, 6])\n    10\n    \"\"\"", "output": "pass", "id": 9, "avg_similarity_score": 0.23252740159979082}
{"instruction": "def last_chars_replace(s,c1,c2):\n    \"\"\" From a given string, replace the last characters to the respective given characters.\n\n    >>> last_chars_replace('flower', 'd','g')\n    'flowde'\n    >>> last_chars_replace('bee', 'n', 't')\n    'been'\n    \"\"\"", "output": "pass", "id": 10, "avg_similarity_score": 0.17558877152820623}
{"instruction": "def count_distinct_substrings(string):\n    \"\"\" Count the distinct substrings in a given string.\n\n    >>> count_distinct_substrings('abalkdjf')\n    20\n    >>> count_distinct_substrings('madam')\n    10\n    \"\"\"", "output": "pass", "id": 11, "avg_similarity_score": 0.17318173429982672}
{"instruction": "def closest_square_num(num):\n    \"\"\" Return the closest perfect square number which is smaller than or equal to the given number.\n\n    >>> closest_square_num(18)\n    16\n    >>> closest_square_num(99)\n    81\n    \"\"\"", "output": "pass", "id": 12, "avg_similarity_score": 0.15572429744634053}
{"instruction": "def find_combination(l: list):\n    \"\"\" From a given list of numbers, find all possible combinations with numbers adding up to a given target.\n\n    >>> find_combination([1,2,3,4], 6)\n    [[1,2,3], [2,4]]\n    >>> find_combination([2,3,5,6], 5)\n    [[2,3]]\n    \"\"\"", "output": "pass", "id": 13, "avg_similarity_score": 0.1701734612209977}
{"instruction": "def grade_convert(grade_book: dict):\n    \"\"\" Convert letter grades to numeric grades based on a given grade book.\n\n    >>> grade_convert({'A': 90, 'B': 80})\n    {'A': 4.0, 'B': 3.0}\n    >>> grade_convert({'A+': 98, 'C': 70})\n    {'A+': 4.3, 'C': 2.7}\n    \"\"\"", "output": "pass", "id": 14, "avg_similarity_score": 0.12373571344924555}
{"instruction": "def rotate_array(arr: list, k: int):\n    \"\"\" Rotate the elements in an array k steps clockwise\n\n    >>> rotate_array([1, 2, 3, 4, 5], 2)\n    [4, 5, 1, 2, 3]\n    >>> rotate_array([10, 20, 30, 40], 3)\n    [30, 40, 10, 20]\n    \"\"\"", "output": "pass", "id": 15, "avg_similarity_score": 0.1395008928784619}
{"instruction": "def find_longest_sequence(values: list):\n    \"\"\" Given a list of numbers, find the longest increasing sequence.\n\n    >>> find_longest_sequence([3, 1, 5, 2, 6, 4, 8])\n    [1, 2, 4, 8]\n    >>> find_longest_sequence([10, 9, 8, 7, 6, 4, 2, 3])\n    [6, 4, 2, 3]\n    \"\"\"", "output": "pass", "id": 16, "avg_similarity_score": 0.17046724075934216}
{"instruction": "def merge_strings_chunks(str1, str2):\n    \"\"\" Merge two strings in chunks of two characters.\n    If one of the strings is longer, add the remaining characters to the end.\n\n    >>> merge_strings_chunks('release', 'candidate')\n    'rcealictions'\n    >>> merge_strings_chunks('classic', 'song')\n    'cscliaoogn'\n    \"\"\"", "output": "pass", "id": 17, "avg_similarity_score": 0.13707144785666076}
{"instruction": "def permutation_generator(arr: list):\n    \"\"\" Generate all the possible permutations of a given list of numbers.\n\n    >>> permutation_generator([1,2,3])\n    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    >>> permutation_generator([2, 1, 4, 3])\n    [[2, 1, 4, 3], [2, 3, 1, 4], [2, 4, 3, 1], [1, 2, 4, 3], [1, 3, 2, 4], [1, 4, 3, 2], [3, 1, 4, 2], [3, 2, 1, 4], [3, 4, 1, 2], [4, 1, 2, 3], [4, 3, 1, 2]]\n    \"\"\"", "output": "pass", "id": 18, "avg_similarity_score": 0.20061251171102815}
{"instruction": "def group_by_length(animals: list):\n    \"\"\" Group a list of animals into lists by their name lengths.\n\n    >>> group_by_length(['cat', 'elephant', 'dog', 'rabbit'])\n    {3: ['cat', 'dog'], 8: ['elephant', 'rabbit']}\n    >>> group_by_length(['red', 'blue', 'green', 'black', 'white'])\n    {3: ['red', 'blue', 'dog'], 5: ['green', 'black', 'white']}\n    \"\"\"", "output": "pass", "id": 19, "avg_similarity_score": 0.1321745905015047}
{"instruction": "def find_median(nums: List[int]) -> float:\n    \"\"\" Compute the median of the given list of numbers nums.\n    Median is the middle element of nums after sorting.\n    Return the median of nums.\n\n    >>> find_median([1,9,5,6,7])\n    6.0\n    >>> find_median([2,4,8,10])\n    6.0\n    \"\"\"", "output": "pass", "id": 20, "avg_similarity_score": 0.1818441065691453}
{"instruction": "def max_unique_prefix(words: List[str]) -> str:\n    \"\"\" Given an array of strings words.\n    Return the maximum length string that is a prefix of any string in the array and \n    does not appear as a substring in other string in the array.\n\n    >>> max_unique_prefix([\"dog\",\"doge\",\"dot\"])\n    'do'\n    >>> max_unique_prefix([\"hello\",\"hellohellohello\"])\n    ''\n    \"\"\"", "output": "pass", "id": 21, "avg_similarity_score": 0.19038892881106842}
{"instruction": "def string_encode(s: str) -> str:\n    \"\"\" Given a string s, encode it to another string using the following rules.\n\n    1. Convert all characters to lowercase\n    2. Replace all a\u2019s with 1\n    3. Replace all b\u2019s with 2\n    4. Replace all c\u2019s with 3\n    5. Replace all d\u2019s with 4\n    6. Replace all e\u2019s with 5\n    7. And so on\u2026\n    8. All other characters remain as it is\n    Return the encoded string.\n    \n    >>> string_encode(\"abcDE\")\n    '12345'\n    >>> string_encode(\"varun\")\n    '21986'\n    \"\"\"", "output": "pass", "id": 22, "avg_similarity_score": 0.10653776885282157}
{"instruction": "def consecutive_difference(nums: List[int], k:int) -> bool:\n    \"\"\" Given an array of integers nums and an integer k.\n    Determine if there exists an index i and a value x such that x is equal to \n    the absolute difference between any two consecutive elements in nums and |x\u2212k| is minimized.\n\n    >>> consecutive_difference([2,3,1],1)\n    True\n    >>> consecutive_difference([2,5,6],2)\n    False\n    >>> consecutive_difference([1,1,1,1,5],4)\n    True\n    \"\"\"", "output": "pass", "id": 23, "avg_similarity_score": 0.17013267745645494}
{"instruction": "def first_non_repeating_char(s: str) -> str:\n    \"\"\" Given a string s, find the first non-repeating character in it and return it's index.\n    If there is no non-repeating character, return -1.\n\n    >>> first_non_repeating_char(\"abcdb\")\n    2\n    >>> first_non_repeating_char(\"xxxxx\")\n    -1\n    >>> first_non_repeating_char(\"aabbccddeeffgg\")\n    0\n    \"\"\"", "output": "pass", "id": 24, "avg_similarity_score": 0.15231424226056967}
{"instruction": "def count_substrings(s: str, t: str) -> int:\n    \"\"\" Given a string s and a string t, find the number of occurrences of t as \n    a substring of s.\n\n    >>> count_substrings(\"abbbcd\",\"ab\")\n    1\n    >>> count_substrings(\"abcdef\",\"ab\")\n    2\n    \"\"\"", "output": "pass", "id": 25, "avg_similarity_score": 0.19412239866493816}
{"instruction": "def minimum_heights(nums: List[int], k: int) -> int:\n    \"\"\" Given an array of integers nums and an integer k, find the minimum number of \n    distinct heights of towers such that the total area of towers is greater than or equal to k. \n\n    >>> minimum_heights([4,10,2,16],20)\n    2\n    >>> minimum_heights([1,2,3,4],10)\n    3\n    \"\"\"", "output": "pass", "id": 26, "avg_similarity_score": 0.19814026145029928}
{"instruction": "def largest_divisible_pairs(nums: List[int], k: int) -> int:\n    \"\"\" Given an array of integers nums and an integer k.\n    Find the number of pairs (i, j) in the array such that both nums[i] and nums[j] \n    divide k without remainder.\n\n    >>> largest_divisible_pairs([2,4,6,8],4)\n    4\n    >>> largest_divisible_pairs([4,2,13,8],2)\n    3\n    \"\"\"", "output": "pass", "id": 27, "avg_similarity_score": 0.19767349945683513}
{"instruction": "def triplets_with_zero_sum(nums: List[int]) -> int:\n    \"\"\" Given a list of integers nums, count the number of triplets (i, j, k) \n    such that i < j < k and nums[i] + nums[j] + nums[k] == 0.\n\n    >>> triplets_with_zero_sum([-1, 0, 1, 2, -1, -4])\n    2\n    >>> triplets_with_zero_sum([4,6,3,1,-2])\n    0\n    \"\"\"", "output": "pass", "id": 28, "avg_similarity_score": 0.18697720054185135}
{"instruction": "def longest_run_of_ones(nums: List[int]) -> int:\n    \"\"\" Given an array of 0's and 1's, find the length of the longest contiguous subarray \n    of 1s in the array.\n\n    >>> longest_run_of_ones([1,1,0,1,1,1,0,0,1,1,1])\n    3\n    >>> longest_run_of_ones([0,0,0,1,0,1,1,1,1,0])\n    4\n    \"\"\"", "output": "pass", "id": 29, "avg_similarity_score": 0.22304255053532232}
{"instruction": "def pair_sum_sorting(arr: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Given a list arr of distinct integers and a target value k.\n    Return the pairs of index (i, j) so that the value of arr[i] + arr[j] is equal to the given target k. \n    Sort the pairs in ascending order with respect to the indices i and j.\n\n    >>> pair_sum_sorting([1,2,3,4], 5)\n    [[0, 3], [1, 2]]\n    >>> pair_sum_sorting([1,3,3], 6)\n    [[1,2]]\n    >>> pair_sum_sorting([1,3], 5)\n    []\n    \"\"\"", "output": "pass", "id": 30, "avg_similarity_score": 0.19703796207166197}
{"instruction": "def remove_duplicates(s: str) -> str:\n    \"\"\" You are given a string s consisting of lowercase Latin letters. \n    The task is to remove any duplicate characters from the string, keeping the order of\n    the characters in the string the same. \n\n    >>> remove_duplicates(\"aabbcc\")\n    \"abc\"\n    >>> remove_duplicates(\"ada\")\n    \"ad\"\n    >>> remove_duplicates(\"abcd\")\n    \"abcd\"\n    \"\"\"", "output": "pass", "id": 31, "avg_similarity_score": 0.1898512581487531}
{"instruction": "def make_anagrams_with_backspace(str1: str, str2: str) -> int:\n    \"\"\"\n    You are given two strings s1 and s2.\n    You are allowed to delete one character from either of the strings. \n    Return the number of backspaces required to make an anagram of the two strings.\n\n    >>> make_anagrams_with_backspace(\"ankit\",\"kit\")\n    1\n    >>> make_anagrams_with_backspace(\"abcd\",\"cbad\")\n    2\n    \"\"\"", "output": "pass", "id": 32, "avg_similarity_score": 0.16940484158590438}
{"instruction": "def xor_split_list(list1: List[int]) -> List[List[int]]:\n    \"\"\"\n    You are given an array of length n with integers in the range [0, 2^n-1]. \n    Split the array into two arrays whose members have different parity. \n    (One array has all even numbers and the other has all odd numbers).\n    Return the two arrays in a list.\n\n    >>> xor_split_list([3, 4, 1, 9, 0])\n    [[3, 1], [4, 9, 0]]\n    >>> xor_split_list([2, 7, 9, 11])\n    [[2], [7, 9, 11]]\n    \"\"\"", "output": "pass", "id": 33, "avg_similarity_score": 0.16562209962527746}
{"instruction": "def number_of_anagrams(str1: str, str2: str) -> int:\n    \"\"\"\n    You are given two strings s1 and s2.\n    Return the number of anagrams they have in common. \n    An anagram of a string is a permutation of its characters to form another string.\n\n    >>> number_of_anagrams(\"abc\", \"bac\")\n    2\n    >>> number_of_anagrams(\"abc\", \"bbb\")\n    0\n    \"\"\"", "output": "pass", "id": 34, "avg_similarity_score": 0.19113490084636792}
{"instruction": "def subarray_sum_greater_threshold(arr: List[int], k: int) -> int:\n    \"\"\"\n    You are given an array arr of length n and target k.\n    Return the number of subarrays having sum greater than or equal to k.\n\n    >>> subarray_sum_greater_threshold([1, 2, 3, 4, 5], 11)\n    2\n    >>> subarray_sum_greater_threshold([1, 2, 3, 4], 10)\n    0\n    \"\"\"", "output": "pass", "id": 35, "avg_similarity_score": 0.2183126751614132}
{"instruction": "def generate_perfect_permutation(nums: List[int]) -> List[int]:\n    \"\"\"\n    For a given array nums of length n, return a permutation that is the perfect permutation. \n    A perfect permutation is a permutation which is lexicographically largest among all the \n    permutations of nums.\n\n    >>> generate_perfect_permutation([5, 4, 3, 2, 1])\n    [5, 4, 3, 2, 1]\n    >>> generate_perfect_permutation([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    \"\"\"", "output": "pass", "id": 36, "avg_similarity_score": 0.1982752655265599}
{"instruction": "def is_subsequence_in_word(str1: str, str2: str) -> int:\n    \"\"\"\n    You are given two strings s1 and s2.\n    Return 1 if s2 is a subsequence of s1, 0 otherwise.\n\n    >>> is_subsequence_in_word(\"hello\", \"he\")\n    1\n    >>> is_subsequence_in_word(\"leetcode\", \"code\")\n    1\n    >>> is_subsequence_in_word(\"abcd\", \"xyz\")\n    0\n    \"\"\"", "output": "pass", "id": 37, "avg_similarity_score": 0.17246267538773952}
{"instruction": "def sum_of_primes_in_range(n: int, m: int) -> int:\n    \"\"\"\n    You are given two positive integers n and m.\n    Return the sum of all prime numbers between n and m (inclusive).\n\n    >>> sum_of_primes_in_range(10, 20)\n    60\n    >>> sum_of_primes_in_range(2, 5)\n    10\n    \"\"\"", "output": "pass", "id": 38, "avg_similarity_score": 0.18679001075999282}
{"instruction": "def move_zeroes_to_right(arr: List[int]) -> List[int]:\n    \"\"\"\n    You are given array of integers arr, a zeroes should be moved to the right \n    of the array in-place.\n\n    >>> move_zeroes_to_right([1, 0, 2, 4, 0, 3, 0])\n    [1, 2, 4, 3, 0, 0, 0]\n    >>> move_zeroes_to_right([0, 0, 0, 0 , 100])\n    [100, 0, 0, 0, 0]\n    \"\"\"", "output": "pass", "id": 39, "avg_similarity_score": 0.22558989592415016}
{"instruction": "def deep_merged_dict(list_of_dicts):\n    \"\"\"Deep merge a list of dictionaries into one new dictionary. \n    Here, deep merging means that when a key (i.e. same name) \n    appears in multiple dictionaries in the list, \n    that key\u2019s value should become a list containing the values of all those dictionaries. \n\n    >>> deep_merged_dict([{'a':1}, {'b':2},{'a':3}, {'b':4}])\n    {'a': [1, 3], 'b': [2, 4]}\n    >>> deep_merged_dict([{'a':[1,2,3]}, {'b':[2,3,4], 'a':4}])\n    {'a': [1, 2, 3, 4], 'b': [2, 3, 4]}\n    \"\"\"", "output": "pass", "id": 40, "avg_similarity_score": 0.13980724873239075}
{"instruction": "def valid_ip_range(start_ip, end_ip):\n    \"\"\"Given a set of valid ip addresses from start_ip to end_ip,\n    return a comma-separated list of valid ip addresses in range.\n\n    >>> valid_ip_range(\"10.0.0.1\", \"10.0.1.5\")\n    '10.0.0.1, 10.0.0.2, 10.0.0.3, 10.0.0.4, 10.0.0.5, 10.0.1.1, 10.0.1.2, 10.0.1.3, 10.0.1.4, 10.0.1.5'\n    >>> valid_ip_range(\"10.0.0.1\", \"10.0.0.4\")\n    '10.0.0.1, 10.0.0.2, 10.0.0.3, 10.0.0.4'\n    \"\"\"", "output": "pass", "id": 41, "avg_similarity_score": 0.14486755355363617}
{"instruction": "def longest_consec_str(strs):\n    \"\"\"Given a set of strings, find the lexicographically greatest \n    sequence of characters that is a substring of all strings.\n\n    >>> longest_consec_str(['abcd','abdc','bcd'])\n    bcd\n    >>> longest_consec_str(['abcde','abdc','cde'])\n    cde\n    \"\"\"", "output": "pass", "id": 42, "avg_similarity_score": 0.2100376983118596}
{"instruction": "def find_length_of_path(screen):\n    \"\"\"Given a screen with multiple '.'s and '#'s which represent a non-empty rectangular grid,\n    find the length of the longest continuous path through the grid that contains only '.'s.\n    There will be no cycles in any of the paths.\n\n    >>> find_length_of_path([[\"#\",\".\",\"#\",\".\",\"#\"],[\".\",\"#\",\".\",\"#\",\".\"],[\"#\",\".\",\"#\",\"#\",\".\"],[\".\",\"#\",\".\",\"#\",\".\"],[\"#\",\".\",\"#\",\".\",\"#\"]])\n    6\n    >>> find_length_of_path([[\"#\",\"#\",\".\",\".\",\"#\"],[\".\",\".\",\".\",\"#\",\".\"],[\"#\",\".\",\".\",\"#\",\".\"],[\".\",\".\",\".\",\"#\",\".\"],[\"#\",\".\",\".\",\".\",\"#\"]])\n    4\n    \"\"\"", "output": "pass", "id": 43, "avg_similarity_score": 0.16872000637174572}
{"instruction": "def calculate_averages(values):\n    \"\"\"Given a list of values, calculate and return a list of corresponding \n    averages relative to the given list of values.\n\n    >>> calculate_averages([3., 5., 7., 11., 13.])\n    [4.5, 6.5, 9.0, 12.0]\n    >>> calculate_averages([3., 0., 7., 11., 17.])\n    [1.5, 4.0, 8.5, 12.5]\n    \"\"\"", "output": "pass", "id": 44, "avg_similarity_score": 0.21295123580113853}
{"instruction": "def make_sentence_from_words(words):\n    \"\"\"Given a list of words, construct a sentence in which all the words\n    are capitalized except the first word and joined together by a single space.\n    \n    >>> make_sentence_from_words(['hello', 'world'])\n    'Hello World'\n    >>> make_sentence_from_words(['the', 'quick', 'brown', 'fox'])\n    'The Quick Brown Fox'\n    \"\"\"", "output": "pass", "id": 45, "avg_similarity_score": 0.1752747805754175}
{"instruction": "def match_items(l1, l2):\n    \"\"\"\n    Given two lists, l1 and l2, return a list with matches of the elements of\n    l1 in l2 with position in l2 and the element found. If there is no match,\n    return -1.\n\n    >>> match_items([1, 2, 3, 4], [2, 4, 6, 8])\n    [(0, 2), (1, 4), (-1, -1), (2, 8)]\n    >>> match_items([1, 'a', 'b', 4], [2, 4, 'a', 'b'])\n    [(0, 2), (1, 'a'), (2, 'b'), (3, 4)]\n    \"\"\"", "output": "pass", "id": 46, "avg_similarity_score": 0.18039775216382203}
{"instruction": "def valid_word_combination_from_chars(lst_of_strings):\n    \"\"\"Given a list of strings lst_of_strings representing a set of letters,\n    return a single-line string of valid combinations of words from this set that\n    are valid English words.\n\n    >>> valid_word_combination_from_chars(['d', 'o', 'g'])\n    'god, do, dog'\n    >>> valid_word_combination_from_chars(['t', 'h', 'u', 'm', 'b'])\n    'thumb, hum'\n    \"\"\"", "output": "pass", "id": 47, "avg_similarity_score": 0.15810461742971907}
{"instruction": "def valid_sequences(string):\n    \"\"\"\n    Given a string, return the number of valid sequences of characters\n    from the string that can be formed using all the characters in the string exactly once.\n\n    >>> valid_sequences(\"abccb\")\n    120\n    >>> valid_sequences(\"abc\")\n    6\n    \"\"\"", "output": "pass", "id": 48, "avg_similarity_score": 0.20765991446032123}
{"instruction": "def factorialize(x): \n    \"\"\" Given a non-negative integer, return the factorial of x.\n    If x is 0, the factorial is 1.\n    \n    >>> factorialize(5)\n    120\n    >>> factorialize(3)\n    6\n    >>> factorialize(0)\n    1\n    \"\"\"", "output": "pass", "id": 49, "avg_similarity_score": 0.19156419722388499}
{"instruction": "def find_longest_common_prefix(s):\n    \"\"\"Given a list of strings s, find and return the longest common prefix among all strings.\n \n    >>> find_longest_common_prefix(['abcde', 'abcd', 'abc', 'ab'])\n    'ab'\n    >>> find_longest_common_prefix(['abc', 'def', 'ghi', 'jkl'])\n    ''\n    >>> find_longest_common_prefix(['a', 'aa', 'aaaa'])\n    'a'\n    >>> \n    \"\"\"", "output": "pass", "id": 50, "avg_similarity_score": 0.20616997860639732}
{"instruction": "def invert_dict(d): \n    \"\"\" Given a dictionary d, return a dictionary whose keys and values are reversed.\n\n    >>> invert_dict({'abc': 1, 'def': 2})\n    {1: 'abc', 2: 'def'}\n    >>> invert_dict({'a': 1, 'b': 2, 'c': 1})\n    {1: ['a', 'c'], 2: ['b']}\n    \"\"\"", "output": "pass", "id": 51, "avg_similarity_score": 0.14449806025118897}
{"instruction": "def find_pairwise_distance(p1, p2): \n    \"\"\"Given two point coordinates p1 and p2, find and return the pairwise distance between them.\n\n    >>> find_pairwise_distance((2,0), (4,2))\n    2.8284271247461903\n    >>> find_pairwise_distance((-1,4), (3,7))\n    6.708203932499369\n    \"\"\"", "output": "pass", "id": 52, "avg_similarity_score": 0.15047501793123833}
{"instruction": "def rotate_list_left_by_n(a, n):\n    \"\"\" Given a list a and an integer n, rotate the list to the left by n elements.\n\n    >>> rotate_list_left_by_n([1,2,3,4,5], 2)\n    [3,4,5,1,2]\n    >>> rotate_list_left_by_n([1,2,3,4], 7)\n    [3,4,1,2]\n    \"\"\"", "output": "pass", "id": 53, "avg_similarity_score": 0.1974192068712425}
{"instruction": "def valid_parens(s): \n    \"\"\" Given a string s, determine if it is properly encapsulated with parentheses.\n    The parentheses \"(\", \")\", and \"[]\" will only appear in s and represent three types of parenthesis.\n    The string will only contain valid parenthesis pairs.\n    \n    >>> valid_parens(\"([])\")\n    True\n    >>> valid_parens(\"[(])\")\n    False\n    >>> valid_parens(\"[][()]\")\n    True\n    \"\"\"", "output": "pass", "id": 54, "avg_similarity_score": 0.16215485715899836}
{"instruction": "def group_by_length(words): \n    \"\"\" Given a list of strings words, return a dictionary where each key is the length\n    of a string and each value is a list of strings from words of the corresponding length.\n\n    >>> group_by_length([\"cat\", \"dog\", \"rabbit\"])\n    {3: ['cat', 'dog'], 6: ['rabbit']}\n    >>> group_by_length([\"hello\", \"world\", \"it\"])\n    {5: ['hello', 'world'], 2: ['it']}\n    \"\"\"", "output": "pass", "id": 55, "avg_similarity_score": 0.21702559893118725}
{"instruction": "def convert_roman_numeral(s): \n    \"\"\"Given a Roman numeral string s, return the integer representation of the Roman numeral.\n    Only valid Roman numerals can be given.\n\n    >>> convert_roman_numeral('CMXCIX')\n    999\n    >>> convert_roman_numeral('XVI')\n    16\n    >>> convert_roman_numeral('MCMLIII')\n    1953\n    \"\"\"", "output": "pass", "id": 56, "avg_similarity_score": 0.19017436067379448}
{"instruction": "def count_palindromic_substrings(s):\n    \"\"\"Given a string s, return the number of palindromic substrings in s.\n\n    >>> count_palindromic_substrings(\"aba\")\n    3\n    >>> count_palindromic_substrings(\"aaaa\")\n    10\n    >>> count_palindromic_substrings(\"abccba\")\n    9\n    \"\"\"", "output": "pass", "id": 57, "avg_similarity_score": 0.22167344761777305}
{"instruction": "def is_valid_ip(s): \n    \"\"\"Given a string s representing a valid IP address, return whether the IP address is valid or not.\n\n    >>> is_valid_ip(\"192.168.1.1\")\n    True\n    >>> is_valid_ip(\"192.168\")\n    False\n    >>> is_valid_ip(\"235.123.4.5\")\n    False\n    \"\"\"", "output": "pass", "id": 58, "avg_similarity_score": 0.18503873591067965}
{"instruction": "def rotate_string(input : str, offset: int):\n    \"\"\" Rotate the string by an offset (rotate from left to right).\n    If offset is positive, rotate left.\n    If offset is negative, rotate right.\n\n\n    >>> rotate_string('hello', 3)\n    'llohe'\n    >>> rotate_string('hello', -2)\n    'lohel'\n    \"\"\"", "output": "pass", "id": 59, "avg_similarity_score": 0.11540510943586169}
{"instruction": "def flatten_list(input: list):\n    \"\"\" Recursively flatten a possibly nested list into a single list.\n\n    >>> flatten_list([1, [2, 3], [4, [5]]])\n    [1, 2, 3, 4, 5]\n    >>> flatten_list([1, [2], [[[3]]], [[[4], [5]]]])\n    [1, 2, 3, 4, 5]\n    \"\"\"", "output": "pass", "id": 60, "avg_similarity_score": 0.12831278591085218}
{"instruction": "def largest_and_smallest_elements(arr : list):\n    \"\"\" Find the largest and smallest elements in an array.\n    Return a tuple containing the largest and smallest elements, respectively.\n\n    >>> largest_and_smallest_elements([3, 2, 4, -9, 6])\n    (6, -9)\n    >>> largest_and_smallest_elements([5, 4, 0, -1])\n    (5, -1)\n    \"\"\"", "output": "pass", "id": 61, "avg_similarity_score": 0.1716095394256303}
{"instruction": "def encode_char(char : str):\n    \"\"\" Encode a lowercase character to an ASCII code.\n\n    >>> encode_char('d')\n    100\n    >>> encode_char('l')\n    108\n    \"\"\"", "output": "pass", "id": 62, "avg_similarity_score": 0.11689195138124409}
{"instruction": "def is_palindrome(word : str):\n    \"\"\" Determine whether the given word is a palindrome or not.\n\n    >>> is_palindrome(\"anna\")\n    True\n    >>> is_palindrome(\"cat\")\n    False\n    \"\"\"", "output": "pass", "id": 63, "avg_similarity_score": 0.15525891543450832}
{"instruction": "def all_unique_permus(word : str):\n    \"\"\" Return a set of all unique permutations of a given string.\n\n    >>> all_unique_permus(\"abc\")\n    {'abc', 'bac', 'cab', 'acb', 'bca', 'cba'}\n    >>> all_unique_permus(\"aabb\")\n    {'aabb', 'abab', 'baab', 'baba', 'abba', 'bbaa'}\n    \"\"\"", "output": "pass", "id": 64, "avg_similarity_score": 0.1796027149293784}
{"instruction": "def element_exclusive(arr: list, index: int):\n    \"\"\" Find the number exclusive to the single index.\n\n    Given a list of numbers and a single index, find and return the number in \n    the list that is exclusive to the the single index. If there are more \n    than one numbers exclusive to the index, return the first one found. \n\n    >>> element_exclusive([2, 3, 4], 0)\n    3\n    >>> element_exclusive([3, 4, 5, 6, 7], 4)\n    5\n    \"\"\"", "output": "pass", "id": 65, "avg_similarity_score": 0.18924827949630932}
{"instruction": "def is_passwords_same(p1 : str, p2 : str):\n    \"\"\" Verify if two given passwords are the same or not.\n\n    Passwords must match exactly with case sensitivity. \n    Also, white space counts as part of the password. \n\n    >>> is_passwords_same(\"hello\", \"hello\")\n    True\n    >>> is_passwords_same(\"Hello\", \"hello\")\n    False\n    \"\"\"", "output": "pass", "id": 66, "avg_similarity_score": 0.13323886484283368}
{"instruction": "def encryption(word : str):\n    \"\"\" Encrypt a given word into a 2D array using its characters position in the alphabet.\n    \n    For example: \"hello\" -> [[7, 4], [11, 11], [12, 12], [12, 15], [15, 14]]\n\n    >>> encryption(\"hello\")\n    [[7, 4], [11, 11], [12, 12], [12, 15], [15, 14]]\n    >>> encryption(\"codex\")\n    [[3, 15], [15, 4], [4, 4], [5, 24], [24, 24]]\n    \"\"\"", "output": "pass", "id": 67, "avg_similarity_score": 0.1397446594750087}
{"instruction": "def sum_of_divisors(n : int):\n    \"\"\" Find the sum of divisors of a given number.\n\n    >>> sum_of_divisors(6)\n    12\n    >>> sum_of_divisors(18)\n    63\n    \"\"\"", "output": "pass", "id": 68, "avg_similarity_score": 0.19324636552370741}
{"instruction": "def maximum_length_subarray_with_sum_less_than_k(arr, target):\n    \"\"\" Return the length of longest subarray such that the sum of elements \n    is strictly less than the given target.\n\n    >>> maximum_length_subarray_with_sum_less_than_k([1,2,3,4,5], 7)\n    3\n    >>> maximum_length_subarray_with_sum_less_than_k([2,1,3,5], 5)\n    3\n    \"\"\"", "output": "pass", "id": 69, "avg_similarity_score": 0.16977461795313858}
{"instruction": "def check_if_string_is_cyclic_shift(s1, s2):\n    \"\"\" Check if s2 is a cyclic shift of s1.\n    A string B is said to be cyclic shift of a string A, \n    if B can be obtained by extending string A from the left side.\n\n    >>> check_if_string_is_cyclic_shift(\"AABC\", \"BCAA\")\n    True\n    >>> check_if_string_is_cyclic_shift(\"ABCD\", \"DABC\")\n    True\n    \"\"\"", "output": "pass", "id": 70, "avg_similarity_score": 0.14460086838573716}
{"instruction": "def overlapping_intervals(intervals):\n    \"\"\" Given intervals, return a list of overlapping intervals.\n\n    >>> overlapping_intervals([[4,5], [2,4], [5,7]])\n    [[4,7]]\n    >>> overlapping_intervals([[1, 3], [7, 9], [4, 6], [10, 13]])\n    [[4, 6], [7, 9]]\n    \"\"\"", "output": "pass", "id": 71, "avg_similarity_score": 0.17258378036116206}
{"instruction": "def split_into_subsets_with_equal_sum(nums):\n    \"\"\" Given an array of distinct integers, split it into two subsets such that\n    the sum of each subset is equal.\n\n    >>> split_into_subsets_with_equal_sum([2,4,7])\n    True\n    >>> split_into_subsets_with_equal_sum([2,2,2,3,5])\n    False\n    \"\"\"", "output": "pass", "id": 72, "avg_similarity_score": 0.17640258567535452}
{"instruction": "def find_lexicographically_nth_permutation(n, index):\n    \"\"\" Given n distinct elements, find the lexicographically nth permutation of size n.\n\n    >>> find_lexicographically_nth_permutation(3, 5)\n    [1,3,2]\n    >>> find_lexicographically_nth_permutation(4, 19)\n    [2,1,3,4]\n    \"\"\"", "output": "pass", "id": 73, "avg_similarity_score": 0.1559392490085649}
{"instruction": "def calculate_non_dividing_subsets(n, arr):\n    \"\"\" Given an array containing n integers, calculate the number of non-dividing \n    subsets in which each element is a divisor of at least one other element.\n\n    >>> calculate_non_dividing_subsets(4, [2,3,6,9])\n    8\n    >>> calculate_non_dividing_subsets(5, [7,2,5,3,6])\n    21\n    \"\"\"", "output": "pass", "id": 74, "avg_similarity_score": 0.17888668978885752}
{"instruction": "def find_palindromic_substrings(s):\n    \"\"\" Given a string s consisting of lowercase letters, find all the palindromic substrings within the string.\n    A palindromic substring is a substring with the same starting and ending characters,\n    and with same characters in between.\n\n    >>> find_palindromic_substrings(\"abaaba\")\n    [\"aba\", \"baa\"]\n    >>> find_palindromic_substrings(\"aa\")\n    [\"a\", \"a\"]\n    \"\"\"", "output": "pass", "id": 75, "avg_similarity_score": 0.18446000585072836}
{"instruction": "def maximum_number_of_non_intersecting_segments(n, start, end):\n    \"\"\" Given n segments of a line, return the maximum number of segments such that \n    none of them intersects each other. Each segment is specified by two numbers: \n    the start and the end coordinates. \n\n    >>> maximum_number_of_non_intersecting_segments(4, [0,3], [2,6])\n    4\n    >>> maximum_number_of_non_intersecting_segments(3, [2,3], [1,4])\n    2\n    \"\"\"", "output": "pass", "id": 76, "avg_similarity_score": 0.1740626629535567}
{"instruction": "def find_unique_elements_in_array(arr):\n  \"\"\" Given an integer array, find and return the number of unique elements \n  in the array.\n\n  >>> find_unique_elements_in_array([1,2,3,2])\n  3\n  >>> find_unique_elements_in_array([1,2,2,3,4,4,5,7])\n  5\n  \"\"\"", "output": "pass", "id": 77, "avg_similarity_score": 0.22635941989311034}
{"instruction": "def find_longest_word(sentence):\n    \"\"\" For a given sentence, find and return the longest word within.\n    \n    >>> find_longest_word(\"A quick brown fox jumps over the lazy dog\")\n    'jumps'\n    >>> find_longest_word(\"This is really easy\")\n    'really'\n    \"\"\"", "output": "pass", "id": 78, "avg_similarity_score": 0.18846986796357734}
{"instruction": "def get_unique_sets(data):\n    \"\"\" Given a list of strings, return a list of the unique substrings.\n    The substring should be at least of length 4.\n\n    >>> get_unique_sets(['lorem', 'ipsum'])\n    ['orem', 'psum']\n    >>> get_unique_sets(['I like apples', 'apples are nice'])\n    ['like', 'pple', 'nice']\n    \"\"\"", "output": "pass", "id": 79, "avg_similarity_score": 0.2117133276883215}
{"instruction": "def longest_increasing_substring(string):\n    \"\"\" From a given string, return the longest substring containing only increasing letters.\n\n    >>> longest_increasing_substring('acefgabc')\n    'acefg'\n    >>> longest_increasing_substring('aabbccddee')\n    'abcde'\n    \"\"\"", "output": "pass", "id": 80, "avg_similarity_score": 0.17286739486739253}
{"instruction": "def remove_anagrams(words):\n    \"\"\" Given a list of words, remove all anagrams from it and return the length of the resulting list.\n\n    >>> remove_anagrams(['apple', 'maps', 'pleap'])\n    2\n    >>> remove_anagrams(['abc', 'cat', 'cba', 'dog'])\n    3\n    \"\"\"", "output": "pass", "id": 81, "avg_similarity_score": 0.22600495740574536}
{"instruction": "def longest_over_palindrome(words):\n    \"\"\" Find the longest word in a given list of words that is more than just a palindrome.\n\n    >>> longest_over_palindrome(['civic', 'redder'])\n    'redder'\n    >>> longest_over_palindrome(['kayak', 'door'])\n    'door'\n    \"\"\"", "output": "pass", "id": 82, "avg_similarity_score": 0.19386822257081765}
{"instruction": "def group_vowels(sentence):\n    \"\"\"Design a Python program to group all the vowels each word in the given sentence \n    into sub-strings and then should be stored in a list.\n\n    >>> group_vowels('this is a computer')\n    [['i'], ['i'], ['a', 'o'], ['u']]\n    >>> group_vowels('apple apple juice')\n    [['a', 'e'], ['a', 'e'], ['u', 'i']]\n    \"\"\"", "output": "pass", "id": 83, "avg_similarity_score": 0.1650179253719403}
{"instruction": "def merge_two_dicts(d1, d2):\n    \"\"\" Given two dictionaries d1 and d2, write a function to merge them into a new dictionary.\n    If d1 and d2 have the same keys referencing different values, \n    the merged dictionary will contain the value of d1.\n\n    >>> merge_two_dicts({'a':1, 'b':2}, {'c':3, 'd':4})\n    {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    >>> merge_two_dicts({'a':1, 'b':2}, {'a':3, 'c':4})\n    {'a': 1, 'b': 2, 'c': 4}\n    \"\"\"", "output": "pass", "id": 84, "avg_similarity_score": 0.14859410079333116}
{"instruction": "def count_sum(n):\n    \"\"\" Given a positive integer n, calculate the number of one-digit positive integers \n    that sum to n.\n    \n    >>> count_sum(4)\n    3\n    >>> count_sum(5)\n    4\n    \"\"\"", "output": "pass", "id": 85, "avg_similarity_score": 0.19600307797254882}
{"instruction": "def num_intersection(s1, s2):\n    \"\"\"Given two sorted lists s1 and s2 of integers,\n    return the number of elements that are both in s1 and s2.\n    \n    >>> num_intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7])\n    3\n    >>> num_intersection([1, 2, 3], [7, 8, 9])\n    0\n    \"\"\"", "output": "pass", "id": 86, "avg_similarity_score": 0.19622674230833434}
{"instruction": "def cut_toll(costs):\n    \"\"\"Given an array of positive integers cost representing the cost\n    of each cutting operation, mininize the cost of cutting all rods.\n    \n    >>> cut_toll([1, 2, 3, 4])\n    6\n    >>> cut_toll([1, 4, 5, 6])\n    9\n    \"\"\"", "output": "pass", "id": 87, "avg_similarity_score": 0.1838784821583374}
{"instruction": "def mode_calculate(arr):\n    \"\"\" Count the number of occurances of the most frequently occurring number in an array/list.\n\n    >>> mode_calculate([3, 4, 2, 1, 6, 5, 8, 4, 3])\n    2\n    >>> mode_calculate([4, 2, 8, 3, 4, 8, 2])\n    2\n    \"\"\"", "output": "pass", "id": 88, "avg_similarity_score": 0.17133936928988913}
{"instruction": "def two_dice_roll(num_roll):\n    \"\"\" Simulate rolling two dice num_roll times and return an array/list of sums.\n\n    >>> two_dice_roll(5)\n    [7, 9, 6, 3, 9]\n    >>> two_dice_roll(2)\n    [3, 8]\n    \"\"\"", "output": "pass", "id": 89, "avg_similarity_score": 0.13144774525407624}
{"instruction": "def range_average(N, lower, upper):\n    \"\"\" Return the average of all numbers in a given range (inclusive) of size N.\n\n    >>> range_average(10, 5, 20)\n    12.5\n    >>> range_average(6, 8, 32)\n    19.333333333333332\n    \"\"\"", "output": "pass", "id": 90, "avg_similarity_score": 0.18309299544086519}
{"instruction": "def find_closest_multiple(N):\n    \"\"\" Return the closest multiple of N to a given number.\n\n    >>> find_closest_multiple(19, 97)\n    96\n    >>> find_closest_multiple(18, 77)\n    72\n    \"\"\"", "output": "pass", "id": 91, "avg_similarity_score": 0.19571420647602414}
{"instruction": "def count_special_characters(text):\n    \"\"\" Given a string, count the number of occurrences of each special character \n    (symbols and punctuation).\n\n    >>> count_special_characters(\"HI%& World*\")\n    {'&': 1, '%': 1, '*': 1}\n    >>> count_special_characters(\"we! are! coders\")\n    {'!': 2}\n    \"\"\"", "output": "pass", "id": 92, "avg_similarity_score": 0.19664597122030736}
{"instruction": "def find_k_smallest(nums, k):\n    \"\"\" Given a array/list of numbers, return an array/list of the k smallest elements.\n\n    >>> find_k_smallest([3, 4, 8, 2, 1], 3)\n    [1, 2, 3]\n    >>> find_k_smallest([4, 6, 8, 0, 1], 2)\n    [0, 1]\n    \"\"\"", "output": "pass", "id": 93, "avg_similarity_score": 0.22765271004480825}
{"instruction": "def number_division_sum(N):\n    \"\"\" Given a number N, return the sum of numbers that can be obtained by dividing it by its divisors.\n\n    >>> number_division_sum(60)\n    121\n    >>> number_division_sum(40)\n    55\n    \"\"\"", "output": "pass", "id": 94, "avg_similarity_score": 0.19108782256770637}
{"instruction": "def matrix_periodic_pattern(nums):\n    \"\"\"Given a matrix of size m x n , determine if it contains a repeating pattern of elements.\n\n    >>> matrix_periodic_pattern([[1, 2, 1, 2],\n                                [2, 1, 2, 1],\n                                [1, 2, 1, 2],\n                                [2, 1, 2, 1]])\n    True\n    >>> matrix_periodic_pattern([[1, 2, 3],\n                                [3, 2, 1],\n                                [2, 3, 1]])\n    False\n    \"\"\"", "output": "pass", "id": 95, "avg_similarity_score": 0.1759510289621743}
{"instruction": "def fibonacci_sequence(n):\n    \"\"\" Generate a Fibonacci sequence of the given length (starting from 0).\n\n    >>> fibonacci_sequence(7)\n    [0, 1, 1, 2, 3, 5, 8]\n    >>> fibonacci_sequence(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    \"\"\"", "output": "pass", "id": 96, "avg_similarity_score": 0.17156982635661183}
{"instruction": "def how_many_unique(words):\n    \"\"\" From a given array/list of strings, determine how many unique items there are.\n\n    >>> how_many_unique(['a', 'b', 'c', 'a'])\n    3\n    >>> how_many_unique(['coding', 'swimming', 'eating', 'swimming'])\n    3\n    \"\"\"", "output": "pass", "id": 97, "avg_similarity_score": 0.16551361427851952}
{"instruction": "def match_passwords(a: str, b: str) -> bool:\n    \"\"\"Return whether the two passwords match or not.\n   \n    >>> match_passwords(\"str1\", \"str1\")\n    True\n    >>> match_passwords(\"str1\", \"str2\")\n    False\n    \"\"\"", "output": "pass", "id": 98, "avg_similarity_score": 0.1533893391259584}
{"instruction": "def remove_dup_ints_sorted(nums: List[int]) -> List[int]:\n    \"\"\"Given a sorted list of integers with duplicates. Remove duplicate elements and return a new list.\n\n    >>> remove_dup_ints_sorted([1,2,2,3])\n    [1,2,3]\n    >>> remove_dup_ints_sorted([1,3,3,3,3,4])\n    [1,3,4]\n    \"\"\"", "output": "pass", "id": 99, "avg_similarity_score": 0.1931424267216209}
{"instruction": "def find_max_consecutive_sum(nums: List[int], k: int) -> int:\n    \"\"\"Given an array of n integers and an integer k. \n    Find the maximum sum of any contiguous subarray of size k.\n\n    >>> find_max_consecutive_sum([2,3,1,4,5], 3)\n    12\n    >>> find_max_consecutive_sum([3,1,5,4,2], 3)\n    12\n    \"\"\"", "output": "pass", "id": 100, "avg_similarity_score": 0.2084278927899053}
{"instruction": "def largest_num_from_digits(digits: List[int]) -> int:\n    \"\"\"Given a list of digits, return the largest number possible.\n\n    >>> largest_num_from_digits([9,1,2])\n    912\n    >>> largest_num_from_digits([3,4,5,2,1,9])\n    954321\n    \"\"\"", "output": "pass", "id": 101, "avg_similarity_score": 0.21901128905820083}
{"instruction": "def deep_reverse(L):\n    \"\"\"Reverse the list L and reverse the sublists in L recursively.\n\n    >>> deep_reverse([[1, 2], [3, [4, 5]], 6])\n    [6, [[5, 4], 3], [2, 1]]\n    >>> deep_reverse([[[123, 456], 7], 8])\n    [8, [[456, 123], 7]]\n    \"\"\"", "output": "pass", "id": 102, "avg_similarity_score": 0.14201487765554668}
{"instruction": "def sum_of_chars(s: str) -> int:\n    \"\"\"Return the sum of the characters in the string, ord(ch) - 96.\n   \n    >>> sum_of_chars('letter')\n    167\n    >>> sum_of_chars('Lecture')\n    190\n    \"\"\"", "output": "pass", "id": 103, "avg_similarity_score": 0.20184248600977225}
{"instruction": "def move_element_to_end(nums: List[int], target: int) -> List[int]:\n    \"\"\"Given an array nums and an integer target. \n    Move the target value in the array to the end, and move the elements before it to the right by one position.\n    \n    >>> move_element_to_end([2, 5, 3, 4], 5)\n    [2, 3, 4, 5]\n    >>> move_element_to_end([1,2,3,4], 3)\n    [1,2,4,3]\n    \"\"\"", "output": "pass", "id": 104, "avg_similarity_score": 0.16944817514325}
{"instruction": "def zigzag_traversal(nums: List[int]) -> List[int]:\n    \"\"\"Given a list of integers with size n, zigzag traverse the list. \n    Traverse the list from left to right for odd numbers and from right to left for even numbers.\n   \n    >>> zigzag_traversal([1,2,3,4,5,6])\n    [1,3,2,4,6,5]\n    >>> zigzag_traversal([1,2,7,8,9,10])\n    [1,7,2,8,10,9]\n    \"\"\"", "output": "pass", "id": 105, "avg_similarity_score": 0.179390335883086}
{"instruction": "def can_form_palindrome(s: str) -> bool:\n    \"\"\"Return whether it is possible to form a palindrome by rearranging the characters in the string.\n\n    >>> can_form_palindrome(\"racecar\")\n    True\n    >>> can_form_palindrome(\"maison\")\n    False\n    \"\"\"", "output": "pass", "id": 106, "avg_similarity_score": 0.16985146875562612}
{"instruction": "def decode_ways(s: str) -> int:\n    \"\"\"Return the number of ways to decode the string, where characters represents alphabets a-j. \n   \n    >>> decode_ways(\"abc\")\n    3\n    >>> decode_ways(\"ajg\")\n    5\n    \"\"\"", "output": "pass", "id": 107, "avg_similarity_score": 0.19036050422931158}
{"instruction": "def two_sum_sorted_of_brackets(brackets):\n    \"\"\" Given an array brackets which represents a string of brackets,\n    where brackets[i] = '(' or ')', determining if there exists a two-sum\n    combination of index which the sum of two elements is 0, where 0\n    represents the well-formedness of brackets.\n\n    >>> two_sum_sorted_of_brackets(\"((()))\")\n    True\n    >>> two_sum_sorted_of_brackets(\"((())\")\n    False\n    >>> two_sum_sorted_of_brackets(\"()()\")\n    True\n    \"\"\"", "output": "pass", "id": 108, "avg_similarity_score": 0.17106535470975034}
{"instruction": "def three_consecutive_together(nums):\n    \"\"\"Given a list of sequential integers nums, return `True` if there exists a triplet of integers in these array where the sum of the three integers is divisible by 3, or `False` otherwise.\n\n    >>> three_consecutive_together([3,6,9,12,15])\n    True\n    >>> three_consecutive_together([9,7,8,4,3,2,1])\n    False\n    >>> three_consecutive_together([2,3,4,5,6])\n    False\n    \"\"\"", "output": "pass", "id": 109, "avg_similarity_score": 0.1957249447433923}
{"instruction": "def construct_kth_largest_array(nums, k):\n    \"\"\"Given an unsorted array nums and a positive integer k, \n    return an array of largest k numbers in nums in ascending order.\n\n    >>> construct_kth_largest_array([13,17,15,12,7], 2)\n    [15,17]\n    >>> construct_kth_largest_array([2,6,1,3,9], 3)\n    [3,6,9]\n    >>> construct_kth_largest_array([1,2,3,4,5], 5)\n    [1,2,3,4,5]\n    \"\"\"", "output": "pass", "id": 110, "avg_similarity_score": 0.18011670439868396}
{"instruction": "def most_common_pairs(nums):\n    \"\"\"Given a non-empty list of distinct positive integers, \n    find the two most frequent pairs (ordered descending by frequency)\n    and return the two pairs as a sorted list of tuples.\n\n    >>> most_common_pairs([1,2,3,4,5,4,3,2,1])\n    [(1, 2), (3, 4)]\n    >>> most_common_pairs([2,1,1,1,2,3,3,4,5]) \n    [(1, 2), (3, 4)]\n    >>> most_common_pairs([4,3,2,1,5,6])\n    [(4, 3), (2, 1)]", "output": "pass", "id": 111, "avg_similarity_score": 0.20191075698607372}
{"instruction": "def is_array_sorted(A):\n    \"\"\"Given an array A of integers of length n, determine whether its elements are all distinct and appear in non-decreasing order.\n \n    >>> is_array_sorted([1,2,3,4,5])\n    True\n    >>> is_array_sorted([1,2,3,4,4])\n    False\n    >>> is_array_sorted([7,6,5,3,2])\n    False\n    \"\"\"", "output": "pass", "id": 112, "avg_similarity_score": 0.1942519828689418}
{"instruction": "def linked_list_rotate(head, k):\n    \"\"\"Given a singly linked list, rotate the list by k places\n    to the right. Where k is a non-negative number. Assume that\n    the list may be very large and the number of nodes is not known.\n\n    >>> linked_list_rotate(1->2->3->4->5, 2) \n    4->5->1->2->3\n    >>> linked_list_rotate(1->2->3->4->5, 0)\n    1->2->3->4->5\n    >>> linked_list_rotate(1->2->3->4->5, 3)\n    3->4->5->1->2\n    \"\"\"", "output": "pass", "id": 113, "avg_similarity_score": 0.17740090960271665}
{"instruction": "def median_sequence(A):\n    \"\"\"Given a list A of distinct integers, return the median of\n    the sequence whose first two numbers are A[0] and A[1], and\n    whose n-th number is the median of the n-1 previously-listed \n    numbers.\n\n    >>> median_sequence([3,2])\n    2.5\n    >>> median_sequence([3,1,2])\n    2\n    >>> median_sequence([3,2,1,2,2,4])\n    2\n    \"\"\"", "output": "pass", "id": 114, "avg_similarity_score": 0.20615708738149566}
{"instruction": "def search_in_sorted_matrix(matrix, x):\n    \"\"\"Given a sorted 2d matrix of distinct integers, return whether x is in the matrix. \n    Each row of the matrix is sorted in ascending order, and the first and\n    last integers of a row are always in the matrix.\n\n    >>>search_in_sorted_matrix([[1,2,3], [4,5,6], [7,8,9]], 4)\n    True\n    >>>search_in_sorted_matrix([[1,3,5], [7,9,11], [13,15,17]], 8)\n    False\n    >>>search_in_sorted_matrix([[2,4,6], [8,10,12], [14,16,18]], 12)\n    True\n\"\"\"", "output": "pass", "id": 115, "avg_similarity_score": 0.18711561444035527}
{"instruction": "def sequence_of_products(nums):\n    \"\"\"Given a list of non-negative integers nums, return the maximum \n    subarray product which is the product over all subarrays \n    formed by elements in the list.\n\n    >>> sequence_of_products([2,3,-2,4])\n    48\n    >>> sequence_of_products([-2,0,1])\n    0\n    >>> sequence_of_products([1,2,3,4,5])\n    120\n    \"\"\"", "output": "pass", "id": 116, "avg_similarity_score": 0.213994382456084}
{"instruction": "def make_stairs(n, k: int) -> int:\n    \"\"\" Construct stairs of size k, starting with 0 steps.\n    Each time, you can either climb 1 or 2 steps. \n    Return the number of unique ways you can climb to the top.\n\n    >>> make_stairs(3, 1)\n    1\n    >>> make_stairs(4, 2)\n    5\n    \"\"\"", "output": "pass", "id": 117, "avg_similarity_score": 0.15005534348915742}
{"instruction": "def bisect_string_bounds(word_list: List[str], query: str) -> Tuple[int,int]:\n    \"\"\"Given an alphabetically ordered list of words and a query word, \n    return a tuple of the two indices where the query word should be located \n    based on the binary search technique. \n\n    >>> bisect_string_bounds(['cat', 'dog', 'horse', 'mouse', 'pig'], 'dog')\n    (1,2)\n    >>> bisect_string_bounds(['apple','car','giraffe','squirrel'], 'goat')\n    (3,4)\n    \"\"\"", "output": "pass", "id": 118, "avg_similarity_score": 0.18469848905249203}
{"instruction": "def shortest_distance_between_k_chars(string: str, k_char_1: str, k_char_2: str) -> int:\n    \"\"\"\n    Given a string 'string' and two characters 'k_char_1' and 'k_char_2',\n    return the shortest distance between them in the string. \n    If there is more than one such distance, return the smallest one.\n\n    >>> shortest_distance_between_k_chars('google.com', 'o', 'g')\n    2\n    >>> shortest_distance_between_k_chars('google.com', 'e', 'o')\n    6\n    \"\"\"", "output": "pass", "id": 119, "avg_similarity_score": 0.16022905596297754}
{"instruction": "def binary_search_on_words(words: List[str], target: str) -> int:\n    \"\"\"Given an alphabetically sorted list of words and a target word,\n    use binary search to find the index of the target word. \n    Return -1 if the target word is not found. \n\n    >>> binary_search_on_words(['apple', 'cat', 'dog', 'horse', 'mouse', 'pig'], 'cat')\n    1\n    >>> binary_search_on_words(['apple', 'cat', 'dog', 'horse', 'mouse', 'pig'], 'goat')\n    -1\n    \"\"\"", "output": "pass", "id": 120, "avg_similarity_score": 0.19731216336634202}
{"instruction": "def sort_words_by_length(words: List[str]) -> List[str]:\n    \"\"\"Given a list of words, \n    sort them into increasing order of lengths. \n    Maintain the original word order for words with the same length. \n\n    >>> sort_words_by_length(['apple', 'cat', 'dog', 'horse', 'mouse', 'pig'])\n    ['cat', 'dog', 'pig', 'apple', 'mouse', 'horse']\n    >>> sort_words_by_length(['shine', 'dance', 'laugh', 'talk'])\n    ['talk', 'laugh', 'shine', 'dance']\n    \"\"\"", "output": "pass", "id": 121, "avg_similarity_score": 0.18291180685845473}
{"instruction": "def count_occurence(input_list: List[int], k: int) -> int:\n    \"\"\" Given a list 'input_list' of integers, \n    count how many times 'k' appears in the list. \n\n    >>> count_occurence([1,5,6,90,5,2,5], 5)\n    3\n    >>> count_occurence([3,-1,7,9,10], 12)\n    0\n    \"\"\"", "output": "pass", "id": 122, "avg_similarity_score": 0.2023413850504273}
{"instruction": "def count_combinations(n: int, k: int) -> int:\n    \"\"\" Given two integers 'n' and 'k', \n    calculate the number of combinations of size 'k' that can be formed from a set of 'n' elements. \n\n    >>> count_combinations(5, 3)\n    10\n    >>> count_combinations(4, 4)\n    1\n    \"\"\"", "output": "pass", "id": 123, "avg_similarity_score": 0.20267643182148457}
{"instruction": "def calculate_average_distribute(nums: List[int], k: int) -> List[int]:\n    \"\"\" Given a list of integers 'nums' and an integer 'k',\n    calculate the average of every 'k' consecutive elements from the list. \n    Return a list that contains the averages in order of their corresponding \n    subarrays.\n\n    >>> calculate_average_distribute([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n    [2.0, 5.0, 8.0]\n    >>> calculate_average_distribute([5, 2, 8, 6, 10, 3, 0, 8, 9], 4)\n    [5.5, 6.5, 5.75, 6.75]\n    \"\"\"", "output": "pass", "id": 124, "avg_similarity_score": 0.22151972334190606}
{"instruction": "def sort_couple_by_their_sum(couples: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of couples, \n    sort them in increasing order of the sum of the integers in each couple. \n    If the sum is the same for two couples, then sort them in the rotational \n    order of the first element of the couple. \n\n    >>> sort_couple_by_their_sum([[8,6], [7,9], [6,2], [4,3], [3,5]])\n    [[6, 2], [4, 3], [3, 5], [8, 6], [7, 9]]\n    >>> sort_couple_by_their_sum([[5,4], [7,8], [6,7], [3,6]])\n    [[5, 4], [3, 6], [6, 7], [7, 8]]\n    \"\"\"", "output": "pass", "id": 125, "avg_similarity_score": 0.18165520145069936}
{"instruction": "def sorted_intersect_of_lists(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Given two sorted lists of integers, \n    return a new sorted list that is the intersection of the two lists. \n\n    >>> sorted_intersect_of_lists([2, 4, 5, 8], [5, 6, 8, 9])\n    [5, 8]\n    >>> sorted_intersect_of_lists([-3, 7, 8, 19], [-2, 5, 7, 8, 9])\n    [-2, 7, 8]\n    \"\"\"", "output": "pass", "id": 126, "avg_similarity_score": 0.21635549201889}
{"instruction": "def first_unique_char(s):\n    \"\"\" Given a string s, find the first unique character in it.\n    If a unique character does not exist, return \u2018_\u2019.\n\n    >>> first_unique_char(\"Banyan\")\n    'y'\n    >>> first_unique_char(\"Hello World\")\n    'e'\n    >>> first_unique_char(\"Everything\")\n    '_'\n    \"\"\"", "output": "pass", "id": 127, "avg_similarity_score": 0.182205162660069}
{"instruction": "def count_chars(str1, str2):\n    \"\"\" Given two strings, find the number of characters in both strings\n    that occur in both of them.\n \n    >>> count_chars(\"foo\", \"bar\")\n    0\n    >>> count_chars(\"python\", \"pineapple\")\n    3\n    \"\"\"", "output": "pass", "id": 128, "avg_similarity_score": 0.19138845797082282}
{"instruction": "def find_longest_common_prefix(strs):\n    \"\"\" Find the longest prefix string among an array of strings.\n    If two or more strings have the same length as the longest prefix string,\n    return the one which appears first.\n\n    >>> find_longest_common_prefix([\"geeksforgeeks\", \"geeks\", \"geek\"])\n    'geek'\n    >>> find_longest_common_prefix([\"apple\", \"app\", \"ap\"])\n    'ap'\n    \"\"\"", "output": "pass", "id": 129, "avg_similarity_score": 0.1568981979243127}
{"instruction": "def max_score(s, k):\n    \"\"\"\n    You are given a string s containing lowercase English alphabets and integers as characters.\n    You can delete atmost k characters from the string s, and get its maximum score.\n    The score of a string is the sum of its characters.\n    \n    >>> max_score('1a2b3c4d', 2)\n    10\n    Explanation: The max score can be achieved by deleting b and c.\n    >>> max_score('abcd', 0)\n    10\n    \"\"\"", "output": "pass", "id": 130, "avg_similarity_score": 0.18237779796240866}
{"instruction": "def remove_duplicates(s):\n    \"\"\" Remove all duplicate characters from a given string s,\n    leaving only one of each character in the string. \n \n    >>> remove_duplicates('abbacd')\n    'abcd'\n    >>> remove_duplicates('bcdabeee')\n    'bcdae'\n    \"\"\"", "output": "pass", "id": 131, "avg_similarity_score": 0.18138755654786368}
{"instruction": "def bitwise_xor_max(L):\n    \"\"\" Given a list L of integers, find the maximum value obtainable\n    from Bitwise XOR operations on two (distinct) elements of the  list.\n    \n    >>> bitwise_xor_max([4, 5, 7])\n    3\n    >>> bitwise_xor_max([3, 9, 10])\n    7\n    \"\"\"", "output": "pass", "id": 132, "avg_similarity_score": 0.20509376744629318}
{"instruction": "def power_word(p, k):\n    \"\"\"\n    You are given a string s and a positive integer k.\n    Your task is to find the number of all words of length k\n    with alphabet size p in string s. Words of length k in string\n    s consist of k distinct characters, each of which is a digit/character\n    in the range [0, p-1].\n \n    >>> power_word(3, 4)\n    2\n    >>> power_word(4, 2)\n    11\n    \"\"\"", "output": "pass", "id": 133, "avg_similarity_score": 0.17674009200651114}
{"instruction": "def max_cost_path(matrix):\n    \"\"\" Given a matrix, find the maximum cost path from the top left to the\n    bottom right. Each cell w in the matrix contains a cost c_w.\n    You can move only in the right and down direction.\n \n    >>> max_cost_path([[1, 3, 5], [4, 2, 1], [1, 5, 3]])\n    10\n    Explanation: The max cost path is 1 -> 3 -> 2 -> 5 -> 3.\n    >>> max_cost_path([[3, 2, 6], [5, 4, 7], [2, 8, 9]])\n    19\n    \"\"\"", "output": "pass", "id": 134, "avg_similarity_score": 0.159016873532977}
{"instruction": "def total_messages(s):\n    \"\"\" \n    A message contains a question mark (?) or a forward slash (/).\n    You are given a string s, you must find the total number of messages\n    that can be formed from s.\n     \n    >>> total_messages(\"Who?When?\")\n    2\n    Explanation: Two messages can be formed, i.e. Who? and When?\n    >>> total_messages(\"Where/are/you?\")\n    1\n    \"\"\"", "output": "pass", "id": 135, "avg_similarity_score": 0.17377366272567704}
{"instruction": "def k_flips(A, K):\n    \"\"\" You are given an array A of 0\u2019s and 1\u2019s and a positive integer K. \n    You can flip a subarray of length K in A, that is, \n    turn all 0s to 1s and all 1s to 0s in that subarray. \n    Find the maximum number of 1s that can be obtained in A after performing atmost K flips. \n\n    >>>k_flips([1,0,0,1,0,0], 2)\n    4\n    Explanation: We can flip [1,0,0] and [0,1,0] to obtain the maximum number of 1s.\n    >>> k_flips([1,0,1,1,1], 3)\n    4\n    \"\"\"", "output": "pass", "id": 136, "avg_similarity_score": 0.17510111804359754}
{"instruction": "def is_all_strings(values):\n    \"\"\" Check if the given sequence is composed of only strings.\n\n    >>> is_all_strings(['Hello', 'World'])\n    True\n    >>> is_all_strings(['Hello', 3])\n    False\n    \"\"\"", "output": "pass", "id": 137, "avg_similarity_score": 0.15932080130876716}
{"instruction": "def find_shortest_unique_prefix(words: list):\n    \"\"\" Given a list of words, return the shortest unique prefix of each word.\n    If multiple words share the same prefix, return the first one.\n\n    >>> find_shortest_unique_prefix(['cat', 'dog', 'monkey'])\n    ['c', 'd', 'mo']\n    >>> find_shortest_unique_prefix(['cat', 'cater', 'dog'])\n    ['c', 'cat', 'd']\n    \"\"\"", "output": "pass", "id": 138, "avg_similarity_score": 0.21358583983220478}
{"instruction": "def is_substring_of(string: str, sub: str):\n    \"\"\" Check whether the sub string is substring of the given string\n    or not.\n\n    >>> is_substring_of('abcde', 'bcd')\n    True\n    >>> is_substring_of('abcde', 'acd')\n    False\n    \"\"\"", "output": "pass", "id": 139, "avg_similarity_score": 0.18276934960930385}
{"instruction": "def group_elements_by_value(values):\n    \"\"\" Group elements by value into a dictionary.\n\n    >>> group_elements_by_value([1,2,1,2,3,4])\n    {1: [1, 1], 2: [2, 2], 3: [3], 4: [4]}\n    >>> group_elements_by_value([1,2,1])\n    {1: [1, 1], 2: [2]}\n    \"\"\"", "output": "pass", "id": 140, "avg_similarity_score": 0.10430509149389754}
{"instruction": "def calculate_average(numbers: list):\n    \"\"\" Return the average of the numbers.\n\n    >>> calculate_average([2, 3, 4])\n    3.0\n    >>> calculate_average([2, 2, 4, 5])\n    3.5\n    \"\"\"", "output": "pass", "id": 141, "avg_similarity_score": 0.19398244543358878}
{"instruction": "def find_smallest_common_number(arr1, arr2):\n    \"\"\" Find the smallest common number from the two given arrays.\n\n    >>> find_smallest_common_number([3, 7, 8], [4, 5])\n    7\n    >>> find_smallest_common_number([1, 4, 6, 9], [3, 5, 7, 8])\n    9\n    \"\"\"", "output": "pass", "id": 142, "avg_similarity_score": 0.15063587893748187}
{"instruction": "def add_nums_smaller_than_given_value(nums: list, value):\n    \"\"\" Add up the numbers in given list and return the sum if it's smaller than \n    the given value, otherwise return 0.\n\n    >>> add_nums_smaller_than_given_value([1, 4, 5], 10)\n    10\n    >>> add_nums_smaller_than_given_value([5, 6, 7], 5)\n    0\n    \"\"\"", "output": "pass", "id": 143, "avg_similarity_score": 0.17379685475066814}
{"instruction": "def is_scrambled_pallindrome(string):\n    \"\"\" Check if the given string is a scrambled palindrome or not.\n\n    >>> is_scrambled_pallindrome(\"tactcoa\")\n    True\n    >>> is_scrambled_pallindrome(\"abcdcba\")\n    False\n    \"\"\"", "output": "pass", "id": 144, "avg_similarity_score": 0.1619765491239948}
{"instruction": "def valid_series_of_moves(moves: list):\n    \"\"\" Check if a series of moves is valid or not. Moves are in form of two tuples \n    of integers, where each tuple represents  two directions that a piece can \n    move. Valid moves are those that are form a cross, e.g. (0, 1) and (1, 0).\n\n    >>> valid_series_of_moves([(0,1), (1,0)])\n    True\n    >>> valid_series_of_moves([(0,1), (2,3), (1,2)])\n    False\n    \"\"\"", "output": "pass", "id": 145, "avg_similarity_score": 0.1279354831126332}
{"instruction": "def check_pair_in_list(num_list: list, target_sum):\n    \"\"\" Check if a pair of numbers exists in the given list which adds up \n    to the given target sum. \n\n    >>> check_pair_in_list([2,4,5,3], 8)\n    True\n    >>> check_pair_in_list([1,2,3], 5)\n    False\n    \"\"\"", "output": "pass", "id": 146, "avg_similarity_score": 0.17799506381959793}
{"instruction": "def count_swaps_sort(arr):\n    \"\"\"Given an array of integers, count the number of swaps needed\n    to sort them in ascending order.\n\n    >>> count_swaps_sort([7, 5, 3, 1])\n    6\n    >>> count_swaps_sort([2, 1, 4, 3, 6, 5])\n    5\n    \"\"\"", "output": "pass", "id": 147, "avg_similarity_score": 0.20207953594606703}
{"instruction": "def find_substr_size(s1, s2):\n    \"\"\"Given two strings, find the maximum number of characters that appear\n    at the same relative locations in both strings.\n\n    >>> find_substr_size('abacbd', 'zbazcd')\n    4\n    >>> find_substr_size('abac', 'xbax')\n    2\n    \"\"\"", "output": "pass", "id": 148, "avg_similarity_score": 0.1876829484499664}
{"instruction": "def find_first_missing_positive_int(arr):\n    \"\"\"Return the first missing positive integer in the given array.\n\n    >>> find_first_missing_positive_int([3, 4, -1, 1])\n    2\n    >>> find_first_missing_positive_int([1, 2, 0])\n    3\n    \"\"\"", "output": "pass", "id": 149, "avg_similarity_score": 0.17538416030317325}
{"instruction": "def number_of_odd_subarrays(arr):\n    \"\"\"Given an array of size n, return the total number of\n    odd subarrays in it.\n\n    >>> number_of_odd_subarrays([1, 2, 3])\n    5\n    >>> number_of_odd_subarrays([2, 3, 4])\n    5\n    \"\"\"", "output": "pass", "id": 150, "avg_similarity_score": 0.21527476872500753}
{"instruction": "def minimum_Cost_LengthOf_minBlock(arr):\n    \"\"\"Given an array of integers, return the length of the minimum block \n    such that the sum of its elements is greater than or equal to the given target number.\n\n    >>> minimum_Cost_LengthOf_minBlock([2, 3, 1, 0, 4], 10)\n    3\n    >>> minimum_Cost_LengthOf_minBlock([1, 5, 11, 3], 4)\n    1\n    \"\"\"", "output": "pass", "id": 151, "avg_similarity_score": 0.21469883200749326}
{"instruction": "def sum_of_Minimum_and_Maximum(arr):\n    \"\"\"Given an array of size n, return the sum of its minimum and maximum element. \n\n    >>> sum_of_Minimum_and_Maximum([3, 2, 4, 10])\n    13\n    >>> sum_of_Minimum_and_Maximum([2, 1, 10])\n    11\n    \"\"\"", "output": "pass", "id": 152, "avg_similarity_score": 0.20982784154630377}
{"instruction": "def reverse_words_in_String(sentence):\n    \"\"\"Given a sentence of words separated by spaces, reverse the words in the sentence. \n\n    >>> reverse_words_in_String('Welcome to this coding challenge')\n    'challenge coding this to Welcome'\n    >>> reverse_words_in_String('This is an example sentence')\n    'sentence example an is This'\n    \"\"\"", "output": "pass", "id": 153, "avg_similarity_score": 0.19986471295156957}
{"instruction": "def next_greater_in_arr(arr):\n    \"\"\"Given an array of size n, return an array such that the \n    element at i\u2019th index in the new array is the first greater element \n    in the right side of the element at i\u2019th index in the given array. \n\n    >>> next_greater_in_arr([90, 10, 8])\n    [-1, 90, 90]\n    >>> next_greater_in_arr([1, 5, 2, 8])\n    [5, 8, 8, -1]\n    \"\"\"", "output": "pass", "id": 154, "avg_similarity_score": 0.18110727774859756}
{"instruction": "def longest_subString_unsorted(arr):\n    \"\"\"Given an array of distinct elements, find the length of the longest subarray\n    whose elements are in strictly increasing order.\n\n    >>> longest_subString_unsorted([2, 5, 3, 7, 8, 0, 1])\n    3\n    >>> longest_subString_unsorted([10, 12, 8, 5, 6])\n    3\n    \"\"\"", "output": "pass", "id": 155, "avg_similarity_score": 0.2106269701188161}
{"instruction": "def count_triplets_with_sum_less_than_X(arr, x):\n    \"\"\"Given an array of distinct elements and a sum x, return the count \n    of triplets with sum less than x. \n\n    >>> count_triplets_with_sum_less_than_X([4, 8, 2, 3], 10)\n    3\n    >>> count_triplets_with_sum_less_than_X([5, 4, 7, 1], 1)\n    0\n    \"\"\"", "output": "pass", "id": 156, "avg_similarity_score": 0.19441505831542566}
{"instruction": "def make_largest_proper_divisor(n):\n    \"\"\" Given non-negative integer n, return the largest proper divisor of n.\n    A proper divisor of a number is a divisor of that number which is strictly \n    less than that number.\n\n    >>> make_largest_proper_divisor(12)\n    6\n    >>> make_largest_proper_divisor(10)\n    5\n    >>> make_largest_proper_divisor(1)\n    -1   # -1 if no proper divisor\n    \"\"\"", "output": "pass", "id": 157, "avg_similarity_score": 0.17139785546362132}
{"instruction": "def compute_root_square(n):\n    \"\"\" Given an integer n, return the integer obtained by computing the \n    square root of n: floor(sqrt(n)).\n\n    >>> compute_root_square(9)\n    3\n    >>> compute_root_square(4)\n    2\n    >>> compute_root_square(1)\n    1\n    \"\"\"", "output": "pass", "id": 158, "avg_similarity_score": 0.17581923036683053}
{"instruction": "def convert_hex_to_decimal(hex_string):\n    \"\"\" Given a string representing an unsigned hexadecimal number, \n    return the integer obtained by converting the string into decimal.\n\n    >>> convert_hex_to_decimal(\"3F\")\n    63\n    >>> convert_hex_to_decimal(\"F0\")\n    240\n    >>> convert_hex_to_decimal(\"0\")\n    0\n    \"\"\"", "output": "pass", "id": 159, "avg_similarity_score": 0.17642438319962586}
{"instruction": "def max_product_of_three_terms(num_list):\n    \"\"\"\n    Given a list of numbers, find and return the maximum product of any three \n    terms present in the list.\n\n    >>> max_product_of_three_terms([-1,2,3])\n    6\n    >>> max_product_of_three_terms([4,-2,3,1])\n    24\n    >>> max_product_of_three_terms([9,8,2,3])\n    72\n    \"\"\"", "output": "pass", "id": 160, "avg_similarity_score": 0.23540358874712577}
{"instruction": "def find_maximum_length_substring(str1, str2):\n    \"\"\"\n    Given two strings str1 and str2, find and return the maximum length string \n    which is a substring of both of the strings.\n\n    >>> find_maximum_length_substring(\"abcacb\", \"adebc\")\n    \"abc\"\n    >>> find_maximum_length_substring(\"decab\", \"cadb\")\n    \"cad\"\n    >>> find_maximum_length_substring(\"acb\", \"cccc\")\n    \"c\"\n    \"\"\"", "output": "pass", "id": 161, "avg_similarity_score": 0.2115415996824666}
{"instruction": "def compute_sum_of_min_max_elements(num_list):\n    \"\"\"\n    Given an non-empty array of positive numbers, find and return the sum of the\n    largest and smallest elements present in the array.    \n\n    >>> compute_sum_of_min_max_elements([10,3,9,6])\n    13\n    >>> compute_sum_of_min_max_elements([2,1,7])\n    8\n    >>> compute_sum_of_min_max_elements([6,3,1,2,7,9])\n    10\n    \"\"\"", "output": "pass", "id": 162, "avg_similarity_score": 0.22876092650719174}
{"instruction": "def find_number_in_grid(grid):\n    \"\"\"\n    Given an n x n grid, which contains only 0 or 1, find and return the \n    position of any 1 that is present in the given grid in the form of a tuple.\n    All the positions should be given in (x, y) format.\n\n    >>> find_number_in_grid([[0, 0, 0], [1, 0, 0], [0, 0, 0]])\n    (1, 0)\n    >>> find_number_in_grid([[1, 0, 0], [0, 0, 0], [0, 0, 0]])\n    (0, 0)\n    >>> find_number_in_grid([[0, 1, 0], [0, 0, 0], [0, 0, 0]])\n    (0, 1)\n    \"\"\"", "output": "pass", "id": 163, "avg_similarity_score": 0.1831012175833451}
{"instruction": "def is_number_in_list(arr, n):\n    \"\"\"\n    Given an array of integers and an integer n, find and return True if n is present  \n    in the array and False if it is not.\n\n    >>> is_number_in_list([1,2,3,4], 5)\n    False\n    >>> is_number_in_list([1,2,3,4], 4)\n    True\n    >>> is_number_in_list([], 3)\n    False\n    \"\"\"", "output": "pass", "id": 164, "avg_similarity_score": 0.2129570763273794}
{"instruction": "def binary_search_first(nums, target):\n    \"\"\"\n    Given an array of sorted integers nums and an integer target, find and return \n    the index of the first occurrence of target in the array.\n    If target is not present in the array, return -1.\n\n    >>> binary_search_first([1,2,2,3,4], 2)\n    1\n    >>> binary_search_first([2,2,4,5,7], 7)\n    4\n    >>> binary_search_first([1,2,3,4], 5)\n    -1\n    \"\"\"", "output": "pass", "id": 165, "avg_similarity_score": 0.21506954781544932}
{"instruction": "def print_diagonal_sum(matrix):\n    \"\"\"\n    Given an n x m matrix, print the sum of the numbers present in the diagonals \n    of the matrix, i.e. the elements at position (i,i) and (m-1-i, n-1-i).\n\n    >>> print_diagonal_sum([[1,2,3], [4,5,6], [7,8,9]])\n    15\n    >>> print_diagonal_sum([[11,21,31], [41,51,61], [71,81,91]])\n    180\n    >>> print_diagonal_sum([[10,20], [30, 40]])\n    30\n    \"\"\"", "output": "pass", "id": 166, "avg_similarity_score": 0.17332874267066115}
{"instruction": "def longest_uneaten(A: list) -> int:\n    \"\"\" Given an array of non-negative integers, return the length of \n    the longest subarray such that all numbers in this subarray are not\n    factors of any element in the array.\n\n    >>> longest_uneaten([5, 6, 8, 2, 3, 9, 10, 12])\n    5\n    >>> longest_uneaten([15, 20, 6, 1, 12])\n    2\n    \"\"\"", "output": "pass", "id": 167, "avg_similarity_score": 0.23086778981018882}
{"instruction": "def median_list(lst):\n    \"\"\"Given a non-empty list of integers, find the median of the list.\n    \n    >>> median_list([4, 5, 6, 1, 3])\n    4.5\n    >>> median_list([8, 9, 4, 3, 5])\n    5\n    \"\"\"", "output": "pass", "id": 168, "avg_similarity_score": 0.2504754321233601}
{"instruction": "def num_words(str: str) -> int:\n    \"\"\" Given a sentence of words, return the number of words in the sentence.\n\n    >>> num_words('This is a sentence')\n    4\n    >>> num_words('This is my sentence')\n    5\n    \"\"\"", "output": "pass", "id": 169, "avg_similarity_score": 0.26194425146907224}
{"instruction": "def holds_groups(mat: list) -> bool:\n    \"\"\"Given a matrix(list of lists), determine if all the elements in any row or\n    column are all the same.\n\n    >>> holds_groups([[1, 5, 9], \n                      [5, 5, 5], \n                      [1, 8, 3]])\n    True\n    >>> holds_groups([[1, 7, 9],\n                      [5, 8, 8],\n                      [2, 2, 3]])\n    False\n    \"\"\"", "output": "pass", "id": 170, "avg_similarity_score": 0.20444719616627896}
{"instruction": "def counting_instances(a: list, b: list) -> int:\n    \"\"\"Given two lists, count the number of elements in a that are also present in b.\n\n    >>> counting_instances([1, 4, 6, 8], [2, 4, 7, 8])\n    2\n    >>> counting_instances([2, 2, 3], [3, 1, 6])\n    1\n    \"\"\"", "output": "pass", "id": 171, "avg_similarity_score": 0.21106730777839053}
{"instruction": "def Gestures(arr: list) -> int:\n    \"\"\"Given a sequence of hand gestures, counted as 1, 2, 3, return the number of\n    possible sequences, where each sequence consists of exactly 3 different gestures.\n    \n    >>> Gestures([1, 2, 3, 1])\n    4\n    >>> Gestures([1, 2, 1, 2, 3, 2])\n    8\n    \"\"\"", "output": "pass", "id": 172, "avg_similarity_score": 0.19518564884100356}
{"instruction": "def Min_Trace(mat: list) -> int:\n    \"\"\"Given a matrix of size n*n, trace all the possible paths from the first\n    row to the nth row. Return the minimum possible sum of these paths.\n\n    >>> Min_Trace([[1, 2, 3], \n                    [4, 5, 6], \n                    [7, 8, 9]])\n    13\n    >>> Min_Trace([[2, 5, 8], \n                    [4, 3, 4], \n                    [9, 3, 7]])\n    9\n    \"\"\"", "output": "pass", "id": 173, "avg_similarity_score": 0.19875815728118273}
{"instruction": "def Covering_Subsets(nums: list, k: int) -> int:\n    \"\"\" Given a set of numbers and an integer k, \n    determine the number of subsets with size k that cover all numbers in the set.\n\n    >>> Covering_Subsets([2, 3, 4, 5], 3)\n    4\n    >>> Covering_Subsets([1, 2, 3], 2)\n    3\n    \"\"\"", "output": "pass", "id": 174, "avg_similarity_score": 0.23337475622044115}
{"instruction": "def Max_Prod_Subarr(arr: list) -> int:\n    \"\"\"Given an array of positive integers, \n    determine the maximum product of a subarray of any length.\n\n    >>> Max_Prod_Subarr([2, 3, 7, 4])\n    84\n    >>> Max_Prod_Subarr([2, 6, 2])\n    12\n    \"\"\"", "output": "pass", "id": 175, "avg_similarity_score": 0.22556727501828122}
{"instruction": "def Reverse_Bits(n: int) -> int:\n    \"\"\"Given a non-negative integer, \n    reverse the bits of the integer and return the result.\n\n    >>> Reverse_Bits(19)\n    50331648\n    >>> Reverse_Bits(15)\n    240\n    \"\"\"", "output": "pass", "id": 176, "avg_similarity_score": 0.2274062210093434}
{"instruction": "def sort_rest_2arg(lst):\n    \"\"\" Given a list of distinct integers, sort it in ascending order.\n    Arguments can be sorted by the second argument if the first argument is the same.\n\n    >>> sort_rest_2arg([[3,4],[2,4],[3,2]])\n    [[2,4],[3,2],[3,4]]\n    \"\"\"", "output": "pass", "id": 177, "avg_similarity_score": 0.19175925574854563}
{"instruction": "def max_3consectictive(lst):\n    \"\"\" Given an integer array nums, find the maximum number of consecutive integers \n    that appear in a row in the array.\n\n    >>> max_3consectictive([1,2,3,6,7,8,10])\n    3\n    >>> max_3consectictive([2,3,4,7,8,9,10])\n    4\n    \"\"\"", "output": "pass", "id": 178, "avg_similarity_score": 0.2280167717101261}
{"instruction": "def count_unique_chars(s):\n    \"\"\" \n    Given a string s, find the count of unique characters in string s.\n    No two same characters should be adjacent to each other in s.\n\n    >>> count_unique_chars('apple')\n    3\n    >>> count_unique_chars('aabcc')\n    3\n    \"\"\"", "output": "pass", "id": 179, "avg_similarity_score": 0.19510811403358652}
{"instruction": "def all_distinct_substrings(s):\n    \"\"\"\n    Given a string s, return the count of all substrings of s that are different from one another.\n\n    >>> all_distinct_substrings('xyz')\n    6\n    >>> all_distinct_substrings('xyza')\n    10\n    \"\"\"", "output": "pass", "id": 180, "avg_similarity_score": 0.2070220791342119}
{"instruction": "def prime_factorize(n):\n    \"\"\"\n    Factorize the given number into its prime factors. \n    Return a list which contains prime factors in ascending order.\n\n    >>> prime_factorize(360)\n    [2,2,2,3,3,5]\n    >>> prime_factorize(289)\n    [17,17]\n    \"\"\"", "output": "pass", "id": 181, "avg_similarity_score": 0.1590261664880533}
{"instruction": "def count_pairs(nums, target):\n    \"\"\"\n    Given an integer array nums and an integer target, \n    return the number of pairs in the array whose sum is equal to the target.\n\n    >>> count_pairs([1,2,3,4], 4)\n    2\n    >>> count_pairs([2,4,3,1], 5)\n    1\n    \"\"\"", "output": "pass", "id": 182, "avg_similarity_score": 0.23066534944182293}
{"instruction": "def first_non_repeating_char(s):\n    \"\"\"\n    Return the index of the first non-repeating character in the given string. \n    If the string contains all repeating characters, return -1.\n\n    >>> first_non_repeating_char('leetcode')\n    0\n    >>> first_non_repeating_char('zxcvbnmlkj')\n    7\n    \"\"\"", "output": "pass", "id": 183, "avg_similarity_score": 0.18377889490041674}
{"instruction": "def sum_squares(n):\n    \"\"\"\n    Given a non-negative integer n, return the sum of the squares of all numbers less than n.\n\n    >>> sum_squares(10)\n    285\n    >>> sum_squares(4)\n    30\n    \"\"\"", "output": "pass", "id": 184, "avg_similarity_score": 0.23199755684721762}
{"instruction": "def rearrange_arr(arr):\n    \"\"\"\n    Given an array of integers, rearrange the array such that odd numbers are at even indexes and \n    even numbers are at odd indexes.\n\n    >>> rearrange_arr([2,1,3,4])\n    [1,2,4,3]\n    >>> rearrange_arr([2,4,1,3])\n    [1,2,3,4]\n    \"\"\"", "output": "pass", "id": 185, "avg_similarity_score": 0.17415101984878056}
{"instruction": "def single_rem(nums):\n    \"\"\"\n    Given an integer array nums, remove the single element from it such that \n    the sum of elements before and after the removed element equals 0.\n\n    >>> single_rem([4,3,2,2,3,4])\n    4\n    >>> single_rem([4,2,1])\n    -1\n    \"\"\"", "output": "pass", "id": 186, "avg_similarity_score": 0.18964940745896802}
{"instruction": "def find_duplicates(arr):\n    \"\"\" Given an array arr, returns the elements that appear in the array at least twice.\n\n    >>> find_duplicates([2,1,2])\n    [2]\n    >>> find_duplicates([1,1,2,2,3])\n    [1,2]\n    \"\"\"", "output": "pass", "id": 187, "avg_similarity_score": 0.20110201173310055}
{"instruction": "def identify_palindrome(string):\n    \"\"\" Given a string of characters, determine whether the input string is a palindrome or not.\n\n    >>> identify_palindrome(\"racecar\")\n    True\n    >>> identify_palindrome(\"mom\")\n    True\n    >>> identify_palindrome(\"hello\")\n    False\n    \"\"\"", "output": "pass", "id": 188, "avg_similarity_score": 0.20942792933163978}
{"instruction": "def binary_search(arr: list, key: int) -> int:\n    \"\"\" Binary search returns the position of a given number in a given sorted array if present, \n        -1 otherwise.\n\n    >>> binary_search([1, 2, 3, 4, 5], 4)\n    3\n    >>> binary_search([1, 2, 4, 5, 6], 3)\n    -1\n    \"\"\"", "output": "pass", "id": 189, "avg_similarity_score": 0.18092843195649486}
{"instruction": "def valid_phone_number(number: str) -> bool:\n    \"\"\" Validates the given string as a valid phone number, returns true iff it is valid.\n\n    >>> valid_phone_number(\"+1 (202) 555-0143\")\n    True\n    >>> valid_phone_number(\"202-555-0143\")\n    False\n    \"\"\"", "output": "pass", "id": 190, "avg_similarity_score": 0.14597058279786418}
{"instruction": "def count_distinct(arr: list) -> int:\n    \"\"\" Counts the number of distinct elements present in the array.\n\n    >>> count_distinct([1,1,2])\n    2 \n    >>> count_distinct([1,1,2,3,3,4])\n    4\n    \"\"\"", "output": "pass", "id": 191, "avg_similarity_score": 0.21653842008573645}
{"instruction": "Given:\nclass LinkedListNode:\n    def __init__(self, value=None, next=None):\n        self.value = value\n        self.next = next\n\ndef remove_duplicates(head):\n    \"\"\" Given a linked list, remove the duplicate nodes from the list.\n\n    >>> node_1 = LinkedListNode(1)\n    >>> node_2 = LinkedListNode(2)\n    >>> node_3 = LinkedListNode(3)\n    >>> node_4 = LinkedListNode(2)\n    >>> node_1.next = node_2\n    >>> node_2.next = node_3\n    >>> node_3.next = node_4\n    >>> head = remove_duplicates(node_1)\n    >>> head.value\n    1\n    >>> head.next.value\n    2\n    >>> head.next.next.value\n    3  \n    \"\"\"", "output": "pass", "id": 192, "avg_similarity_score": 0.14290574983315832}
{"instruction": "def swap_case(s: str) -> str:\n    \"\"\" Given a string, returns the string with the case of each letter in the string swapped.\n\n    >>> swap_case('Hello world')\n    'hELLO WORLD' \n    >>> swap_case('Good bye')\n    'gOOD BYE'\n    \"\"\"", "output": "pass", "id": 193, "avg_similarity_score": 0.2224990916517077}
{"instruction": "def array_max(arr: list) -> int:\n    \"\"\" Finds the maximum value in the given array.\n    >>> array_max([1,2,3,4])\n    4\n    >>> array_max([8,3,4,2])\n    8\n    \"\"\"", "output": "pass", "id": 194, "avg_similarity_score": 0.19596811901490147}
{"instruction": "def multi_bridging_words(s: str, words: list) -> int:\n    \"\"\" Given a sentence s and a list of words, returns the number of occurrences of\n    two or more words in s that both bridge the gap between two other words in s.\n\n    >>> multi_bridging_words('to be or not to be', ['to', 'be', 'or', 'not'])\n    2\n    >>> multi_bridging_words('to be or not to be', ['to', 'be', 'not'])\n    0\n    \"\"\"", "output": "pass", "id": 195, "avg_similarity_score": 0.2126857848200177}
{"instruction": "def closest_number(arr: list, num: int) -> int:\n    \"\"\" Given a sorted array of integers and a target integer, return the \n    closest number in the array to the target integer.\n\n    >>> closest_number([1,2,4,5,6], 4)\n    4\n    >>> closest_number([1,2,3,4,5], 6)\n    5\n    \"\"\"", "output": "pass", "id": 196, "avg_similarity_score": 0.25530901963843455}
{"instruction": "def binary_search_circular(arr, n):\n    \"\"\" Given a sorted array arr of non-decreasing integers and an integer n,\n    determine whether arr contains the target value n. Return true if arr contains\n    value n, otherwise return false. The array arr can contain duplicates, and\n    the array may also be circular, meaning that overflowing from one end of\n    the array to the other is allowed.\n\n    >>> binary_search_circular([2, 3, 4, 6, 2], 4)\n    True\n    >>> binary_search_circular([7, 8, 2, 5, 3], 3)\n    True\n    >>> binary_search_circular([6, 3, 8, 2], 10)\n    False\n    \"\"\"", "output": "pass", "id": 197, "avg_similarity_score": 0.16971578238168866}
{"instruction": "def min_sum_trees(arr):\n    \"\"\" Given an array of positive integers arr, create a binary tree that\n    has minimum sum of all paths from root to leaf nodes. Return the root\n    node of the binary tree.\n\n    >>> min_sum_tree(arr=[4,2,3,1]\n    4\n    >>> min_sum_tree(arr=[5,6,4,7,8]\n    5\n    \"\"\"", "output": "pass", "id": 198, "avg_similarity_score": 0.20156911385671675}
{"instruction": "def reverse_recursive(s):\n    \"\"\" Given a string s, reverse and return the string s using recursion.\n\n    >>> reverse_recursive(\"hello world\")\n    \"dlrow olleh\"\n    >>> reverse_recursive(\"python\")\n    \"nohtyp\"\n    \"\"\"", "output": "pass", "id": 199, "avg_similarity_score": 0.20525339913138355}
{"instruction": "def contains_duplicates(arr):\n    \"\"\" Given an array arr of integers, determine if the array contains duplicates.\n    Return true if the array contains duplicates, otherwise return false.\n    Array arr may contain duplicates.\n\n    >>> contains_duplicates([8,7,1,9])\n    False\n    >>> contains_duplicates([1,2,3,3])\n    True\n    \"\"\"", "output": "pass", "id": 200, "avg_similarity_score": 0.17955062182408563}
{"instruction": "def median_sort(arr):\n    \"\"\" Given an array arr containing positive integers, perform median sort on arr\n    and return the sorted array. Median sort orders the elements in arr\n    from the median value to the values larger than median and then\n    from median to values smaller than median.\n\n    >>> median_sort([9, 3, 6, 2, 4, 8])\n    [6, 3, 2, 4, 8, 9]\n    >>> median_sort([7, 7, 5, 1, 4, 3])\n    [5, 3, 4, 1, 7, 7]\n    \"\"\"", "output": "pass", "id": 201, "avg_similarity_score": 0.16160713102681576}
{"instruction": "def reorder_arr(arr):\n    \"\"\" Given an array arr having even length n, reorder the array such\n    that arr[0] <= arr[1] >= arr[2] <= arr[3] >= arr[4] and so on.\n\n    >>> reorder_arr([8, 4, 1, 9, 6])\n    [8, 9, 4, 6, 1]\n    >>> reorder_arr([6, 5, 4, 3, 2])\n    [6, 4, 5, 2, 3]\n    \"\"\"", "output": "pass", "id": 202, "avg_similarity_score": 0.14870600388129365}
{"instruction": "def rotate_string(s,n):\n    \"\"\"Given a string and an integer n, rotate the string by\n    n letters and return the new string.\n    A positive n shifts the string to the right while a\n    negative value shifts the string to the left.\n\n    >>> rotate_string(\"abcdef\", 2)\n    \"defabc\"\n    >>> rotate_string(\"python\", -1)\n    \"npyttho\"\n    \"\"\"", "output": "pass", "id": 203, "avg_similarity_score": 0.19167571306311817}
{"instruction": "def is_vowel_chain(arr):\n    \"\"\" Given an array of characters, determine if the array\n    contains vowels in a chain. A chain of vowels is defined\n    as two or more consecutive vowels.\n\n    >>> is_vowel_chain(['a', 'b', 'e', 'h', 'i'])\n    True\n    >>> is_vowel_chain(['o', 'e', 'u', 'r', 'u'])\n    True\n    >>> is_vowel_chain(['c', 'a', 'm', 'p', 'o'])\n    False\n    \"\"\"", "output": "pass", "id": 204, "avg_similarity_score": 0.18887237278016641}
{"instruction": "def word_ladder_count(beginWord, endWord, wordList):\n    \"\"\" Given two words, beginWord and endWord, and a list of words wordList, return\n    the minimum number of steps required to convert beginWord to endWord such that:\n\n    - At each step you can only do one of the following:\n\n        * Modify a single letter of a given word.\n        * Add a single letter to a given word.\n        * Remove a single letter from a given word.\n\n    All words that are modified, added, or removed must exist in the wordList.\n\n    >>> word_ladder_count(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\n    5\n    >>> word_ladder_count(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\n    0\n    \"\"\"", "output": "pass", "id": 205, "avg_similarity_score": 0.1492676709599616}
{"instruction": "def group_anagrams(strs):\n    \"\"\" Given an array of strings strs, group anagrams together.\n    An anagram is a word or phrase formed by rearranging the letters \n    of a given string.\n\n    Example: strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\u201d]\n    ans = [[\"eat\", \"tea\", \"ate\"], [\"tan\", \"nat\"], [\"bat\"]]\n\n    >>> group_anagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])\n    [[\"eat\", \"tea\", \"ate\"], [\"tan\", \"nat\"], [\"bat\"]]\n    >>> group_anagrams([\"eat\", \"tea\", \"ddd\"])\n    [[\"eat\", \"tea\"], [\"ddd\"]]\n    \"\"\"", "output": "pass", "id": 206, "avg_similarity_score": 0.1536840473201708}
{"instruction": "def convert_string_CamelCase(data):\n    \"\"\"This function will convert a given string to its CamelCase form, \n    by changing the first letter of each word to upper case.\n\n    >>> convert_string_CamelCase(\"this is a test string\")\n    \"ThisIsATestString\"\n    >>> convert_string_CamelCase(\"words with numbers 123\")\n    \"WordsWithNumbers123\"\n    \"\"\"", "output": "pass", "id": 207, "avg_similarity_score": 0.15266573878760423}
{"instruction": "def unique_Paths_WithObstacles(obstacleGrid):\n    \"\"\"Given a non negative integer grid of m*n, need to find the number of unique paths from top left (0,0) to bottom right (m-1,n-1)\n    which contains obstacles along with the empty cells in it.\n\n    >>> unique_Paths_WithObstacles([\n        [0, 0, 0],\n        [0, 1, 0],\n        [0, 0, 0], \n    ])\n    2\n    >>> unique_Paths_WithObstacles([\n        [1, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0], \n    ])\n    0\n    \"\"\"", "output": "pass", "id": 208, "avg_similarity_score": 0.17587706607501827}
{"instruction": "def median_of_Two_Sorted_Arrays(nums1, nums2):\n    \"\"\" Given two sorted arrays, nums1 and nums2, find the median of\n    the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\n    >>> median_of_Two_Sorted_Arrays([1, 3], [2])\n    2.0\n    >>> median_of_Two_Sorted_Arrays([1, 2], [3, 4])\n    2.5\n    \"\"\"", "output": "pass", "id": 209, "avg_similarity_score": 0.16098474556334072}
{"instruction": "def permutations(nums):\n    \"\"\"Given a list of distinct integers, return all possible permutations of the list.\n\n    >>> permutations([1,2,3])\n    [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\n    \"\"\"", "output": "pass", "id": 210, "avg_similarity_score": 0.2404744009504131}
{"instruction": "def numTrees(n):\n    \"\"\"Given an integer n, return the number of unique binary search trees that can be constructed using 1..n as nodes.\n\n    >>> numTrees(3)\n    5\n    >>> numTrees(4)\n    14\n    \"\"\"", "output": "pass", "id": 211, "avg_similarity_score": 0.19200876527870467}
{"instruction": "def inOrderTraversal(root):\n    \"\"\"Given a binary tree, return the inorder traversal of its nodes.\n\n    1\n    / \\\n   2   3\n    \\\n     4\n\n    >>> inOrderTraversal(root)\n    [2, 4, 1, 3]\n    \"\"\"", "output": "pass", "id": 212, "avg_similarity_score": 0.18966146690681446}
{"instruction": "def validSoduku(board):\n    \"\"\"A Sudoku board is a 9x9 grid with 9 sub-grids, each containing all the numbers from 1 to 9. A valid Sudoku board must satisfy the following\n    two rules:\n    1. each row must contain each of the numbers 1 to 9 \n    2. each column must contain each of the numbers 1 to 9\n\n    Given a 9x9 grid, determine whether it is a valid Soduku board or not.\n\n    >>> validSoduku([\n    [7, 8, 4,  1, 5, 9,  3, 2, 6],\n    [5, 3, 9,  6, 7, 2,  8, 4, 1],\n    [6, 1, 2,  4, 3, 8,  7, 5, 9],\n\n    [9, 2, 8,  7, 1, 5,  4, 6, 3],\n    [3, 5, 7,  8, 4, 6,  1, 9, 2],\n    [4, 6, 1,  9, 2, 3,  5, 8, 7],\n\n    [8, 7, 6,  3, 9, 4,  2, 1, 5],\n    [2, 4, 3,  5, 6, 1,  9, 7, 8],\n    [1, 9, 5,  2, 8, 7,  6, 3, 4]\n    ])\n    True\n    \"\"\"", "output": "pass", "id": 213, "avg_similarity_score": 0.12427303645842444}
{"instruction": "def isValidMountainArray(arr):\n    \"\"\" Given an array arr of integers, return true if and only if it is a valid mountain array.\n    A valid mountain array is an array where index i is strictly less than index i+1.\n\n    >>> isValidMountainArray([2, 1, 2, 3, 5, 7, 9, 10, 12, 14, 15])\n    True\n    >>> isValidMountainArray([2, 3, 4, 3, 4, 5, 6, 7, 8, 9])\n    False\n    \"\"\"", "output": "pass", "id": 214, "avg_similarity_score": 0.16212934999353232}
{"instruction": "def nextPermutation(nums):\n    \"\"\" Given a list of distinct integers, return the next permutation in lexicographical order.\n\n    >>> nextPermutation([1,2,3])\n    [1,3,2]\n    >>> nextPermutation([3,2,1])\n    [1,2,3]\n    \"\"\"", "output": "pass", "id": 215, "avg_similarity_score": 0.23501294603356282}
{"instruction": "def characters_in_range(string, a, b):\n    \"\"\" Return the number of times the characters in the range a and b occur in the given string. \n\n    >>> characters_in_range('Hello world!', 'a', 'l')\n    6\n    >>> characters_in_range('ABDLDKL', 'A', 'A')\n    1\n    >>> characters_in_range('apple', 'b', 'c')\n    0\n    \"\"\"", "output": "pass", "id": 216, "avg_similarity_score": 0.2230158900187909}
{"instruction": "def all_permutations(numbers: List[int]) -> List[List[int]]:\n    \"\"\" Given a list of unique integers, return a list of all possible permutations.\n\n    >>> all_permutations([1,2,3])\n    [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n    >>> all_permutations([-1, 0, 1])\n    [[-1,0,1],[-1,1,0],[0,-1,1],[0,1,-1],[1,-1,0],[1,0,-1]]\n    \"\"\"", "output": "pass", "id": 217, "avg_similarity_score": 0.22143313510235302}
{"instruction": "def cross_list(matrix):\n    \"\"\" Given a matrix of dimension (m x n), return a new matrix which is a cross of the two dimensions, \n    and no element in the new matrix appears more than once.\n\n    >>> cross_list([[1,2],[3,4]])\n    [[1,3],[2,4]]\n    >>> cross_list([[1,2,3],[4,5,6],[7,8,9]])\n    [[1,4,7],[2,5,8],[3,6,9]]\n    \"\"\"", "output": "pass", "id": 218, "avg_similarity_score": 0.20214855413540678}
{"instruction": "def reverse_tinnit(text):\n    \"\"\" Given a text string, return a reversed version of the text according to the Tinnit definition.\n    In Tinnit, a character is reversed if it is followed by a character of the same kind. \n\n    >>> reverse_tinnit('An apple a day keeps the doctor away')\n    'An elppa a yad skeep the tcodro weya'\n    >>> reverse_tinnit('This is easy')\n    'This is yssie'\n    \"\"\"", "output": "pass", "id": 219, "avg_similarity_score": 0.197921292846288}
{"instruction": "def last_digits_even(n):\n    \"\"\" Return True if the last two digits of given number n are even, and False otherwise.\n    Two digits are considered to be \"even\" if they are both divisible by 2.\n\n    >>> last_digits_even(23)\n    False\n    >>> last_digits_even(115)\n    True\n    \"\"\"", "output": "pass", "id": 220, "avg_similarity_score": 0.13731443296814463}
{"instruction": "def most_frequent(sequence):\n    \"\"\" Given a sequence, find the most frequent element in the sequence and its count.\n    Count for the different elements should be distinguished.\n\n    >>> most_frequent([1,2,2,3,3,3,4]) \n    (3,3)\n    >>> most_frequent([4,2,3,1,2,3,6,9,9,9]) \n    (9,3)\n    \"\"\"", "output": "pass", "id": 221, "avg_similarity_score": 0.1817986560950605}
{"instruction": "def largest_longest_word(words):\n    \"\"\" Given a list of words, return the longest word which also has the largest length. \n\n    >>> largest_longest_word([\"Alexa\", \"Google\", \"Apple\", \"Microsoft\"])\n    'Microsoft'\n    >>> largest_longest_word([\"hello\", \"engineer\", \"dinosaur\", \"tech\"])\n    'dinosaur'\n    >>> largest_longest_word([\"a\", \"b\", \"cc\", \"d\"])\n    'cc'\n    \"\"\"", "output": "pass", "id": 222, "avg_similarity_score": 0.2192151412482097}
{"instruction": "def max_pairwise_sum(arr: List[int]) -> int:\n    \"\"\"Given an array of positive integers, return the maximum sum of two elements in the array.\n    \n    >>> max_pairwise_sum([6, 10, 5])\n    16\n    >>> max_pairwise_sum([1, 3, 4, 8, 2])\n    12\n    \"\"\"", "output": "pass", "id": 223, "avg_similarity_score": 0.26746938604065296}
{"instruction": "def longest_non_repeating_substring(s):\n    \"\"\"Return the length of longest substring of given string which does not contain any repeating characters. \n\n    >>> longest_non_repeating_substring('abcdadcef')\n    4\n    >>> longest_non_repeating_substring('hdjhbggbscsfwecgfhnfebdv')\n    10\n    \"\"\"", "output": "pass", "id": 224, "avg_similarity_score": 0.16577340637319288}
{"instruction": "def max_third_of_list_elements(list):\n    \"\"\" Given a list of integers, return the maximum third of its elements. \n    If no such value exists, return -1 instead.\n\n    >>> max_third_of_list_elements([5,3,1,2,4,6,7,8])\n    4\n    >>> max_third_of_list_elements([-1,-2,-3,-4,-5])\n    -3\n    >>> max_third_of_list_elements([3,1,8,4,2])\n    4\n    \"\"\"", "output": "pass", "id": 225, "avg_similarity_score": 0.22070515504339433}
{"instruction": "def is_palindrome(numbers):\n    \"\"\" Given a list of numbers, check if it is a palindrome, \n    means the element numbers are mirrored around its center\n    and the order is preserved. \n    \n    >>> is_palindrome([1,2,3,4,5,4,3,2,1])\n    True\n    >>> is_palindrome([1,2,3])\n    False\n    >>> is_palindrome([-1,2,0,0,2,-1])\n    True\n    \"\"\"", "output": "pass", "id": 226, "avg_similarity_score": 0.20039366327159697}
{"instruction": "def sum_of_intervals(numbers):\n    \"\"\" Given a list of intervals represented by integer pairs, \n    returns the sum of all the intervals.\n\n    >>> sum_of_intervals([[1,2],[3,5],[6,7]])\n    12\n    >>> sum_of_intervals([[0,4],[6,8]])\n    18\n    >>> sum_of_intervals([[1,2],[2,3],[3,4]])\n    6\n    \"\"\"", "output": "pass", "id": 227, "avg_similarity_score": 0.2286684492932979}
{"instruction": "def longest_word_from_dict(dict, text):\n    \"\"\" Given a dictionary which contains words as keys and their meaning as values, \n    and a block of text, find and return the longest word in the text which is present \n    in the dictionary.\n\n    >>> longest_word_from_dict({'ark':'A saucepan', 'apples':'Fruits'}, \n    'Today I bought some apples in the ark')\n    'apples'\n    >>> longest_word_from_dict({'hydro':'water'}, 'steam is hotter than hydro')\n    'hydro'\n    \"\"\"", "output": "pass", "id": 228, "avg_similarity_score": 0.18892725345568454}
{"instruction": "def second_largest(numbers):\n    \"\"\" Find the second largest number in a list.\n\n    >>> second_largest([5,2,3,1,4])\n    4\n    >>> second_largest([0,1,2,3,4,5])\n    4\n    >>> second_largest([-2,-1,0,1,2])\n    1\n    \"\"\"", "output": "pass", "id": 229, "avg_similarity_score": 0.1684968610729491}
{"instruction": "def find_partitions_greedy(numbers):\n    \"\"\" Given a list of integers numbers, split the list into two partitions \n    using the greedy approach, such that the absolute difference of the sum of \n    elements in each partition is minimized. \n    \n    >>> find_partitions_greedy([3,2,1])\n    ([3], [2,1])\n    >>> find_partitions_greedy([2,3,4,5,6,7])\n    ([2,3,4], [5,6,7])\n    >>> find_partitions_greedy([1,2,3,4,5,6])\n    ([1,2,3], [4,5,6])\n    \"\"\"", "output": "pass", "id": 230, "avg_similarity_score": 0.2080017797105723}
{"instruction": "def find_exponential_sum(number):\n    \"\"\"Given an integer n, find the sum of the series 1^1 + 2^2 + 3^3 + .... + n^n \n\n    >>> find_exponential_sum(3)\n    14\n    >>> find_exponential_sum(4)\n    30\n    >>> find_exponential_sum(5)\n    55\n    \"\"\"", "output": "pass", "id": 231, "avg_similarity_score": 0.19779329494763354}
{"instruction": "def random_number_generator(start_number, end_number):\n    \"\"\" Given two integers, start_number and end_number, \n    generate a random number in the range from start_number to end_number-1 \n    and return the result.\n\n    >>> random_number_generator(3,10)\n    in range [3, 10)\n    >>> random_number_generator(-10,4)\n    in range [-10, 4)\n    \"\"\"", "output": "pass", "id": 232, "avg_similarity_score": 0.16949341028283757}
{"instruction": "def transform_sentence_casing(sentence):\n    \"\"\" Transform a sentence from all lowercase letters to camelCase letters.\n    \n    >>> transform_sentence_casing('working from home')\n    'workingFromHome'\n    >>> transform_sentence_casing('stupid genius')\n    'stupidGenius'\n    \"\"\"", "output": "pass", "id": 233, "avg_similarity_score": 0.10432955110880564}
{"instruction": "def get_index_of_zero_sum_triplet(numbers):\n    \"\"\" Given an array of integers numbers, find and return the index of a triplet \n    which sum equals to 0. If no such triplet is found, return -1 instead.\n\n    >>> get_index_of_zero_sum_triplet([-25, -10, -7, -3, 2, 4, 8, 10])\n    3\n    >>> get_index_of_zero_sum_triplet([100, -45, -10, -1, 0, 5, 6])\n    5\n    \"\"\"", "output": "pass", "id": 234, "avg_similarity_score": 0.2017402007687939}
{"instruction": "def uniq_elements(nums):\n    \"\"\" Create a function uniq_elements that takes a list of int as an argument \n    and returns a list with only unique elements in it, sorted in ascending order.\n\n    >>> uniq_elements([3, 3, 5, 3, 7, 1, 1])\n    [1, 3, 5, 7]\n    >>> uniq_elements([10, 10, 14, 11, 10, 15])\n    [10, 11, 14, 15]\n    >>> uniq_elements([1])\n    [1]\n    \"\"\"", "output": "pass", "id": 235, "avg_similarity_score": 0.1561408952125027}
{"instruction": "def remove_value(key):\n    \"\"\" Create a function remove_value that takes a dictionary as an argument \n    and returns a dictionary with the given key removed from it. \n\n    >>> d = {1 : \"a\", 2 : \"b\", 3\" c\" }\n    >>> remove_value(2)\n    {1 : \"a\", 3\" c\" }\n    >>> d = {'a': 2, 'b': 3, 'c': 0}\n    >>> remove_value('c')\n    {'a': 2, 'b': 3}\n    \"\"\"", "output": "pass", "id": 236, "avg_similarity_score": 0.14316863076572128}
{"instruction": "def min_length(strings):\n    \"\"\" Create a function min_length that takes a list of strings as an argument \n    and returns the length of the smallest string in the list. \n\n    >>> min_length([\"Hello\", \"World\", \"Code\"])\n    4\n    >>> min_length([\"Code\", \"Generation\", \"Python\"])\n    6\n    >>> min_length([\"foo\", \"bar\"])\n    3\n    \"\"\"", "output": "pass", "id": 237, "avg_similarity_score": 0.20666055392538413}
{"instruction": "def common_words(text1, text2):\n    \"\"\" Create a function common_words that takes two strings as arguments \n    and returns a list of words that appears in both strings. \n\n    >>> common_words(\"the quick brown fox\", \"the quick grey hound\")\n    ['the', 'quick']\n    >>> common_words(\"Code Generation Task\", \"Python Coding Exercise\")\n    ['Coding', 'Code', 'Generation']\n    >>> common_words(\"Python programming in action\", \"Data structures using Python\")\n    ['Python', 'in', 'using']\n    \"\"\"", "output": "pass", "id": 238, "avg_similarity_score": 0.1545529498599896}
{"instruction": "def is_valid_id(s):\n    \"\"\" Create a function is_valid_id that takes a string as an argument \n    and returns True if the string is a valid ID, and False otherwise. \n    A valid ID includes only numeric digit and capital letter and has length 6.\n\n    >>> is_valid_id(\"ABC123\")\n    True\n    >>> is_valid_id(\"abcd\")\n    False\n    >>> is_valid_id(\"P2AF39\")\n    True\n    \"\"\"", "output": "pass", "id": 239, "avg_similarity_score": 0.13172260424835258}
{"instruction": "def odd_occurrences(arr):\n    \"\"\" Create a function odd_occurrences that takes a non-empty array of \n    integers and returns the value of odd most frequent integer element in the array.\n\n    >>> odd_occurrences([4, 4, 5, 5, 6, 6, 6])\n    6\n    >>> odd_occurrences([1, 1, 2, 2, 3, 3, 3, 3, 4])\n    4\n    >>> odd_occurrences([4, 4, 5, 5, 6, 6])\n    None\n    \"\"\"", "output": "pass", "id": 240, "avg_similarity_score": 0.1994753920153217}
{"instruction": "def remove_char(s1, s2):\n    \"\"\" Create a function remove_char that takes two strings as arguments \n    and returns the first string after removing all the characters that is found in the second string.\n\n    >>> remove_char(\"Hello World\", \"ln\")\n    'Heo Word'\n    >>> remove_char(\"Codex Model\", \"eodxm\")\n    'Cl'\n    >>> remove_char(\"Data Science\", \"t\")\n    'Daa Sciene'\n    \"\"\"", "output": "pass", "id": 241, "avg_similarity_score": 0.1661469470841733}
{"instruction": "def find_d_occurring_words(s):\n    \"\"\" Create a function find_d_occurring_words that takes a string as an argument \n    and returns a list of words that appear exactly d times in the string.\n\n    >>> find_d_occurring_words(\"Coding is fun and challenging\")\n    ['fun', 'challenging']\n    >>> find_d_occurring_words(\"Python programming language\")\n    ['Python', 'programming', 'language']\n    >>> find_d_occurring_words(\"This sentence is quite long\")\n    []\n    \"\"\"", "output": "pass", "id": 242, "avg_similarity_score": 0.18127324975925052}
{"instruction": "def kth_smallest_i(arr, k):\n    \"\"\" Create a function kth_smallest_i that takes a non-empty array \n    of distinct integers and returns the kth smallest element in the array. \n\n    >>> kth_smallest_i([3, 10, 7, 5], 2)\n    7\n    >>> kth_smallest_i([1, 4, 6, 15, 30], 4)\n    15\n    >>> kth_smallest_i([3, 6, 8, 10], 2)\n    6\n    \"\"\"", "output": "pass", "id": 243, "avg_similarity_score": 0.19044017910781968}
{"instruction": "def are_anagrams(s1, s2):\n    \"\"\" Create a function are_anagrams that takes two strings as arguments\n    and returns True if they are anagrams of each other, False otherwise.\n\n    >>> are_anagrams(\"silent\", \"listen\")\n    True\n    >>> are_anagrams(\"codex\", \"dodec\")\n    False\n    >>> are_anagrams(\"elaborate\", \"reallobate\")\n    True\n    \"\"\"", "output": "pass", "id": 244, "avg_similarity_score": 0.12984574880282496}
{"instruction": "def find_fibonacci_nums(limit):\n    \"\"\" Write a function which takes an integer limit as its argument\n    and returns the sequence of Fibonacci numbers which are less than or equal to limit.\n\n    >>> find_fibonacci_nums(5)\n    [1, 1, 2, 3, 5]\n    >>> find_fibonacci_nums(10)\n    [1, 1, 2, 3, 5, 8]\n    \"\"\"", "output": "pass", "id": 245, "avg_similarity_score": 0.161663437497404}
{"instruction": "def match_score(s1, s2):\n    \"\"\" Write a function to compare two strings s1 and s2 and assign each character in each string a score from 0 to 2.\n    The function should return the sum of the scores of the two strings.\n    \n    >>> match_score('apple', 'orange')\n    5\n    >>> match_score('work', 'play')\n    1\n    \"\"\"", "output": "pass", "id": 246, "avg_similarity_score": 0.17145527706987274}
{"instruction": "def reverse_string_blocks(st):\n    \"\"\" Write a function which takes a string st and reverses any non-letter groups of characters.\n    Each group should be reversed independently. The function should also preserve the order of the groups.\n    \n    >>> reverse_string_blocks('R0dney 3WCastle')\n    'R0dney etlsWC3'\n    >>> reverse_string_blocks('1ouchW0rd!')\n    'hcu1oWdr!0'\n    \"\"\"", "output": "pass", "id": 247, "avg_similarity_score": 0.1600090537788253}
{"instruction": "def replace_each_vowel(word, c):\n    \"\"\"Given a word and a character c, write a function which replaces each vowel in the word with c.\n\n    >>> replace_each_vowel('apple', '*')\n    '*ppl*'\n    >>> replace_each_vowel('orange', '#')\n    '#r#ng#'\n    \"\"\"", "output": "pass", "id": 248, "avg_similarity_score": 0.16331283374697986}
{"instruction": "def largest_sum(nums):\n    \"\"\" Given an array of integers nums, write a function to\n    find the subarray with the largest sum.\n\n    >>> largest_sum([-1,2,3,-4,5])\n    6\n    >>> largest_sum([-2,1,-3,4,-1,2,1,-5,4])\n    6\n    \"\"\"", "output": "pass", "id": 249, "avg_similarity_score": 0.2250212251073353}
{"instruction": "def compute_distance(code1, code2): \n    \"\"\"Write a program that takes two strings as input and computes the Levenshtein distance between them.\n\n    >>> compute_distance('ruby', 'rupee')\n    2\n    >>> compute_distance('coffee', 'coffin')\n    2\n    \"\"\"", "output": "pass", "id": 250, "avg_similarity_score": 0.14027299907280188}
{"instruction": "def rotate_array(nums, k):\n    \"\"\" Given an array of integers and an integer k,\n    rotate the array in-place k times.\n\n    >>> rotate_array([1,2,3,4,5,6,7], 3)\n    [5,6,7,1,2,3,4]\n    >>> rotate_array([-5,4,3,2,1], 2)\n    [3,2,1,-5,4]\n    \"\"\"", "output": "pass", "id": 251, "avg_similarity_score": 0.2064583666113563}
{"instruction": "def max_distance(arr):\n    \"\"\" Find the maximum distance between two same numbers in an unsorted array.\n\n    >>> max_distance([1,4,3,2,5,9,2,3,2,3])\n    7\n\n    >>> max_distance([1,2,1,4,5,2,3,6,2,3])\n    6\n    \"\"\"", "output": "pass", "id": 252, "avg_similarity_score": 0.15008626664372196}
{"instruction": "def word_pattern_count(string):\n    \"\"\" You are given a string of lowercase characters.\n    Return the number of substrings in the string that satisfy the following pattern:\n    the substring is equal to its reverse and is at least 3 characters long.\n\n    >>> word_pattern_count(\"acaaabbbacdddd\")\n    4\n    Explanation: The 4 substrings that satisfy the pattern are: \"aaa\", \"bbb\", \"acd\", \"ddd\".\n    >>> word_pattern_count(\"acc\")\n    0\n    \"\"\"", "output": "pass", "id": 253, "avg_similarity_score": 0.20793677605684338}
{"instruction": "def xor_max_sum(arr):\n    \"\"\" Find the maximum total sum that can be obtained by doing XOR operation\n    with subarrays of an array.\n\n    >>> xor_max_sum([3,5,6,8,3,5])\n    13\n    Explanation: XOR of all elements of array = 8\n    XOR of (3, 5) = 6\n    XOR of (6, 8) = 14\n    XOR of (3, 5, 6, 8) = 13\n    So, maximum possible XOR sum obtained by doing XOR with subarrays = 13\n\n    >>> xor_max_sum([5,4,3,2,1])\n    5\n    Explanation: XOR of (5,4,3,2,1) = 5\n    \"\"\"", "output": "pass", "id": 254, "avg_similarity_score": 0.14769152764032595}
{"instruction": "def contains_all_numbers(arr):\n    \"\"\" Check if array contains all numbers from 1 to len(array).\n\n    >>> contains_all_numbers([7,1,2,3,4,5,6])    \n    True\n    >>> contains_all_numbers([5,4,2,3])\n    False\n    \"\"\"", "output": "pass", "id": 255, "avg_similarity_score": 0.11196011364447156}
{"instruction": "def is_consecutive(arr):\n    \"\"\" Check if the given array elements are consecutive numbers.\n\n    >>> is_consecutive([5,6,7,9])   \n    False\n    >>> is_consecutive([2,3,4,6])\n    False\n    >>> is_consecutive([7,8,9,10])\n    True\n    \"\"\"", "output": "pass", "id": 256, "avg_similarity_score": 0.15641969396228056}
{"instruction": "def check_product(arr):\n    \"\"\" Check if there exists a single number in the given array\n    which is equal to the product of all other numbers.\n\n    >>> check_product([2,1,9])\n    False\n    >>> check_product([3,4,2,6])\n    True\n    Explanation: Product of all other numbers = 24, which is equal to the last number 6\n    \"\"\"", "output": "pass", "id": 257, "avg_similarity_score": 0.1924883992813632}
{"instruction": "def array_intersection(arr1, arr2):\n    \"\"\" Given two arrays containing n distinct integers, \n    return the intersection of these two arrays. \n\n    >>> array_intersection([1,2,4], [2,3,4])\n    [2,4]\n    >>> array_intersection([1,2,4], [5,7,9])\n    []\n    \"\"\"", "output": "pass", "id": 258, "avg_similarity_score": 0.18299849909354415}
{"instruction": "def k_closest_numbers(arr, k):\n    \"\"\"Given an array of integers and an integer k, \n    return the k closest numbers to the median in the array.\n\n    >>> k_closest_numbers([7,1,2,3,5,6], 3)\n    [3, 2, 5]\n    >>> k_closest_numbers([5,3,2,4,8,7], 2)\n    [4, 3]\n    \"\"\"", "output": "pass", "id": 259, "avg_similarity_score": 0.2369470172794895}
{"instruction": "def max_recur(arr, n):\n    \"\"\" Find the maximum sum of contiguous subarray of size n \n    from given array. \n\n    >>> max_recur([1,5,5,2,3,-2], 3)\n    13\n    Explanation: The subarray with the maximum sum of [5, 5, 2] = 12\n    >>> max_recur([1,5,5,2,3,-2], 5)\n    12\n    \"\"\"", "output": "pass", "id": 260, "avg_similarity_score": 0.1794686597774861}
{"instruction": "def find_permutations(arr):\n    \"\"\" Given an array of numbers, find all permutations of its elements.\n\n    >>> find_permutations([1,2,3])\n    [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\n    >>> find_permutations([1,2,3,4])\n    [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2],\n    [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1], \n    [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [3,4,2,1],\n    [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]]\n    \"\"\"", "output": "pass", "id": 261, "avg_similarity_score": 0.20248567088909625}
{"instruction": "def two_sum_X_k(nums,X):\n    \"\"\"Given an array of integers nums and an integer X, determine two numbers in nums that sum up to X.\n    Return a couple of indices that corresponds to those numbers.\n\n    >>> two_sum_X_k([2,7,11,15],9)\n    (0, 1)\n    >>> two_sum_X_k([2,3,4,5],6)\n    (1, 2)\n    \"\"\"", "output": "pass", "id": 262, "avg_similarity_score": 0.18581901834911654}
{"instruction": "def compute_sq_diff(nums):\n    \"\"\"Given an array of integers, return the array containing cumulative sum of squares of all elements in the array.\n\n    >>> compute_sq_diff([3,2,7])\n    [9, 11, 40]\n    >>> compute_sq_diff([1,2,3,4])\n    [1, 5, 14, 30]\n    \"\"\"", "output": "pass", "id": 263, "avg_similarity_score": 0.24267134898970333}
{"instruction": "def count_Unique_Pairs(nums,k):\n    \"\"\"Given an array of integers nums and an integer k, count the number of unique pairs in nums that add up to k.\n\n    >>> count_Unique_Pairs([1,2,3,4,3], 5)\n    4\n    >>> count_Unique_Pairs([1,2,7,9], 10)\n    2\n    \"\"\"", "output": "pass", "id": 264, "avg_similarity_score": 0.21709762082061634}
{"instruction": "def longest_increasing_subsequence(nums):\n    \"\"\" Given an array of integers, find the longest increasing subsequence in the array.\n    Return the length of the resulting subsequence.\n\n    >>> longest_increasing_subsequence([10,9,2,5,3,4])\n    4\n    >>> longest_increasing_subsequence([3,4,2,2,7])\n    3\n    \"\"\"", "output": "pass", "id": 265, "avg_similarity_score": 0.23595957606166487}
{"instruction": "def largest_int_power_of_2_not_exceeding(n):\n    \"\"\"Given a non-negative integer n, return the largest power of two not exceeding n.\n\n    >>> largest_int_power_of_2_not_exceeding(6)\n    4\n    >>> largest_int_power_of_2_not_exceeding(10)\n    8\n    \"\"\"", "output": "pass", "id": 266, "avg_similarity_score": 0.19754996905662556}
{"instruction": "def group_by_3s_Using_Stack(nums):\n    \"\"\"Given an array of integers, group them into subsequences of three using a stack.\n    Return the list of subsequences.\n\n    >>> group_by_3s_Using_Stack([1,2,3,4,5,7,8,9])\n    [[1, 2, 3], [4, 5], [7, 8, 9]]\n    >>> group_by_3s_Using_Stack([3,1,2,4,5,6,7,8])\n    [[3, 1, 2], [4, 5, 6], [7, 8]]\n    \"\"\"", "output": "pass", "id": 267, "avg_similarity_score": 0.20928010140395942}
{"instruction": "def transpose(matrix):\n    \"\"\"Given a matrix represented as a list of lists, return its transposed matrix.\n\n    >>> transpose([[1,2,3], [4,5,6]])\n    [[1, 4], [2, 5], [3, 6]]\n    >>> transpose([[1,2], [3,4], [5,6]])\n    [[1, 3, 5], [2, 4, 6]]\n    \"\"\"", "output": "pass", "id": 268, "avg_similarity_score": 0.18198015085216826}
{"instruction": "def minimum_Cuts_From_Rooftop(height):\n    \"\"\"Given an array of integers height representing the height of the rooftop, return\n    the minimum number of allowed cuts so that all the parts have the same heights.\n\n    >>> minimum_Cuts_From_Rooftop([3, 4, 2, 3, 2, 2, 5, 2])\n    2\n    >>> minimum_Cuts_From_Rooftop([2, 5, 4, 3, 4, 3, 3, 3])\n    4\n    \"\"\"", "output": "pass", "id": 269, "avg_similarity_score": 0.2032990238411392}
{"instruction": "def string_Array_Palindrome_Check(s):\n    \"\"\"Given a string array, check whether or not each string is a palindrome.\n\n    >>> string_Array_Palindrome_Check(['bb', 'madam', 'toyota'])\n    [True, True, False]\n    >>> string_Array_Palindrome_Check(['civic', 'deified', 'doom'])\n    [True, False, False]\n    \"\"\"", "output": "pass", "id": 270, "avg_similarity_score": 0.16662341631006794}
{"instruction": "def contains_string(words, string):\n    \"\"\"\n    Given an array of words and a given string,\n    return true if any word in the array contains the given string,\n    false otherwise.\n\n    >>> contains_string(['cat', 'dog', 'bird'], 'dog')\n    True\n    >>> contains_string(['cat', 'dog', 'bird'], 'go')\n    False\n    >>> contains_string(['door', 'dog', 'move'], 'og')\n    True\n    \"\"\"", "output": "pass", "id": 271, "avg_similarity_score": 0.22342280768907447}
{"instruction": "def is_all_same_string(words):\n    \"\"\"\n    Given an array of words,\n    return true if all words are the same string,\n    false otherwise.\n\n    >>> is_all_same_string([\"cat\", \"cat\", \"cat\"])\n    True\n    >>> is_all_same_string([\"cat\", \"dog\", \"cat\"])\n    False\n    >>> is_all_same_string([\"ABC\", \"ABC\", \"ABC\"])\n    True\n    \"\"\"", "output": "pass", "id": 272, "avg_similarity_score": 0.20311249401240278}
{"instruction": "def two_sum_in_array(nums, target):\n    \"\"\"\n    Given an array of integers nums and an integer target,\n    return a boolean value indicating whether any two integers\n    that sum to target can be found in the given array.\n\n    >>> two_sum_in_array([1,2,3], 5) \n    True\n    >>> two_sum_in_array([1,2,4], 3)\n    True\n    >>> two_sum_in_array([2,1,3], 5)\n    False\n    \"\"\"", "output": "pass", "id": 273, "avg_similarity_score": 0.20646156333411939}
{"instruction": "def unique_char_in_string(s):\n    \"\"\"\n    Given a string s, find and return the number of unique characters in it.\n\n    >>> unique_char_in_string(\"yippee\")\n    5\n    >>> unique_char_in_string(\"hello\")\n    4\n    >>> unique_char_in_string(\"Mississippi\")\n    4\n    \"\"\"", "output": "pass", "id": 274, "avg_similarity_score": 0.24480628536473367}
{"instruction": "def majority_element(nums):\n    \"\"\"\n    Given an array of size n, find the majority element. \n    The majority element is the element that appears more \n    than \u230a n/2 \u230b times.\n\n    >>> majority_element([3, 2, 3])\n    3\n    >>> majority_element([2, 2, 1, 1, 1, 2, 2])\n    2\n    >>> majority_element([1, 2, 2, 1, 2])\n    2\n    \"\"\"", "output": "pass", "id": 275, "avg_similarity_score": 0.19528107824662216}
{"instruction": "def two_strings_anagrams(s, t):\n    \"\"\"\n    Check whether two given strings, s and t, are anagrams of each other.\n    Two strings are anagrams if they comprise the same characters,\n    but might be in a different order.\n\n    >>> two_strings_anagrams(\"abcdee\", \"ebcdae\")\n    True\n    >>> two_strings_anagrams(\"abcdee\", \"abcde\")\n    False\n    >>> two_strings_anagrams(\"zoo\", \"ooz\")\n    True\n    \"\"\"", "output": "pass", "id": 276, "avg_similarity_score": 0.15618786663360504}
{"instruction": "def min_coin_change(coins, amount):\n    \"\"\"\n    Given a list of coins and an amount, \n    calculate the minimum number of coins needed to make up that amount. \n    You may assume you have an infinite number of each kind of coin.\n\n    >>> min_coin_change([1, 2, 5], 11)\n    3\n    >>> min_coin_change([2, 5, 10, 1], 27)\n    4\n    >>> min_coin_change([5, 10, 25], 40)\n    2\n    \"\"\"", "output": "pass", "id": 277, "avg_similarity_score": 0.1713835000208065}
{"instruction": "def check_string_palindrome(s):\n    \"\"\"\n    Check whether a given string is a palindrome.\n    A palindrome is a string that reads the same forward and\n    backward.\n\n    >>> check_string_palindrome(\"aba\")\n    True\n    >>> check_string_palindrome(\"abc\")\n    False\n    >>> check_string_palindrome(\"racecar\")\n    True\n    \"\"\"", "output": "pass", "id": 278, "avg_similarity_score": 0.17394422658880904}
{"instruction": "def remove_adjacent_element(nums):\n    \"\"\"\n    Given an array of elements, remove adjacent elements \n    which occur more than once consecutively.\n    \n    >>> remove_adjacent_element([2, 2, 3, 4, 4])\n    [2, 3, 4]\n    >>> remove_adjacent_element([1,1,2,3,3])\n    [2]\n    >>> remove_adjacent_element([1,1,2,2,3,3,4,5,5,5])\n    [1,2,3,4,5]\n    \"\"\"", "output": "pass", "id": 279, "avg_similarity_score": 0.15644357095880335}
{"instruction": "def find_min_difference(nums1, nums2):\n    \"\"\" Given two sorted arrays, find the minimum difference between two \n    elements in the given arrays.\n\n    >>> find_min_difference([5, 8, 11], [6, 7, 9])\n    1\n    >>> find_min_difference([9, 13], [7, 10])\n    1\n    \"\"\"", "output": "pass", "id": 280, "avg_similarity_score": 0.17910969439234461}
{"instruction": "def find_most_common_elem(nums):\n    \"\"\" Given an array of integers, find the most popular element. The \n    element should appear more than half of the time in the given array.\n\n    >>> find_most_common_elem([2,1,4,4,5,4])\n    4\n    >>> find_most_common_elem([3,2,1])\n    -1\n    \"\"\"", "output": "pass", "id": 281, "avg_similarity_score": 0.2204396878704105}
{"instruction": "def reverse_word_in_sentence(sentence):\n    \"\"\" Given a sentence, reverse the order of each word in the given \n    sentence. \n\n    >>> reverse_word_in_sentence('I am running')\n    'running am I'\n    >>> reverse_word_in_sentence('Learning is great')\n    'great is Learning'\n    \"\"\"", "output": "pass", "id": 282, "avg_similarity_score": 0.21937483249742867}
{"instruction": "def generate_combinations(n: int, k: int):\n    \"\"\" From a set of integers 1 ... n, generate combinations of length k.\n    \n    >>> generate_combinations(4, 2)\n    [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n    >>> generate_combinations(3, 3)\n    [(1, 2, 3)]\n    \"\"\"", "output": "pass", "id": 283, "avg_similarity_score": 0.16403966766438582}
{"instruction": "def max_length_cont_subarray(nums: List[int]):\n    \"\"\" Given an array of integers, find the maximum length of \n    continuous sub-array such that the sum of the sub-array is \n    maximum.\n\n    >>> max_length_cont_subarray([-3, 2, 3, -2])\n    3\n    >>> max_length_cont_subarray([1, -2, 2, 3, -4])\n    4\n    \"\"\"", "output": "pass", "id": 284, "avg_similarity_score": 0.23225084980250685}
{"instruction": "def move_zeros_to_end(nums: List[int]):\n    \"\"\" Given an array of integers, move all zeros to the end of\n    the array while maintaining the relative order of all other elements in the array.\n\n    >>> move_zeros_to_end([2, 0, 3, 0, 4])\n    [2, 3, 4, 0, 0]\n    >>> move_zeros_to_end([1,2,3])\n    [1,2,3]\n    \"\"\"", "output": "pass", "id": 285, "avg_similarity_score": 0.2230225426538558}
{"instruction": "def change_seq_into_array(string):\n    \"\"\" Given a string composed of 0s and 1s, return an array whose elements \n    are '0' or '1' specified by the string. \n\n    >>> change_seq_into_array('00101')\n    ['0', '0', '1', '0', '1']\n    >>> change_seq_into_array('0010')\n    ['0','0','1','0']\n    \"\"\"", "output": "pass", "id": 286, "avg_similarity_score": 0.19704665193728033}
{"instruction": "def find_majority_nums(nums: List[int]):\n    \"\"\" Given an array of integers, find the majority element which appears\n    more than n/2 times in the array. \n\n    >>> find_majority_nums([2,3,2,0,2,3,2])\n    2\n    >>> find_majority_nums([1,2,2,2])\n    2\n    \"\"\"", "output": "pass", "id": 287, "avg_similarity_score": 0.2264696029980833}
{"instruction": "def add_new_list_elements(originalList, addList):\n    \"\"\" Given two lists, generate a new list which contains elements from\n    the two given lists. Duplicated elements should be removed. \n\n    >>> add_new_list_elements([1,2,3],[2,3,4])\n    [1,2,3,4]\n    >>> add_new_list_elements([0,2,4], [2,3,4])\n    [0,2,3,4]\n    \"\"\"", "output": "pass", "id": 288, "avg_similarity_score": 0.16262123667280814}
{"instruction": "def median(nums):\n    \"\"\" Given a list of numbers, return the median value.\n    The median is the middle value in a sorted list. If there are even\n    numbers in the list, then take the average of the two middle values.\n\n    >>> median([2, 4, 9, 11])\n    8.5\n    >>> median([1, 2, 3, 4])\n    2.5\n    \"\"\"", "output": "pass", "id": 289, "avg_similarity_score": 0.20910621781161023}
{"instruction": "def all_anagrams(s):\n    \"\"\" Return a list of all anagrams of the given string.\n    An anagram of a string is a rearrangement of its characters\n    to form a new string.\n\n    >>> all_anagrams(\"abc\")\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n    >>> all_anagrams(\"hello\")\n    [\"ehllo\", \"ellho\", \"helol\", \"hell\", ...]\n    \"\"\"", "output": "pass", "id": 290, "avg_similarity_score": 0.2035879383938913}
{"instruction": "def powerset(s):\n    \"\"\" Generate the power set of the given set s.\n    The power set is the set of all subsets of a given set, including the empty set and\n    the set itself.\n\n    >>> powerset({1, 3, 5})\n    {(), (1,), (3,), (5,), (1, 3), (1, 5), (3, 5), (1, 3, 5)}\n    \"\"\"", "output": "pass", "id": 291, "avg_similarity_score": 0.18215315770676704}
{"instruction": "def gcd_pairs(arr):\n    \"\"\" Given an array of integers \"arr\", find the array's greatest common divisor.\n    The greatest common divisor is the largest number that divides all the elements of the array evenly.\n    \n    >>> gcd_pairs([4, 6, 8])\n    2\n    >>> gcd_pairs([5, 10, 15])\n    5\n    \"\"\"", "output": "pass", "id": 292, "avg_similarity_score": 0.21433749863163404}
{"instruction": "def is_permutation(s1, s2):\n    \"\"\" Check if two strings are permutations of each other.\n    Two strings are permutations of each other if they contain the same characters in the same frequency.\n\n    >>> is_permutation(\"aab\", \"aba\")\n    True\n    >>> is_permutation(\"dog\", \"cat\")\n    False\n    \"\"\"", "output": "pass", "id": 293, "avg_similarity_score": 0.15116098312048964}
{"instruction": "def max_sum_subarray(arr):\n    \"\"\" Given an array of integers, find the maximum subarray sum.\n    The maximum subarray sum can be defined as the sum of the elements of the subarray that contains\n    the largest sum of its elements.\n\n    >>> max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3])\n    7\n    >>> max_sum_subarray([-10, -1, -12, -15, -6])\n    -1\n    \"\"\"", "output": "pass", "id": 294, "avg_similarity_score": 0.20490337484918034}
{"instruction": "def compare_arrays(arr1, arr2):\n    \"\"\" Given two arrays of the same size, compare their elements.\n    Return true if the two arrays are equal, false otherwise.\n\n    >>> compare_arrays([1,2,3], [1,2,3])\n    True\n    >>> compare_arrays([1,2], [3,4])\n    False\n    \"\"\"", "output": "pass", "id": 295, "avg_similarity_score": 0.17439380327484405}
{"instruction": "def maximum_disjoint_subsets(arr):\n    \"\"\" Given an array of integers, find the size of the largest disjoint set.\n    The disjoint set is the set of elements of the array which have no common element.\n    \n    >>> maximum_disjoint_subsets([1,2,3,4,5,6,7])\n    7\n    >>> maximum_disjoint_subsets([1,2,3,4,5,6,7,8,10,3])\n    5\n    \"\"\"", "output": "pass", "id": 296, "avg_similarity_score": 0.2128438886923056}
{"instruction": "def rotate_array(arr, k):\n    \"\"\" Given an array of integers and a number k, rotate the elements of the array to the right by k.\n\n    >>> rotate_array([1,2,3,4,5], 2)\n    [4,5,1,2,3]\n    >>> rotate_array([7,2,1,8,3], 3)\n    [1,8,3,7,2]\n    \"\"\"", "output": "pass", "id": 297, "avg_similarity_score": 0.2521994478343897}
{"instruction": "def combined_sort(arr1, arr2):\n    \"\"\" Given two arrays of integers, combine them to form a sorted array.\n\n    >>> combined_sort([3,2,5], [4,1,6])\n    [1,2,3,4,5,6]\n    >>> combined_sort([8,2], [1,15])\n    [1,2,8,15]\n    \"\"\"", "output": "pass", "id": 298, "avg_similarity_score": 0.16656265882085752}
{"instruction": "def rev_words(sent):\n    \"\"\" Write a function to reverse a given sentence with words separated by space.\n    Also remove all punctuation marks from the sentence.\n\n    >>> rev_words(\"Hello there!\")\n    \"there Hello\"\n    >>> rev_words(\"It's a beautiful day.\")\n    \"day beautiful a Its\"\n    >>> rev_words(\"I'm exhausted.\")\n    \"exhausted Im\"\n    \"\"\"", "output": "pass", "id": 299, "avg_similarity_score": 0.1433791848962999}
{"instruction": "def pivot_index(nums):\n    \"\"\" Given an array of integers, return the index of the pivot element,\n    which is the element in the array that is greater than all to its left and\n    less than all to its right. If there are multiple pivot elements, \n    return the rightmost one. If no pivot element exists, return -1.\n\n    >>> pivot_index([1,2,3])\n    2\n    >>> pivot_index([2,5,3,4,6,7])\n    4\n    >>> pivot_index([5,4,3,2,1])\n    -1\n    \"\"\"", "output": "pass", "id": 300, "avg_similarity_score": 0.1862332294034792}
{"instruction": "def up_to_next_power(number):\n    \"\"\"Given an integer number, return the smallest integer bigger than \n    the given number that is a power of 2.\n\n    >>> up_to_next_power(15)\n    16\n    >>>up_to_next_power(16)\n    32\n    >>>up_to_next_power(7)\n    8\n    \"\"\"", "output": "pass", "id": 301, "avg_similarity_score": 0.2004707496694895}
{"instruction": "def find_gcd(a, b):\n    \"\"\"Given two positive integers a and b, return the greatest common divisor\n    of the two numbers.\n\n    >>> find_gcd(20, 12)\n    4\n    >>> find_gcd(15, 30)\n    15\n    >>> find_gcd(18, 81)\n    9\n    \"\"\"", "output": "pass", "id": 302, "avg_similarity_score": 0.23254817946935974}
{"instruction": "def remove_duplicate(str_in):\n    \"\"\"Given a string containing duplicate characters, remove all the duplicate\n    occurrences of characters from the string and return the string.\n\n    >>> remove_duplicate(\"atoztyazon\")\n    \"atozyg\"\n    >>> remove_duplicate(\"abbccccdd\")\n    \"abcd\"\n    >>> remove_duplicate(\"abcdef\")\n    \"abcdef\"\n    \"\"\"", "output": "pass", "id": 303, "avg_similarity_score": 0.21507224046911588}
{"instruction": "def unique_occurance(arr):\n    \"\"\"Given an array arr of non-negative integers, return the count \n    of unique values in the array.\n\n    >>> unique_occurance([1, 2, 2, 2])\n    2\n    >>> unique_occurance([1, 1, 5, 3, 5])\n    3\n    >>> unique_occurance([2, 3, 4, 5, 4, 4])\n    4\n    \"\"\"", "output": "pass", "id": 304, "avg_similarity_score": 0.2557625743663953}
{"instruction": "def max_subarray_sum(arr):\n    \"\"\"Given an array-like object containing positive and negative integers,\n    find the sum of the contiguous subarray with the greatest sum.\n\n    >>> max_subarray_sum([-1, 2, 4, -3, 5, 2, -5, 2])\n    8\n    Explanation: The subarray [2, 4, -3, 5, 2] has the greatest sum, which is 8.\n    >>> max_subarray_sum([-2, -3, 4, -1, -2, 1, 5, -3])\n    7\n    Explanation: The subarray [4, -1, -2, 1, 5] has the greatest sum, which is 7.\n    \"\"\"", "output": "pass", "id": 305, "avg_similarity_score": 0.21518132481725802}
{"instruction": "def count_words(s):\n    \"\"\"Write a function to take a string and count all the distinct \n    words in the string and return a count of each of the distinct words.\n\n    >>> count_words(\"New to Python or choosing between Python 2 and 3? Read\n    Python 2 or Python 3.\")\n    {'New': 1, 'Python': 3, 'Read': 1, '2': 2, '3': 2, 'and': 1, 'or': 2, 'choosing': 1, 'between': 1 }\n    >>> count_words(\"Python is a programming language. It is used in many\n    applications such as web and software development.\")\n    {'It': 1, 'Python': 1, 'web': 1, 'used': 1, 'software': 1, 'many': 1, 'language': 1, 'applications': 1,\n    'is': 1, 'a': 1, 'development': 1, 'such': 1, 'as': 1, 'programming': 1}\n    \"\"\"", "output": "pass", "id": 306, "avg_similarity_score": 0.2029984652234364}
{"instruction": "def compare_times(time1, time2):\n    \"\"\"Given two strings representing time in HH:MM format, \n    return 1 if time1 is greater than time2, -1 if time1 \n    is less than time2, and 0 if they are equal.\n\n    >>> compare_times(\"12:01\", \"10:20\")\n    1\n    >>> compare_times(\"04:45\", \"07:55\")\n    -1\n    >>> compare_times(\"11:12\", \"11:12\")\n    0\n    \"\"\"", "output": "pass", "id": 307, "avg_similarity_score": 0.1164316204330234}
{"instruction": "def maximal_rect(matrix: list[list[int]]) -> int:\n    \"\"\" Find maximum area of a given rectanguler matrix.\n\n    >>> maximal_rect([[1, 0, 1, 0, 0],\n                    [1, 0, 1, 1, 1],\n                    [1, 1, 1, 1, 1],\n                    [1, 0, 0, 1, 0]])\n    6\n    >>> maximal_rect([[0, 0, 0],\n                    [0, 0, 0],\n                    [0, 0, 0]])\n    0\n    \"\"\"", "output": "pass", "id": 308, "avg_similarity_score": 0.15481841831895007}
{"instruction": "def noun_adjective(listOfWords: list[str]) -> str:\n    \"\"\" Given a list of words, generate a sentence that starts with a noun and followed by appropriate adjective.\n\n    >>> noun_adjective(['cat', 'sleepy', 'ball', 'tiny'])\n    'Cat is sleepy and ball is tiny.'\n    \"\"\"", "output": "pass", "id": 309, "avg_similarity_score": 0.1759490446646087}
{"instruction": "def prime_palindrome_nums(limit: int):\n    \"\"\" Return all prime palindrome numbers up to a given limit.\n\n    >>> prime_palindrome_nums(100)\n    [2, 3, 5, 7, 11, 101]\n    \"\"\"", "output": "pass", "id": 310, "avg_similarity_score": 0.13712725686511307}
{"instruction": "def remap_list(myList: list[int], myDict: dict):\n    \"\"\" Remap a given list of integers with the values inside a provided dictionary.\n\n    >>> remap_list([1, 2, 3, 4], {1: 5, 2: 6})\n    [5, 6, 3, 4]\n    \"\"\"", "output": "pass", "id": 311, "avg_similarity_score": 0.19287025991416132}
{"instruction": "def vect_sum(p: tuple[int], q: tuple[int]) -> tuple[int]:\n    \"\"\" Calculate the sum of two 2D vectors.\n\n    >>> vect_sum((1, 2), (3, 4))\n    (4, 6)\n    \"\"\"", "output": "pass", "id": 312, "avg_similarity_score": 0.13774215225073014}
{"instruction": "def list_replace(str_list: list[str], old: str, new: str):\n    \"\"\" Replace a given old string with a new string in the provided list of strings.\n\n    >>> list_replace(['red', 'green', 'blue'], 'green', 'yellow')\n    ['red', 'yellow', 'blue']\n    \"\"\"", "output": "pass", "id": 313, "avg_similarity_score": 0.18481968389889702}
{"instruction": "def is_permutation(str1: str, str2: str) -> bool:\n    \"\"\" Check if the given two strings are permutations of each other.\n\n    >>> is_permutation('aba', 'ab%')\n    False\n    >>> is_permutation('aba', 'aab')\n    True\n    \"\"\"", "output": "pass", "id": 314, "avg_similarity_score": 0.15707706578863656}
{"instruction": "def fibonacci_sum(limit: int):\n    \"\"\" Calculate the sum of Fibonacci sequence numbers up to a given limit.\n\n    >>> fibonacci_sum(7)\n    33\n    \"\"\"", "output": "pass", "id": 315, "avg_similarity_score": 0.16727889879998808}
{"instruction": "def prefixes_list(words: list[str]) -> list[str]:\n    \"\"\" Generate a list of all prefixes present in a given list of words.\n\n    >>> prefixes_list(['cat', 'cats', 'sink', 'bag'])\n    ['c', 'ca', 's', 'si', 'b']\n    \"\"\"", "output": "pass", "id": 316, "avg_similarity_score": 0.1907499729412858}
{"instruction": "def top_3_largest(myList: list[int]) -> list[int]: \n    \"\"\" Return a list with the 3 highest values from a given list.\n\n    >>> top_3_largest([1, 3, 6, 5, 4, 10])\n    [10, 6, 5]\n    >>> top_3_largest([2, 3, 8, 4])\n    [8, 4, 3]\n    \"\"\"", "output": "pass", "id": 317, "avg_similarity_score": 0.1755349801189405}
{"instruction": "def get_substring(s: str, k: int) -> str:\n    \"\"\" Given a non-empty string s and a positive integer k,\n    return the length k substring of s, starting at the beginning. \n    If the length of s is less than k, return the entire string.\n\n    >>> get_substring(\"abcdef\", 3)\n    \"abc\"\n    >>> get_substring(\"ab\", 10)\n    \"ab\"\n    \"\"\"", "output": "pass", "id": 318, "avg_similarity_score": 0.20527629358393917}
{"instruction": "def remove_invalid_parentheses(s: str) -> List[str]:\n    \"\"\" Given a string s of parentheses, remove as many invalid parentheses as \n    possible until the resulting string is valid.\n    Return all possible results in a list.\n\n    >>> remove_invalid_parentheses(\"()())()\")\n    [\"(())()\", \"()()()\"]\n    >>> remove_invalid_parentheses(\"(a)())()\")\n    [\"(a)()()\", \"(a())()\"]\n    \"\"\"", "output": "pass", "id": 319, "avg_similarity_score": 0.1870819384002213}
{"instruction": "def valid_triangle(nums: List[int]) -> bool:\n    \"\"\" Given an array nums of length 3, \n    determine if a triangle can be formed with the values in nums.\n\n    >>> valid_triangle([2, 3, 5])\n    True\n    >>> valid_triangle([2, 4, 3])\n    True\n    >>> valid_triangle([3, 5, 10])\n    False\n    \"\"\"", "output": "pass", "id": 320, "avg_similarity_score": 0.20423042466501604}
{"instruction": "def make_largest_values(nums: List[int], k: int) -> List[int]:\n    \"\"\" Given an array nums of integers and an integer k,\n    replace at most k elements of nums with the largest possible values to achieve the largest possible sum.\n    Return the resulting array. \n\n    >>> make_largest_values([1,2,3,4], 3)\n    [4,4,4,4]\n    >>> make_largest_values([9,4,10,1], 2)\n    [10,10,10,1]\n    >>> make_largest_values([17,10,20,33,9], 3)\n    [33,33,33,33,9]\n    \"\"\"", "output": "pass", "id": 321, "avg_similarity_score": 0.19727119198916562}
{"instruction": "def longest_sublist(data: List[int]) -> List[int]:\n    \"\"\" Given an array of non-negative integers data,\n    return the longest sublist of data consistent with the following conditions:\n    the elements in the sublist are in non-decreasing order, the sum of the elements in the sublist is less than or equal to 22, \n    and the number of elements in the sublist is as large as possible.\n\n    >>> longest_sublist([1,3,2,16,11,7,9,4])\n    [1,2,7,9]\n    >>> longest_sublist([1,4,6,8,2,10])\n    [1,2,4,6,8]\n    \"\"\"", "output": "pass", "id": 322, "avg_similarity_score": 0.1833169158475487}
{"instruction": "def unique_word_tree(words: List[str]) -> List[str]:\n    \"\"\" Given a list of words words,\n    construct a tree where the nodes represent the unique words in words. \n    For each word, the parent is the longest common prefix of that word and its predecessor in words. \n    Return the list of nodes in post order.\n\n    >>> unique_word_tree([\"cat\",\"cats\",\"dog\",\"castle\",\"cattle\"])\n    [\"cat\",\"cats\",\"tle\",\"castle\",\"tte\",\"cattle\",\"og\",\"dog\"]\n    >>> unique_word_tree([\"a\",\"ab\",\"acb\",\"accb\"])\n    [\"a\",\"b\",\"cb\",\"acb\",\"ccb\",\"accb\"]\n    \"\"\"", "output": "pass", "id": 323, "avg_similarity_score": 0.18739984515876457}
{"instruction": "def find_non_intersecting_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of pairs intervals, \n    where each pair represents an interval on the real number line \n    (each interval is described by its two endpoints)\n    return the intervals in the list that do not intersect with any other interval in the list.\n\n    >>> find_non_intersecting_intervals([[1,4],[2,6],[9,12],[10,14],[18,22]])\n    [[1,4],[18,22]]\n    >>> find_non_intersecting_intervals([[1,7],[3,9],[4,12],[13,15],[20,22],[25,30]])\n    [[1,7],[20,22],[25,30]]\n    \"\"\"", "output": "pass", "id": 324, "avg_similarity_score": 0.17618490608301815}
{"instruction": "def can_serve_all_people(n, s: List[int]) -> bool:\n    \"\"\" You are given an int n representing the number of people to serve,\n    and a list s containing the serving size of each dish.\n    Return True if it is possible to serve all n people using the dishes in s,\n    where each person can have at most one dish and the sum of the serving sizes is equal to n.\n\n    >>> can_serve_all_people(10, [2,4,3])\n    True\n    >>> can_serve_all_people(7, [2,3,5,6])\n    False\n    \"\"\"", "output": "pass", "id": 325, "avg_similarity_score": 0.1750724135353965}
{"instruction": "def find_combinations(arr: List[int], k: int) -> List[List[int]]:\n    \"\"\" Given an array of non-negative integers arr and an integer k, \n    return all unique combinations of k elements in arr that sum to 0.\n\n    >>> find_combinations([1,3,-1,4], 2)\n    [[-1, 4], [1, -3]]\n    >>> find_combinations([2,3,1,-2,5], 3)\n    [[2,-2, 5], [3, -1, -2], [1, 2, -3]]\n    \"\"\"", "output": "pass", "id": 326, "avg_similarity_score": 0.21220555993938742}
{"instruction": "def find_missing_element(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\" Given two arrays nums1 and nums2 of the same size, \n    return the single missing element in nums2 that appears in nums1. \n    Assume nums1 and nums2 contain only distinct integers from the range [1, n]. \n\n    >>> find_missing_element([4,7,1,2], [7,4,1])\n    2\n    >>> find_missing_element([3,5,6], [3,6,5,4])\n    4\n    \"\"\"", "output": "pass", "id": 327, "avg_similarity_score": 0.1742452968729062}
{"instruction": "def median_even_list(arr):\n    \"\"\"\n    Given a list of integers arr, return the median value. \n    If the length of arr is an even number, the median of arr is the \n    average of the two middle values of arr.\n\n    >>> median_even_list([2,7,6,5,1])\n    4.0\n    >>> median_even_list([1,2,3,4,5,6,7,8,9])\n    5.0\n    >>> median_even_list([-5,-1,2])\n    0.0\n    \"\"\"", "output": "pass", "id": 328, "avg_similarity_score": 0.22225251023463516}
{"instruction": "def palindrome_num(n):\n    \"\"\"\n    Given an integer n, a positive integer is called palindrome if is the same when \n    its digits are reversed. Return a boolean of whether or not the given number n \n    is a palindrome. \n\n    >>> palindrome_num(121)\n    True\n    >>> palindrome_num(123456)\n    False\n    \"\"\"", "output": "pass", "id": 329, "avg_similarity_score": 0.19119999904404017}
{"instruction": "def element_freq(text):\n    \"\"\"\n    Return a dictionary with the frequency of each element in the text. \n    Each element is either a lower-case letter or a white space. \n\n    >>> element_freq(\"alice loves bob\")\n    {'a': 2, 'l': 2, 'i': 1, 'c': 1, 'e': 2, ' ': 2, 'v': 1, 'o': 2, 'b': 2}\n    >>> element_freq(\"it's a wonderful day\")\n    {'i': 1, 't': 1, \"'\": 1, 's': 1, ' ': 4, 'a': 1, 'w': 1, 'o': 2, 'n': 2, 'd': 1, 'e': 1, 'r': 1, 'f': 1, 'u': 1, 'l': 1, 'y': 1}\n    \"\"\"", "output": "pass", "id": 330, "avg_similarity_score": 0.1739474142070514}
{"instruction": "def count_substr(text, sub_str):\n    \"\"\"\n    Return the count of number of times the given sub string occurs in text.\n\n    >>> count_substr(\"I love coding in Python\", \"Python\")\n    1\n    >>> count_substr(\"Learning is fun and enjoyable\", \"ing\")\n    3\n    >>> count_substr(\"Coding is so much more fun with friends\", \"fun\")\n    2\n    \"\"\"", "output": "pass", "id": 331, "avg_similarity_score": 0.1882100486020606}
{"instruction": "def is_prime(n):\n    \"\"\"\n    Given an integer n, return a boolean indicating whether or not the number is prime.\n\n    >>> is_prime(17)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(18)\n    False\n    \"\"\"", "output": "pass", "id": 332, "avg_similarity_score": 0.19595001959147818}
{"instruction": "def replace_vowels(text):\n    \"\"\"\n    Replace all vowels in the given text with '_'.\n\n    >>> replace_vowels('Hello World')\n    'H_ll_ W_rld'\n    >>> replace_vowels('Apple juice')\n    '_ppl_ j___'\n    \"\"\"", "output": "pass", "id": 333, "avg_similarity_score": 0.13583180585716842}
{"instruction": "def multiply_list(arr, n):\n    \"\"\" \n    Given a list of integers, arr, and an integer, n, return the list containing each element of arr multiplied by n. \n\n    >>> multiply_list([1,2,3,4], 3)\n    [3, 6, 9, 12]\n    >>> multiply_list([7,8,9,10], 5)\n    [35, 40, 45, 50]\n    \"\"\"", "output": "pass", "id": 334, "avg_similarity_score": 0.23631470792312217}
{"instruction": "def anagrams(str1, str2):\n    \"\"\"\n    Given two strings, str1 and str2, determine whether or not they are anagrams of each other. \n    An anagram is when all the characters in one string are rearranged to create another string. \n    Return a boolean indicating whether or not the strings are anagrams.\n\n    >>> anagrams('yes', 'esY')\n    True\n    >>> anagrams('abcdef', 'ghijkl')\n    False\n    >>> anagrams('code', 'ecod')\n    True\n    \"\"\"", "output": "pass", "id": 335, "avg_similarity_score": 0.15911748399575174}
{"instruction": "def greatest_common_factor(n1, n2):\n    \"\"\"\n    Given two positive integers, n1 and n2, return the greatest common factor (GCF) of these numbers. \n    Note that the GCF can be determined soley through prime factorization.\n\n    >>> greatest_common_factor(6, 8)\n    2\n    >>> greatest_common_factor(12, 15)\n    3\n    >>> greatest_common_factor(25, 30) \n    5\n    \"\"\"", "output": "pass", "id": 336, "avg_similarity_score": 0.1692218256066967}
{"instruction": "def max_adjacents(arr):\n    \"\"\" \n    Given an array of integers, return the maximum sum of adjacent numbers. \n\n    >>> max_adjacents([2, 3, 4, 7, 5])\n    11\n    (4 + 7)\n    >>> max_adjacents([-1, 2, 8, -9, 7, 0, -3])\n    7\n    (2 + 8)\n    \"\"\"", "output": "pass", "id": 337, "avg_similarity_score": 0.24726787667607883}
{"instruction": "def length_of_substring(s: str) -> int:\n    \"\"\" Given a string s, return the length of the longest substring of s such that the \n    frequency of each letter in the substring is no greater than 2.\n\n    >>> length_of_substring(\"ababb\")\n    4\n    Explanation: The longest substring is \"abab\" whose length is 4. \n    >>> length_of_substring(\"abcabcbb\")\n    3\n    \"\"\"", "output": "pass", "id": 338, "avg_similarity_score": 0.2225275973921681}
{"instruction": "def max_cost_submodular_solution(costs: List[int], weights: List[int], capacity: int) -> int:\n    \"\"\"Given an array costs of length n, weights of length n, and a positive integer capacity k,\n    design an algorithm to find the maximum cost submodular solution S that satisfies total weight <= k.\n    A solution S is submodular iff there exists an array C of length n such that\n    S = the set of indices such that for each i, costs[i] + C[i] > C[j] for j != i in S. \n\n    >>> max_cost_submodular_solution([2,5,3,7,4], [1,3,1,4,2], 9)\n    16\n    Explanation: payoff = max_cost_submodular_solution, choose set {0, 1, 3, 4},\n    total_weight = 1 + 3 + 4 + 2 = 10 <= 9, total_cost = 2 + 5 + 7 + 4 = 16.\n    >>> max_cost_submodular_solution([1,2,3], [2,4,6], 12)\n    9\n    >>> max_cost_submodular_solution([1,2,3], [2,4,6], 5)\n    0\n    \"\"\"", "output": "pass", "id": 339, "avg_similarity_score": 0.14654585155010727}
{"instruction": "def subsequence_sum_two_arrays(arr1: List[int], arr2: List[int], fb_sum: int) -> bool:\n    \"\"\"Given two non-empty integer arrays arr1 and arr2 of length n and m respectively \n    where each element of arr1 and arr2 is in the range (1 to m+n). \n    Return true if there exists a sub-sequence of arr1 and arr2 of length n+m with a given \n    sum fb_sum where each element of the sub-sequence is selected from \n    one of the two given arrays respectively.\n\n    >>> subsequence_sum_two_arrays([1, 3, 6], [3, 2, 4], 8)\n    True\n    Explanation: The subsequence [1, 2, 4] has sum 8.\n    >>> subsequence_sum_two_arrays([2, 6, 10], [1, 4, 5], 12)\n    False\n    \"\"\"", "output": "pass", "id": 340, "avg_similarity_score": 0.14872764982844694}
{"instruction": "def longest_sum_natural_sequence(array: List[int]):\n    \"\"\"\n    Given an array of positive integers, return the length which is the longest\n    sequence of consecutive integers in the array whose sum is natural.\n\n    >>> longest_sum_natural_sequence([3, 4, 5, 2, 7, 8, 9, 11])\n    4\n    >>> longest_sum_natural_sequence([3,4,5,6,7])\n    5\n    \"\"\"", "output": "pass", "id": 341, "avg_similarity_score": 0.2395522913554128}
{"instruction": "def denoising_messages(messageLines: List[str], encodingValue: int) -> List[str]:\n    \"\"\"Denoise a list of encoded messages by subtracting the encodingValue to each char in each line.\n    Return a new list of denoised messages.\n\n    >>> denoising_messages([\"Hello world\", \"Lorem ipsum\"], 3)\n    [\"Fcjjm vnkki\", \"Jokdi hnprq\"]\n    \"\"\"", "output": "pass", "id": 342, "avg_similarity_score": 0.17537460503586955}
{"instruction": "def count_distinct_numbers(nums: List[int]) -> int:\n    \"\"\"Given an unsorted array of integers, return the number of distinct numbers\n    present in the array.\n    \n    >>> count_distinct_numbers([7, 8, 10, 7, 10, 6])\n    4\n    \"\"\"", "output": "pass", "id": 343, "avg_similarity_score": 0.265866432317573}
{"instruction": "def minimum_capacity_to_convert_list(lst1: List[int], lst2: List[int]) -> int:\n    \"\"\"Given two list of integers with same length,\n    find the minimum capacity required to convert lst1 to lst2.\n\n    >>> minimum_capacity_to_convert_list([3, 1, 4], [4, 1, 2])\n    2\n    \"\"\"", "output": "pass", "id": 344, "avg_similarity_score": 0.17327600678647412}
{"instruction": "def total_bits_in_num(num: int) -> int:\n    \"\"\"Given a 32-bit integer, return the total number of bits\n    required to represent the integer in binary form.\n\n    >>> total_bits_in_num(89)\n    8\n    \"\"\"", "output": "pass", "id": 345, "avg_similarity_score": 0.2108419983376412}
{"instruction": "def convert_recurrence_relation_to_matrix(relation: str, n: int) -> List[List[int]]:\n    \"\"\"Given a linear recurrence relation of the form a(n) = c + sum(forward) + sum(backward),\n    where forward and backward indices are given, calculate the nth term of the sequence \n    using a 2x2 matrix.\n\n    >>> convert_recurrence_relation_to_matrix(\"a(n)= a(n-1) + a(n-2)\", 5)\n    [[1,1], [1,0]]\n    \"\"\"", "output": "pass", "id": 346, "avg_similarity_score": 0.1782704907472965}
{"instruction": "def prefix_fun(strings: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, return a list with same length such that the corresponding string in \n    the output is longest common prefix among all the strings.\n\n    >>> prefix_fun([\"flower\", \"flow\", \"fleet\"])\n    [\"fl\", \"fl\", \"fle\"]\n    \"\"\"", "output": "pass", "id": 347, "avg_similarity_score": 0.21443624183787402}
{"instruction": "def permutations_from_length(length: int) -> List[List[int]]:\n    \"\"\"Given an integer n, return all possible permutations of the integers 1 \n    to n i.e., of length n.\n\n    >>> permutations_from_length(3)\n    [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\n    \"\"\"", "output": "pass", "id": 348, "avg_similarity_score": 0.19990747784875476}
{"instruction": "def lcs_matrix(X: str, Y: str) -> List[List[int]]:\n    \"\"\"Given two strings X and Y, calculate the Longest Common Subsequence\n    matrix for X and Y.\n\n    >>> lcs_matrix(\"ABCDGH\", \"AEDFHR\")\n    [[0, 0, 0, 0, 0, 0, 0],\n\t[0, 1, 1, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1, 1, 1],\n    [0, 1, 1, 2, 2, 2, 2],\n    [0, 1, 1, 2, 2, 3, 3],\n    [0, 1, 1, 2, 2, 3, 3]]\n    \"\"\"", "output": "pass", "id": 349, "avg_similarity_score": 0.1548543510057743}
{"instruction": "def missing_substring_number(strings):\n    \"\"\" Given an array strings of distinct strings, find and return the \n    number of missing substrings from the strings.\n    A missing substring is a substring of a string that is not present\n    in the array of strings.\n\n    >>> missing_substring_number([\"abcd\",\"xyz\"])\n    14\n    >>> missing_substring_number([\"abcd\"])\n    4\n    >>> missing_substring_number([\"a\", \"b\", \"cd\"])\n    3\n    \"\"\"", "output": "pass", "id": 350, "avg_similarity_score": 0.22838126616738721}
{"instruction": "def count_zigzag_patterns(m, n):\n    \"\"\" Given two positive integers m and n, count the number of \n    distinct zigzag patterns of length m <= n.\n    A zigzag pattern consists of zigzag lines defined as follows: Each line \n    begins at a non-negative integer followed by alternating rise and drop until \n    the maximum is reached.\n\n    >>> count_zigzag_patterns(3, 6)\n    4\n    >>> count_zigzag_patterns(2, 4)\n    2\n    >>> count_zigzag_patterns(3, 4)\n    2\n    \"\"\"", "output": "pass", "id": 351, "avg_similarity_score": 0.15293625144525574}
{"instruction": "def get_minimum_span(arr, k):\n    \"\"\"Given an array arr of sorted integers and an integer k, return\n    the minimum interval span whose sum is greater or equal to k.\n    An interval span is an array-like object containing both its start \n    and end index (inclusive) to represent the sum of the interval. \n\n    >>> get_minimum_span([1,2,3,4,5,6], 7)\n    [1, 3]\n    >>> get_minimum_span([1,3,5,7,9,12], 15)\n    [2, 4]\n    >>> get_minimum_span([1], 1)\n    [0, 0]\n    \"\"\"", "output": "pass", "id": 352, "avg_similarity_score": 0.1805865235562094}
{"instruction": "def minimum_swaps_reduce_diff(arr):\n    \"\"\"Given an array arr of distinct integers, reduce the absolute\n     differences between the elements in the array as much as possible \n     by only performing swap operations of any two elements. \n     Return the minimum number of swaps needed.\n\n    >>> minimum_swaps_reduce_diff([7, 1, 3, 2, 4, 5, 6])\n    3\n    >>> minimum_swaps_reduce_diff([6, 5, 2, 3, 4, 1])\n    5\n    >>> minimum_swaps_reduce_diff([1, 4, 3, 2])\n    0\n    \"\"\"", "output": "pass", "id": 353, "avg_similarity_score": 0.1889289889206544}
{"instruction": "def convert_str(str1, str2):\n    \"\"\" Given two strings str1 and str2, convert str1 into str2 using \n    the lowest possible number of operations by performing one of the \n    following operations for each character: \n    Replace, Insert, Delete, Move.\n\n    >>> convert_str(\"ABCDE\", \"ACD\")\n    2\n    >>> convert_str(\"ABXY\", \"XAYB\")\n    3\n    >>> convert_str(\"ABCDE\", \"ABCDE\")\n    0\n    \"\"\"", "output": "pass", "id": 354, "avg_similarity_score": 0.1565957369406957}
{"instruction": "def wind_chill_alert(templ, windSpeed):\n    \"\"\"Given two positive integers templ and windSpeed, return\n    True if the wind chill is lower than templ, and False otherwise.\n    Wind chill is computed using the following formula:\n    \n    WC = 35.74 + 0.6215T - 35.75V^0.16 + 0.4275TV^0.16,\n    where T is the temperature in Fahrenheit and V is the wind speed.\n\n    >>> wind_chill_alert(60, 30)\n    True\n    >>> wind_chill_alert(65, 10)\n    False\n    >>> wind_chill_alert(60, 15)\n    True\n    \"\"\"", "output": "pass", "id": 355, "avg_similarity_score": 0.12729538471954055}
{"instruction": "def identify_break_symbols(symbols):\n    \"\"\"Given an array of symbols, return an array containing all\n    the break symbols in symbols. A break symbol is a symbol that \n    appear more than once consecutively in the array.\n\n    >>> identify_break_symbols([\"a\", \"b\", \"b\", \"c\"])\n    [\"b\"]\n    >>> identify_break_symbols([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"])\n    [\"a\", \"b\", \"c\"]\n    >>> identify_break_symbols([\"a\", \"b\", \"a\", \"c\"])\n    []\n    \"\"\"", "output": "pass", "id": 356, "avg_similarity_score": 0.19419144321848156}
{"instruction": "def remove_repeats(string):\n    \"\"\"Given a string, remove all consecutive repetitions of characters\n    and return the modified string.\n\n    >>> remove_repeats(\"abcdaa\")\n    \"abcd\"\n    >>> remove_repeats(\"aaabbccac\")\n    \"abc\"\n    >>> remove_repeats(\"a\")\n    \"a\"\n    \"\"\"", "output": "pass", "id": 357, "avg_similarity_score": 0.2125603540381922}
{"instruction": "def sum_minimum_differences(arr):\n    \"\"\"Given an array of positive integers arr, \n    return the sum of the minimum difference between \n    any two elements of the array.\n\n    >>> sum_minimum_differences([1, 5, 2])\n    1\n    >>> sum_minimum_differences([10, 3, 7, 9])\n    10\n    >>> sum_minimum_differences([5, 10, 7])\n    3\n    \"\"\"", "output": "pass", "id": 358, "avg_similarity_score": 0.24618897761941363}
{"instruction": "def two_sum(nums, target):\n    \"\"\"Given an array of distinct integers nums and \n    an integer target, return a pair of indexes of a pair of\n    numbers from nums such that their sum is equal to target.\n\n    >>> two_sum([2, 7, 11, 15], 9)\n    [0, 1]\n    >>> two_sum([2, 3, 8, 11], 10)\n    [1, 2]\n    >>> two_sum([1, 7, 6, 4], 8)\n    [2, 3]\n    \"\"\"", "output": "pass", "id": 359, "avg_similarity_score": 0.20356219306067297}
{"instruction": "def sum_pairs(nums, target_sum):\n    \"\"\" Given an array of integers nums and a target integer target_sum, \n    Find two distinct indices i and j such that the sum num[i] + num[j] is equal to target_sum.\n    Return a list containing them in ascending order. [i,j]. If no such pair exists, return an empty list.\n\n    >>> sum_pairs([2, 5, 11, 15], 20)\n    [5, 11]\n    >>> sum_pairs([2, 5, 5, 15], 10)\n    [2, 8]\n    >>> sum_pairs([2, 5, 5, 15], 12)\n    [2, 5]\n    >>> sum_pairs([2, 5, 5, 15], 13)\n    []\n    \"\"\"", "output": "pass", "id": 360, "avg_similarity_score": 0.16984409967269853}
{"instruction": "def common_prefix(A): \n    \"\"\" Given an array of strings A, find the longest common prefix string amongst an array of strings.  \n    If there is no common prefix, return an empty string \"\". \n\n    >>> common_prefix([\"flower\",\"flow\",\"flight\"])\n    'fl'\n    >>> common_prefix([\"dog\",\"racecar\",\"car\"])\n    ''\n    >>> common_prefix([\"coffee\",\"cat\",\"coat\"])\n    'c'\n    \"\"\"", "output": "pass", "id": 361, "avg_similarity_score": 0.2041284244831458}
{"instruction": "def remove_duplicates(nums):\n    \"\"\" Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\n\n    >>> remove_duplicates([1,1,2])\n    2\n    >>> remove_duplicates([0,0,1,1,1,2,2,3,3,4])\n    5\n    \"\"\"", "output": "pass", "id": 362, "avg_similarity_score": 0.19626331168864083}
{"instruction": "def max_index_dif(arr):\n    \"\"\" Given an array of elements arr, find the maximum j - i such that arr[j] > arr[i].\n\n    >>> max_index_dif([34, 8, 10, 3, 2, 80, 30, 33, 1])\n    6\n    >>> max_index_dif([9, 2, 3, 4, 5, 6, 7, 8, 18, 0])\n    8\n    >>> max_index_dif([1, 2, 3, 4, 5, 6])\n    5\n    \"\"\"", "output": "pass", "id": 363, "avg_similarity_score": 0.18954780139327887}
{"instruction": "def anagrams(s1, s2): \n    \"\"\" Given two strings s1 and s2, check whether two given strings are anagrams or not. \n    An anagram is a type of word play, the result of rearranging the letters of a word or phrase to produce a new word or phrase, using all the original letters exactly once.\n    \n    >>> anagrams(\"heart\", \"earth\")\n    True\n    >>> anagrams(\"silent\", \"listen\")\n    True\n    >>> anagrams(\"hello\", \"goodbye\")\n    False\n    \"\"\"", "output": "pass", "id": 364, "avg_similarity_score": 0.16511617576662221}
{"instruction": "def max_subarray_sum(arr): \n    \"\"\" Given an array of numbers, find the maximum subarray sum of all its contiguous subarrays.\n\n    >>> max_subarray_sum([-2, -3, 4, -1, -2, 1, 5, -3])\n    7\n    \"\"\"", "output": "pass", "id": 365, "avg_similarity_score": 0.22001641469509514}
{"instruction": "def create_prime_sieve(n):\n    \"\"\" Creates and returns a sieve of primes up to a given number n.\n    The sieve should be an array of size n+1 where index i identifies whether the number i is prime (1) or not (0).\n\n    >>> create_prime_sieve(10)\n    [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0]\n    >>> create_prime_sieve(20)\n    [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0]\n    \"\"\"", "output": "pass", "id": 366, "avg_similarity_score": 0.1736614103994111}
{"instruction": "def valid_anagram_pairs(words):\n    \"\"\" Given an array of strings words, find all valid stirng pairs such that the concatenation of the two strings from the pair is an anagram of the other.\n    Return the number of valid pairs.\n\n    >>> valid_anagram_pairs([\"tea\",\"act\",\"ate\"])\n    2\n    >>> valid_anagram_pairs([\"silent\",\"listen\",\"ete\",\"ice\",\"ice\"])\n    4\n    \"\"\"", "output": "pass", "id": 367, "avg_similarity_score": 0.20439875085599876}
{"instruction": "def filp_columns(A):\n    \"\"\" Given an n x m matrix A of 0's and 1's. \n    Flip all the middle columns in the matrix, where the columns upside the middle 1's will become 1's, \n    and the columns downsize the middle 0's will become 0's.\n\n    >>> flip_columns([[1, 0, 0, 1],\n    ...              [1, 0, 0, 1],\n    ...              [1, 0, 0, 1],\n    ...              [1, 0, 0, 1]])\n    [[1, 0, 1, 1],\n     [1, 0, 1, 1],\n     [1, 0, 1, 1],\n     [1, 0, 1, 1]]\n    >>> flip_columns([[1, 0, 0, 0],\n    ...              [1, 0, 0, 0],\n    ...              [1, 1, 0, 0],\n    ...              [1, 0, 0, 0]])\n    [[1, 0, 1, 1],\n     [1, 0, 1, 1],\n     [1, 1, 1, 1],\n     [1, 0, 1, 1]]\n    \"\"\"", "output": "pass", "id": 368, "avg_similarity_score": 0.16074618981249741}
{"instruction": "def first_k_digits_MySqrt(k, num):\n    \"\"\" Return the first k digits of the square root of the given number num.\n\n    >>> first_k_digits_MySqrt(3, 121)\n    10\n    >>> first_k_digits_MySqrt(4, 1000)\n    31\n    >>> first_k_digits_MySqrt(2, 1000000)\n    1000\n    \"\"\"", "output": "pass", "id": 369, "avg_similarity_score": 0.18023201277796938}
{"instruction": "def remove_space_reverse_string(s): \n    \"\"\" Coding Challenge: Remove all white spaces from the given string and reverse it.\n\n    >>> remove_space_reverse_string('this is a test string')\n    'gnirtstsetasiht'\n    >>> remove_space_reverse_string('a b c d e')\n    'edcba'\n    \"\"\"", "output": "pass", "id": 370, "avg_similarity_score": 0.13786869771651947}
{"instruction": "def sum_two_binary_ints(a, b):\n    \"\"\" Sum two binary integers.\n    Each input is a binary string, and the output should be a decimal number.\n\n    >>> sum_two_binary_ints('100', '1001')\n    9\n    >>> sum_two_binary_ints('110100', '10101')\n    124\n    \"\"\"", "output": "pass", "id": 371, "avg_similarity_score": 0.16282559864442753}
{"instruction": "def float_multiply_rec(lst):\n    \"\"\" Given a list of floats, write a recursive function that computes the product of all numbers in the list. \n    The function should handle an empty list as exception.\n\n    >>> float_multiply_rec([7.7, 3.2, 0.8])\n    19.008\n    \"\"\"", "output": "pass", "id": 372, "avg_similarity_score": 0.20069649763423622}
{"instruction": "def median_Word_Length(list_of_str):\n    \"\"\"Given a list of strings, \n    find the median length of all words.\n\n    >>> median_Word_Length(['cat', 'elephant', 'apple'])\n    5\n    >>> median_Word_Length(['apple', 'orange', 'fish', 'dog'])\n    5\n    \"\"\"", "output": "pass", "id": 373, "avg_similarity_score": 0.23033705154367606}
{"instruction": "def  check_if_consecutive(list_of_int): \n    \"\"\"Given a list of integers, \n    check if the integers in the list are consecutive.\n\n    >>> check_if_consecutive([1,2,3,4,5])\n    True\n    >>> check_if_consecutive([6,7,9,11])\n    False\n    \"\"\"", "output": "pass", "id": 374, "avg_similarity_score": 0.23894379224235776}
{"instruction": "def find_min_index_at_pass(list_of_int): \n    \"\"\"Given a list of integers, \n    find the index of the minimum value at each pass.\n\n    >>> find_min_index_at_pass([7,3,12,5])\n    [1,1,3,3]\n    >>> find_min_index_at_pass([3,7,4,1,9])\n    [0,2,3,3,3]\n    \"\"\"", "output": "pass", "id": 375, "avg_similarity_score": 0.2347290315378035}
{"instruction": "def two_lowest_unique(list_of_int): \n    \"\"\"Given a list of integers, \n    find the two lowest unique numbers.\n\n    >>> two_lowest_unique([4,3,1,5,2])\n    [1,2]\n    >>> two_lowest_unique([5,3,2,4,1])\n    [2,1]\n    \"\"\"", "output": "pass", "id": 376, "avg_similarity_score": 0.23064736873580585}
{"instruction": "def match_pattern(pattern, string):\n    \"\"\" Given a pattern and a string, \n    check if the string follows the given pattern.\n    \n    >>> match_pattern(\"<<<>>>\", \"abbaccd\")\n    True\n    >>> match_pattern(\"AAPL\", \"Apple\")\n    True\n    \"\"\"", "output": "pass", "id": 377, "avg_similarity_score": 0.19949685675806575}
{"instruction": "def divide_into_subsets(nums):\n    \"\"\" Given an array of n distinct integers, divide into two \n    subsets such that the difference between the sums of the two\n    subsets is minimum. Return the two subsets as a list of lists. \n\n    >>> divide_into_subsets([1,2,3,4])\n    [[1,2], [3,4]]\n    >>> divide_into_subsets([10,7,18,9,11])\n    [[10,18], [7,9,11]]\n    >>> divide_into_subsets([3,5,7,9,10,12,14])\n    [[3,5,7,9], [10,12,14]]\n    \"\"\"", "output": "pass", "id": 378, "avg_similarity_score": 0.20950692283529468}
{"instruction": "def longest_increasing_subsequence(nums):\n    \"\"\" Given a list of numbers, find the longest increasing subsequence.\n    Return an array containing the indices of the elements of the resulting longest increasing subsequence.\n\n    >>> longest_increasing_subsequence([5,2,1,3,4])\n    [1,2,3,4]\n    >>> longest_increasing_subsequence([10,22,9,33,21,50,41,60,80])\n    [2,4,6,7,9]\n    >>> longest_increasing_subsequence([2,5, 7,4,8])\n    [0,2,4]\n    \"\"\"", "output": "pass", "id": 379, "avg_similarity_score": 0.2321210059317838}
{"instruction": "def merge_intervals(intervals):\n    \"\"\" Given a set of non overlapping intervals, \n    merge all overlapping intervals and return a new set of intervals.\n\n    >>> merge_intervals([[1,3],[5,7], [4,6]])\n    [[1,7]]\n    >>> merge_intervals([[2,6],[4,7],[8,10],[10,11]])\n    [[2,7], [8,11]]\n    >>> merge_intervals([[1,5], [11,12]])\n    [[1,5], [11,12]]\n    \"\"\"", "output": "pass", "id": 380, "avg_similarity_score": 0.18584046815696048}
{"instruction": "def has_sum_pair(nums, target):\n    \"\"\" Given an array of integers and an integer target, \n    determine if there are any two numbers in the array which sum to the target.\n\n    >>> has_sum_pair([3, 1, 2, 4], 5)\n    True\n    >>> has_sum_pair([1, 6, 7, 8], 5)\n    False\n    >>> has_sum_pair([2, 4, 3, 5], 7)\n    True\n    \"\"\"", "output": "pass", "id": 381, "avg_similarity_score": 0.21605925724206249}
{"instruction": "def is_eligible_sequence(nums):\n    \"\"\" You are given a sequence of strings. \n    Determine if it is an eligible sequence if it a) contains only unique strings b) contains strings of the same length.\n    \n    >>> is_eligible_sequence([\"ab\", \"Hy\", \"bc\"])\n    True\n    >>> is_eligible_sequence([\"abc\", \"ht\", \"bc\"])\n    False\n    >>> is_eligible_sequence([\"ab\", \"Ht\", \"hy\"])\n    False\n    \"\"\"", "output": "pass", "id": 382, "avg_similarity_score": 0.18065203383345638}
{"instruction": "def find_lopsided_division_index(nums):\n    \"\"\" Given a list of positive integers,\n    find an index k such that the sum of the numbers before k is equal to the\n    sum of the numbers after k. If such a point exists, return the index k;\n    otherwise, return -1.\n\n    >>> find_lopsided_division_index([1,2,3,4,3,2,1])\n    3\n    >>> find_lopsided_division_index([1,2,3,4,5,6,7])\n    -1\n    >>> find_lopsided_division_index([1,1,1,2,1,1])\n    2\n    \"\"\"", "output": "pass", "id": 383, "avg_similarity_score": 0.20763417175974708}
{"instruction": "def paint_fence(n, colors):\n    \"\"\" You are given a fence with n posts, each post is painted with one of the colors\n    from `colors` array. Arrange the colors in such a way that at least `k` posts have the same color.\n    Return the minimum number of colors required for painting the fence.\n\n    >>> paint_fence(3, [\"red\", \"blue\", \"white\"])\n    2\n    >>> paint_fence(7, [\"red\", \"yellow\", \"blue\", \"green\", \"pink\"])\n    4\n    >>> paint_fence(5, [\"blue\"])\n    1\n    \"\"\"", "output": "pass", "id": 384, "avg_similarity_score": 0.16834282398466024}
{"instruction": "def max_value(nums, limit):\n    \"\"\"Given an array of non-negative integers and a positive \n    integer limit, pick the maximum value from the array such the \n    selected values shouldn't be greater than the limit.\n\n    >>> max_value([3, 0, 4, 8], 9)\n    8\n    >>> max_value([2, 5, 6], 8)\n    6\n    >>> max_value([6, 8, 1], 10)\n    8\n    \"\"\"", "output": "pass", "id": 385, "avg_similarity_score": 0.20189965505454543}
{"instruction": "def longest_common_subsequence(s1, s2):\n    \"\"\" Given two strings s1 and s2, determine the longest common subsequence.\n    Return the length of the longest common subsequence.\n\n    >>> longest_common_subsequence(\"abcde\", \"ace\")\n    3\n    >>> longest_common_subsequence(\"abcde\", \"xyz\")\n    0\n    >>> longest_common_subsequence(\"abcde\", \"xycde\")\n    3\n    \"\"\"", "output": "pass", "id": 386, "avg_similarity_score": 0.19333474587404675}
{"instruction": "def is_consecutive_increasing_subsequence(nums):\n    \"\"\" Given a list of numbers, return whether the given list of numbers is a consecutive\n    increasing subsequence.\n\n    >>> is_consecutive_increasing_subsequence([1,2,3,4,5,6,7])\n    True\n    >>> is_consecutive_increasing_subsequence([2,3, 4, 6, 8])\n    False\n    >>> is_consecutive_increasing_subsequence([1,1,1,2,1,1])\n    False\n    \"\"\"", "output": "pass", "id": 387, "avg_similarity_score": 0.23064619713942552}
{"instruction": "def Fibonacci(n):\n    \"\"\" Write a function to compute the nth Fibonacci number.\n\n    >>> Fibonacci(2)\n    1\n    >>> Fibonacci(6)\n    5\n    >>> Fibonacci(7)\n    8\n    \"\"\"", "output": "pass", "id": 388, "avg_similarity_score": 0.15627591361503199}
{"instruction": "def search_2d_matrix(matrix, target):\n    \"\"\" Write an efficient algorithm that searches for a value in an m x n matrix. \n    This matrix has the following properties:\n    Integers in each row are sorted in ascending from left to right.\n    Integers in each column are sorted in ascending from top to bottom.\n\n    >>> matrix = [[1,4,7,11,15],\n    [2,5,8,12,19],\n    [3,6,9,16,22],\n    [10,13,14,17,24],\n    [18,21,23,26,30]]\n    >>> search_2d_matrix(matrix, 5)\n    True\n    >>> search_2d_matrix(matrix, 20)\n    False\n    \"\"\"", "output": "pass", "id": 389, "avg_similarity_score": 0.1105500071385911}
{"instruction": "def subscribers_count(users):\n    \"\"\" Given an array users of n elements.\n    Each element indicates the number of subscribers a user has\n    Return the total number of subscribers of all users.\n\n    >>> users = [1,2,3]\n    >>> subscribers_count(users)\n    6\n    >>> users = [2,2,4]\n    >>> subscribers_count(users)\n    8\n    \"\"\"", "output": "pass", "id": 390, "avg_similarity_score": 0.21188393675544362}
{"instruction": "def reverse_sub_strings(s):\n    \"\"\" You are provided a s consisting of an even number of characters.\n    Reverse the order of the substrings of s.\n    For example, if s is \u201cabcdefghi\u201d, your output should be \u201cdefghiabc\u201d.\n\n    >>> reverse_sub_strings(\"abcdefghi\")\n    'defghiabc'\n    >>> reverse_sub_strings(\"qwertyuiop\")\n    'ytuiopqwer'\n    \"\"\"", "output": "pass", "id": 391, "avg_similarity_score": 0.16891438136082235}
{"instruction": "def make_pairs(s):\n    \"\"\" Given a string s containing multiple words,\n    return a new string s' in which every pair of adjacent words is\n    separated by a single whitespace and each word is written in reverse order.\n\n    >>> make_pairs(\"hacker cup\")\n    'rekcah pup'\n    >>> make_pairs(\"code study meetup\")\n    'edoc ytuds peetum'\n    \"\"\"", "output": "pass", "id": 392, "avg_similarity_score": 0.16657847462699438}
{"instruction": "def k_max_subarray(arr, k):\n    \"\"\" Given an array arr and a number k,\n    find the maximum sum up to k elements of arr.\n\n    >>> k_max_subarray([5,2,4,-3,1], 2)\n    7\n    Explanation: 4 + 3 = 7\n    >>> k_max_subarray([1,2,-1,-2,1], 3)\n    3\n    Explanation: 2 + (-1) + 1 = 3\n    \"\"\"", "output": "pass", "id": 393, "avg_similarity_score": 0.2164758179433815}
{"instruction": "def find_k_complementary_pairs(arr, k):\n    \"\"\" You are given an array arr of n elements.\n    Find the number of complementary pairs in arr such that the sum of two elements is equal to k.\n    A complementary pair is a pair of elements such that the sum of their elements is equal to k.\n\n    >>> find_k_complementary_pairs([2,3,4], 5)\n    2\n    Explanation: The pairs are (2,3) and (4,1).\n    >>> find_k_complementary_pairs([4,1,3], 5)\n    2\n    Explanation: The pairs are (4,1) and (3,2).\n    \"\"\"", "output": "pass", "id": 394, "avg_similarity_score": 0.20015608246282682}
{"instruction": "def longest_increasing_subsequence(arr):\n    \"\"\" Find the length of the longest increasing subsequence in an array.\n\n    >>> longest_increasing_subsequence([3,2,6,4,5,1])\n    3\n    Explanation: [2,4,5] is the longest increasing subsequence of [3,2,6,4,5,1].\n    >>> longest_increasing_subsequence([10,22,9,33,21,50,41,60])\n    5\n    Explanation: [10,22,33,50,60] is the longest increasing subsequence of [ 10,22,9,33,21,50,41,60 ].\n    \"\"\"", "output": "pass", "id": 395, "avg_similarity_score": 0.18741274610412106}
{"instruction": "def is_balanced_string(s):\n    \"\"\" Return true if s contains same number of lower-case \u2018x\u2019 and lower-case \u2018y\u2019.\n\n    >>> is_balanced_string('xxyy')\n    True\n    >>> is_balanced_string('xxxyy')\n    False\n    >>> is_balanced_string('xyxyxyxy')\n    True\n    \"\"\"", "output": "pass", "id": 396, "avg_similarity_score": 0.13306463672723196}
{"instruction": "def count_common_characters(s1, s2):\n    \"\"\" You are given two strings s1 and s2. \n    Return the number of common characters between the two strings.\n\n    >>> count_common_characters('abc', 'abcd')\n    3\n    >>> count_common_characters('hello', 'world')\n    3\n    \"\"\"", "output": "pass", "id": 397, "avg_similarity_score": 0.20310008131264926}
{"instruction": "def longest_bitonic_subarray(arr: List[int]) -> int:\n    \"\"\" Return the length of the longest bitonic subarray of arr.\n    A subarray x[1..j] is bitonic if there exists i in range 0 < i <= j such that\n    x[1] <= x[2] <= ... x[i-1] <= x[i] >= x[i+1] >= ...>= x[j].\n\n    >>> longest_bitonic_subarray([1, 2, 3, 4, 5])\n    5\n    >>> longest_bitonic_subarray([1, 11, 2, 10, 4, 5, 2, 1])\n    6\n    \"\"\"", "output": "pass", "id": 398, "avg_similarity_score": 0.14555808090576988}
{"instruction": "def leftmost_column_with_one(matrix: List[List[int]]) -> int:\n    \"\"\"Given a matrix, returns the column in the left-most column containing a 1. \n    If there is no such column return -1.\n\n    >>> leftmost_column_with_one([[0, 0, 0, 1, 0],\n                      [0, 0, 1, 1, 1],\n                      [0, 0, 0, 0, 0],\n                      [0, 1, 0, 0, 0]])\n    3\n    >>> leftmost_column_with_one([[0, 0, 0, 0],\n                      [0, 0, 0, 0],\n                      [0, 0, 0, 0],\n                      [0, 0, 0, 0]])\n    -1\n    \"\"\"", "output": "pass", "id": 399, "avg_similarity_score": 0.17958087187488825}
{"instruction": "def three_sum(nums: List[int]) -> bool:\n    \"\"\" Given an array of integers, return whether or not it holds three numbers whose sum is equal to zero.\n\n    >>> three_sum([-1, 0, 1, 2, -1, -4])\n    True\n    >>> three_sum([1, 2, 3, 4])\n    False\n    \"\"\"", "output": "pass", "id": 400, "avg_similarity_score": 0.1964068676585213}
{"instruction": "def valid_bst(root: TreeNode) -> bool:\n    \"\"\" Given the root of a binary search tree, return whether or not it is a valid binary search tree.\n\n    >>> valid_bst(TreeNode(10, TreeNode(5), TreeNode(15, TreeNode(11), TreeNode(17))))\n    True\n    >>> valid_bst(TreeNode(10, TreeNode(5), TreeNode(15, TreeNode(17), TreeNode(11))))\n    False\n    \"\"\"", "output": "pass", "id": 401, "avg_similarity_score": 0.16251779914596617}
{"instruction": "def calc_edit_distance(source: str, target: str) -> int:\n    \"\"\" Calculate the edit distance between two strings. \n    The edit distance between s and t is the minimum number of operations that need to be performed \n    on s so as to change it into t. The operations can include inserting, deleting, or substituting a character.\n\n    >>> calc_edit_distance(\"CAT\", \"COT\")\n    1\n    >>> calc_edit_distance(\"kitten\", \"sitting\")\n    3\n    \"\"\"", "output": "pass", "id": 402, "avg_similarity_score": 0.13524857599489584}
{"instruction": "def valid_binary_search_tree(root: TreeNode) -> bool:\n    \"\"\" Given the root node of a binary search tree, \n    return whether or not it is a valid binary search tree. \n    The value of each node must be strictly greater than \n    the values of all nodes in the left subtree of the node, \n    and less than the values of all nodes in the right subtree.\n\n    >>> valid_binary_search_tree(TreeNode(4, TreeNode(2), TreeNode(6, TreeNode(5), TreeNode(8))))\n    True\n    >>> valid_binary_search_tree(TreeNode(4, TreeNode(2), TreeNode(8, TreeNode(5), TreeNode(6))))\n    False\n    \"\"\"", "output": "pass", "id": 403, "avg_similarity_score": 0.16214539523761404}
{"instruction": "def largest_sum_of_averages(nums: List[int], k: int) -> float:\n    \"\"\" Compute the largest sum of averages of a given list.\n    Divide nums into k non-overlapping subsets (the subsets must test contiguous).\n    The sum of all the average scores of each subset should be maximized.\n\n    >>> largest_sum_of_averages([4,1,7,5,6,2,3], 4)\n    15.75\n    >>> largest_sum_of_averages([9,1,2,3,9], 3)\n    20.0\n    \"\"\"", "output": "pass", "id": 404, "avg_similarity_score": 0.17419708565476175}
{"instruction": "def intersection_of_two_arrays_II(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"Given two arrays, nums1 and nums2, compute and return the intersection of both arrays.\n\n     >>> intersection_of_two_arrays_II([1,2,2,1], [2,2])\n    [2, 2]\n    >>> intersection_of_two_arrays_II([4,9,5], [9,4,9,8,4])\n    [4, 9]\n    \"\"\"", "output": "pass", "id": 405, "avg_similarity_score": 0.1801787916632085}
{"instruction": "def rot_left(nums: List[int], k: int) -> List[int]:\n    \"\"\" Rotates an array of size n by k steps.\n    Each element nums[i] of the array is shifted to the left by k steps. \n    The indices that are shifted out of bounds are wrapped around the array.\n\n    >>> rot_left([1,2,3,4,5], 2)\n    [3, 4, 5, 1, 2]\n    >>> rot_left([-1,-100,3,99], 2)\n    [3, 99, -1, -100]\n    \"\"\"", "output": "pass", "id": 406, "avg_similarity_score": 0.17603596907896957}
{"instruction": "def can_split_array_into_two(nums: List[int]) -> bool:\n    \"\"\" Determine if the given array of integers can be split into two parts such that \n    the sum of the elements in the two parts is equal.\n\n    >>> can_split_array_into_two([1,2,3,4,5,5])\n    True\n    >>> can_split_array_into_two([1,2,3,4])\n    False\n    \"\"\"", "output": "pass", "id": 407, "avg_similarity_score": 0.21461422171842254}
{"instruction": "def result(a: list, k: int):\n    \"\"\" Find the for which the sum of the sublist elements is exactly equal to k.\n    a is a non-empty list consisting of positive integers.\n\n    >>> result([1, 8, 3, 4, 6], 10)\n    [1, 8]\n    >>> result([2, 5, 9, 7, 10], 12)\n    [2, 10]\n    \"\"\"", "output": "pass", "id": 408, "avg_similarity_score": 0.1977056426124615}
{"instruction": "def next_greater_power_of_2(n: int):\n    \"\"\" Find the next greater power of 2 from the given value.\n    If n is a power of 2, return n.\n\n    >>> next_greater_power_of_2(4)\n    4\n    >>> next_greater_power_of_2(21)\n    32\n    \"\"\"", "output": "pass", "id": 409, "avg_similarity_score": 0.18846914271148568}
{"instruction": "def maximum_boolean_expressions(l: list, targets: list):\n    \"\"\" Given a list l of n booleans and a list of k target booleans,\n    compute the maximum number of the list l that are equal to the\n    targets.\n\n    >>> maximum_boolean_expressions([True,False,True], [True,False])\n    2\n    >>> maximum_boolean_expressions([True,True,False], [True,True])\n    2\n    \"\"\"", "output": "pass", "id": 410, "avg_similarity_score": 0.2165173045955334}
{"instruction": "def node_delete_maximum_average_sum(nodes: list):\n    \"\"\" Given a list nodes that consists of node number and its associated\n    value, delete the node that has the maximum average sum.\n\n    >>> node_delete_maximum_average_sum([(1, 8), (2, 10), (3, 5)])\n    2\n    >>> node_delete_maximum_average_sum([(1, 4), (2, 8), (3, 3), (4, 5)])\n    1\n    \"\"\"", "output": "pass", "id": 411, "avg_similarity_score": 0.1881841268906462}
{"instruction": "def maximum_sum_product(A: list):\n    \"\"\" Given a list of n integers, arrange the list as [A1, A2,\u2026\u2026, An]\n    such that the sum product A1*A2*\u2026\u2026*An is maximum.\n\n    >>> maximum_sum_product([3,4,5,6,7])\n    1120\n    >>> maximum_sum_product([-1, 8, -5, 4, 0])\n    128\n    \"\"\"", "output": "pass", "id": 412, "avg_similarity_score": 0.20814566039960475}
{"instruction": "def container_with_most_water(A: list):\n    \"\"\" Given n non-negative integers representing the heights of n\n    vertical lines, find the maximum area of water container formed.\n\n    >>> container_with_most_water([1, 5, 4, 3])\n    6\n    >>> container_with_most_water([1, 8, 6, 2, 5, 4, 8, 3, 7])\n    49\n    \"\"\"", "output": "pass", "id": 413, "avg_similarity_score": 0.18882480778215624}
{"instruction": "def remove_substring_pattern(s: str) -> str:\n    \"\"\" Given a string s, remove the longest substring pattern\n    that is repeated at least twice in the string. \n\n    >>> remove_substring_pattern('abcabcabc')\n    'abc'\n    >>> remove_substring_pattern('aaaab')\n    'ab'\n    \"\"\"", "output": "pass", "id": 414, "avg_similarity_score": 0.19269803574512923}
{"instruction": "def median_range(l: list):\n    \"\"\" Return the median of the elements in given list l. \n    The range of the elements in l is [0, 10]. \n\n    >>> median_range([8, 9, 6, 10])\n    8\n    >>> median_range([3, 5, 2, 7])\n    4.5\n    \"\"\"", "output": "pass", "id": 415, "avg_similarity_score": 0.21145678390074885}
{"instruction": "def max_k_subsequence_sum(ar, k):\n    \"\"\"Given an array of numbers ar and an integer k, find the maximum sum of a contiguous\n    subsequence of size k.\n\n    >>> max_k_subsequence_sum([2, 3, -4, 1, 7], 3)\n    8\n    >>> max_k_subsequence_sum([-8, -7, -6], 2)\n    -13\n    >>> max_k_subsequence_sum([2, 3, 5, 9, 1, -3], 4)\n    17\n    \"\"\"", "output": "pass", "id": 416, "avg_similarity_score": 0.21600446906281545}
{"instruction": "def max_k_triangle_path(matrix, k):\n    \"\"\"Given a k x k matrix of non-negative integers, find the maximum sum\n    of a path from the top left to bottom right. A path consists of moving\n    down or to the right.\n\n    >>> max_k_triangle_path([[3,4,4],[1,2,6],[7,4,3]], 3)\n    21\n    >>> max_k_triangle_path([[1,2,4],[4,6,1],[7,1,3]], 3)\n    17\n    >>> max_k_triangle_path([[1,3,9],[3,9,2],[7,3,1]], 3)\n    21\n    \"\"\"", "output": "pass", "id": 417, "avg_similarity_score": 0.19816983607478297}
{"instruction": "def longest_replacement_path(str1, str2):\n    \"\"\"Given two strings str1 and str2, find the length of longest \n    replacement path from str1 to str2.\n    \n    In one step of a path, a character can be replaced with any other character.\n    \n    >>> longest_replacement_path(\"bade\", \"bace\")\n    3\n    >>> longest_replacement_path(\"acdde\", \"abdc\")\n    5\n    >>> longest_replacement_path(\"abcde\", \"lkmno\")\n    4\n    \"\"\"", "output": "pass", "id": 418, "avg_similarity_score": 0.16296775630794416}
{"instruction": "def can_form_string(arr, s): \n    \"\"\"Given an array of characters arr and a string s, return true if \n    arr can be used to form string s.\n    \n    >>> can_form_string(['d', 'a', 'v', 'e'], \"dave\")\n    True\n    >>> can_form_string(['b', 'e', 't', 'a'], \"alpha\")\n    False\n    >>> can_form_string(['t', 'o', 'p', 'e', 'l'], \"topel\")\n    True\n    \"\"\"", "output": "pass", "id": 419, "avg_similarity_score": 0.1907082185202745}
{"instruction": "def approximate_knapsack(weights, values, k):\n    \"\"\"Given an array of weights and values, find the maximum value \n    that can be obtained with total weight \u2264 k.\n    \n    It is assumed that each item can be partially included in the knapsack.\n    \n    >>> approximate_knapsack([10, 10, 12], [12, 10, 10], 20)\n    32\n    >>> approximate_knapsack([12, 10, 4], [17, 16, 5], 19)\n    33\n    >>> approximate_knapsack([20, 5, 30], [150, 50, 180], 40)\n    200\n    \"\"\"", "output": "pass", "id": 420, "avg_similarity_score": 0.18111980474683959}
{"instruction": "def bitwise_and_operator(N: int, k: int) -> int:\n    \"\"\" \n    You are given two integers, N and k.\n    Compute the bitwise AND operator between two numbers,N and K,\n    and return the result. \n\n    >>> bitwise_and_operator(12, 25)\n    8\n    >>> bitwise_and_operator(7,3)\n    3\n    \"\"\"", "output": "pass", "id": 421, "avg_similarity_score": 0.17568100429961828}
{"instruction": "def is_valid_year (year: int) -> bool:\n    \"\"\" \n    You are given a year as an integer. \n    Return True if it's a valid year and False if it is not.\n    A year is considered valid if it is greater than 0 and divisible by 4.\n\n    >>> is_valid_year (1000)\n    False\n    >>> is_valid_year (1996)\n    True\n    >>> is_valid_year (2001)\n    False\n    \"\"\"", "output": "pass", "id": 422, "avg_similarity_score": 0.14345773844985102}
{"instruction": "def mod_sum (nums: [int], k: int) -> int:\n    \"\"\"\n    You are given an array of integers and a number k.\n    Compute the sum of the elements of the given array mod k. \n    Return the result.\n\n    >>> mod_sum([2,4,6], 3)\n    1\n    >>> mod_sum([1,2,3,4,5], 4)\n    3\n    >>> mod_sum([2,3,4,5], 5)\n    0\n    \"\"\"", "output": "pass", "id": 423, "avg_similarity_score": 0.24925803063420426}
{"instruction": "def highest_frequency_digit (num: int) -> int:\n    \"\"\"\n    You are given a positive integer.\n    Return the integer with the highest frequency of any digit within the integer.\n\n    Example:\n    >>> highest_frequency_digit (111222)\n    2\n    >>> highest_frequency_digit (222111)\n    2\n    >>> highest_frequency_digit (123433)\n    3\n    \"\"\"", "output": "pass", "id": 424, "avg_similarity_score": 0.2009122409992246}
{"instruction": "def least_common_denominator (arr: [int]) -> int:\n    \"\"\" \n    You are given an array of non-zero positive integers.\n    Return the least common denominator of all elements in the array.\n    \n    Example:\n    >>> least_common_denominator ([7, 8, 10])\n    70\n    >>> least_common_denominator([3, 6, 9])\n    18\n    >>> least_common_denominator([2, 5, 10])\n    10\n    \"\"\"", "output": "pass", "id": 425, "avg_similarity_score": 0.23839005350995157}
{"instruction": "def closest_palindrome (num: int) -> int:\n    \"\"\"\n    You are given a non-negative integer num.\n    Find the closest palindromic number that is not equal to num. \n\n    Example:\n    >>> closest_palindrome (125)\n    121\n    >>> closest_palindrome (133)\n    131\n    >>> closest_palindrome (2)\n    1\n    \"\"\"", "output": "pass", "id": 426, "avg_similarity_score": 0.18363096316628902}
{"instruction": "def longest_non_repeating_substr (s: str) -> str:\n    \"\"\"\n    You are given a string s.\n    Find the longest substring within s that doesn't contain repeating characters.\n    Return the substring.\n\n    Example:\n    >>> longest_non_repeating_substr ('bbbaaacddd')\n    'baac'\n    >>> longest_non_repeating_substr ('abcde')\n    'abcde'\n    >>> longest_non_repeating_substr ('aabccdde')\n    'abcd'\n    \"\"\"", "output": "pass", "id": 427, "avg_similarity_score": 0.17825646647220875}
{"instruction": "def number_of_ other_letters(s: str, size: int) -> int:\n    \"\"\"\n    You are given a string, s, and an integer representing the size\n    of other letters within the string. Count number of other letters within s.\n    \n    Example:\n    >>> number_of_other_letters ('abcdefg', 3)\n    5\n    >>> number_of_other_letters ('hjkll', 2)\n    3\n    >>> number_of_other_letters (' Industriestrasse 66', 1)\n    13\n    \"\"\"", "output": "pass", "id": 428, "avg_similarity_score": 0.20332847030901427}
{"instruction": "def matrix_search (matrix: [[int]], target: int) -> bool:\n    \"\"\"\n    You are given an n*m size matrix, matrix, filled with non-negative numbers\n    and a target number. Return whether the target number is present within the matrix.\n    \n    Example:\n    >>> matrix_search ([[1,3,5], [6,7,8], [9,10,11]], 10)\n    True\n    >>> matrix_search ([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 20)\n    False\n    >>> matrix_search ([[1],[2],[3]], 3)\n    True\n    \"\"\"", "output": "pass", "id": 429, "avg_similarity_score": 0.18238196394882586}
{"instruction": "def maximum_product_of_three(numbers: [int]) -> int:\n    \"\"\"\n    You are given a non-empty array of integers,numbers. \n    Find the maximum product of three numbers within the array.\n    \n    Example:\n    >>> maximum_product_of_three([1,2,3])\n    6\n    >>> maximum_product_of_three([-4, -3, -2, -1, 60])\n    240\n    >>> maximum_product_of_three([-7,-4, 3, 6, 7])\n    168\n    \"\"\"", "output": "pass", "id": 430, "avg_similarity_score": 0.22670223230344308}
{"instruction": "def count_substring(s: str, sub: str) -> int:\n    \"\"\" Count the number of times a substring occurs in a string.\n\n    >>> count_substring('samosareallytastesgood', 'really')\n    1\n    >>> count_substring('samosa is really tasty', 'really')\n    1\n    \"\"\"", "output": "pass", "id": 431, "avg_similarity_score": 0.17856003972891807}
{"instruction": "def find_parentheses(s: str) -> int:\n    \"\"\" Given a string, find the number of matched pairs of parentheses.\n\n    >>> find_parentheses('((hello))')\n    2\n    >>> find_parentheses('((a+b)*(c-d))')\n    4\n    \"\"\"", "output": "pass", "id": 432, "avg_similarity_score": 0.2257914209358175}
{"instruction": "def rem_duplicate_ch(str1, ch):\n    \"\"\" From a given string, remove all occurances of the character\n    ch.\n \n    >>> rem_duplicate_ch('To be or not to be','b')\n    'To e or not to e'\n   >>> rem_duplicate_ch('This is a sample string', 'i')\n   'Ths s a sample strng'\n    \"\"\"", "output": "pass", "id": 433, "avg_similarity_score": 0.17271425088861578}
{"instruction": "def check_palindrome(s: str) -> bool:\n    \"\"\" Given a string, check if it is a palindrome or not.\n\n    >>> check_palindrome('madam')\n    True\n    >>> check_palindrome('rama')\n    False\n    \"\"\"", "output": "pass", "id": 434, "avg_similarity_score": 0.1667241049175423}
{"instruction": "def areAnagrams(str1: str, str2: str) -> bool:\n    \"\"\" Given two words, check if they are anagrams\n    or not.\n\n    >>> areAnagrams('are', 'rea')\n    True\n    >>> areAnagrams('listen', 'silent')\n    True\n    \"\"\"", "output": "pass", "id": 435, "avg_similarity_score": 0.12456977769571334}
{"instruction": "def merge_arrays(arr1: list, arr2: list) -> list:\n    \"\"\"Given two sorted arrays, merge them into\n    one sorted array.\n\n    >>> merge_arrays([1, 3, 7], [2, 5])\n    [1, 2, 3, 5, 7]\n    >>> merge_arrays([4, 6, 9], [1, 3, 8])\n    [1, 3, 4, 6, 8, 9]\n    \"\"\"", "output": "pass", "id": 436, "avg_similarity_score": 0.1289264335344682}
{"instruction": "def LCS(str1: str, str2: str) -> int:\n    \"\"\"Given  two strings, find the longest common\n    subsequence of characters.\n\n    >>> LCS(\"ABCDEFG\", \"ABCDGHR\")\n    5\n    >>> LCS(\"ABCDGH\", \"AEDFHR\")\n    3\n    \"\"\"", "output": "pass", "id": 437, "avg_similarity_score": 0.19230916217995594}
{"instruction": "def build_list(n: int) -> list:\n    \"\"\"Given a positive integer, build a list of\n    integers from 0 to n in increasing order.\n\n    >>> build_list(5)\n    [0, 1, 2, 3, 4, 5]\n    >>> build_list(3)\n    [0, 1, 2, 3]\n    \"\"\"", "output": "pass", "id": 438, "avg_similarity_score": 0.2075102343256035}
{"instruction": "def key_sort(dic: dict) -> list:\n    \"\"\"Given a dictionary of key-value pairs, sort\n    them by keys (alphabetically).\n\n    >>>key_sort({'apple': 2, 'banana': 3, 'cherry': 5})\n    ['apple', 'banana', 'cherry']\n    >>>key_sort({'red': 2, 'yellow': 3, 'orange': 5})\n    ['orange', 'red', 'yellow']\n    \"\"\"", "output": "pass", "id": 439, "avg_similarity_score": 0.15612230093424886}
{"instruction": "def check_rotation(s1, s2):\n    \"\"\" Given two strings s1 and s2, check if s1 is a rotated version of s2.\n    The string s1 is considered as a rotated version of s2 when s1 and s2 are both non-empty \n    strings and the concatenation of s1 with itself is equal to s2.\n\n    >>> check_rotation(\"amazon\", \"azonma\")\n    True\n    >>> check_rotation(\"amazon\", \"amazan\")\n    False\n    >>> check_rotation(\"waterbottle\", \"erbottlewat\")\n    True\n    \"\"\"", "output": "pass", "id": 440, "avg_similarity_score": 0.16565369911497485}
{"instruction": "def check_palindrome(s):\n    \"\"\" Given a string s, check if it is a palindrome, i.e. if it reads the same backward as forward.\n\n    >>> check_palindrome(\"civic\")\n    True\n    >>> check_palindrome(\"abab\")\n    False\n    >>> check_palindrome(\"abba\")\n    True\n    \"\"\"", "output": "pass", "id": 441, "avg_similarity_score": 0.16916820155013512}
{"instruction": "def valid_parenthesis(s: str) -> bool:\n    \"\"\" Given a string of parentheses, determine if it is a valid sequence of parenthesis by checking if every opening parenthesis has its corresponding closing parenthesis. The function should return True if the parenthesis, False otherwise.\n\n    >>> valid_parenthesis('()[]{}')\n    True\n    >>> valid_parenthesis('[(])')\n    False\n    >>> valid_parenthesis('()(')\n    False    \n    \"\"\"", "output": "pass", "id": 442, "avg_similarity_score": 0.17089647801514232}
{"instruction": "def shifting_letters(s: str, shift: List[int]) -> str:\n    \"\"\" Given a string s and an array shift of integers, each shift[i] = x means to move the character at index i forward x steps in the string. All characters in the string will move simultaneously. Return the modified string after all time shifts are applied. \n\n    >>> shifting_letters('abc', [3,5,9])\n    'rst'\n    >>> shifting_letters('bad', [10,20,30])\n    'zol'\n    >>> shifting_letters('test', [-3,-2,-1])\n    'sdr'\n    \"\"\"", "output": "pass", "id": 443, "avg_similarity_score": 0.1847330416273375}
{"instruction": "def word_pair_count(s: str, words: List[str]) -> int:\n    \"\"\" Given a string s and a list of words words, return the number of times the words appear in order in s. \n\n    >>> word_pair_count('the kid from the store went to the store', ['store', 'went'])\n    2\n    >>> word_pair_count('the quick brown fox jumped over the lazy dog', ['the', 'quick'])\n    1\n    >>> word_pair_count('the quick brown fox jumped over the lazy dog', ['quick', 'fox'])\n    1\n    \"\"\"", "output": "pass", "id": 444, "avg_similarity_score": 0.24113426311111733}
{"instruction": "def swapcase_divisible(s: str, x: int) -> str:\n    \"\"\" Given a string s and an integer x, return the string s where every xth character is uppercase and the rest are lowercase.\n\n    >>> swapcase_divisible('hello world!!', 2)\n    'hElLo wOrLd!!'\n    >>> swapcase_divisible('string', 5)\n    'stRIng'\n    >>> swapcase_divisible('Apple', 3)\n    'ApPlE'\n    \"\"\"", "output": "pass", "id": 445, "avg_similarity_score": 0.2018755850756227}
{"instruction": "def min_window_substr(s: str, sub: str) -> str:\n    \"\"\"Given a string s and a string sub, return the smallest substring of s which contains all the characters of sub in any order. \n\n    >>> min_window_substr('xyzabcde', 'xyz')\n    'xyz'\n    >>> min_window_substr('adobecodebanc', 'abc')\n    'banc'\n    >>> min_window_substr('aygfbdzde', 'zde')\n    'zde'\n    \"\"\"", "output": "pass", "id": 446, "avg_similarity_score": 0.2102090857933232}
{"instruction": "def group_anagrams(strs: List[str]) -> List[List[str]]:\n    \"\"\" Given an array of strings strs, group all anagrams together and return the grouped result. \n\n    >>> group_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat'])\n    [['eat', 'tea', 'ate'],\n     ['tan', 'nat'],\n     ['bat']]\n    >>> group_anagrams(['on', 'no', 'noon'])\n    [['on', 'no'],\n     ['noon']]\n    >>> group_anagrams(['art', 'rat', 'tar'])\n    [['art', 'rat', 'tar']]\n    \"\"\"", "output": "pass", "id": 447, "avg_similarity_score": 0.2037167030584976}
{"instruction": "def maximum_ consecutive_ones(nums: List[int]) -> int:\n    \"\"\" Given an array of 0s and 1s, find the maximum number of consecutive 1s.\n\n    >>> maximum_consecutive_ones([1,1,0,1,1,1])\n    3\n    >>> maximum_consecutive_ones([0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0])\n    3\n    >>> maximum_consecutive_ones([1, 0, 0, 1, 1, 0, 1])\n    2\n    \"\"\"", "output": "pass", "id": 448, "avg_similarity_score": 0.23222592786750415}
{"instruction": "def reverse_on_diagonals(matrix: List[List[int]]) -> List[List[int]],:\n    \"\"\" Given a matrix of size m x n, reverse the elements on the diagonals.\n\n    Example:\n    \n    Input : [[1,2,3],\n             [4,5,6],\n             [7,8,9]]\n    Output : [[3,2,1],\n              [4,5,6],\n              [9,8,7]]\n              \n    >>> reverse_on_diagonals([[1,4,7],\n                              [2,5,8],\n                              [3,6,9]])\n    [[7,4,1],\n     [2,5,8],\n     [9,6,3]]\n    >>> reverse_on_diagonals([[1]])\n    [[1]]\n    >>> reverse_on_diagonals([[1,2],\n                              [4,5]])\n    [[2,1],\n     [4,5]]\n    \"\"\"", "output": "pass", "id": 449, "avg_similarity_score": 0.1495222398443123}
{"instruction": "def roman_to_int(s):\n    \"\"\" Given a string s that represents a Roman numeral,\n    return the decimal representation of the given Roman numeral.\n\n    >>> roman_to_int(\"VI\")\n    6\n    >>> roman_to_int(\"MMCMXCIX\")\n    2999\n    >>> roman_to_int(\"XCIII\")\n    93\n    \"\"\"", "output": "pass", "id": 450, "avg_similarity_score": 0.21949211908585634}
{"instruction": "def num_of_common_divisors(nums):\n    \"\"\" Given an array of positive integers nums, return the maximum number of \n    common divisors among all the elements of the array.\n\n    >>> num_of_common_divisors([8,12,16,24])\n    3\n    >>> num_of_common_divisors([6,9,12,18,24])\n    1\n    >>> num_of_common_divisors([16,32,64])\n    5\n    \"\"\"", "output": "pass", "id": 451, "avg_similarity_score": 0.24651345623816193}
{"instruction": "def sorted_lists_merge(lists):\n    \"\"\" You are given a list of sorted lists lists,\n    find a way to merge all the lists each of which is sorted in\n    ascending order to form one big sorted list.\n\n    >>> sorted_lists_merge([[1,2,3],[4,5],[6,7,8]])\n    [1,2,3,4,5,6,7,8]\n    >>> sorted_lists_merge([[1,5,6],[2,3,4],[7,8,9]])\n    [1,2,3,4,5,6,7,8,9]\n    \"\"\"", "output": "pass", "id": 452, "avg_similarity_score": 0.1893522281512618}
{"instruction": "def string_scramble(s1, s2):\n    \"\"\" You are given two strings s1 and s2, check if it is possible to \n    scramble s1 and it becomes equal to s2.\n\n    >>> string_scramble(\"abc\",\"cba\")\n    True\n    >>> string_scramble(\"uerty\",\"reyut\")\n    True\n    >>> string_scramble(\"hello\",\"ohli\")\n    False\n    \"\"\"", "output": "pass", "id": 453, "avg_similarity_score": 0.1328694629658202}
{"instruction": "def nth_number_in_ugly_series(n):\n    \"\"\" Ugly numbers are numbers whose only prime factors are 2,3,5. \n    The sequence 1,2,3,4,5,6,8,9,10,12,15\u2026 shows the first 11 ugly numbers.\n    Write a program to find and return the nth ugly number.\n\n    >>> nth_number_in_ugly_series(5)\n    5\n    >>> nth_number_in_ugly_series(14)\n    36\n    \"\"\"", "output": "pass", "id": 454, "avg_similarity_score": 0.1191251080139895}
{"instruction": "def inorder_traversal(root):\n    \"\"\" Given a binary tree output the inorder traversal of the tree.\n\n    tree = Node(3)\n    tree.left = Node(2)\n    tree.right = Node(5)\n    tree.left.left = Node(1)\n\n    >>> inorder_traversal(tree)\n    [1,2,3,5]\n    \"\"\"", "output": "pass", "id": 455, "avg_similarity_score": 0.15193100569951482}
{"instruction": "def valid_parentheses(s):\n    \"\"\" Given a string containing just the characters '(' and ')',\n    determine if the input string is valid. \n\n    >>> valid_parentheses(\"()\")\n    True\n    >>> valid_parentheses(\"(())\")\n    True\n    >>> valid_parentheses(\")()\")\n    False\n    \"\"\"", "output": "pass", "id": 456, "avg_similarity_score": 0.20287738870985167}
{"instruction": "def missing_number(nums):\n    \"\"\" Given an array containing n distinct numbers from 0 to n,\n    find the number that is missing from the array.\n\n    >>> missing_number([3,0,1])\n    2\n    >>> missing_number([9,6,4,2,3,5,7,0,1])\n    8\n    \"\"\"", "output": "pass", "id": 457, "avg_similarity_score": 0.20449305956892905}
{"instruction": "def top_K_frequent_words(words, k):\n    \"\"\" Given a non-empty list of words, return the k most frequent elements.\n\n    >>> top_K_frequent_words([\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\", \"sunny\", \"is\"],2)\n    [\"the\", \"is\"]\n    >>> top_K_frequent_words([\"apple\",\"banana\",\"apple\",\"apple\"],3)\n    [\"apple\",\"banana\"]\n    \"\"\"", "output": "pass", "id": 458, "avg_similarity_score": 0.20253661939940132}
{"instruction": "def compare_two_strings(s1: str, s2: str) -> int:\n    \"\"\" Comparing two strings s1 and s2, return an integer representing the relative \n    alphabetical order of those two strings. For equal strings, one should return 0. \n    -1 for s1 being \u201cless\u201d than s2, and 1 for s1 being \u201cgreater\u201d than s2.\n\n    >>> compare_two_strings(\"A\",\"B\")\n    -1\n    >>> compare_two_strings(\"z\",\"a\")\n    1\n    >>> compare_two_strings(\"F\",\"F\")\n    0\n    \"\"\"", "output": "pass", "id": 459, "avg_similarity_score": 0.12805637788058283}
{"instruction": "def powers_of_two(max):\n    \"\"\" Calculate and return a list of all the powers of two that are \n    less than or equal to the given max.\n\n    >>> powers_of_two(16)\n    [1, 2, 4, 8, 16]\n    >>> powers_of_two(22)\n    [1, 2, 4, 8, 16]\n    \"\"\"", "output": "pass", "id": 460, "avg_similarity_score": 0.21755385611683228}
{"instruction": "def solve_quad_equation(a, b, c):\n    \"\"\" Solve for x in the equation a * x^2 + b * x + c = 0. \n    Return a list of possible x values.\n\n    >>> solve_quad_equation(1,2,-15)\n    [-5,3]\n    >>> solve_quad_equation(2,3,1)\n    [-0.5, -1.0]\n    \"\"\"", "output": "pass", "id": 461, "avg_similarity_score": 0.1452542152370863}
{"instruction": "def calculate_median(nums):\n    \"\"\" Find the median of an array of numbers.\n\n    >>> calculate_median([1,2,3,4])\n    2.5\n    >>> calculate_median([1,2,3,5,9,13])\n    4.5\n    \"\"\"", "output": "pass", "id": 462, "avg_similarity_score": 0.18220338593366678}
{"instruction": "def hamming_distance(str1, str2):\n    \"\"\" Return the hamming distance between two strings.\n\n    >>> hamming_distance('AA','AA')\n    0\n    >>> hamming_distance('GAGCCT','GAGTCA')\n    3\n    \"\"\"", "output": "pass", "id": 463, "avg_similarity_score": 0.13067593966931668}
{"instruction": "def count_ways_to_climb_stairs(n: int) -> int:\n    \"\"\" Count the number of ways you can climb a n stairs, \n    either one step at a time, or two steps at a time.\n\n    >>> count_ways_to_climb_stairs(3)\n    3\n    >>> count_ways_to_climb_stairs(7)\n    21\n    \"\"\"", "output": "pass", "id": 464, "avg_similarity_score": 0.13833208132367936}
{"instruction": "def kadanes_algorithm(nums: List[int]):\n    \"\"\" Given an array A of n integers, return the maximum sum subarray of A. \n\n    >>> kadanes_algorithm([-2,1,2,-3,4])\n    5\n    >>> kadanes_algorithm([3,-1,4,-2,5])\n    11\n    \"\"\"", "output": "pass", "id": 465, "avg_similarity_score": 0.26816289087569267}
{"instruction": "def missing_number(arr):\n    \"\"\" Return the missing number from an array of consecutive numbers. \n\n    >>> missing_number([1,2,4,5])\n    3\n    >>> missing_number([1,2,3,4,5,7,8])\n    6\n    \"\"\"", "output": "pass", "id": 466, "avg_similarity_score": 0.1809724670235628}
{"instruction": "def get_angle(x1: int, y1: int, x2: int, y2: int) -> float:\n    \"\"\"\n    Given two points x1, y1 and x2, y2, return the angle on the clockwise direction \n    between these two points. The angle should be calculated in degree between 0 to 360.\n    \n    >>> get_angle(0, 0, 0, 1)\n    180\n    >>> get_angle(1, 1, 0, 0)\n    315\n    \"\"\"", "output": "pass", "id": 467, "avg_similarity_score": 0.14464994765936406}
{"instruction": "def longest_increasing_array(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of integers, find and return the length of the longest \n    continuous increasing sequence in the array.\n\n    >>> longest_increasing_array([1,2,3,4])\n    4\n    >>> longest_increasing_array([2,1,5,3,10])\n    3\n    \"\"\"", "output": "pass", "id": 468, "avg_similarity_score": 0.2682655904539921}
{"instruction": "def two_sum_group_by_difference(nums: List[int], k: int) -> int:\n    \"\"\"\n    Given an array of integers and a target value, find and return the number of pairs \n    of elements that sum up to the target value, each pair with differences k.\n\n    >>> two_sum_group_by_difference([2,3,5,7], 1)\n    2\n    >>> two_sum_group_by_difference([2,3,5,7], 2)\n    1\n    \"\"\"", "output": "pass", "id": 469, "avg_similarity_score": 0.23419515326569756}
{"instruction": "def find_boundaries(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of integers, find and return the indices of the boundaries \n    of the monotonically increasing subranges.\n\n    >>> find_boundaries([1,2,3,4,7,4,5,7])\n    [0,3,4,5,7]\n    >>> find_boundaries([1,2,3,4,7,4,5,7,1,2])\n    [0,3,4,5,7,8]\n    \"\"\"", "output": "pass", "id": 470, "avg_similarity_score": 0.2649548637598464}
{"instruction": "def convert_string_array_to_base_2_array(s: str) -> List[int]:\n    \"\"\"\n    Given a string of size n consisting of '0' and '1', \n    find and return an array containing n elements that are elements of the string converted to base 2 form.\n\n    >>> convert_string_array_to_base_2_array(\"110011\")\n    [12,3]\n    >>> convert_string_array_to_base_2_array(\"10101\")\n    [10,5]\n    \"\"\"", "output": "pass", "id": 471, "avg_similarity_score": 0.20150242825412598}
{"instruction": "def is_morphological(a: str, b: str) -> bool:\n    \"\"\"\n    Given two strings a and b, check and return True if b is a morphological variant of a, False otherwise.\n    A string b is a morphological variant of a if b can be generated from a by repeating an operation characterized as follows:\n    1. Adding one letter to either end of a\n    2. Replacing a single letter by another\n\n    >>> is_morphological(\"cat\", \"cats\")\n    True\n    >>> is_morphological(\"sheep\", \"sheeps\")\n    False\n    \"\"\"", "output": "pass", "id": 472, "avg_similarity_score": 0.13737363868753003}
{"instruction": "def count_max_distinct_values(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of integers, find and return the amount of distinct values that occur as the maximum value in the array.\n\n    >>> count_max_distinct_values([1,2,3,4,3,2,4])\n    2\n    >>> count_max_distinct_values([1,1,4,5])\n    1\n    \"\"\"", "output": "pass", "id": 473, "avg_similarity_score": 0.2573179860303395}
{"instruction": "def duplicate_digits(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, find the number of duplicated digits in n, such that each duplicate has the same digit.\n\n    >>> duplicate_digits(1211)\n    1\n    >>> duplicate_digits(78223)\n    1\n    >>> duplicate_digits(453452)\n    2\n    \"\"\"", "output": "pass", "id": 474, "avg_similarity_score": 0.2194685010627634}
{"instruction": "def number_of_special_products(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of distinct integers, calculate the number of \n    distinct products of two elements in the array that are equal to a given target.\n\n    >>> number_of_special_products([1,2,3,4], 12)\n    1\n    >>> number_of_special_products([1,2,3,4,5], 10)\n    2\n    \"\"\"", "output": "pass", "id": 475, "avg_similarity_score": 0.24220710619023095}
{"instruction": "def most_frequent_occurrence_of_digit(n: int) -> int:\n    \"\"\"\n    Given a non-negative integer n, find the amount of times the given number has the maximum digit \n    appearance in its decimal form.\n\n    >>> most_frequent_occurrence_of_digit( bannedBabies722)\n    2\n    >>> most_frequent_occurrence_of_digit( 3432225)\n    3\n    \"\"\"", "output": "pass", "id": 476, "avg_similarity_score": 0.20463731484738346}
{"instruction": "def lexicographical_start(nums: List[str]) -> str:\n    \"\"\" Given an array of strings nums of length n, find the starting point \n    of the lexicographically smallest cyclic rotation for each element in the array. \n    Return the String which has the starting point. \n\n    >>> lexicographical_start(['abc', 'xyz', 'aaa'])\n    'aaa'\n    >>> lexicographical_start(['aaa', 'zzz', 'ccc'])\n    'aaa'\n    \"\"\"", "output": "pass", "id": 477, "avg_similarity_score": 0.2125553447931895}
{"instruction": "def max_len_diff_k(arr: List[int], k:int) -> list:\n    \"\"\" Given an array arr of length n and an integer k.\n    Find the subarray with maximum length such that the difference \n    between maximum and minimum elements in that sub-array is atmost k.\n\n    >>> max_len_diff_k([2, 8, 1, 2, 4, 5], 3)\n    [2, 8, 1, 2]\n    >>> max_len_diff_k([7, 1, 3, 8, 2, 6], 3)\n    [7, 1, 3, 8, 2]\n    \"\"\"", "output": "pass", "id": 478, "avg_similarity_score": 0.20461427642820537}
{"instruction": "def continuous_subarray_sum( l: list, k: int) -> bool:\n    \"\"\" Given a list l of length n and an integer k.\n    Determine whether there exists a continuous subarray of l with a sum = k.  \n\n    >>> continuous_subarray_sum([2, 3, 1, 5, 4], 17 )\n    False\n    >>> continuous_subarray_sum([2, 3, 4, 1, 5], 9)\n    True\n    \"\"\"", "output": "pass", "id": 479, "avg_similarity_score": 0.19170758353153045}
{"instruction": "def max_sum_contiguous_subarray(arr: list) -> int:\n    \"\"\"Given a list of numbers arr of length n, \n    find the maximum sum of a contiguous subarray of arr.\n\n    >>> max_sum_contiguous_subarray([-2,1,-3,4,-1,2,1,-5,4])\n    6\n    >>> max_sum_contiguous_subarray([3,-2,4,-10,1,2,3,4])\n    7\n    \"\"\"", "output": "pass", "id": 480, "avg_similarity_score": 0.23251431322292532}
{"instruction": "def power_of_two(n: int) -> int:\n    \"\"\" Given a positive integer n, return the smallest power of two which \n    is greater or equal to n.\n\n    >>> power_of_two(7)\n    8\n    >>> power_of_two(15)\n    16\n    \"\"\"", "output": "pass", "id": 481, "avg_similarity_score": 0.2172844155315086}
{"instruction": "def check_contact_details(name: str, phone: int, age: int) -> bool:\n     \"\"\" Check if the given name, phone, age are matched. \n     Return True if they match, False otherwise. \n\n    >>> check_contact_details('Harry', 12345678, 15)\n    False\n    >>> check_contact_details('Bob', 87654321, 20)\n    True\n    \"\"\"", "output": "pass", "id": 482, "avg_similarity_score": 0.12512399945569797}
{"instruction": "def longest_palindrome_substring(s: str) -> str:\n    \"\"\" Given a string s, return the longest palindrome substring in s. \n    If there is no palindrome in s, return None. \n\n    >>> longest_palindrome_substring('level')\n    'level'\n    >>> longest_palindrome_substring('t1t2t3t4t5')\n    't1t'\n    \"\"\"", "output": "pass", "id": 483, "avg_similarity_score": 0.18923720171872058}
{"instruction": "def combinations_without_repetition(nums: List[int], k: int) -> List[ List[int] ]:\n    \"\"\" Given an array of integers nums of length n, and a number k, \n    return the combinations of k elements from nums where each element can only\n    be used once.\n\n    >>> combinations_without_repetition([1,2,3,4,5], 3)\n    [[1,2,3], [1,2,4], [1,2,5], [1,3,4], [1,3,5], [1,4,5], [2,3,4], [2,3,5], [2,4,5], [3,4,5]]\n    >>> combinations_without_repetition([4,2,5,7], 2)\n    [[4,2], [4,5], [4,7], [2,5], [2,7], [5,7]]\n    \"\"\"", "output": "pass", "id": 484, "avg_similarity_score": 0.21488552219941268}
{"instruction": "def unweighted_task_scheduling(start: List[int], end: List[int]) -> int:\n    \"\"\" Given a list of start times and a list of end times of tasks, \n    return the maximum number of tasks that can be performed with no overlapping \n    intervals. \n\n    >>> unweighted_task_scheduling([0,1,2,3], [5,2,4,6])\n    3\n\n    >>> unweighted_task_scheduling([2,1,3,8], [4,3,5,9])\n    4\n    \"\"\"", "output": "pass", "id": 485, "avg_similarity_score": 0.20406768161076894}
{"instruction": "def product_except_self(nums: List[int]) -> List[int]:\n    \"\"\"Given an array of n integers where n > 1, return an array output such\n    that output[i] is equal to the product of all the elements of nums except nums[i].\n\n    >>> product_except_self([1,2,3,4])\n    [24,12,8,6]\n    >>> product_except_self([4,2,5,7])\n    [140,280,112,80]\n    \"\"\"", "output": "pass", "id": 486, "avg_similarity_score": 0.21809302909303685}
{"instruction": "def group_anagrams(words):\n    \"\"\" given an array of strings words, group the strings which are anagrams of each other.\n\n    >>> group_anagrams([\"eat\",\"tea\",\"tan\",\"nat\",\"bat\"])\n    [[\"eat\",\"tea\"],[\"tan\",\"nat\"],[\"bat\"]]\n    \"\"\"", "output": "pass", "id": 487, "avg_similarity_score": 0.2050298821305478}
{"instruction": "def unique_digits(n):\n    \"\"\" Construct an array of size n such that all elements of the array contain unique digits.\n\n    >>> unique_digits(3)\n    [123,124,125]\n    >>> unique_digits(4)\n    [1234, 1235, 1236, 1237]\n    \"\"\"", "output": "pass", "id": 488, "avg_similarity_score": 0.18096560413872112}
{"instruction": "def mode(lst):\n    \"\"\"Given a list of integer lst, determine the mode of the list.\n    \n    >>> mode([1,2,3,1])\n    1\n    >>> mode([3,5,1])\n    None\n    \"\"\"", "output": "pass", "id": 489, "avg_similarity_score": 0.24026128658421986}
{"instruction": "def sort_dictionary(dictionary):\n    \"\"\" Given a dictionary of keys and values, sort the keys in the dictionary.\n\n    >>> sort_dictionary({\"b\":1, \"a\":2, \"c\":3})\n    {\"a\":2, \"b\":1, \"c\":3}\n    \"\"\"", "output": "pass", "id": 490, "avg_similarity_score": 0.21447270127394574}
{"instruction": "def valid_parentheses(s):\n    \"\"\" Given a string s containing only parentheses, determine if the parentheses are balanced.\n\n    >>> valid_parentheses(\"()\")\n    True\n    >>> valid_parentheses(\"([]{})\")\n    True\n    >>> valid_parentheses(\"([)]\")\n    False\n    \"\"\"", "output": "pass", "id": 491, "avg_similarity_score": 0.17472770560468415}
{"instruction": "def replace_duplicates(arr):\n    \"\"\"Given a array arr replace all duplicates with the maximum element in the array.\n\n    >>> replace_duplicates([1,2,2,3,3])\n    [1,3,3,3,3]\n    >>> replace_duplicates([1,2,2,1])\n    [2,2,2,2]\n    \"\"\"", "output": "pass", "id": 492, "avg_similarity_score": 0.21167932647623888}
{"instruction": "def caesar_cipher(string, shift):\n    \"\"\"Given a string of lowercase letters string and an interger shift,\n    encrypt the string using a Caesar cipher with the shift.\n\n    >>> caesar_cipher(\"abc\", 2)\n    \"cde\"\n    >>> caesar_cipher(\"hello\", 4)\n    \"lipps\"\n    \"\"\"", "output": "pass", "id": 493, "avg_similarity_score": 0.19288401615422676}
{"instruction": "def permutation_count(arr):\n    \"\"\"Given an array of distinct integers arr, count the number of permutations of the array.\n\n    >>> permutation_count([1,2,3])\n    6\n    >>> permutation_count([1,2,2])\n    3\n    \"\"\"", "output": "pass", "id": 494, "avg_similarity_score": 0.24833887230208107}
{"instruction": "def is_valid_sudoku(sudoku):\n    \"\"\" Given a 2D array of integers sudoku, determine if it is a valid Sudoku.\n\n    >>> is_valid_sudoku([[5,3,4,6,7,8,9,1,2],\n                        [6,7,2,1,9,5,3,4,8],\n                        [1,9,8,3,4,2,5,6,7],\n                        [8,5,9,7,6,1,4,2,3],\n                        [4,2,6,8,5,3,7,9,1],\n                        [7,1,3,9,2,4,8,5,6],\n                        [9,6,1,5,3,7,2,8,4],\n                        [2,8,7,4,1,9,6,3,5],\n                        [3,4,5,2,8,6,1,7,9]])\n    True\n    \"\"\"", "output": "pass", "id": 495, "avg_similarity_score": 0.190254565682423}
{"instruction": "def find_neighboring_indices(text, pattern):\n    \"\"\" You are given a string text and pattern string. \n    Find all the indices of text with pattern equals to the\n    text at the index adjacent to it. \n\n    >>> find_neighboring_indices(\"abcabc\", \"bc\")\n    [1, 4]\n    >>> find_neighboring_indices(\"xyzxyxzxyz\", \"xy\")\n    [0, 3, 6]\n    \"\"\"", "output": "pass", "id": 496, "avg_similarity_score": 0.1892049736768865}
{"instruction": "def longest_contiguous_factors_substring(arr):\n    \"\"\" Given an array of non-negative integers, find the longest \n    contiguous subarray with all its elements being prime\n    factors of some positive number. \n\n    >>> longest_contiguous_factors_substring([2, 3, 5, 7, 5])\n    [3, 5, 7, 5]\n    >>> longest_contiguous_factors_substring([3, 2, 4, 6, 5])\n    [2, 4, 6]\n    \"\"\"", "output": "pass", "id": 497, "avg_similarity_score": 0.19397139816637363}
{"instruction": "def optimal_jump_path(grid):\n    \"\"\" Given a 2D array of positive integers, find the optimal path from \n    the top-left corner to the bottom-right corner such that you can only \n    move in four directions (down, up, left, right). \n    You can only move to a position to another if the \n    difference of its value is not more than 1.\n\n    >>> optimal_jump_path([[2, 4, 5],\n                          [1, 2, 5],\n                          [0, 3, 5]])\n    [1, 2, 5, 4, 5, 5, 3, 5] \n    >>> optimal_jump_path([[2, 4, 6],\n                          [1, 3, 5],\n                          [0, 1, 5]])\n    [1, 3, 5, 4, 6, 5, 1, 5]\n    \"\"\"", "output": "pass", "id": 498, "avg_similarity_score": 0.16423914142666637}
{"instruction": "def rotate90_clockwise(matrix):\n    \"\"\"Given a matrix in the form of 2D array,\n    rotate it 90 degrees clockwise in place.\n    The output should be a 2D array.\n\n    >>> rotate90_clockwise([[ 1,  2,  3], \n                            [ 4,  5,  6], \n                            [ 7,  8,  9]])\n    [[ 7,  4,  1],\n     [ 8,  5,  2],\n     [ 9,  6,  3]]\n    >>> rotate90_clockwise([[10, 11, 12], \n                            [13, 14, 15], \n                            [16, 17, 18]])\n    [[16, 13, 10],\n     [17, 14, 11],\n     [18, 15, 12]]\n    \"\"\"", "output": "pass", "id": 499, "avg_similarity_score": 0.19075355659430254}
{"instruction": "def max_sum_subarrays(array):\n    \"\"\" Find the maximum sum of non-overlapping subarrays among \n    all possible subarrays of the given array.\n\n    >>> max_sum_subarrays([2, 1, 3, 4, 5])\n    12\n    >>> max_sum_subarrays([-2, 5, 6, -1, 3])\n    11\n    \"\"\"", "output": "pass", "id": 500, "avg_similarity_score": 0.18958387890753786}
{"instruction": "def add_two_digits(num1, num2):\n    \"\"\"  Given two non-negative integers num1 and num2 represented as string, \n    return the sum of num1 and num2.\n\n    >>> add_two_digits(\"10\", \"20\")\n    30\n    >>> add_two_digits(\"37\", \"60\")\n    97\n    \"\"\"", "output": "pass", "id": 501, "avg_similarity_score": 0.1860925148334522}
{"instruction": "def get_volume_of_water(height):\n    \"\"\" You are given an array height with positive integers representing \n    the height of a building at each index. \n    Find and return the total volume of water that can be trapped between the buildings represented\n    by the array.\n\n    >>> get_volume_of_water([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])\n    6\n    >>> get_volume_of_water([3, 0, 0, 2, 0, 4])\n    10\n    \"\"\"", "output": "pass", "id": 502, "avg_similarity_score": 0.2001329795547802}
{"instruction": "def group_consecutive_numbers(nums):\n    \"\"\" Given an array of integers, return a list of consecutive groups allowing at most one missing number.\n\n    >>> group_consecutive_numbers([1, 2, 5, 6, 7])\n    [[1, 2], [5, 6, 7]]\n    >>> group_consecutive_numbers([5, 7, 9, 11, 12, 15])\n    [[5], [7, 9], [11, 12], [15]]\n    \"\"\"", "output": "pass", "id": 503, "avg_similarity_score": 0.20612636973282747}
{"instruction": "def maximum_consecutive_sum(nums):\n    \"\"\" Given an array of integers nums, find the maximum sum of non-empty \n    subsequences of nums, however you can only choose two numbers from each \n    index of a sub array.\n\n    >>> maximum_consecutive_sum([3, 8, 2, 7, 11, 4])\n    15\n    Explanation: Pick 8 and 11 from index 1, 2 respectively. \n    >>> maximum_consecutive_sum([3, 4, 2, 5, 6, 1, 8, 9])\n    18\n    \"\"\"", "output": "pass", "id": 504, "avg_similarity_score": 0.2011190701877096}
{"instruction": "def remove_duplicates_from_string(s):\n    \"\"\" given a string s, remove all duplicate characters from the string \n    and return the new string.\n\n    >>> remove_duplicates_from_string(\"abbcccdddde\") \n    \"abcde\"\n    >>> remove_duplicates_from_string(\"abbcccccddddeeefff\")\n    \"abcdef\"\n    \"\"\"", "output": "pass", "id": 505, "avg_similarity_score": 0.20237331553038734}
{"instruction": "def sum_even_and_odd_digits(n: int):\n    \"\"\" Compute the sum of even and odd digits of a given number.\n\n    >>> sum_even_and_odd_digits(1234)\n    10\n    >>> sum_even_and_odd_digits(12331)\n    9\n    \"\"\"", "output": "pass", "id": 506, "avg_similarity_score": 0.17468702269470207}
{"instruction": "def is_valid_palindrome(s: str):\n    \"\"\" Check if the given string is a valid palindrome.\n\n    >>> is_valid_palindrome(\"racecar\")\n    True\n    >>> is_valid_palindrome(\"abbcba\")\n    False\n    \"\"\"", "output": "pass", "id": 507, "avg_similarity_score": 0.16710252296020248}
{"instruction": "def print_substring_reverse(s: str):\n    \"\"\" Prints the substring of a given string from the reversed index.\n\n    >>> print_substring_reverse(\"Hello World\")\n    dlroW olle\n    >>> print_substring_reverse(\"Good Morning\")\n    gninroM dooG\n    \"\"\"", "output": "pass", "id": 508, "avg_similarity_score": 0.18324033952981744}
{"instruction": "def add_items_to_dict(d: dict, key: int, value: int):\n    \"\"\" Add the given key and value pair to a given dictionary.\n\n    Parameters\n    ----------\n    d: dict\n        dictionary \n    key: int\n        key to add to the dict\n    value: int\n        value to add to the dict\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    >>> d = {1: 2, 3: 4}\n    >>> add_items_to_dict(d, 5, 6)\n    >>> d\n    {1: 2, 3: 4, 5: 6}\n    \"\"\"", "output": "pass", "id": 509, "avg_similarity_score": 0.1342780672600297}
{"instruction": "def count_freq(arr: list, element: int):\n    \"\"\" Given an array and an element, \n    count the frequency of the element in the array.\n\n    Parameters\n    ----------\n    arr: list\n        list of integers\n    element: int\n        element to be counted\n\n    Returns\n    -------\n    frequency: int\n        the frequency of the element in the array \n\n    Examples\n    --------\n    >>> count_freq([1,2,3,2,2,1,3],2)\n    3\n    >>> count_freq([1,2,3],4)\n    0\n    \"\"\"", "output": "pass", "id": 510, "avg_similarity_score": 0.20474865142986662}
{"instruction": "def sqrt_sum_list(arr: list):\n    \"\"\" Computes the square root sum of each element in the given list.\n\n    Parameters\n    ----------\n    arr: list\n        list of numbers\n\n    Returns\n    -------\n    result: list\n        list consists of sum of squares of each elements \n\n    Examples\n    --------\n    >>> sqrt_sum_list([1,2,3])\n    [1.0, 2.23606797749979, 3.7416573867739413]\n    >>> sqrt_sum_list([2,3,4])\n    [2.0, 3.605551275463989, 5.0]\n\"\"", "output": "pass", "id": 511, "avg_similarity_score": 0.16449801508671713}
{"instruction": "def find_common_element(arr1: list, arr2: list):\n    \"\"\" Find common elements present in both arrays and return the count of \n    common elements. \n\n    Parameters\n    ----------\n    arr1: list\n        first list of elements\n    arr2: list\n        second list of elements\n\n    Returns\n    -------\n    common: int\n        count of common elements\n\n    Examples\n    --------\n    >>> find_common_element([1,2,3], [2,3,4])\n    2\n    >>> find_common_element([1,2,3], [4,5,6])\n    0\n    \"\"\"", "output": "pass", "id": 512, "avg_similarity_score": 0.13874286372919475}
{"instruction": "def pair_sum(arr: list, target):\n    \"\"\" Given an array return list of pairs whoe sum is equal to target value.\n\n    Parameters\n    ----------\n    arr: list\n        list of numbers\n    target: int\n        target count \n\n    Returns\n    -------\n    pairs: list\n        list of <index1, index2, value> of elements \n\n    Examples\n    --------\n    >>> pair_sum([5,6,7], 12)\n    [[0,2,12]]\n    >>> pair_sum([5,6,7,9], 12)\n    [[0,2,12], [1,3,12]]\n    \"\"\"", "output": "pass", "id": 513, "avg_similarity_score": 0.1679252367815198}
{"instruction": "def separate_non_palindrome(arr: list):\n    \"\"\" Separate strings in array to palindrome strings and non-palindrome strings \n    and returns both the lists.\n\n    Parameters\n    ----------\n    arr: list\n        list of strings\n\n    Returns\n    -------\n    palindrome_list: list\n        list of palindrome strings\n    non_palindrome_list: list\n        list of non-palindrome strings\n\n    Examples\n    --------\n    >>> separate_non_palindrome(['abc','bar','anna'])\n    (['anna'], ['abc','bar'])\n    >>> separate_non_palindrome(['anna','oll'])\n    (['anna', 'oll'], []) \n    \"\"\"", "output": "pass", "id": 514, "avg_similarity_score": 0.13015331922582352}
{"instruction": "def check_ascending_order(arr: list):\n    \"\"\" Check if the given array is in ascending order.\n\n    Parameters\n    ----------\n    arr: list\n        list of elements\n\n    Returns\n    -------\n    boolean: boolean\n        True if it is in ascending order otherwise False \n\n    Examples\n    --------\n    >>> check_ascending_order([1,2,3])\n    True\n    >>> check_ascending_order([3,2,1])\n    False\n    >>> check_ascending_order([2,1,2])\n    False\n    \"\"\"", "output": "pass", "id": 515, "avg_similarity_score": 0.16229434458963055}
{"instruction": "def translate(word):\n    \"\"\"Given a string, return the translation of the string\n    using a dictionary of english to spanish words\n\n    >>> translate(\"cat\")\n    \"gato\"\n    >>> translate(\"dog\")\n    \"perro\"\n    \"\"\"", "output": "pass", "id": 516, "avg_similarity_score": 0.23144098694009446}
{"instruction": "def find_max_duplicate(nums):\n    \"\"\"Given a list of integers, find the maximum element that appears as a duplicate.\n    \n    >>> find_max_duplicate([1,2,3,2,2,4])\n    2\n    >>> find_max_duplicate([1,2,3,4])\n    -1\n    \"\"\"", "output": "pass", "id": 517, "avg_similarity_score": 0.22494826665940915}
{"instruction": "def valid_bracket_expression(exp):\n    \"\"\"Given an expression string exp, check if the expression is valid.\n    An expression is valid when the brackets are placed in a way that it forms a valid expression\n\n    >>> valid_bracket_expression(\"{}[]\")\n    True\n    >>> valid_bracket_expression(\"({)}\")\n    False\n    \"\"\"", "output": "pass", "id": 518, "avg_similarity_score": 0.15580653551182447}
{"instruction": "def select_unique_values(arr,key):\n    \"\"\"Given a two-dimensional array arr, select unique values of the key.\n\n    >>> select_unique_values([[87,3],[10,10],[4,4]],1)\n    [3,10]\n    >>> select_unique_values([[87,3],[10,10],[4,4]],0)\n    [87,10,4]\n    \"\"\"", "output": "pass", "id": 519, "avg_similarity_score": 0.19482702919857176}
{"instruction": "def longest_rep_substring(s):\n    \"\"\"Given a string s, find the length of the longest repeated substring.\n\n    >>> longest_rep_substring(\"ababab\")\n    3\n    >>> longest_rep_substring(\"aaaaaa\")\n    6\n    \"\"\"", "output": "pass", "id": 520, "avg_similarity_score": 0.22722224768561117}
{"instruction": "def switch_case(s):\n    \"\"\"Given a string s, replace the upper characters with lower characters, and lower characters with upper characters.\n\n    >>> switch_case(\"mango\")\n    \"MANGO\"\n    >>> switch_case(\"CHEESE\")\n    \"cheese\"\n    \"\"\"", "output": "pass", "id": 521, "avg_similarity_score": 0.15992316225066544}
{"instruction": "def find_distinct_pairs(a, b, k):\n    \"\"\"Given two arrays a and b of length n, find all distinct pairs (x, y)  such that x \u2208 a,  y \u2208 b and x + y = k.\n\n    >>> find_distinct_pairs([1,3,2,4], [5,2,8,1], 6)\n    [[1,5],[3,3],[2,4]]\n    >>> find_distinct_pairs([3,4,2], [3,2,2], 5)\n    [[3,2],[4,1]]\n    \"\"\"", "output": "pass", "id": 522, "avg_similarity_score": 0.16782177991425007}
{"instruction": "def word_break_possible(s, word_dict):\n    \"\"\"Given a string s and a dictionary word_dict containing a list of words, determine if the string s can be broken into a space-separated sequence of one or more dictionary words.\n\n    >>> word_break_possible(\"leetcode\", [\"leet\", \"code\"])\n    True\n    >>> word_break_possible(\"applepie\", [\"apple\", \"pie\"])\n    True\n    \"\"\"", "output": "pass", "id": 523, "avg_similarity_score": 0.17851701671079556}
{"instruction": "def first_unique_character(s):\n    \"\"\"Find the first non-repeating character in a given string.\n\n    >>> first_unique_character(\"abccbadefg\")\n    \"e\"\n    >>> first_unique_character(\"aaabccddee\")\n    \"b\"\n    \"\"\"", "output": "pass", "id": 524, "avg_similarity_score": 0.1574896382449457}
{"instruction": "def rotate_matrix(matrix):\n    \"\"\"Given a matrix of size m*n, rotate it by 90 degrees in the clockwise direction.\n    \n    >>> rotate_matrix([[1,2,3],\n    [4,5,6],\n    [7,8,9]])\n    [[7,4,1],\n    [8,5,2],\n    [9,6,3]]\n    >>> rotate_matrix([[2,3,4],[5,6,7],[8,9,10]])\n    [[8,5,2],\n    [9,6,3],\n    [10,7,4]]\n    \"\"\"", "output": "pass", "id": 525, "avg_similarity_score": 0.18584941111831324}
{"instruction": "def lexicographical_sort(data):\n    \"\"\"Given an array of strings data, sort the array in lexicographical order \n    (lexicographical order is similar to alphabetical order, but dictionaries consider more than just A to Z).\n    \n    >>> lexicographical_sort(['bb', 'abc', 'd', 'xyz'])\n    ['d', 'bb', 'abc', 'xyz']\n    >>> lexicographical_sort(['dog', 'cat', 'apple', 'banana'])\n    ['apple', 'banana', 'cat', 'dog']\n    \"\"\"", "output": "pass", "id": 526, "avg_similarity_score": 0.17083952122831597}
{"instruction": "def search(nums: List[int], value:int) -> bool:\n    \"\"\" Given a sorted array of n integers nums and an integer value, \n    determine if value is in the array by performing a binary search. \n\n    >>> search([1,2,3,4],2)\n    True\n    >>> search([2,4,5,6],3)\n    False\n    \"\"\"", "output": "pass", "id": 527, "avg_similarity_score": 0.22513270348075426}
{"instruction": "def m_stack(arr:List):\n    \"\"\"Given an array of 2 strings and an integer n.\n    The sub-strings must have length n and appear the same number of times in the array.\n    The function should return true if the elements in the array can be put in a single stack.\n\n   >>> m_stack(['aa','aa'],2)\n   True\n   >>> m_stack(['aaaa','bbbb'],2)\n   False\n   \"\"\"", "output": "pass", "id": 528, "avg_similarity_score": 0.20311656273181922}
{"instruction": "def search_sorted_rotated_array(nums: List[int], target: int, low: int, high: int) -> int:\n    \"\"\" Given an array of integers sorted in ascending order and an integer target.\n    The array has been rotated a certain number of times, so the elements are not necessarily in order.\n    Return the index of the target in the array, or -1 if the target is not in the array.\n\n    >>> search_sorted_rotated_array([4,5,6,7,0,1,2],0,0,6)\n    4\n    >>> search_sorted_rotated_array([4,5,6,7,0,1,2],3,0,6)\n    -1\n    \"\"\"", "output": "pass", "id": 529, "avg_similarity_score": 0.19498733292569723}
{"instruction": "def int_interval_info(ints: tuple) -> dict:\n    \"\"\"Given a two-element tuple of integers (low, high), \n    return a dictionary containing the number of integers in the interval (inclusive), \n    the sum of these integers, the mean (rounded to nearest integer), the median, and the mode.\n    >>> int_interval_info((1, 9))\n    {'length': 9, 'sum': 45, 'mean': 5, 'median': 5, 'mode': 5}\n    >>> int_interval_info((2, 8))\n    {'length': 7, 'sum': 36, 'mean': 5, 'median': 5, 'mode': 5}\n    \"\"\"", "output": "pass", "id": 530, "avg_similarity_score": 0.20226668275510315}
{"instruction": "def house_coloring(costs: List[List[int]]) -> int:\n    \"\"\" A painter is given a row of n houses, and he must paint each house with one of three colors \n    (represented by integers 1, 2, and 3). \n    Each cost[i] represents the cost of painting the ith house with the color i.\n    Find the minimum cost to paint all n houses. \n\n    >>> house_coloring([[1,2,3],[4,5,6],[7,8,9]])\n    15\n    >>> house_coloring([[1,2,3],[3,1,8],[9,4,6]])\n    12\n    \"\"\"", "output": "pass", "id": 531, "avg_similarity_score": 0.1635857461494785}
{"instruction": "def binary_search_unique(arr: List[int], left: int, right: int, target: int) -> int:\n    \"\"\"Given a sorted array arr, return the index of target in the array.\n    If there are multiple occurrences of target in the array, return the leftmost index of the target.\n    If target is not in the array, return -1.\n\n    >>> binary_search_unique([1,2,3,4,5,5,6],0,6,5)\n    4\n    >>> binary_search_unique([1,2,3,4,5,6,7],0,6,8)\n    -1\n    \"\"\"", "output": "pass", "id": 532, "avg_similarity_score": 0.2008628687609038}
{"instruction": "def max_sum_subarray(nums: List[int]) -> int:\n    \"\"\"Given an array of integers, return the maximum sum that can be obtained from a non-empty subarray.\n\n    >>> max_sum_subarray([1, -2, 3, 4])\n    7\n    >>> max_sum_subarray([2,3,-4,6])\n    7\n    \"\"\"", "output": "pass", "id": 533, "avg_similarity_score": 0.2297989706895016}
{"instruction": "def first_bad_version(start, end):\n    \"\"\"You are a product manager and currently leading a team. \n    Given a version number start and end, find the first bad version of an API.\n    Calling the API with a version number returns whether or not the version is bad.\n    \n    >>> first_bad_version(1,4)\n    3\n    >>> first_bad_version(2,7)\n    5\n    \"\"\"", "output": "pass", "id": 534, "avg_similarity_score": 0.16305623093426547}
{"instruction": "def find_closest_palindrome(s):\n    \"\"\"Given a string s, with length n, find the closest palindrome to s. \n    A palindrome is a string that reads the same forwards and backwards. \n\n    >>> find_closest_palindrome(\"car\")\n    \"cac\"\n    >>> find_closest_palindrome(\"abc\")\n    \"aba\"\n    >>> find_closest_palindrome(\"xyz\")\n    \"xyzyx\"\n    \"\"\"", "output": "pass", "id": 535, "avg_similarity_score": 0.19511221611215754}
{"instruction": "def reverse_words(s):\n    \"\"\"Given a string s, with length n, reverse each word in the string, \n    while preserving the order of words.\n\n    >>> reverse_words(\"i love coding\")\n    \"i evol gnidoc\"\n    >>> reverse_words(\"coding is fun\")\n    \"gnidoc si nuf\"\n    >>> reverse_words(\"python rocks\")\n    \"nohtyp skcor\"\n    \"\"\"", "output": "pass", "id": 536, "avg_similarity_score": 0.20316414839454622}
{"instruction": "def count_single_letter_words(words):\n    \"\"\"Given an array of words, count the number of single letter words, \n    where each word consists of only one letter.\n\n    >>> count_single_letter_words([\"a\",\"bb\",\"ccc\"])\n    1\n    >>> count_single_letter_words([\"a\",\"b\",\"c\",\"d\",\"e\"])\n    5\n    >>> count_single_letter_words([\"gh\",\"i\",\"jklmn\",\"o\"])\n    2\n    \"\"\"", "output": "pass", "id": 537, "avg_similarity_score": 0.1890617882396965}
{"instruction": "def find_max_prefix_sum(arr):\n    \"\"\"Given an array arr of non-negative integers, find the max prefix sum of arr. \n    A prefix sum is the sum of all elements in the subarray from index 0 to a given index.\n\n    >>> find_max_prefix_sum([1,2,3,4])\n    10\n    >>> find_max_prefix_sum([2,1,-5,4])\n    6\n    >>> find_max_prefix_sum([5,9,-4,2])\n    16\n    \"\"\"", "output": "pass", "id": 538, "avg_similarity_score": 0.22858978929673415}
{"instruction": "def three_sum(nums):\n    \"\"\"Given an array of integers nums, return a list of tuples where \n    the 3 elements of each tuple sum to 0.\n\n    >>> three_sum([-1, 0, 1, 2, -1, -4])\n    [(-1, 0, 1), (-1, -1, 2)]\n    >>> three_sum([3, 0, 5, -2, 7, 4])\n    [(-2, 0, 2), (4, -2, 6), (-2, 3, 5)]\n    >>> three_sum([-2, 1, -4, 3])\n    [(-2, 1, 1)]\n    \"\"\"", "output": "pass", "id": 539, "avg_similarity_score": 0.23930815137628553}
{"instruction": "def solve_sudoku(board):\n    \"\"\"Given a 9x9 board containing the numbers 0-9, solve the board such that \n    every row, every column, and every 3x3 contains the numbers 0-9.\n\n    >>>solve_sudoku(\n        [[5,3,0,0,7,0,0,0,0],\n        [6,0,0,1,9,5,0,0,0],\n        [0,9,8,0,0,0,0,6,0],\n        [8,0,0,0,6,0,0,0,3],\n        [4,0,0,8,0,3,0,0,1],\n        [7,0,0,0,2,0,0,0,6],\n        [0,6,0,0,0,0,2,8,0],\n        [0,0,0,4,1,9,0,0,5],\n        [0,0,0,0,8,0,0,7,9]])\n    [ [5, 3, 4, 6, 7, 8, 9, 1, 2],\n      [6, 7, 2, 1, 9, 5, 3, 4, 8],\n      [1, 9, 8, 3, 4, 2, 5, 6, 7],\n      [8, 5, 9, 7, 6, 1, 4, 2, 3],\n      [4, 2, 6, 8, 5, 3, 7, 9, 1],\n      [7, 1, 3, 9, 2, 4, 8, 5, 6],\n      [9, 6, 1, 5, 3, 7, 2, 8, 4],\n      [2, 8, 7, 4, 1, 9, 6, 3, 5],\n      [3, 4, 5, 2, 8, 6, 1, 7, 9] ]\n    \"\"\"", "output": "pass", "id": 540, "avg_similarity_score": 0.15726758568463614}
{"instruction": "def prefixes_div_by_5(A):\n    \"\"\" Given an array A of 0s and 1s, return an array of equal length,\n    where the element at each index i is 0 if A[0]...A[i] are not divisible by 5,\n    and 1 if they are divisible by 5.\n\n    >>> prefixes_div_by_5([0,1,1,1,1,1])\n    [0,0,1,1,1,1]\n    >>> prefixes_div_by_5([1,1,1,0,1])\n    [0,0,0,0,1]\n    >>> prefixes_div_by_5([1,0,0,1,0,1,1,1])\n    [0,0,0,1,1,1,1,1]\n    \"\"\"", "output": "pass", "id": 541, "avg_similarity_score": 0.17807695297465678}
{"instruction": "def invert_binary_tree(root):\n    \"\"\"Given a binary tree, return the invert of the binary tree.\n\n    >>> invert_binary_tree(\n        3\n      /   \\\n    4      5\n          /   \\\n        8      6\n        )\n    3\n    /   \\\n  5      4\n        /   \\\n       6      8\n   \"\"\"", "output": "pass", "id": 542, "avg_similarity_score": 0.21433582660603467}
{"instruction": "def evenly_split_string(s, k):\n    \"\"\" Given a non-empty string s of length n, and a lower bound k,\n    determine if it can be evenly split in k non-empty parts.\n    If it is possible, return a list containing all the parts.\n\n    >>> evenly_split_string(\"abcdefg\", 3)\n    [\"abc\", \"def\", \"g\"]\n    >>> evenly_split_string(\"abcde\", 4)\n    [\"a\", \"b\", \"c\", \"de\"]\n    >>> evenly_split_string(\"catdog\", 5)\n    [False]\n    \"\"\"", "output": "pass", "id": 543, "avg_similarity_score": 0.18179004413209748}
{"instruction": "def check_person_exist(people, name):\n    \"\"\"Given an array people containing n person objects represented \n    in the form [name, age, height] and a string name,\n    check if name is present in people. \n    If a person with name exists, return True, otherwise False.\n\n    >>> check_person_exist([[\"john\", 22, 170], [\"mike\", 33, 180], [\"ryan\", 18, 160]], \"mike\")\n    True\n    >>> check_person_exist([[\"john\", 22, 170], [\"mike\", 33, 180], [\"ryan\", 18, 160]], \"sarah\")\n    False\n    \"\"\"", "output": "pass", "id": 544, "avg_similarity_score": 0.1508139250009584}
{"instruction": "def factorial_sum_of_digits(n: int):\n    \"\"\" Calculate the sum of factorials of each digit in the given number.\n\n    >>> factorial_sum_of_digits(5)\n    120\n    >>> factorial_sum_of_digits(999)\n    1088640\n    \"\"\"", "output": "pass", "id": 545, "avg_similarity_score": 0.20333852251225193}
{"instruction": "def find_maximum_sum_subarray(array: [int]):\n    \"\"\" Given an array of integers, find a maximum sum subarray. \n    The subarray should at least contain two elements.\n\n    >>> find_maximum_sum_subarray([-4,-2,2,7,3,-1])\n    [2,7,3]\n    >>> find_maximum_sum_subarray([1,-8,3,4])\n    [3,4]\n    \"\"\"", "output": "pass", "id": 546, "avg_similarity_score": 0.21146328615726917}
{"instruction": "def contains_k_distinct_characters(s: str, k: int):\n    \"\"\" Check if the given string contains exactly k distinct characters or not.\n\n    >>> contains_k_distinct_characters('caaab', 2)\n    True\n    >>> contains_k_distinct_characters('ccc', 3)\n    False\n    \"\"\"", "output": "pass", "id": 547, "avg_similarity_score": 0.14346728739485048}
{"instruction": "def find_largest_k_consecutive_on_ones(array: [int], k: int):\n    \"\"\" Given an array of 0s and 1s, find the indices of an array containing the largest consecutive k ones.\n\n    >>> find_largest_k_consecutive_on_ones([0,0,1,1,1,1], 2)\n    (2,4)\n    >>> find_largest_k_consecutive_on_ones([0,1,0,1,1,1,1], 3)\n    (1,4)\n    \"\"\"", "output": "pass", "id": 548, "avg_similarity_score": 0.21256638102057984}
{"instruction": "def find_most_frequent_words(words: {str}, k: int):\n    \"\"\" Given an array of words, find the k most frequent words in descending order based on their frequency.\n\n    >>> find_most_frequent_words([\"hello\",\"world\",\"hello\",\"world\",\"hello\"], 2)\n    ['hello', 'world']\n    >>> find_most_frequent_words([\"hello\",\"world\",\"hello\"], 1)\n    [\"hello\"]\n    \"\"\"", "output": "pass", "id": 549, "avg_similarity_score": 0.19205863799006714}
{"instruction": "def are_anagrams(s1: str, s2: str):\n    \"\"\" Returns if given two strings are anagrams of each other or not.\n\n    >>> are_anagrams('listen','silent')\n    True\n    >>> are_anagrams('cat','act')\n    True\n    \"\"\"", "output": "pass", "id": 550, "avg_similarity_score": 0.14976956809557973}
{"instruction": "def missing_prime_numbers(nums: {int}):\n    \"\"\" Given an array of positive ints, return a list of all \n    prime numbers that appears in a subsequence of the array. \n\n    >>> missing_prime_numbers([2,3,6])\n    [2,3]\n    >>> missing_prime_numbers([9,18,24])\n    [2,3,5,7]\n    \"\"\"", "output": "pass", "id": 551, "avg_similarity_score": 0.2440391705198105}
{"instruction": "def lexicographically_smaller_string(s1: str, s2: str):\n    \"\"\" Given two strings, determine which string is lexicographically smaller.\n\n    >>> lexicographically_smaller_string('laptop', 'motion')\n    'laptop'\n    >>> lexicographically_smaller_string('beetle', 'antenna')\n    'antenna'\n    \"\"\"", "output": "pass", "id": 552, "avg_similarity_score": 0.13457144722773515}
{"instruction": "def number_of_arrays_equal_sum_in_a_given_array(arr: {int}, n: int):\n    \"\"\" Given an array of n integers and an integer sum. Find \n    the number of possible arrays that have an equal sum \n    from the given array. \n\n    >>> number_of_arrays_equal_sum_in_a_given_array([1,1,1], 3)\n    4\n    >>> number_of_arrays_equal_sum_in_a_given_array([3,2,1], 3)\n    1\n    \"\"\"", "output": "pass", "id": 553, "avg_similarity_score": 0.22741354731939653}
{"instruction": "def find_longest_decreasing_subarray(array: [int]):\n    \"\"\" Given a non-empty array, return the longest decreasing subarray.\n\n    >>> find_longest_decreasing_subarray([-3, -2, -1, 0, 1, 4])\n    [-3, -2, -1, 0]\n    >>> find_longest_decreasing_subarray([8,7,9,4,3,5])\n    [4,3]\n    \"\"\"", "output": "pass", "id": 554, "avg_similarity_score": 0.19977152395457287}
{"instruction": "def is_sos_pair(arr: List[int], k: int) -> bool:\n    \"\"\"\n    Given an array of integers arr and an integer k,\n    return whether there are two distinct indices i and j in the array \n    such that arr[i] + arr[j] == k.\n\n    >>> is_sos_pair([1,2,3,4], 7)\n    True\n    >>> is_sos_pair([2,3,1], 5)\n    False\n    >>> is_sos_pair([], 5)\n    False\n    \"\"\"", "output": "pass", "id": 555, "avg_similarity_score": 0.2043168482042794}
{"instruction": "def max_triplets(arr: List[int], max_value: int) -> List[int]:\n    \"\"\" \n    Given an array of integers arr and an maximum_value,\n    return all the triplets of indices that sum to max_value.\n    Note: Triplets should contain indices that cover the entire array.\n\n    >>> max_triplets([1,3,5], 9)\n    [(0,1,2)]\n    >>> max_triplets([2,4,7], 8)\n    []\n    \"\"\"", "output": "pass", "id": 556, "avg_similarity_score": 0.21241028647283383}
{"instruction": "def count_common_subarrays(array1: List[int], array2: List[int], k: int) -> int:\n    \"\"\"\n    Given two sorted arrays array1 and array2 and an integer k, \n    find the number of common subarrays of size k in both arrays.\n\n    >>> count_common_subarrays([1,2,3,4,2], [2,1,4,3], 3)\n    3\n    >>> count_common_subarrays([1,3,5], [2,4], 1)\n    3\n    >>> count_common_subarrays([1,2,3,4], [4,5,6], 2)\n    0\n    \"\"\"", "output": "pass", "id": 557, "avg_similarity_score": 0.19203049858766244}
{"instruction": "def zigzag_array(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array of integers nums and an integer k,\n    return a newarray such that the elements of nums are\n    cyclically shifted k positions to the right.\n\n    >>> zigzag_array([1,2,3], 1)\n    [3,1,2]\n    >>> zigzag_array([1,2,3,4,5], 2)\n    [4,5,1,2,3]\n    >>> zigzag_array([4,2,3,9], 4)\n    [3,9,4,2]\n    \"\"\"", "output": "pass", "id": 558, "avg_similarity_score": 0.23877861947750195}
{"instruction": "def count_chocolate_pieces(n: int) -> int:\n    \"\"\"\n    Given an integer n, return the total number of pieces of chocolate \n    that can be made if a chocolate bar consists of n equal sized pieces \n    which can each be cut into two smaller pieces.\n\n    >>> count_chocolate_pieces(1)\n    1\n    >>> count_chocolate_pieces(4)\n    15\n    >>> count_chocolate_pieces(7)\n    127\n    \"\"\"", "output": "pass", "id": 559, "avg_similarity_score": 0.17549189681983024}
{"instruction": "def is_interleave(word1: str, word2: str, result: str) -> bool:\n    \"\"\"\n    Given two strings word1 and word2 and a string result which is merging result of\n    word1 and word2, determine whether result is eligible of interleaving of word1 and word2.\n\n    >>> is_interleave(\"abd\", \"cef\", \"abcdef\")\n    True\n    >>> is_interleave(\"cat\", \"dog\", \"ccadgto\")\n    False\n    >>> is_interleave(\"ddc\", \"cef\", \"decdf\")\n    False\n    \"\"\"", "output": "pass", "id": 560, "avg_similarity_score": 0.15261827747652862}
{"instruction": "def lexicographically_smallest(word1: str, word2: str) -> str:\n    \"\"\"\n    Given two strings word1 and word2, return the lexicographically smallest string which is merging of \n    word1 and word2.\n\n    >>> lexicographically_smallest(\"cat\", \"dog\")\n    'cdatog'\n    >>> lexicographically_smallest(\"bat\", \"cab\")\n    'baabc'\n    >>> lexicographically_smallest(\"dance\", \"slow\")\n    'danceslow'\n    \"\"\"", "output": "pass", "id": 561, "avg_similarity_score": 0.17985135566766491}
{"instruction": "def has_increasing_trend(arr: List[int], k: int) -> bool:\n    \"\"\" Given an array of integers arr and an integer k, \n    return whether there is a monotonic increasing sequence of length k \n    in arr.\n\n    >>> has_increasing_trend([1,2,3,4], 3)\n    True\n    >>> has_increasing_trend([1,-2,3,4], 3)\n    False\n    >>> has_increasing_trend([1,2,3,10,6], 2)\n    True\n    \"\"\"", "output": "pass", "id": 562, "avg_similarity_score": 0.22031545782870635}
{"instruction": "def find_longest_common_prefix(str1: str, str2: str) -> str:\n    \"\"\"\n    Given two strings str1 and str2, return the longest common prefix that appears in both strings.\n    If there is no common prefix, return the empty string \"\".\n\n    >>> find_longest_common_prefix('flow', 'flower')\n    'flo'\n    >>> find_longest_common_prefix('flower', 'flight')\n    'fl'\n    >>> find_longest_common_prefix('abcd', 'efgh')\n    ''\n    \"\"\"", "output": "pass", "id": 563, "avg_similarity_score": 0.17584452746660714}
{"instruction": "def describe_dict(d):\n    \"\"\" Given a dictionary d, return a string of the form length: value\n    where length is the number of entries in the dictionary and \n    value is the list of elements in list form.\n\n    >>> describe_dict({'a': 1, 'b': 2})\n    '2: [a: 1, b: 2]'\n    >>> describe_dict({'a': [1,2,3]})\n    '1: [a: [1, 2, 3]]'\n    \"\"\"", "output": "pass", "id": 564, "avg_similarity_score": 0.2144087320442314}
{"instruction": "def word_categorization(words):\n    \"\"\" Given an array words of strings, group the strings by the first \n    character of each string, and return a dictionary with the characters \n    as keys and the array of strings as values.\n\n    >>> word_categorization([\"Apple\", \"Banana\", \"Carrot\", \"Almond\"])\n    {'A': ['Apple', 'Almond'], 'B': ['Banana'], 'C': ['Carrot']}\n    >>> word_categorization([\"Cake\", \"Car\", \"Canvas\"])\n    {'C': ['Cake', 'Car', 'Canvas']}\n    \"\"\"", "output": "pass", "id": 565, "avg_similarity_score": 0.2136290122802962}
{"instruction": "def filter_prime(input_lst):\n    \"\"\"Given a list of  integers, filter out all numbers that are not prime numbers\n    and return the filtered list.\n\n    >>> filter_prime([2, 3, 7, 11, 15])\n    [2, 3, 7, 11]\n    >>> filter_prime([2, 4, 6, 8, 10])\n    [2]\n    \"\"\"", "output": "pass", "id": 566, "avg_similarity_score": 0.2058443397869058}
{"instruction": "def sort_dict_val_num(d):\n    \"\"\"Given a dictionary d whose values are all integers,\n    return a list of tuples sorted by the value of each tuple in the dictionary.\n\n    >>> sort_dict_val_num({'a':2, 'b':4, 'c':1, 'd':0})\n    [('d', 0), ('c', 1), ('a', 2), ('b', 4)]\n    >>> sort_dict_val_num({'x':10, 'y':-1, 'z':5})\n    [('y', -1), ('z', 5), ('x', 10)]\n    \"\"\"", "output": "pass", "id": 567, "avg_similarity_score": 0.20910888962003987}
{"instruction": "def email_finder(word):\n    \"\"\" Given a string word, return a list of all possible email addresses\n    with the given word as the username.\n\n    >>> email_finder('test')\n    ['test@example.com', 'test@example.org', 'test@example.net']\n    \"\"\"", "output": "pass", "id": 568, "avg_similarity_score": 0.21082827345748012}
{"instruction": "def element_multiply(lst):\n    \"\"\" Given a list lst, multiply each element in the list with itself and\n    return a list with the results.\n\n    >>> element_multiply([1, 2, 3])\n    [1, 4, 9]\n    >>> element_multiply([4, 5, 6])\n    [16, 25, 36]\n    \"\"\"", "output": "pass", "id": 569, "avg_similarity_score": 0.198200306589345}
{"instruction": "def string_increment(word):\n    \"\"\" Given a string word, return a new string composed of the original\n    string plus an additional digit at the end of the string, with the added\n    digit being 1 greater than the last digit of the original string.\n\n    >>> string_increment('123')\n    '1231'\n    >>> string_increment('234')\n    '2341'\n    \"\"\"", "output": "pass", "id": 570, "avg_similarity_score": 0.18582643269498633}
{"instruction": "def adjacent_reverse(lst):\n    \"\"\"Given a list of integers, reverse all consecutive elements that are adjacent and equal.\n\n    >>> adjacent_reverse([1, 2, 2, 1])\n    [2, 2, 1, 1]\n    >>> adjacent_reverse([1, 1, 1, 5, 5, 3])\n    [1, 1, 5, 5, 3, 1]\n    \"\"\"", "output": "pass", "id": 571, "avg_similarity_score": 0.19278063302976783}
{"instruction": "def find_num_blocks(matrix):\n    \"\"\"Given a 2d array (matrix) of 1's and 0s, count the number of blocks \n    consisting of 1's, where a block is defined by 4 adjacent \n    coordinates that are all 1's.\n\n    >>> find_num_blocks([\n        [1, 0, 0, 0],\n        [1, 1, 0, 0],\n        [0, 1, 1, 0],\n        [0, 0, 1, 1]])\n    2\n    \"\"\"", "output": "pass", "id": 572, "avg_similarity_score": 0.18942094636691253}
{"instruction": "def get_type_name(input):\n    \"\"\"Given an input, return its type name in string form.\n\n    >>> get_type_name(123)\n    'int'\n    >>> get_type_name(\"Hello\")\n    'str'\n    >>> get_type_name([1, 2, 3])\n    'list'\n    \"\"\"", "output": "pass", "id": 573, "avg_similarity_score": 0.14806843758059687}
{"instruction": "def find_longest_prefix(words):\n    \"\"\" Given a list of strings prefixes, return the longest prefix in the list. \n    If there is no such prefix, return the empty string \"\"\n\n    >>> find_longest_prefix(['aaa', 'aa', 'a'])\n    'aa'\n    >>> find_longest_prefix(['abcde', 'ab', 'abcd'])\n    'ab'\n    \"\"\"", "output": "pass", "id": 574, "avg_similarity_score": 0.2233781631671069}
{"instruction": "def find_smallest_str_dist(s1, s2):\n    \"\"\" Given two strings, find the smallest distance between their rolling hashes.\n    Rolling hash computes the hashes of all the substrings of length n of the given string.\n\n    >>> find_smallest_str_dist('abc', 'xyz')\n    3\n    >>> find_smallest_str_dist('xyz', 'abc')\n    3\n    >>> find_smallest_str_dist('abcd', 'xyz')\n    4\n    \"\"\"", "output": "pass", "id": 575, "avg_similarity_score": 0.18512289962411377}
{"instruction": "def check_valid_divide(nums, k):\n    \"\"\" Given an array of positive integers nums, check if the array can be divided \n    into k buckets such that each bucket and all its elements sum to the same value. \n    Return True if it is possible or False otherwise.\n \n    >>> check_valid_divide([1, 4, 5], 2)\n    False\n    >>> check_valid_divide([4, 5, 6], 3)\n    True\n    \"\"\"", "output": "pass", "id": 576, "avg_similarity_score": 0.18499298941394954}
{"instruction": "def fibonacci_numbers(n):\n    \"\"\" Compute the sequence of Fibonacci numbers up to n.\n\n    >>> fibonacci_numbers(5)\n    [0, 1, 1, 2, 3]\n    >>> fibonacci_numbers(8)\n    [0, 1, 1, 2, 3, 5, 8, 13]\n    \"\"\"", "output": "pass", "id": 577, "avg_similarity_score": 0.15202762738858355}
{"instruction": "def binary_search(nums, target):\n    \"\"\" Given an array of sorted integers and a target value, \n    return the index if the target is found or -1 otherwise.\n\n    >>> binary_search([1, 2, 3, 5, 6], 5)\n    3\n    >>> binary_search([1, 2, 3, 4, 5, 6], 9)\n    -1\n    \"\"\"", "output": "pass", "id": 578, "avg_similarity_score": 0.22800168197902637}
{"instruction": "def sort_with_mapper(nums, mapper):\n    \"\"\" Given an array of integers, sort the array using the provided \n    mapping value of each element in the array.\n\n    >>> sort_with_mapper([3, 2, 1], [3, 5, 8])\n    [1, 2, 3]\n    >>> sort_with_mapper([4, 2, 1], [8, 2, 4])\n    [1, 4, 2]\n    \"\"\"", "output": "pass", "id": 579, "avg_similarity_score": 0.22914332745336735}
{"instruction": "def print_all_substrings(s):\n    \"\"\" Given a string s, print all the possible substrings.\n\n    >>> print_all_substrings('ABC')\n    A\n    AB\n    ABC\n    B\n    BC\n    C\n    >>> print_all_substrings('ABCD')\n    A\n    AB\n    ABC\n    ABCD\n    B\n    BC\n    BCD\n    C\n    CD\n    D\n    \"\"\"", "output": "pass", "id": 580, "avg_similarity_score": 0.18272175917103228}
{"instruction": "def convert_to_decimal(num, base):\n    \"\"\" given a number in the specified number base, convert it to decimal form.\n\n    >>> convert_to_decimal('101', 2)\n    5\n    >>> convert_to_decimal('1111', 2)\n    15\n    \"\"\"", "output": "pass", "id": 581, "avg_similarity_score": 0.17032800626749714}
{"instruction": "def num_palindromes(n):\n    \"\"\" Find the number of palindromic integers in the range 0 to n.\n\n    >>> num_palindromes(5)\n    5\n    >>> num_palindromes(11)\n    9\n    >>> num_palindromes(100)\n    18\n    \"\"\"", "output": "pass", "id": 582, "avg_similarity_score": 0.19534245686445328}
{"instruction": "def two_sum_indexes(nums, target):\n    \"\"\" You are given an array of integers and a target number. \n    Find two distinct index values in the array such that if nums[i] and nums[j] are summed, \n    the result is equal to the target.\n\n    >>> two_sum_indexes([1,3,4,2], 5)\n    (0, 3)\n    >>> two_sum_indexes([4,5,7,1], 10)\n    (2, 3)\n    \"\"\"", "output": "pass", "id": 583, "avg_similarity_score": 0.21137628066131856}
{"instruction": "def sort_string(s):\n    \"\"\" Given a string s, return a string with the letters of s sorted by frequency, from \n    most frequent to least frequent. If two or more characters have the same frequency, sort \n    them in alphabetical order.\n\n    >>> sort_string(\"bbcacaa\")\n    \"aaaabbcc\"\n    >>> sort_string(\"codex\")\n    \"ocexd\"\n    \"\"\"", "output": "pass", "id": 584, "avg_similarity_score": 0.18641402727375136}
{"instruction": "def shift_up(matrix):\n    \"\"\" Given a 2D matrix, rotate it counter-clockwise in place.\n\n    >>> a = [[1,2],[3,4]]\n    >>> shift_up(a)\n    >>> a\n    [[2,4],[1,3]]\n    >>> b = [[1,2,3],[4,5,6],[7,8,9]]\n    >>> shift_up(b)\n    >>> b\n    [[3,6,9],[2,5,8],[1,4,7]]\n    \"\"\"", "output": "pass", "id": 585, "avg_similarity_score": 0.14143030272343882}
{"instruction": "def longest_repeating_substring(s):\n    \"\"\" Given a string s, find the longest substring of s that repeats at least 2 times. \n    If there are multiple possible answers, return a substring with maximum length.\n\n    >>> longest_repeating_substring(\"aabccbb\")\n    \"cbb\"\n    >>> longest_repeating_substring(\"abbbb\")\n    \"bbb\"\n    \"\"\"", "output": "pass", "id": 586, "avg_similarity_score": 0.182251062576129}
{"instruction": "def spiral_print(matrix):\n    \"\"\" Given a 2D matrix, return a list of elements by spirally traversing the matrix.\n    \n    >>> spiral_print([[1,2,3],[4,5,6],[7,8,9]])\n    [1,2,3,6,9,8,7,4,5]\n    >>> spiral_print([[1,2],[3,4],[5,6]])\n    [1,2,4,6,5,3]\n    \"\"\"", "output": "pass", "id": 587, "avg_similarity_score": 0.20757583109446504}
{"instruction": "def Palin_Partition(s):\n    \"\"\"Given a string s, split it up into parts such that each part is a palindrome. \n    Find the minimum number of parts that can be obtained from the given string.\n\n    >>> Palin_Partition(\"abcbac\")\n    2\n    >>> Palin_Partition(\"aaacaa\")\n    3\n    \"\"\"", "output": "pass", "id": 588, "avg_similarity_score": 0.19868168906289543}
{"instruction": "def count_pattern_freq(pattern, text):\n    \"\"\" Given a pattern and a text, find the frequency of the matching pattern in the text.\n    The pattern is defined as an ordered list of characters.\n\n    >>> count_pattern_freq(\"abc\", \"abccdabcdabc\")\n    3\n    >>> count_pattern_freq(\"ab\", \"abcd\")\n    1\n    >>> count_pattern_freq(\"ab\", \"aabb\")\n    2\n    \"\"\"", "output": "pass", "id": 589, "avg_similarity_score": 0.2046079971592974}
{"instruction": "def contain_substring(s1, s2):\n    \"\"\" Given two strings s1 and s2, determine whether s2 can be obtained by\n    deleting some characters from s1.\n\n    >>> contain_substring(\"exercises\", \"exercise\")\n    True\n    >>> contain_substring(\"pillow\", \"pill\")\n    True\n    >>> contain_substring(\"happy\", \"hat\")\n    False\n    \"\"\"", "output": "pass", "id": 590, "avg_similarity_score": 0.12079708391893543}
{"instruction": "def validate_stack_sequences(pushed, popped):\n    \"\"\"Given two sequence of items, pushed and popped with distinct values,\n    return true if and only if this could have been the result of a sequence\n    of push and pop operations on an initially empty stack.\n\n    >>> validate_stack_sequences([1,2,3,4,5], [4,5,3,2,1])\n    True\n    >>> validate_stack_sequences([2,1,3,4], [3,4,2,1])\n    False\n    >>> validate_stack_sequences([1,2,4,3], [2,3,4,1])\n    False\n    \"\"\"", "output": "pass", "id": 591, "avg_similarity_score": 0.1567053469223058}
{"instruction": "def optimal_partition(nums, k):\n    \"\"\"Given an array of positive integers nums and integer k,\n    partition the array into k non-empty parts and return the minimum\n    sum of the largest part among these k parts.\n\n    >>> optimal_partition([1,2,3,4], 3)\n    4\n    >>> optimal_partition([1,2,3], 2)\n    4\n    >>> optimal_partition([2,3,4], 3)\n    3\n    \"\"\"", "output": "pass", "id": 592, "avg_similarity_score": 0.21212793214248507}
{"instruction": "def count_validations(loops, n):\n    \"\"\"Given an integer loops and an array of integers n,\n    return the number of valid Validations that can be formed with \n    the integers in array n.\n\n    >>> count_validations(2, [1,2,3])\n    6\n    >>> count_validations(1, [1,3])\n    2\n    >>> count_validations(4, [2,3,4])\n    8\n    \"\"\"", "output": "pass", "id": 593, "avg_similarity_score": 0.2302412686999261}
{"instruction": "def identify_equilibrium_Index(arr):\n    \"\"\"\n    Find an equilibrium index of an array, which is an index such that the sum of elements \n    at lower indexes is equal to the sum of elements at higher indexes. \n    Return the index if there is one or -1 if there is none.\n\n    >>> identify_equilibrium_Index([-7,1,5,2,-4,3,0])\n    3\n    >>> identify_equilibrium_Index([1,2,3,4])\n    -1\n    >>> identify_equilibrium_Index([1,2,3,3])\n    2\n    \"\"\"", "output": "pass", "id": 594, "avg_similarity_score": 0.16129772349251154}
{"instruction": "def print_permutation_string(str):\n    \"\"\"Given a string str,\n    print all possible permutations of the string. \n\n    >>> print_permutation_string(\"abc\")\n    abc\n    acb\n    bac\n    bca\n    cab\n    cba \n    \"\"\"", "output": "pass", "id": 595, "avg_similarity_score": 0.20343206909256495}
{"instruction": "def combination_Sum4(nums, target):\n    \"\"\"Given an array of distinct positive integers nums and a target number,\n    find all potential combinations in nums that add up to the target number.\n\n    >>> combination_Sum4([1,2,3],4)\n    7\n    >>> combination_Sum4([2,3,6,7],7)\n    2\n    >>> combination_Sum4([2,4,5,6],6)\n    5\n    \"\"\"", "output": "pass", "id": 596, "avg_similarity_score": 0.21080513753991612}
{"instruction": "def linear_search(arr, x):\n    \"\"\"Given an array arr and an integer x,\n    searching for x in arr and returns its position, \n    if x does not exist in arr then return -1.  \n\n    >>> linear_search([5,3,7,2],7) \n    2\n    >>> linear_search([1,4,2],9) \n    -1\n    >>> linear_search([3,4,5],4) \n    1\n    \"\"\"", "output": "pass", "id": 597, "avg_similarity_score": 0.14822621990256152}
{"instruction": "def return_All_Subsets(arr):\n    \"\"\"\n    Given a set of distinct integers, print all possible combinations of the integers.\n\n    >>> return_All_Subsets([1,2])\n    [], [1], [2], [1, 2]\n    >>> return_All_Subsets([1,2,3])\n    [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]\n    >>> return_All_Subsets([1,2,3,4])\n    [], [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], [1,3,4], [1,2,3,4]\n    \"\"\"", "output": "pass", "id": 598, "avg_similarity_score": 0.21003069685532152}
{"instruction": "def count_Bits_Bitwise(arr):\n    \"\"\"\n    Given an array arr of binary numbers, \n    return the count of the number of bits set to 1 in each number.\n\n    >>> count_Bits_Bitwise([4, 8, 15])\n    [1, 1, 4]\n    >>> count_Bits_Bitwise([5, 6])\n    [2, 2]\n    >>> count_Bits_Bitwise([7, 8, 9])\n    [3, 1, 2]\n    \"\"\"", "output": "pass", "id": 599, "avg_similarity_score": 0.23187660790264}
{"instruction": "def lexicographic_order(str1, str2):\n    \"\"\" To check if the second string is lexicographically greater than the first string or not.\n\n    >>> lexicographic_order('xyz', 'xyz')\n    False\n    >>> lexicographic_order('xyz', 'yza')\n    True\n    \"\"\"", "output": "pass", "id": 600, "avg_similarity_score": 0.13980421918115804}
{"instruction": "def max_difference_in_sub_arrays(arr):\n    \"\"\" Given an array of n positive integers, return the maximum absolute difference between \n    the sum of any two sub arrays.\n\n    >>> max_difference_in_sub_arrays([2, 8, 17, 4, 7, 3, 2])\n    25\n    >>> max_difference_in_sub_arrays([5, 10, 12, 3, 2])\n    19\n    \"\"\"", "output": "pass", "id": 601, "avg_similarity_score": 0.22011500966055358}
{"instruction": "def nth_Ugly_num(n):\n    \"\"\" Return the nth ugly number. An ugly number is a number whose only prime factors are 2, 3 or 5.\n    1 is included in the list of ugly numbers.\n\n    >>> nth_Ugly_num(7)\n    8\n    >>> nth_Ugly_num(10)\n    12\n    \"\"\"", "output": "pass", "id": 602, "avg_similarity_score": 0.1575599899019124}
{"instruction": "def postOrder(root):\n    \"\"\" Traverse a given tree in postorder. \n\n    >>> postOrder(17)\n    17\n    >>> postOrder([23, 24, 90, 100])\n    (100, 90, 24, 23)\n    \"\"\"", "output": "pass", "id": 603, "avg_similarity_score": 0.13470242663151635}
{"instruction": "def longest_Increasing_Sub_Array(arr):\n    \"\"\" Given an array of n integers, return the length of the longest increasing subarray. \n\n    >>> longest_Increasing_Sub_Array([5, 3, 2, 7, 4, 10, 11])\n    4\n    >>> longest_Increasing_Sub_Array([3, 6, 9, 12, 16, 14, 19, 17, 20])\n    5\n    \"\"\"", "output": "pass", "id": 604, "avg_similarity_score": 0.24881700656521055}
{"instruction": "def powerSet(arr):\n    \"\"\" Return the power set of an array of integers. \n\n    >>> powerSet([1,2,3])\n    [[], [1], [2], [3], [1, 2], [2, 3], [1, 3], [1, 2, 3]]\n    >>> powerSet([2, 5, 7])\n    [[], [2], [5], [7], [2, 5], [5, 7], [2, 7], [2, 5, 7]]\n    \"\"\"", "output": "pass", "id": 605, "avg_similarity_score": 0.19060744070593977}
{"instruction": "def smallest_difference(arr1, arr2):\n    \"\"\" Given two arrays of integers, return the pair of elements with the smallest difference. \n\n    >>> smallest_difference([10, 3, 15, 3], [17, 20, 6, 9])\n    (3, 6)\n    >>> smallest_difference([2, 8, 9, 17], [2, 7, 9, 11])\n    (8, 7)\n    \"\"\"", "output": "pass", "id": 606, "avg_similarity_score": 0.22127566337234233}
{"instruction": "def combinations_sum(arr, n):\n    \"\"\" Return the combinations sum that equals to a given target. \n\n    >>> combinations_sum([2, 3, 5, 6], 10)\n    [[2, 3, 5], [2, 8], [5, 5]]\n    >>> combinations_sum([2, 4, 5, 6], 8)\n    [[2, 4, 2], [4, 4], [2, 6]]\n    \"\"\"", "output": "pass", "id": 607, "avg_similarity_score": 0.1713868884992725}
{"instruction": "def racecar(target):\n    \"\"\" Given a number as a target, return the minimal number of steps needed to reach it.\n\n    >>> racecar(20)\n    5\n    >>> racecar(15)\n    5\n    \"\"\"", "output": "pass", "id": 608, "avg_similarity_score": 0.20428028891268182}
{"instruction": "def majority_majority(arr: List[int]) -> bool:\n    \"\"\"Given an array arr of length n, determine if majority element appears more \n    than n/2 times. Return  True if the majority values appears more than n/2 times, and false otherwise.\n\n    >>> majority_majority([1,2,2,2])\n    True\n    >>> majority_majority([8,2,3,3,3,3,3,3,2])\n    False\n    \"\"\"", "output": "pass", "id": 609, "avg_similarity_score": 0.17508984381049364}
{"instruction": "def change_count(amount: int, coins: List[int]) -> int:\n    \"\"\" Given an amount and an array of possible denominations,\n    return how many different ways you can make that amount in coins.\n\n    >>> change_count(5, [1, 2, 5])\n    4\n    >>> change_count(10, [1, 10])\n    2\n    \"\"\"", "output": "pass", "id": 610, "avg_similarity_score": 0.17327991719704358}
{"instruction": "def circular_shift(arr: List[int], k: int) -> List[int]:\n    \"\"\"Given an array arr of integers of size n and a number k, \n    rotate the elements in arr circularly k times. \n\n    >>> circular_shift([1,2,3], 1)\n    [3, 1, 2]\n    >>> circular_shift([1,2,3], 3)\n    [2, 3, 1]\n    \"\"\"", "output": "pass", "id": 611, "avg_similarity_score": 0.22714802025365655}
{"instruction": "def longest_subsequence_length(arr: List[int]) -> int:\n    \"\"\"Given an array arr of integers, determine the length of the longest increasing subsequence.\n    \n    >>> longest_subsequence_length([5,2,1,9,4,2,6,7,3])\n    6\n    >>> longest_subsequence_length([4,2,7,1,3,8,11,9,10])\n    5\n    \"\"\"", "output": "pass", "id": 612, "avg_similarity_score": 0.24611721409285026}
{"instruction": "def permutations_of_dynamic_array(arr: List[int]) -> List[List[int]]:\n    \"\"\"Given an array arr of integers, compute all possible permutations of the \n    elements in arr.\n    \n    >>> permutations_of_dynamic_array([3,2,1])\n    [[3,2,1], [3,1,2], [2,3,1], [2,1,3], [1,3,2], [1,2,3]]\n    \"\"\"", "output": "pass", "id": 613, "avg_similarity_score": 0.22633746031780108}
{"instruction": "def triagles_from_points(arr: List[tuple]) -> int:\n    \"\"\" Given a list arr of tuples denoting points in a plane, determine\n    the number of triangles that can be formed using the points as its vertices.\n\n    >>> triagles_from_points([(1,2), (2,3), (5,6), (7,8)])\n    0\n    >>> triagles_from_points([(0,0), (2,2), (2,0), (0,2)])\n    2\n    \"\"\"", "output": "pass", "id": 614, "avg_similarity_score": 0.20875678473110454}
{"instruction": "def common_num_occurance(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"Given two non-empty lists list1 and list2 of integers, return a new list \n    containing all the elements that appear more than once in both list1 and list2.\n\n    >>> common_num_occurance([1,2,3,4], [4,5,6,4])\n    [4]\n    >>> common_num_occurance([3,1,2,4], [3,5,6,4,3])\n    [3, 4]\n    \"\"\"", "output": "pass", "id": 615, "avg_similarity_score": 0.18775391442807154}
{"instruction": "def sum_of_pairwise_product(arr1: List[int], arr2: List[int]) -> int:\n    \"\"\"Given two arrays arr1 and arr2 of integers, return the sum of \n    the product of each pair of elements from arr1 and arr2.\n\n    >>> sum_of_pairwise_product([1,2,3], [4,5,6])\n    32\n    >>> sum_of_pairwise_product([5,9,2], [3,4,6])\n    115\n    \"\"\"", "output": "pass", "id": 616, "avg_similarity_score": 0.2125781925656658}
{"instruction": "def mins_to_hours(m):\n    \"\"\" Given an integer m, return the rounded number of hours as a string. \n    The fractional part will be rounded down.\n\n    >>> mins_to_hours(63)\n    '1 Hours'\n    >>> mins_to_hours(127)\n    '2 Hours'\n    >>> mins_to_hours(89)\n    '1 Hours'\n    \"\"\"", "output": "pass", "id": 617, "avg_similarity_score": 0.19871131439118378}
{"instruction": "def average_value(ary):\n    \"\"\" Given an array of integers, return the rounded average value of the array\n    as an integer.\n\n    >>> average_value([2, 1, 6, 4])\n    3\n    >>> average_value([11, 5, 12, 7])\n    8\n    >>> average_value([])\n    0\n    \"\"\"", "output": "pass", "id": 618, "avg_similarity_score": 0.23868414888334386}
{"instruction": "def most_distant(points):\n    \"\"\" Given a non-empty array of points on two-dimensional coordinate plane, \n    return a tuple of two integers representing the coordinates of the point which \n    is the farthest away from the origin.\n\n    >>> most_distant([(1,3), (-2,17)])\n    (-2,17)\n    >>> most_distant([(-2,14), (2,-3), (5,11)])\n    (5,11)\n    >>> most_distant([])\n    ValueError\n    \"\"\"", "output": "pass", "id": 619, "avg_similarity_score": 0.20304784428970832}
{"instruction": "def clumps(str):\n    \"\"\" Return the number of clumps in the given string. \n    In a clump, a cluster of letters are located adjacent to one another. \n\n    >>> clumps('abbcdddde')\n    3\n    >>> clumps('aaabbbcccddddd')\n    2\n    >>> clumps('')\n    0\n    \"\"\"", "output": "pass", "id": 620, "avg_similarity_score": 0.19434480365615223}
{"instruction": "def array_multiplication(ary1, ary2):\n    \"\"\" Given two non-empty arrays of integers, return the multiplication of these \n    two arrays as an integer.\n\n    >>> array_multiplication([1,2], [3,4])\n    21\n    >>> array_multiplication([5,4], [6,7])\n    140\n    >>> array_multiplication([], [9])\n    ValueError\n    \"\"\"", "output": "pass", "id": 621, "avg_similarity_score": 0.19540129357418382}
{"instruction": "def optimal_shipping(arr):\n    \"\"\" Given an array of packages with each weight w, return the optimal shipping cost \n    calculated using the following formula: Shipping cost = (w x 5) + (w//2).\n\n    >>> optimal_shipping([10,7,6,12])\n    110\n    Explanation: 10 x 5 + 10/2 + 7 x 5 + 7/2 + 6 x 5 + 6/2 + 12 x 5 + 12/2 = 110\n    >>> optimal_shipping([3])\n    23\n    >>> optimal_shipping([])\n    0\n    \"\"\"", "output": "pass", "id": 622, "avg_similarity_score": 0.17467715762973704}
{"instruction": "def ring_preference(arr):\n    \"\"\" Given an array of integers arr, return a list of indices representing the \n    order of preference of the ring elements. The indices represent the index of the\n    element in the input array.\n\n    The output should have the element with smallest index when sorted in ascending \n    order first, followed by the next smallest and so on. \n\n    >>> ring_preference([1,4,2,3])\n    [0,2,3,1]\n    Explanation: [1,2,3,4] is the sorted array, so 0,2,3,1 should be the order of preference.\n    >>> ring_preference([9,5,10,7])\n    [1,3,0,2]\n    >>> ring_preference([])\n    []\n    \"\"\"", "output": "pass", "id": 623, "avg_similarity_score": 0.1820327176739506}
{"instruction": "def find_pair(arr, sum):\n    \"\"\"  Given an array of integers and the target sum, return the pair of integers forming the pair \n    of numbers that add up to the target sum or empty list if not found. \n    \n    >>> find_pair([2,3,4,5], 7)\n    [2,5]\n    >>> find_pair([2,3,4,5,6], 3)\n    [2,1]\n    Explanation: The pair of numbers that add up to 3 are 2 and 1\n    >>> find_pair([], 10)\n    []\n    \"\"\"", "output": "pass", "id": 624, "avg_similarity_score": 0.22572658277130125}
{"instruction": "def residues(arr):\n    \"\"\" Given an array of integers, return an array of residues \n    modulo 5 of the input array elements.\n\n    >>> residues([3,12,6,9])\n    [3,2,1,4]\n    >>> residues([7,5,13,20])\n    [2,0,3,0]\n    >>> residues([])\n    []\n    \"\"\"", "output": "pass", "id": 625, "avg_similarity_score": 0.23230966641685372}
{"instruction": "def median_find(arr):\n    \"\"\" Given an array of integers that is not sorted, return the median of the array. \n    If the array has even length return the average of the two median elements.\n\n    >>> median_find([3,2,5,4])\n    3.5\n    >>> median_find([1,7,3,4])\n    3\n    >>> median_find([])\n    ValueError\n    \"\"\"", "output": "pass", "id": 626, "avg_similarity_score": 0.23151013574396925}
{"instruction": "def largest_sum_subarray(arr):\n    \"\"\" Given an array of integers arr, find the subarray with the largest sum. \n    Return the maximum sum.\n\n    >>> largest_sum_subarray([1,2,-5,1,2])\n    3\n    >>> largest_sum_subarray([2,-4,5,-2,1,5])\n    8\n    \"\"\"", "output": "pass", "id": 627, "avg_similarity_score": 0.23540954530575187}
{"instruction": "def rearrange_bits(n):\n    \"\"\" Rearrange the bits of an integer n to obtain the minimum possible number.\n    Return the new number.\n\n    >>> rearrange_bits(262)\n    134\n    >>> rearrange_bits(13)\n    13\n    \"\"\"", "output": "pass", "id": 628, "avg_similarity_score": 0.17558977249059546}
{"instruction": "def rearrange_words(words):\n    \"\"\" Rearrange the words in an array of strings to get the lexicographically smallest sentence.\n    Return a string.\n\n    >>> rearrange_words([\"apple\",\"pie\",\"taste\"])\n    \"apple pie taste\"\n    >>> rearrange_words([\"good\",\"morning\",\"alice\"])\n    \"alice good morning\"\n    \"\"\"", "output": "pass", "id": 629, "avg_similarity_score": 0.18483580659091448}
{"instruction": "def calculate_taxitability(profits):\n    \"\"\" Given an array of profits of a company, determine its taxitability.\n    The taxitability of a company is defined as the ratio of its taxable income to total\n    profits for each year. \n    Return an array of size 1 + the length of profits containing the taxitability values for each year.\n\n    >>> calculate_taxitability([12345,5432, 10214])\n    [0.4, 0.7, 0.8]\n    >>> calculate_taxitability([800,1600,2500,500])\n    [0.3, 0.3, 0.5, 0.2]\n    \"\"\"", "output": "pass", "id": 630, "avg_similarity_score": 0.17962459783287277}
{"instruction": "def are_coprime_from_left(a, k): \n    \"\"\" Given two integers a and k, determine if all numbers from a to k, exclusive, are coprime to a.\n    Two integers a and b are coprime if their greatest common divisor (GCD) is 1.\n\n    >>> are_coprime_from_left(6,8)\n    False\n    >>> are_coprime_from_left(7,11)\n    True\n    \"\"\"", "output": "pass", "id": 631, "avg_similarity_score": 0.1458248400297145}
{"instruction": "def find_next_smallest_with_same_digit_sum(num):\n    \"\"\" Given an integer num, return the next smallest integer with the same \n    digit sum as num.\n\n    >>> find_next_smallest_with_same_digit_sum(45)\n    44\n    >>> find_next_smallest_with_same_digit_sum(23)\n    22\n    \"\"\"", "output": "pass", "id": 632, "avg_similarity_score": 0.17208771005926946}
{"instruction": "def max_profit_from_items(prices, start, end):\n    \"\"\" Given an array of integers prices and two integers start and end,\n    find the maximum profit you can obtain by buying and selling items at prices[start], \n    prices[start + 1], ..., prices[end]. \n    Return the maximum possible profit.\n\n    >>> max_profit_from_items([3, 5, 4, 8, 7], 1, 4)\n    6\n    >>> max_profit_from_items([1, 9, 14, 8], 1, 3)\n    6\n    \"\"\"", "output": "pass", "id": 633, "avg_similarity_score": 0.16447084263072892}
{"instruction": "def stock_picker(prices):\n    \"\"\" Given an array of stock prices, each element represents the daily stock price of a given day.\n    From each day, you can either buy one unit of stock, sell any number of stock units you have already bought, \n    or do nothing. \n    Find the maximum profit possible by buying and selling the stocks. \n    Return a pair of indices, the first index represents the buy index and the second index the sell index.\n\n    >>> stock_picker([5,7,99,2,8,20,4])\n    (3, 5)\n    >>> stock_picker([1,3,2,7,1,5,9])\n    (0, 6)\n    \"\"\"", "output": "pass", "id": 634, "avg_similarity_score": 0.14519049089539915}
{"instruction": "def most_overlapping_substring(s, t):\n    \"\"\"\n    Given strings s and t, find the substring of s that overlaps the most with t.\n    Return the substring of s that overlaps the most with t.\n\n    >>> most_overlapping_substring(\"abcd\", \"cde\")\n    \"cd\"\n    >>> most_overlapping_substring(\"abcdefgh\" , \"efghijkl\")\n    \"efgh\"\n    \"\"\"", "output": "pass", "id": 635, "avg_similarity_score": 0.19464158802567222}
{"instruction": "def is_balanced_brackets(s):\n    \"\"\"\n    Given a string s composed of brackets, determine if s is balanced.\n    A string is said to be balanced if it consists of brackets which are correctly matched\n    and nested.\n    Return True if s is balanced, False otherwise.\n\n    >>> is_balanced_brackets(\"[()]{}{[()()]()}\")\n    True\n    >>> is_balanced_brackets(\"[{()}\")\n    False\n    \"\"\"", "output": "pass", "id": 636, "avg_similarity_score": 0.1575184817664917}
{"instruction": "def is_palindrome_sentence(sent : str): \n    \"\"\" Check whether a string is a palindrome sentence or not. \n    Note that a sentence is a palindrome if all words within it are palindromes.\n\n    >>> is_palindrome_sentence(\"race car\")\n    True\n    >>> is_palindrome_sentence(\"happy life\")\n    False\n    \"\"\"", "output": "pass", "id": 637, "avg_similarity_score": 0.12070811515604896}
{"instruction": "def min_distance_btw_words(words, first, second):\n    \"\"\"\nGiven an list of words, and two strings first and second, \nreturn the minimum number of steps required to convert first to second,\nwhere in each step you can only change one character in a word.\n\n>>> min_distance_btw_words([\"this\",\"is\",\"a\",\"sentence\"], \"this\", \"sentence\")\n7\n>>> min_distance_btw_words([\"this\",\"is\",\"another\",\"sentence\"], \"sentence\", \"this\")\n7\n    \"\"\"", "output": "pass", "id": 638, "avg_similarity_score": 0.18027727061509052}
{"instruction": "def count_sublist(lst): \n    \"\"\" returns the number of sub-lists in a list.\n    A sublist is a contiguous blocks of elements located at the same level in the original list.\n\n    >>> count_sublist([1,2,3,4,5])\n    1\n    >>> count_sublist([1,[3,4],[5,6,[7,8]]])\n    3\n    \"\"\"", "output": "pass", "id": 639, "avg_similarity_score": 0.18481679335364187}
{"instruction": "def longest_substring(s: str) -> str:\n    \"\"\"\n    Given a string s, find the longest substring that is a palindrome.\n    Note that a substring may be made up of multiple palindromes.\n\n    >>> longest_substring(\"acapella\")\n    \"ape\"\n    >>> longest_substring(\"babccab\")\n    \"babccab\"\n   \"\"\"", "output": "pass", "id": 640, "avg_similarity_score": 0.188265223456292}
{"instruction": "def last_word_length(s: str) -> int:\n    \"\"\"\nGiven a string s containing words separated by spaces, find the length of the last word.\n\n>>> last_word_length(\"Hello world\")\n5\n>>> last_word_length(\"      \")\n0\n    \"\"\"", "output": "pass", "id": 641, "avg_similarity_score": 0.21590474718943783}
{"instruction": "def string_swapping(s1: str, s2: str) -> str:\n    \"\"\"\nGiven two strings, swap the characters from the two strings. \n\n>>> string_swapping(\"abcd\", \"pqrs\")\n'pbqcdras'\n>>> string_swapping(\"hello\",\"world\")\n'welolhrdd'\n    \"\"\"", "output": "pass", "id": 642, "avg_similarity_score": 0.17176379960439658}
{"instruction": "def num_unique(arr: List[int]) -> int:\n    \"\"\"\nGiven an array of integers, return the count of unique elements in it.\n\n>>> num_unique([2, 4, 1, 5, 1])\n4\n>>> num_unique([1, 2, 2, 3])\n3\n    \"\"\"", "output": "pass", "id": 643, "avg_similarity_score": 0.26451702060269977}
{"instruction": "def pop_each_element(arr: List[int]) -> List[int]:\n    \"\"\"\nGiven an array of integers, return a new array by popping out each element of arr\nfrom left to right, with iterated popped element.\n\n>>> pop_each_element([1, 2, 3, 4, 5])\n[2, 3, 4, 5, 5]\n>>> pop_each_element([10, 20, 30, 40])\n[20, 30, 40, 40]\n    \"\"\"", "output": "pass", "id": 644, "avg_similarity_score": 0.20137804006515508}
{"instruction": "def find_missing_number(nums):\n    \"\"\" Given a list of increasing numbers from 1 to n, \n    find the missing number in it.\n    There are no duplicates in the list.\n    \u300en+1\u300f is the length of the list.\n    \u300en\u300f is the largest number of the list. \n\n    >>> find_missing_number([1,2,3,4,6,7])\n    5\n    >>> find_missing_number([2,3,4,5])\n    1\n    \"\"\"", "output": "pass", "id": 645, "avg_similarity_score": 0.20560022928136878}
{"instruction": "def square_of_sum(nums):\n    \"\"\" Calculates the square of the sum of the numbers in the given list \n    and returns it.\n\n    >>> square_of_sum([2,3,1,5,8])\n    135\n    >>> square_of_sum([4,9,3,2,6])\n    215\n    \"\"\"", "output": "pass", "id": 646, "avg_similarity_score": 0.2065683925714247}
{"instruction": "def is_valid_word_lc(word):\n    \"\"\" Given a string of lowercase characters,\n    check if it is a valid word.\n    A valid word should contain only characters from a-z,\n    and should also have at least one vowel.\n\n    >>> is_valid_word_lc(\"hello\")\n    True\n    >>> is_valid_word_lc(\"abcd\")\n    False\n    >>> is_valid_word_lc(\"computer\")\n    True\n    \"\"\"", "output": "pass", "id": 647, "avg_similarity_score": 0.14689884327092614}
{"instruction": "def count_substrings(str1, str2):\n    \"\"\" Count the number of distinct substrings of str1 that are also substrings of str2.\n\n    >>> count_substrings(\"banana\",\"ban\")\n    3\n    >>> count_substrings(\"mississippi\",\"sip\")\n    3\n    \"\"\"", "output": "pass", "id": 648, "avg_similarity_score": 0.1493390006838552}
{"instruction": "def common_elements_from_two_lists(list1, list2):\n    \"\"\" Return a list containing the common elements between two given lists,\n    with the elements appearing in the same order as in list1.\n\n    >>> common_elements_from_two_lists([2,5,4,7], [7,2,1])\n    [2,7]\n    >>> common_elements_from_two_lists([3,4,5,6], [1,2])\n    []\n    \"\"\"", "output": "pass", "id": 649, "avg_similarity_score": 0.1686621349667387}
{"instruction": "def coarse_grained_permutation(arr):\n    \"\"\" Given an unordered array of integers,\n    return all distinct permutations of the array\n    with every permutation consisting of no two consecutive increasing or decreasing elements.\n\n    >>> coarse_grained_permutation([1,3,5,2])\n    [[2,3,1,5], [2,1,3,5], [1,3,5,2]]\n    >>> coarse_grained_permutation([6,4,2,1])\n    [[6,4,2,1], [2,4,6,1], [2,1,6,4], [4,6,1,2], [1,6,2,4]]\n    \"\"\"", "output": "pass", "id": 650, "avg_similarity_score": 0.20694896589681172}
{"instruction": "def number_of_paths(grid):\n    \"\"\"Given a rectangular grid, return the number of paths \n    from the top-left corner to the bottom-right corner, \n    with every move either down or right.\n\n    >>> number_of_paths([[1,1,1],[1,0,1],[1,1,1]])\n    2\n    >>> number_of_paths([[1,1,1],[1,1,1],[1,1,1]])\n    6\n    \"\"\"", "output": "pass", "id": 651, "avg_similarity_score": 0.18873612380619897}
{"instruction": "def log_linear_combination(x, y):\n    \"\"\" Given two logarithmic values x and y as positive integers,\n    return the logarithmic value of their linear combination as a positive integer.\n\n    x = log32, y = log25\n    log (32*25) = log32 + log25\n \n    >>> log_linear_combination(5,3)\n    8\n    \"\"\"", "output": "pass", "id": 652, "avg_similarity_score": 0.14557148503120626}
{"instruction": "def column_sum(mat):\n    \"\"\" Given a two dimensional matrix 'mat' of size m*n with non-negative \n    values, find the sum of all the elements in each column.\n\n    >>> column_sum([[1, 2, 3], [4, 5, 6]])\n    [5, 7, 9]\n    \"\"\"", "output": "pass", "id": 653, "avg_similarity_score": 0.2158119388071661}
{"instruction": "def profile_most_probable_kmer(seq, k, profile):\n    \"\"\" Given a sequence 'seq', a profile matrix 'profile',\n    return a k-mer from seq that is most probable according to profile.\n\n    >>> profile_most_probable_kmer(\"ACTGTACG\", 3, [[0.2, 0.2, 0.3, 0.2], [0.4, 0.3, 0.1, 0.2], [0.3, 0.3, 0.5, 0.3], [0.1, 0.2, 0.1, 0.6]])\n    \"GTAC\"\n    \"\"\"", "output": "pass", "id": 654, "avg_similarity_score": 0.1385490570152759}
{"instruction": "def swap_Elements_K(a,k):\n    \"\"\"Given an array a, and an integer k, \n    swap the contents of the k-th element (counting from 0) \n    with the contents of the last element.\n    \n    >>> swap_Elements_K([23,41,25,60],2)\n    [23,60,25,41]\n    >>> swap_Elements_K([43,11,87,22],1)\n    [43,22,87,11]\n    \"\"\"", "output": "pass", "id": 655, "avg_similarity_score": 0.2182095447303367}
{"instruction": "def is_subSeq(s1, s2):\n    \"\"\" return true if s2 is a subsequence of s1 \n    otherwise false.\n\n    >>> is_subSeq('ABC', 'ADCBA')\n    True\n    >>> is_subSeq('ABC', 'BCD')\n    False\n    \"\"\"", "output": "pass", "id": 656, "avg_similarity_score": 0.14370731148318425}
{"instruction": "def find_Largest_Even_Number(a: list) -> int:\n    \"\"\" Find the largest even number in a list a. \n    If there is no even number, return -1.\n\n    >>> find_Largest_Even_Number([7,2,3,1, 9, 10])\n    10\n    >>> find_Largest_Even_Number([7,3,9,11])\n    -1\n    \"\"\"", "output": "pass", "id": 657, "avg_similarity_score": 0.17772428731919737}
{"instruction": "def remove_kth_Element(a,k):\n    \"\"\" Given an array a, and an integer k, \n    remove the k-th element from the array.\n\n    >>> remove_kth_Element([23,41,25,60],2)\n    [23,41,60]\n    >>> remove_kth_Element([43,11,87,22],1)\n    [43,87,22]\n    \"\"\"", "output": "pass", "id": 658, "avg_similarity_score": 0.2151774900771654}
{"instruction": "def Position_Element_Kth(seq: list, k: int):\n    \"\"\" Given a sequence of integers, return the k-th element from\n    the beginning of the sequence. \n\n    >>> Position_Element_Kth([2,3,1,5,6,7],4)\n    5\n    >>> Position_Element_Kth([3,1,5,7,9],2)\n    5\n    \"\"\"", "output": "pass", "id": 659, "avg_similarity_score": 0.23988379781851757}
{"instruction": "def longest_SubSeq_Increasing(arr):\n    \"\"\" Returns the length of longest subsequence \n    in arr of which the elements are in increasing order. \n\n    >>> longest_SubSeq_Increasing([1,2,3,4,5])\n    5\n    >>> longest_SubSeq_Increasing([10,22,3,9,15])\n    3\n    \"\"\"", "output": "pass", "id": 660, "avg_similarity_score": 0.1787312613937216}
{"instruction": "def comparing_Two_Strings(a, b):\n    \"\"\" Given two strings a and b, \n    return whether a is lexicographically smaller than b or not.\n\n    >>> comparing_Two_Strings('abc','def')\n    True\n    >>> comparing_Two_Strings('asd','asf')\n    True\n    \"\"\"", "output": "pass", "id": 661, "avg_similarity_score": 0.16861260993762123}
{"instruction": "def build_SubList_divisible_By_K(n, k):\n    \"\"\" Given an array of integers n and an integer k. \n    Build a sublist of n such that its elements are divisible by k.\n\n    >>> build_SubList_divisible_By_K([6,9,10,3,12],3)\n    [6,9,12]\n    >>> build_SubList_divisible_By_K([11,21, 33],4)\n    [33]\n    \"\"\"", "output": "pass", "id": 662, "avg_similarity_score": 0.19467082378383713}
{"instruction": "def rotate_Elements_K(arr , k):\n    \"\"\" Given an array arr and an integer k\n    return the array arr after rotating the elements by k.\n    \n    >>> rotate_Elements_K([1,2,3],2)\n    [3,1,2]\n    >>> rotate_Elements_K([7,8,9],4)\n    [8,9,7]\n    \"\"\"", "output": "pass", "id": 663, "avg_similarity_score": 0.20686894942304823}
{"instruction": "def sort_K_Length_subLists(arr, k): \n    \"\"\" Given an array arr and an integer k. \n    Sort the k*k lengths of sublists of arr \n    in non-decreasing order.\n\n    >>> sort_K_Length_subLists([3,1,2,5,3,7,4,6,9],3)\n    [1,2,3,3,4,5,6,7,9]\n    >>> sort_K_Length_subLists([5,7,9,1,3,4,6],2)\n    [1,3,4,5,6,7,9]\n    \"\"\"", "output": "pass", "id": 664, "avg_similarity_score": 0.1949965339649331}
{"instruction": "def check_if_overlap(x1, x2, y1, y2):\n    \"\"\" Given two axis-aligned rectangles, determine whether they overlap. \n    A rectangle is represented by its left and right x coordinates and \n    its top and bottom y coordinates.\n    \n    >>> check_if_overlap(1,3,5,7,2,4,6,8)\n    True\n    >>> check_if_overlap(0,1,0,1,2,3,4,5)\n    False\n    \"\"\"", "output": "pass", "id": 665, "avg_similarity_score": 0.11069636366520391}
{"instruction": "def longest_increasing_subarray(arr: List[int]) -> int:\n    \"\"\" Given an array arr of N integers, find the length of the longest \n    subarray such that every element in the subarray is larger than \n    the previous element in the array.\n\n    >>> longest_increasing_subarray([1,2,3,4,5])\n    5\n    >>> longest_increasing_subarray([2,1,3,4,5])\n    4\n    \"\"\"", "output": "pass", "id": 666, "avg_similarity_score": 0.23660011809351314}
{"instruction": "def show_path_max_value(matrix):\n    \"\"\" Given a 2D matrix, return the maximum value that a path can \n    obtain from top-left to bottom-right, where the path only moves \n    down or right.\n\n    >>> show_path_max_value([[1,2,3],[4,5,6],[7,8,9]])\n    21\n    >>> show_path_max_value([[2,1,3],[4,5,6],[9,1,2]])\n    16\n    \"\"\"", "output": "pass", "id": 667, "avg_similarity_score": 0.1667940663506826}
{"instruction": "def quickest_path(distance_map):\n+    \"\"\" Given a distance map, where elements represent distances in a grid, \n+    return quickest path (shortest total distance) from top left to bottom right.\n\n+    >>> quickest_path([[1,2,3],[4,1,7],[3,0,2]])\n+    6\n+    >>> quickest_path([[1,9,2],[3,4,5],[7,1,8]])\n+    9\n+    \"\"\"", "output": "pass", "id": 668, "avg_similarity_score": 0.132995796544619}
{"instruction": "def element_with_greatest_difference(arr: List[int]) -> int:\n    \"\"\" Given an array of integers, return the element with the greatest difference between it and its neighbors.\n\n    >>> element_with_greatest_difference([3, 4, 10, 1, 6, 9])\n    10\n    >>> element_with_greatest_difference([2, 1, 5, 6, 3, 7])\n    5\n    \"\"\"", "output": "pass", "id": 669, "avg_similarity_score": 0.226663332518649}
{"instruction": "def closest_to_nth_power_2(num: int, n: int) -> int:\n    \"\"\" Given a number, return the closest number that is an n-th power of 2.\n\n    >>> closest_to_nth_power_2(7, 2)\n    8\n    >>> closest_to_nth_power_2(29, 3)\n    27\n    \"\"\"", "output": "pass", "id": 670, "avg_similarity_score": 0.1992558753082373}
{"instruction": "def accumulate_sum_paths(arr: List[int]) -> List[int]:\n    \"\"\" Given an array of integers, return an array containing the cumulative sum of all the possible paths through the array.\n\n    >>> accumulate_sum_paths([1,2,3,4,5])\n    [1, 4, 8, 15, 25]\n    >>> accumulate_sum_paths([4,6,8,1])\n    [4, 18, 44, 45]\n    \"\"\"", "output": "pass", "id": 671, "avg_similarity_score": 0.2494554829959328}
{"instruction": "def rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\" Given an array of integers, rearrange it such that arr[i] >= arr[j] for all i < j.\n\n    >>> rearrange_array([1,2,3,4,5])\n    [5,4,3,2,1]\n    >>> rearrange_array([3,2,1,4,5])\n    [5,4,3,2,1]\n    \"\"\"", "output": "pass", "id": 672, "avg_similarity_score": 0.1900090308863281}
{"instruction": "def max_number_with_given_digits(arr: List[int], k: int) -> int:\n    \"\"\" Given an array of numbers and a number K, return the maximum possible number created from this array whose digits sum up to K.\n\n    >>> max_number_with_given_digits([2,3,5,4],7)\n    5342\n    >>> max_number_with_given_digits([2,3,4],6)\n    432\n    \"\"\"", "output": "pass", "id": 673, "avg_similarity_score": 0.21745615090214915}
{"instruction": "def triple(L):\n    \"\"\" Create a new list whose elements are the triples of the given list L.\n\n    >>> triple([0, 1, 2, 3])\n    [0, 3, 6, 9]\n    >>> triple([1, 2, 3, 4])\n    [3, 6, 9, 12]\n    \"\"\"", "output": "pass", "id": 674, "avg_similarity_score": 0.18920184925525318}
{"instruction": "def letter_count(L):\n    \"\"\" Count the number of letters present in a given list of strings.\n\n    >>> letter_count(['python', 'is', 'cool'])\n    13\n    >>> letter_count(['it', 'should', 'works'])\n    11\n    \"\"\"", "output": "pass", "id": 675, "avg_similarity_score": 0.18806258544064708}
{"instruction": "def greatest_among_three(a, b, c):\n    \"\"\" Return the greatest of the three integers a, b and c.\n\n    >>> greatest_among_three(7, 4, 5)\n    7\n    >>> greatest_among_three(50, 20, 70)\n    70\n    \"\"\"", "output": "pass", "id": 676, "avg_similarity_score": 0.19061655458258872}
{"instruction": "def rotation(L, times):\n    \"\"\" Perform a left rotation on list L for given times\n\n    >>> rotation([1, 2, 3, 4], 2)\n    [3, 4, 1, 2]\n    >>> rotation([2, 4, 6, 8], 3)\n    [8, 2, 4, 6]\n    \"\"\"", "output": "pass", "id": 677, "avg_similarity_score": 0.1193538765909106}
{"instruction": "def common_in_two_sorted(A,B):\n    \"\"\" From two sorted list, generate a new sorted list which contains only the elements which are common in the two list.\n\n    >>> common_in_two_sorted([1, 3, 5, 7], [2, 3, 4, 7])\n    [3, 7]\n    >>> common_in_two_sorted([1, 4, 6, 8], [3, 5, 7, 8])\n    [8]\n    \"\"\"", "output": "pass", "id": 678, "avg_similarity_score": 0.1665078329268269}
{"instruction": "def change_case(S):\n    \"\"\" Convert a given string into one with alternating case i.e. upper and lower case characters.\n\n    >>> change_case('Hello')\n    'hElLo'\n    >>> change_case('We Engineer')\n    'wE eNgInEeR'\n    \"\"\"", "output": "pass", "id": 679, "avg_similarity_score": 0.1266262863716783}
{"instruction": "def twoSumInRange(A, low, high):\n    \"\"\" Given an array of integers A, and two boundaries low and high,\n    find the number of pairs in A  which sum to a number between low and high (inclusive).\n\n    >>> twoSumInRange([1, 3, 5, 7], 1, 8)\n    4\n    >>> twoSumInRange([2, 4, 6, 8], 5, 10)\n    2\n    \"\"\"", "output": "pass", "id": 680, "avg_similarity_score": 0.21773699180414258}
{"instruction": "def number_of_triplets(arr):\n    \"\"\" From a given array of integers, find the number of triplets that sum to 0.\n\n    >>> number_of_triplets([1, 2, 3, 4, 5])\n    1\n    >>> number_of_triplets([-2, -1, 0, 1, 2])\n    5\n    \"\"\"", "output": "pass", "id": 681, "avg_similarity_score": 0.23513201616995247}
{"instruction": "def replace_space_using_url_format(s):\n    \"\"\" Replace all spaces in a given string with %20 in url encoding.\n\n    >>> replace_space_using_url_format('Hello World')\n    'Hello%20World'\n    >>> replace_space_using_url_format('My Name is John')\n    'My%20Name%20is%20John'\n    \"\"\"", "output": "pass", "id": 682, "avg_similarity_score": 0.12790479043364847}
{"instruction": "def is_number_pair_unique(arr: list) -> bool:\n    \"\"\" Given a list of integers, check if there are any two numbers with the same absolute difference.\n    For example, given the list [1, 2, 3] (where the absolute differences are |1-2| = 1, |1-3| = 2, |2-3| = 1), the output should be False.\n    Return True if the absolute difference of all the pairs of numbers are unique. \n\n    >>> is_number_pair_unique([1, 2, 3])\n    False\n    >>> is_number_pair_unique([1, 5, 10, 81])\n    True\n    \"\"\"", "output": "pass", "id": 683, "avg_similarity_score": 0.16093527336517524}
{"instruction": "def is_valid_word(word: str, dictionary: list):\n    \"\"\" Check if the given word is an element of the given dictionary.\n    In this problem, a word is considered to be in the dictionary if any of its anagrams is in \n    the dictionary. Return True if the word is valid, and False otherwise.\n\n    >>> is_valid_word(\"cat\", [\"act\", \"tac\"])\n    True\n    >>> is_valid_word(\"coats\", [\"scat\", \"ostca\"])\n    False\n    \"\"\"", "output": "pass", "id": 684, "avg_similarity_score": 0.1834655247507706}
{"instruction": "def gcd(x: int, y: int):\n    \"\"\"Write a function that computes the greatest common divisor (GCD) of two non-zero integers x and y.\n    \n    >>> gcd(12, 15)\n    3\n    >>> gcd(3,7)\n    1\n    \"\"\"", "output": "pass", "id": 685, "avg_similarity_score": 0.15885917146875816}
{"instruction": "def is_symmetric(matrix: list):\n    \"\"\" Given a matrix of integers, check if the matrix is a symmetric matrix. \n    A matrix is symmetric if it is equal to its transpose.\n\n    >>> is_symmetric([[1, 0, 1],\n                      [0, 2, 2],\n                      [1, 2, 5]])\n    False\n    >>> is_symmetric([[1, 2, 3],\n                      [2, 4, 5],\n                      [3, 5, 6]])\n    True\n    \"\"\"", "output": "pass", "id": 686, "avg_similarity_score": 0.190287199547938}
{"instruction": "def number_sum_closest_to_target(nums: list, target: int):\n    \"\"\" Given a list of non-negative integers nums and a target number target, \n    return the index of the closest number to the target that is the sum of other indices in the list. \n    If there is no such number or the sum of two indices is equal to the target, return -1.\n\n    >>> number_sum_closest_to_target([-1, 2, 5, 9, 10], 11)\n    2\n    >>> number_sum_closest_to_target([3, 5, 6, 8], 8)\n    -1\n    \"\"\"", "output": "pass", "id": 687, "avg_similarity_score": 0.2061759024003629}
{"instruction": "def smallest_multiple_divisible_by_n(n):\n    \"\"\" Given a positive integer n, return the smallest number that is divisible by n and \n    that is not divisible by any of its divisors.\n\n    >>> smallest_multiple_divisible_by_n(4)\n    8\n    >>> smallest_multiple_divisible_by_n(7)\n    49\n    \"\"\"", "output": "pass", "id": 688, "avg_similarity_score": 0.18155294404290964}
{"instruction": "def available_umbrellas(sales: list):\n    \"\"\" Given a list of umbrella sales for each day, \n    return the maximum number of umbrellas available on any given day.\n\n    >>> available_umbrellas([3, 5, 1, 4, 3])\n    6\n    >>> available_umbrellas([6, 2, 3, 9, 2])\n    12\n    \"\"\"", "output": "pass", "id": 689, "avg_similarity_score": 0.20768753909842647}
{"instruction": "def number_pairs_with_sum(nums: list, target: int):\n    \"\"\" Given a list of non-unique integers nums and a target number target, \n    return the total number of pairs of integers in nums that sum to target.\n\n    >>> number_pairs_with_sum([1, 3, 4, 4, 6, 0], 6)\n    3\n    >>> number_pairs_with_sum([1, 2, 1, 4], 8) \n    1\n    \"\"\"", "output": "pass", "id": 690, "avg_similarity_score": 0.23157227526931454}
{"instruction": "def word_count(sentence):\n    \"\"\" Count the number of words in a sentence.\n    The sentence has no punctuation and all words are separated by a single whitespace.\n\n    >>> word_count(\"This is a sentence\")\n    4\n    >>> word_count(\"Hello world\")\n    2\n    \"\"\"", "output": "pass", "id": 691, "avg_similarity_score": 0.16545371232250536}
{"instruction": "def complement_reverse(n: int) -> int:\n    \"\"\" Return the complement-reverse of a given number.\n\n    If n is a binary number, the complement-reverse is a binary number with all 1s replaced by 0s and all 0s replaced by 1s.\n\n    >>> complement_reverse(10)\n    5\n    >>> complement_reverse(16)\n    15\n    \"\"\"", "output": "pass", "id": 692, "avg_similarity_score": 0.16681653959403545}
{"instruction": "def primes_in_range(low: int, high: int) -> List[int]:\n    \"\"\"\n    Find all prime numbers in a given range [low, high].\n\n    >>> primes_in_range(1, 10)\n    [2, 3, 5, 7]\n    >>> primes_in_range(11, 20)\n    [11, 13, 17, 19]\n    \"\"\"", "output": "pass", "id": 693, "avg_similarity_score": 0.13728377609428988}
{"instruction": "def count_odd_frequencies(arr: List[int]):\n    \"\"\" Given an array, return the total number of odd frequencies of elements.\n   \n    >>> count_odd_frequencies([2, 3, 3, 3, 5])\n    2\n    >>> count_odd_frequencies([2, 5, 5, 7, 7, 7])\n    3\n    \"\"\"", "output": "pass", "id": 694, "avg_similarity_score": 0.23626567833448842}
{"instruction": "def max_min_integer_multiply(nums: List[int]) -> (int, int):\n    \"\"\"\n    Given a list of integer numbers, \n    return the maximum and minimum of their product.\n\n    >>> max_min_integer_multiply([1, 2, 3])\n    (6, 6)\n    >>> max_min_integer_multiply([1, -2, 3, 4])\n    (24, -24)\n    \"\"\"", "output": "pass", "id": 695, "avg_similarity_score": 0.23152643174293075}
{"instruction": "def rearrange_digits(list: List[int]) -> int:\n    \"\"\" Rearrange the digits in the given numerical list such that the sum of the digits of the new number is maximum.\n   \n    >>> rearrange_digits([1,2,3])\n    321\n    >>> rearrange_digits([4,5,6,7])\n    7655\n    \"\"\"", "output": "pass", "id": 696, "avg_similarity_score": 0.21085335453251694}
{"instruction": "def power_given_base_mod_n(x: int, m :int, n:int) -> int:\n    \"\"\" Compute x^m mod n, where m and n are positive integers. \n    \n    >>> power_given_base_mod_n(2, 3, 7)\n    6\n    >>> power_given_base_mod_n(5, 2, 8)\n    1\n    \"\"\"", "output": "pass", "id": 697, "avg_similarity_score": 0.11799932722165893}
{"instruction": "def inorder_traversal(root: Node) -> List[int]:\n    \"\"\" Traverse the given binary tree in inorder. \n   \n    >>> inorder_traversal(root)\n    [1, 3, 4, 5, 6, 7, 9]\n    >>> inorder_traversal(root2)\n    [3, 8, 10, 12, 15, 16]\n    \"\"\"", "output": "pass", "id": 698, "avg_similarity_score": 0.14642856590481518}
{"instruction": "def longest_distance_of_equal_elements(nums: List[int]) -> int:\n    \"\"\" Return the length of the longest distance between two equal elements in the given array \n   \n    >>> longest_distance_of_equal_elements([1,1,2,3,2,3,3,4,4,4])\n    5\n    >>> longest_distance_of_equal_elements([1,2,4,4,5,1,1,3,2])\n    4\n    \"\"\"", "output": "pass", "id": 699, "avg_similarity_score": 0.21644320520557123}
{"instruction": "def kth_smallest_element(arr: List[int], k: int) -> int:\n    \"\"\" Find the k-th smallest element in the given array.\n\n    >>> kth_smallest_element([1, 2, 6, 7, 9], 4)\n    7\n    >>> kth_smallest_element([1, 3, 4, 5], 2)\n    3\n    \"\"\"", "output": "pass", "id": 700, "avg_similarity_score": 0.1876241086463218}
{"instruction": "def rearrange_string(words):\n    \"\"\" Given an array of strings words, return a rearranged string based on \n    the following rules: \n    - A letter can be rearranged only if it is the letter which is most commonly \n    seen in the string\n    - If two or more letters are of the same frequency, the one which occurs last\n    should be rearranged.\n\n    >>> rearrange_string([\"bca\",\"aaa\"])\n    \"aaaabc\"\n    >>> rearrange_string([\"aaab\",\"b\",\"cccc\"])\n    \"cccaab\"\n    \"\"\"", "output": "pass", "id": 701, "avg_similarity_score": 0.1767610189670947}
{"instruction": "def del_incorrect_words(words):\n    \"\"\" You are given a list of words words. \n    Remove all words that appear more than two times in the list.\n\n    >>> del_incorrect_words([\"dog\",\"cat\",\"parrot\",\"dog\",\"dog\"])\n    [\"cat\",\"parrot\"]\n    >>> del_incorrect_words([\"dog\",\"cat\",\"dog\",\"dog\"])\n    [\"cat\"]\n    \"\"\"", "output": "pass", "id": 702, "avg_similarity_score": 0.1911985556019697}
{"instruction": "def union_of_intervals(intervals):\n    \"\"\" You are given a list of intervals in the form of [x, y] where x and y \n    are the start and end values. Find the union of the intervals \n    to form a new list with start and end values.\n\n    >>> union_of_intervals([[2, 5], [10, 15], [1, 6]])\n    [[1, 6], [10, 15]]\n    >>> union_of_intervals([[1, 5], [6, 10], [8, 12], [20, 25]])\n    [[1, 12], [20, 25]]\n    \"\"\"", "output": "pass", "id": 703, "avg_similarity_score": 0.18663879040721726}
{"instruction": "def two_d_max_min(matrix):\n    \"\"\" You are given a two dimensional array matrix with different positive \n    integers. Find and return the maximum and the minimum numbers from the \n    array.\n\n    >>> two_d_max_min([[1,2,3], [4,5,6]])\n    (6, 1)\n    >>> two_d_max_min([[-1, -42, 3], [4, 5, 8]])\n    (8, -42)\n    \"\"\"", "output": "pass", "id": 704, "avg_similarity_score": 0.21073564653588442}
{"instruction": "def first_non_repeated_word(sent):\n    \"\"\" You are given a string sent consisting of words. \n    Find and return the first word in the string that is not repeated.\n\n    >>> first_non_repeated_word(\"I like potatoes, potatoes are great\")\n    \"I\"\n    >>> first_non_repeated_word(\"The quick brown fox jumps over the lazy dog\")\n    \"quick\"\n    \"\"\"", "output": "pass", "id": 705, "avg_similarity_score": 0.21747385513773138}
{"instruction": "def longest_consecutive(nums):\n    \"\"\" Given a list of consecutive integers, \n    find and return the length of the longest consecutive elements sequence.\n\n    >>> longest_consecutive([7,3,5,10,11])\n    3\n    >>> longest_consecutive([1,2,3,4,5])\n    5\n    \"\"\"", "output": "pass", "id": 706, "avg_similarity_score": 0.260829969529816}
{"instruction": "def max_profit_stock_days(prices):\n    \"\"\" You are given an array of integers representing the daily stock prices of a company in chronological order. \n    Return the day when you should buy and the day when you should sell \n    to make the maximum profit.\n\n    >>> max_profit_stock_days([7, 4, 9, 1, 5, 3])\n    (1,4)\n    >>> max_profit_stock_days([1, 12, 7, 0, 23, 11, 52, 31])\n    (3,7)\n    \"\"\"", "output": "pass", "id": 707, "avg_similarity_score": 0.18699976027840595}
{"instruction": "def consecutive_sequence_sum(n):\n    \"\"\" Given an integer n, find the largest consecutive sum of an increasing sequence \n    of positive numbers which are less than or equal to n.\n\n    >>> consecutive_sequence_sum(12)\n    10\n    Explanation: 1 + 2 + 3 + 4 = 10\n    >>> consecutive_sequence_sum(5)\n    3\n    Explanation: 1 + 2 = 3\n    \"\"\"", "output": "pass", "id": 708, "avg_similarity_score": 0.1838834745789213}
{"instruction": "def all_unqiue_pairs(nums):\n    \"\"\" Given an array nums of integers, \n    find and return all the unique pairs of integers that add up to a given target.\n\n    >>> all_unqiue_pairs([3,2,2,4], 4)\n    [(2,2), (3,1)]\n    >>> all_unqiue_pairs([1,6,8,3], 7)\n    [(1,6)]\n    \"\"\"", "output": "pass", "id": 709, "avg_similarity_score": 0.23590588519376304}
{"instruction": "def number_of_islands(grid):\n    \"\"\"Given a 2D grid consisting of 0s and 1s,\n    count the number of islands in the grid. \n    An island is a region consisting of 1s connected to each other \n    across the horizontal or vertical plane.\n\n    >>> number_of_islands([[1,1,0], \n                           [1,0,1], \n                           [0,0,0]]\n    2\n    >>> number_of_islands([[1,1,1],[0,1,0],[1,1,1]]\n    1\n    \"\"\"", "output": "pass", "id": 710, "avg_similarity_score": 0.1970340468532598}
{"instruction": "def calculate_harmonic_mean(nums):\n    \"\"\" Calculate the harmonic mean of a sequence of positive numbers.\n\n    >>> calculate_harmonic_mean([2,4,6])\n    3.6\n    >>> calculate_harmonic_mean([1, 2, 4, 6, 12])\n    3.761904761904762\n    \"\"\"", "output": "def calculate_harmonic_mean(nums):\n    \"\"\" Calculate the harmonic mean of a sequence of positive numbers.\n    \n    Arguments:\n        nums (list): A list of positive numbers.\n        \n    Returns:\n        float: The harmonic mean of the given numbers.\n\n    >>> calculate_harmonic_mean([2,4,6])\n    3.6\n    >>> calculate_harmonic_mean([1, 2, 4, 6, 12])\n    3.761904761904762\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += 1/num\n    return len(nums) / total\npass", "id": 711, "avg_similarity_score": 0.16117215158680245}
{"instruction": "def remove_characters(s, chars):\n    \"\"\" Given a string s and a set of characters chars, remove all occurrences of the characters from s.\n\n    >>> remove_characters('hello world', {'o', 'e'})\n    'hll wrld'\n    >>> remove_characters('hello world', {'h', 'w'})\n    'ello orld'\n    \"\"\"", "output": "def remove_characters(s, chars):\n    \"\"\" Given a string s and a set of characters chars, remove all occurrences of the characters from s.\n\n    Arguments:\n        s (str): A string to remove characters from.\n        chars (set): A set of characters to be removed.\n\n    Returns:\n        str: A string with all specified characters removed.\n\n    >>> remove_characters('hello world', {'o', 'e'})\n    'hll wrld'\n    >>> remove_characters('hello world', {'h', 'w'})\n    'ello orld'\n    \"\"\"\n    new_str = \"\"\n    for char in s:\n        if char not in chars:\n            new_str += char\n    return new_str\npass", "id": 712, "avg_similarity_score": 0.20305618738429818}
{"instruction": "def pivot_sort(nums):\n    \"\"\" Rearrange the numbers in nums such that the numbers in lower half of the array are sorted in \n    ascending order and the numbers in the upper half of the array are sorted in descending order.\n    \n    >>> pivot_sort([7,2,3,5,6,8,4,9])\n    [2, 3, 4, 8, 9, 6, 5, 7]\n    >>> pivot_sort([1,2,3,4,5,6,7,8])\n    [1, 2, 3, 8, 7, 6, 5, 4]\n    \"\"\"", "output": "def pivot_sort(nums):\n    \"\"\" Rearrange the numbers in nums such that the numbers in lower half of the array are sorted in \n    ascending order and the numbers in the upper half of the array are sorted in descending order.\n    \n    Arguments:\n        nums (list): A list of integers.\n        \n    Returns:\n        list: A sorted list.\n    \n    >>> pivot_sort([7,2,3,5,6,8,4,9])\n    [2, 3, 4, 8, 9, 6, 5, 7]\n    >>> pivot_sort([1,2,3,4,5,6,7,8])\n    [1, 2, 3, 8, 7, 6, 5, 4]\n    \"\"\"\n    mid = len(nums)//2\n    left = sorted(nums[0:mid])\n    right = sorted(nums[mid:], reverse=True)\n    return left + right\n\npass", "id": 713, "avg_similarity_score": 0.16219196103505742}
{"instruction": "def check_diff(s1, s2):\n    \"\"\" Check if two strings have the same letters and the same number of each letter\n\n    >>> check_diff(\"abacb\", \"bbaac\")\n    True\n    >>> check_diff(\"demon\", \"money\")\n    False\n    \"\"\"", "output": "pass", "id": 714, "avg_similarity_score": 0.15916061751023902}
{"instruction": "def find_in_list(text: List[str], keyword):\n    \"\"\" Given a list of strings, find the longest string in the list that contains the keyword.\n\n    >>> find_in_list([\"apple\", \"pen\", \"dot\"], \"en\")\n    \"pen\"\n    >>> find_in_list([\"bear\", \"dog\", \"net\"], \"at\")\n    \"\"\n    \"\"\"", "output": "pass", "id": 715, "avg_similarity_score": 0.23542007444924742}
{"instruction": "def check_concat(words: List[str]) -> bool:\n    \"\"\" Given a set of strings, determine whether it is possible to concatenate them into one sequential string.\n    \n    >>> check_concat([\"abc\", \"klm\", \"mnop\"])\n    True\n    >>> check_concat([\"klm\", \"ab\", \"mnp\"])\n    False\n    \"\"\"", "output": "pass", "id": 716, "avg_similarity_score": 0.1715629939682998}
{"instruction": "def common_substr_count(str1: str, str2: str) -> int\n    \"\"\" Find the longest common substring in two strings of length n and m.\n    \n    >>> common_substr_count(\"abcdef\", \"ghabdef\")\n    5\n    >>> common_substr_count(\"exam\", \"expand\")\n    2\n    \"\"\"", "output": "pass", "id": 717, "avg_similarity_score": 0.16205186211263292}
{"instruction": "def print_k_smallest(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an unsorted array arr of length n and an integer k, find the k smallest elements in the array. \n    \n    >>> print_k_smallest([4,1,7,2,9], 3)\n    [1, 2, 4]\n    >>> print_k_smallest([8,7,9,3,1,2,5], 4)\n    [1, 2, 3, 5]\n    \"\"\"", "output": "pass", "id": 718, "avg_similarity_score": 0.23411731410159622}
{"instruction": "def merge_two_lists(list1: List[int], list2: List[int]) -> list:\n    \"\"\" Given two sorted lists of size m and n respectively, merge them into one sorted list.\n\n    >>> merge_two_lists([1,3,5], [2,6,8])\n    [1, 2, 3, 5, 6, 8]\n    >>> merge_two_lists([5,7,9], [1,4,6])\n    [1, 4, 5, 6, 7, 9]\n    \"\"\"", "output": "pass", "id": 719, "avg_similarity_score": 0.15379649475518245}
{"instruction": "def remove_duplicates(list1: List[int]) -> List[int]:\n    \"\"\" Remove all duplicates from an unsorted list.\n\n    >>> remove_duplicates([1,2,2,3,3,4,4,5])\n    [1, 2, 3, 4, 5]\n    >>> remove_duplicates([6,1,3,3,7,9,2])\n    [6, 1, 3, 7, 9, 2]\n    \"\"\"", "output": "pass", "id": 720, "avg_similarity_score": 0.12293850157572127}
{"instruction": "def count_max_occurr(string: str) -> int:\n    \"\"\"\n    Given a string, calculate the maximum times any character appears.\n\n    >>> count_max_occurr(\"aabcccc\")\n    4\n    >>> count_max_occurr(\"bbbaaccb\")\n    3\n    \"\"\"", "output": "pass", "id": 721, "avg_similarity_score": 0.1821188374001127}
{"instruction": "def unique_chars(text: str) -> bool:\n    \"\"\"\n    Determine if all characters of a given string are unique.\n\n    >>> unique_chars(\"Hi there!\")\n    True\n    >>> unique_chars(\"Hi there !\")\n    False\n    \"\"\"", "output": "pass", "id": 722, "avg_similarity_score": 0.14442848522741905}
{"instruction": "def rotate_list(list1: List[int], k: int) -> List[int]:\n    \"\"\"\n    Rotate a list by k steps to the right.\n    \n    >>> rotate_list([1,2,3,4], 3)\n    [2, 3, 4, 1]\n    >>> rotate_list([1,2,3,4,5], 2)\n    [4, 5, 1, 2, 3]\n    \"\"\"", "output": "pass", "id": 723, "avg_similarity_score": 0.16483972939336242}
{"instruction": "def reformat_name(name):\n    \"\"\" Given a string name containing personal name,\n    return a string with its components in their normalised format \n    separated with space.\n\n    >>> reformat_name(\"ismail hUssAin\")\n    \"Ismail Hussain\"\n    >>> reformat_name(\"JakE smiTh\")\n    \"Jake Smith\"\n    >>> reformat_name(\"mike\")\n    \"Mike\"\n    \"\"\"", "output": "pass", "id": 724, "avg_similarity_score": 0.14645937384206323}
{"instruction": "def numeric_map(string):\n    \"\"\" Given a string of space-separated words,\n    return a mapping where each word is mapped to its numerical\n    value, where a word's value is the sum of its letters'\n    ASCII values.\n\n    >>> numeric_map(\"adam ken\")\n    {'adam': 283, 'ken': 260}\n    >>> numeric_map(\"joe john jane\")\n    {'joe': 295, 'john': 446, 'jane': 388}\n    >>> numeric_map(\"Chris Joe Tom\")\n    {'Chris': 486, 'Joe': 295, 'Tom': 359}\n    \"\"\"", "output": "pass", "id": 725, "avg_similarity_score": 0.18125777765124998}
{"instruction": "def reconstruct_num(nums):\n    \"\"\" You are given a list of positive integers nums.\n    Return the smallest possible integer such that its digits \n    are the same as those in nums, and the order of its digits\n    is same as in nums.\n\n    >>> reconstruct_num([3,2,5])\n    253\n    >>> reconstruct_num([1,4,2,3])\n    1243\n    >>> reconstruct_num([5,3,1])\n    135\n    \"\"\"", "output": "pass", "id": 726, "avg_similarity_score": 0.206284121637726}
{"instruction": "def remove_unwanted(nums):\n    \"\"\" You are given a list of positive integers nums.\n    Return a list containing all numbers of nums except for the terminal\n    element(the last element) with the maximum value.\n\n    >>> remove_unwanted([9,2,3,4,8])\n    [2,3,4]\n    >>> remove_unwanted([10,10,10,2,30])\n    [10,10,10,2]\n    >>> remove_unwanted([1])\n    []\n    \"\"\"", "output": "pass", "id": 727, "avg_similarity_score": 0.20944499839827693}
{"instruction": "def maximum_subsequence_Product(nums):\n    \"\"\" You are given an array of integers nums.\n    Find and return the largest product that can be created\n    by taking a subset of contiguous elements from the array.\n    \n    >>> maximum_subsequence_Product([3,-7,-2,5,8])\n    80\n    >>> maximum_subsequence_Product([-1,-3,5])\n    15\n    >>> maximum_subsequence_Product([3,-1,-3,5])\n    45\n    \"\"\"", "output": "pass", "id": 728, "avg_similarity_score": 0.23027314258040193}
{"instruction": "def largest_continuous_number(nums):\n    \"\"\" You are given a list of positive integers nums.\n    Find and return the largest integer that can be made from\n    a continuous sequence of numbers from the list.\n\n    >>> largest_continuous_number([3,1,4,2])\n    4321\n    >>> largest_continuous_number([3,2,4,1])\n    4231\n    >>> largest_continuous_number([3,1,4])\n    43\n    \"\"\"", "output": "pass", "id": 729, "avg_similarity_score": 0.23104341018018515}
{"instruction": "def remove_vowels(string):\n    \"\"\" Given a string of lowercase alphabets, return a \n    string where the vowels are removed.\n\n    >>> remove_vowels(\"codex\")\n    \"cdx\"\n    >>> remove_vowels(\"hello\")\n    \"hll\"\n    >>> remove_vowels(\"apple\")\n    \"ppl\"\n    \"\"\"", "output": "pass", "id": 730, "avg_similarity_score": 0.2086908381382964}
{"instruction": "def power_of_x(x, n):\n    \"\"\" Return the n-th power of x without using \n    any inbuilt method such as pow, **.\n\n    >>> power_of_x(2,3)\n    8\n    >>> power_of_x(10,2)\n    100\n    >>> power_of_x(3,5)\n    243\n    \"\"\"", "output": "pass", "id": 731, "avg_similarity_score": 0.15400454175854927}
{"instruction": "def profit_calculator(prices):\n    \"\"\" You are given a list of stock prices of a single stock on \n    successive days. Find and return the maximum possible profit \n    that can be realized from one purchase and one sale of the\n    stock.\n\n    >>> profit_calculator([7, 4, 10, 1, 8])\n    7\n    >>> profit_calculator([9, 5, 7, 3, 2])\n    4\n    >>> profit_calculator([10, 8, 6, 4, 3])\n    2\n    \"\"\"", "output": "pass", "id": 732, "avg_similarity_score": 0.19423790607961397}
{"instruction": "def breaking_index(numbers):\n    \"\"\" Given an array nums of non-negative integers, \n    find the lowest index at which the sum of the corresponding elements \n    in the array is greater than or equal to a given target.\n    If such an index doesn't exist, return -1.\n\n    >>> breaking_index([2,3,1], 4)\n    1\n    >>> breaking_index([1,2,1,2], 4)\n    3\n    >>> breaking_index([1,2,3,4], 8)\n    -1\n    \"\"\"", "output": "pass", "id": 733, "avg_similarity_score": 0.20140818375433525}
{"instruction": "def longest_common_prefix(words):\n    \"\"\" Given an array of strings words, \n    find the longest common prefix among all strings in words.\n\n    >>> longest_common_prefix([\"albus\",\"albus\",\"alchemilla\"])\n    al\n    >>> longest_common_prefix([\"bobcat\",\"brian\",\"bizarre\"])\n    b\n    >>> longest_common_prefix([\"zzzb\",\"zzza\",\"zzz\"])\n    \"\"\n    \"\"\"", "output": "pass", "id": 734, "avg_similarity_score": 0.20116529951631415}
{"instruction": "def valid_pairs(numbers):\n    \"\"\" Given an array nums of 0's and 1's, \n    find the number of valid permutations of 0's and 1's \n    such that a number of 0's is equal to a number of 1's \n    and the sum of all elements of the permutation is even.\n    Return the number of valid permutations.\n\n    >>> valid_pairs([1,0,1])\n    3\n    >>> valid_pairs([1,1,0,0])\n    6\n    >>> valid_pairs([0,1,1,0])\n    4\n    \"\"\"", "output": "pass", "id": 735, "avg_similarity_score": 0.1925881312654008}
{"instruction": "def remove_even_len_words(words):\n    \"\"\" Given a list of words, return a new list that\n    contains only the words with even length.\n\n    >>> remove_even_len_words([\"cat\", \"dog\", \"monkey\", \"elephant\"])\n    ['dog', 'elephant']\n    >>> remove_even_len_words([\"bob\", \"alice\", \"sam\"])\n    ['bob']\n    >>> remove_even_len_words([\"bb\", \"ccc\", \"dddd\"])\n    ['ccc', 'dddd']\n    \"\"\"", "output": "pass", "id": 736, "avg_similarity_score": 0.20184754919013667}
{"instruction": "def right_shift(numbers, k):\n    \"\"\" Given an array nums and an integer k,\n    return a copy of nums where all elements have been \n    shifted to the right by k indices. \n\n    >>> right_shift([1,2,3,4], 1)\n    [4, 1, 2, 3]\n    >>> right_shift([1,2,3,4], 2)\n    [3, 4, 1, 2]\n    >>> right_shift([1,2,3,4], 3)\n    [2, 3, 4, 1]\n    \"\"\"", "output": "pass", "id": 737, "avg_similarity_score": 0.20084888916381893}
{"instruction": "def min_max_diff(numbers):\n    \"\"\" Given an array of integers,\n    find the difference between the smallest and the greatest value of the array.\n\n    >>> min_max_diff([2,4,6,1,8,5])\n    7\n    >>> min_max_diff([1,3,5,7])\n    6\n    >>> min_max_diff([10,20,30,40,50])\n    40\n    \"\"\"", "output": "pass", "id": 738, "avg_similarity_score": 0.24073233564162203}
{"instruction": "def two_sum_dif(nums, dif):\n    \"\"\" Given an array of integers nums and an integer dif,\n    return true if there exist two integers in nums whose difference is dif,\n    and false otherwise.\n\n    >>> two_sum_dif([3,1,2], 2)\n    True\n    >>> two_sum_dif([1,2,3], 4)\n    False\n    >>> two_sum_dif([4,1,2,6,3], 3)\n    True\n    \"\"\"", "output": "pass", "id": 739, "avg_similarity_score": 0.1863920746310009}
{"instruction": "def strictly_increasing(nums):\n    \"\"\" Given an array of integers nums, \n    return true iff all the elements of nums are strictly increasing.\n\n    >>> strictly_increasing([1,2,3,4])\n    True\n    >>> strictly_increasing([1,3,4,5])\n    True\n    >>> strictly_increasing([2,1,3])\n    False\n    \"\"\"", "output": "pass", "id": 740, "avg_similarity_score": 0.22740671054981898}
{"instruction": "def max_Non_Adj_Sum(arr):\n    \"\"\" Find the maximum sum of a non-adjacent array of positive integers.\n\n    >>> max_Non_Adj_Sum([2,4,5,6,3])\n    13\n    >>> max_Non_Adj_Sum([3,2,-5,3,7])\n    9\n    \"\"\"", "output": "pass", "id": 741, "avg_similarity_score": 0.18463160261616318}
{"instruction": "def find_min(arr):\n    \"\"\" Given an array of integers, return the minimum number in the array.\n\n    >>> find_min([4, 9, 7, 0, 2, 4])\n    0\n    >>> find_min([1,7,2,3,9,4,5,8])\n    1\n    \"\"\"", "output": "pass", "id": 742, "avg_similarity_score": 0.2688262695031165}
{"instruction": "def find_consecutive_prime_pairs(n):\n    \"\"\" Given a number n, find all pairs of consecutive primes, less than n.\n\n    >>> find_consecutive_prime_pairs(20)\n    (3, 5), (5, 7), (11, 13)\n    >>> find_consecutive_prime_pairs(12)\n     (3, 5)\n    \"\"\"", "output": "pass", "id": 743, "avg_similarity_score": 0.17153266425854097}
{"instruction": "def is_happy_num(num):\n    \"\"\" Given an integer, determine whether it is a happy number or not. \n    A happy number is defined by the following process:\n    Starting with any positive integer, \n    replace the number by the sum of squares of its digits until it equals 1 or it loops endlessly\n\n    >>> is_happy_num(19)\n    True\n    >>> is_happy_num(2)\n    False\n    \"\"\"", "output": "pass", "id": 744, "avg_similarity_score": 0.15318818417921823}
{"instruction": "def is_sql_reserved_keyword(w):\n    \"\"\" Check if the given string is a sql reserved keyword.\n    \n    >>> is_sql_reserved_keyword('select')\n    True\n    >>> is_sql_reserved_keyword('test')\n    False\n    \"\"\"", "output": "pass", "id": 745, "avg_similarity_score": 0.1462734891686197}
{"instruction": "def find_divisors(n):\n    \"\"\" Return a list of all the divisors of a given number n.\n\n    >>> find_divisors(10)\n    [1, 2, 5, 10]\n    >>> find_divisors(21)\n    [1, 3, 7, 21]\n    \"\"\"", "output": "pass", "id": 746, "avg_similarity_score": 0.22014367917833577}
{"instruction": "def find_substr(s, substr):\n    \"\"\" Find the index of first occurrence of the given substring s in the given string.\n\n    >>> find_substr('the quick brown fox', 'brown')\n    10\n    >>> find_substr('the quick brown fox', 'brownie')\n    -1\n    \"\"\"", "output": "pass", "id": 747, "avg_similarity_score": 0.19391419174080787}
{"instruction": "def reverse_str(s): \n    \"\"\" Reverse a given string.\n\n    >>> reverse_str('abcd')\n    'dcba'\n    >>> reverse_str('hello')\n    'olleh'\n    \"\"\"", "output": "pass", "id": 748, "avg_similarity_score": 0.14470183419355503}
{"instruction": "def binary_search(arr, x): \n    \"\"\" Return the position of x in the given sorted array arr if it is present, else return -1.\n\n    >>> binary_search([2,3,4,10,40], 10)\n    3\n    >>> binary_search([2,4,6,8,10], 5)\n    -1\n    \"\"\"", "output": "pass", "id": 749, "avg_similarity_score": 0.18812186095056033}
{"instruction": "def four_equal_parts(arr):\n    \"\"\" You are given an array arr of four non-negative integers.\n    Divide the array into four equal parts such that the sum of each part is even.\n    Return whether there is a way to divide the array into four equal parts \n    such that the sum of each part is even.\n\n    >>> four_equal_parts([1,2,1,2])\n    True\n    >>> four_equal_parts([1,3,3,11])\n    False\n    \"\"\"", "output": "pass", "id": 750, "avg_similarity_score": 0.18275518845752287}
{"instruction": "def is_beautiful_string(s):\n    \"\"\" A string s is considered beautiful if it consists only of alphabets and consists of maximum two vowel letters.\n    Return whether the given string is beautiful or not.\n\n    >>> is_beautiful_string(\"abcdefghijklmnopqrstuvwxyz\")\n    True\n    >>> is_beautiful_string(\"aeirioulpsd\")\n    False\n    >>> is_beautiful_string(\"aaamm\")\n    False\n    \"\"\"", "output": "pass", "id": 751, "avg_similarity_score": 0.17026120753618232}
{"instruction": "def sum_of_unique_multiples(arr):\n    \"\"\" You are given an array arr of positive integers (multiples).\n    Return the sum of unique numbers that are multiples of their respective index.\n\n    >>> sum_of_unique_multiples([10,6,4,25])\n    14\n    Explanation: 25 (index is 3) is a multiple of its index, so it is counted. 10, 6, and 4 are not counted because they are not multiples of their index.\n    >>> sum_of_unique_multiples([6,2,4,3,7,50])\n    12\n    \"\"\"", "output": "pass", "id": 752, "avg_similarity_score": 0.21886034130533621}
{"instruction": "def anagram_groups(arr):\n    \"\"\" You are given an array arr of strings.\n    Return the number of distinct anagram groups in the array.\n\n    >>> anagram_groups([\"star\",\"rats\",\"tars\"])\n    1\n    >>> anagram_groups([\"star\",\"rats\",\"car\",\"arc\"])\n    2\n    >>> anagram_groups([\"star\",\"rats\",\"tar\",\"arc\"])\n    3\n    >>> anagram_groups([\"star\",\"rats\",\"tarz\",\"arc\"])\n    3\n    \"\"\"", "output": "pass", "id": 753, "avg_similarity_score": 0.25082079598167933}
{"instruction": "def make_palindrome(s):\n    \"\"\" You are given a string s consisting of lowercase alphabets.\n    Insert at most one character anywhere in s such that the resulting string is palindrome.\n    Return the minimum number of characters that must be added.\n\n    >>> make_palindrome(\"ffee\")\n    1\n    Explanation: \"effe\" is palindrome, so only 1 character is added.\n    >>> make_palindrome(\"abec\")\n    0\n    >>> make_palindrome(\"acbda\")\n    2\n    \"\"\"", "output": "pass", "id": 754, "avg_similarity_score": 0.18931486147501123}
{"instruction": "def balanced_payment(x, y, z):\n    \"\"\" You are given 3 numbers x, y and z.\n    You can shift the amount of any of the number either to any of the other two numbers or subtract from any of the numbers.\n    Return whether it is possible to make the payment of each of x, y and z equal.\n\n    >>> balanced_payment(20,30,40)\n    False\n    >>> balanced_payment(10,20,30)\n    True\n    \"\"\"", "output": "pass", "id": 755, "avg_similarity_score": 0.1544283335606684}
{"instruction": "def maximum_increasing_sequence_sum(arr):\n    \"\"\" You are given an array arr of positive integers.\n    Return the sum of the maximum increasing sequence in the array.\n\n    >>> maximum_increasing_sequence_sum([6,7,8,1,2,3,9,10])\n    24\n    >>> maximum_increasing_sequence_sum([1,2,3,4,5,6,7,8])\n    36\n    \"\"\"", "output": "pass", "id": 756, "avg_similarity_score": 0.2512132977671541}
{"instruction": "def missing_letter(array):\n    \"\"\" You are given an array of letters, where each letter is represented by its respective index in the English alphabets.\n    Return the missing letter from the array.\n\n    >>> missing_letter(['a','b','d','e'])\n    'c'\n    >>> missing_letter(['F','G','H','I','K','L'])\n    'J'\n    \"\"\"", "output": "pass", "id": 757, "avg_similarity_score": 0.19281092737600145}
{"instruction": "def transform_string(s, t):\n    \"\"\" You are given two strings s and t of the same length.\n    Return true if it is possible to transform string s to string t \n    using minimum number of operations involving addition and deletion of characters.\n\n    >>> transform_string(\"abc\",\"bcd\")\n    True\n    Explanation: We can delete \"a\" from string s and add \"d\" to it at the end.\n    >>> transform_string(\"abc\",\"dbe\")\n    False \n    \"\"\"", "output": "pass", "id": 758, "avg_similarity_score": 0.16960899496322238}
{"instruction": "def consective_ones(arr):\n    \"\"\" You are given an array arr of zeros and ones,\n    Return the required number of flips (consecutive ones) in the array such that all the zeros get converted to 1.\n\n    >>> consective_ones([1,0,1,1,0,1])\n    1\n    Explanation: We can turn the second zero to 1 by flipping the first two elements.\n    >>> consective_ones([1,1,0,0,0,1])\n    2\n    \"\"\"", "output": "pass", "id": 759, "avg_similarity_score": 0.22661570253495814}
{"instruction": "def find_target_pair_sum(nums: List[int], target: int) -> bool: \n    \"\"\"Given a list of integers (positive, negative, and 0) and a target, \n    return true if two numbers in the list sum to the target, and false otherwise.\n\n    >>> find_target_pair_sum([1,2,3,4], 5)\n    True\n    >>> find_target_pair_sum([1,2,3,4], 6)\n    False\n    >>> find_target_pair_sum([-2,4,-5,3], -1)\n    True\n    \"\"\"", "output": "pass", "id": 760, "avg_similarity_score": 0.22337370602368306}
{"instruction": "def sort_string_by_priorities(s: str, priorities: List[int]) -> str:\n    \"\"\"You are given a string s consisting of lowercase English alphabet characters and integers representing priorities of characters.\n    Return a string, where characters are sorted according to their priorities.\n\n    >>> sort_string_by_priorities(\"aabbccddee\", [2,0,1,3])\n    \"ccbbdaeee\"\n    >>> sort_string_by_priorities(\"aabbccddee\", [3,2,1,0])\n    \"eddaeebbcc\"\n    \"\"\"", "output": "pass", "id": 761, "avg_similarity_score": 0.17950326657019458}
{"instruction": "def longest_non_decreasing_subsequence(nums: List[int]) -> int:\n    \"\"\"Given a list of integers nums, \n    return the length of the longest non-decreasing subsequence.\n    \n    >>> longest_non_decreasing_subsequence([1,9,3,8,11,4,5,6,4,19,7,1,7])\n    6\n    Explanation: Longest subsequence is [1,3,4,5,6,7]\n    >>> longest_non_decreasing_subsequence([2,2,2])\n    3\n    >>> longest_non_decreasing_subsequence([-2,-1,3,4,5])\n    4\n    \"\"\"", "output": "pass", "id": 762, "avg_similarity_score": 0.25047523657691123}
{"instruction": "def binary_search_pivot_index (nums: List[int]) -> int:\n    \"\"\"Given an integer array nums sorted in ascending order, \n    find the pivot index in the array such that  Sum [0...pivot - 1] = Sum [pivot + 1 ... n - 1]\n    or return -1 if there is no such index.\n    \n    >>> binary_search_pivot_index([1,7,3,6,5,6])\n    3\n    >>> binary_search_pivot_index([1,2,3])\n    -1\n    >>> binary_search_pivot_index([-1,4,2,7,9])\n    2\n    \"\"\"", "output": "pass", "id": 763, "avg_similarity_score": 0.17425994635523068}
{"instruction": "def check_anagrams(s1: str, s2: str) -> bool:\n    \"\"\"Given two strings s1 and s2, \n    check if these strings are anagrams of each other.\n\n    >>> check_anagrams(\"sally\", \"allys\")\n    True\n    >>> check_anagrams(\"sally\", \"bally\")\n    False\n    >>> check_anagrams(\"sally\", \"aallo\")\n    True\n    \"\"\"", "output": "pass", "id": 764, "avg_similarity_score": 0.149402560012266}
{"instruction": "def print_ancestors_on_level(node: TreeNode, level: int) -> None:\n    \"\"\"Given a binary tree and an integer level, \n    print out the ancestors of the level-th level node.\n\n    >>> print_ancestors_on_level(root, 2)\n    root -> node_1 -> node_3 -> node_5\n    Explanation: Level 2 node is node_5, so the ancestors on the level are root, node_1, node_3 \n    \"\"\"", "output": "pass", "id": 765, "avg_similarity_score": 0.18581650452681553}
{"instruction": "def is_balanced_bst(node: TreeNode) -> bool:\n    \"\"\"Given the root of a Binary Search Tree (BST), \n    check if the tree is balanced.\n\n    >>> is_balanced_bst(bst_root)\n    True\n    >>> is_balanced_bst(unbalanced_bst_root)\n    False\n    \"\"\"", "output": "pass", "id": 766, "avg_similarity_score": 0.18275516870685057}
{"instruction": "def num_reachable_cells(dirt_map: List[List[bool]], starting_point: Tuple[int.int]) -> int:\n    \"\"\"Given a 2-D array of boolean dirt_map and starting point starting_point, \n    calculate the number of reachable cell.\n    Only cells True in the map are reachable.\n\n    >>> dirt_map=[[True, False, False], \n                  [True, True, False], \n                  [False, True, False]]\n    >>> num_reachable_cells(dirt_map, (0,0))\n    4\n    Explanation: (0,0) can reach (1,0), (2,0), (1,1), (2,1).\n    >>> num_reachable_cells(dirt_map, (2,2))\n    0\n    \"\"\"", "output": "pass", "id": 767, "avg_similarity_score": 0.18676427379446767}
{"instruction": "def sum_non_adjacent_nums(lst):\n    \"\"\" Given a list of non-negative integers, return the sum of the maximum \n    sum of all the non-adjacent elements.\n\n    >>> sum_non_adjacent_nums([2, 4, 6, 8])\n    14\n    >>> sum_non_adjacent_nums([5, 1, 1, 5])\n    10\n    >>> sum_non_adjacent_nums([3, 2, 5])\n    8\n    \"\"\"", "output": "pass", "id": 768, "avg_similarity_score": 0.24583463467105454}
{"instruction": "def find_rotation_index(words):\n    \"\"\"Given a list of words in oder, find the rotation point, where the rotation \n    point is the index where the words begins to cycle back on itself.\n    \n    >>> find_rotation_index(['ptolemaic', 'retrograde', 'supplant',\n    ... 'undulate', 'xenoepist', 'asymptote', 'babka', 'banoffee', 'engender',\n    ... 'karpatka', 'othellolagkage'])\n    5\n    \"\"\"", "output": "pass", "id": 769, "avg_similarity_score": 0.18755169612838982}
{"instruction": "def longest_non_duplicate_substring(s):\n    \"\"\" Given a string s, return the longest substring that \n    contains no duplicate characters.\n\n    >>> longest_non_duplicate_substring(\"bacbca\")\n    \"bac\"\n    >>> longest_non_duplicate_substring(\"abcdae\")\n    \"abcd\"\n    \"\"\"", "output": "pass", "id": 770, "avg_similarity_score": 0.1886162934804913}
{"instruction": "def minimum_sum_intervals(nums):\n    \"\"\" Given a list of numbers, find the minimum sum that can be \n    obtained by selecting the intervals [num[i], num[j]] such that \n    every element in the interval must be in the list.\n\n    Ex: [1,3,1,2] -> 1+2+3 = 6\n    >>> minimum_sum_intervals([1,3,1,2])\n    6\n    >>> minimum_sum_intervals([4,10,1,2,11,8])\n    25\n    \"\"\"", "output": "pass", "id": 771, "avg_similarity_score": 0.17202630271135827}
{"instruction": "def palindromic_subsequence(s):\n    \"\"\" Given a string s, find the length of the longest palindromic subsequence \n    the string can have.\n\n    >>> palindromic_subsequence(\"abacab\")\n    5\n    >>> palindromic_subsequence(\"abcba\")\n    5\n    \"\"\"", "output": "pass", "id": 772, "avg_similarity_score": 0.22417736494001766}
{"instruction": "def combinations_sum(nums, target):\n    \"\"\"Given a set of candidate numbers nums and a target, \n    find all unique combinations in nums where the sum of the\n    numbers in the combination equals target.\n\n    >>> combinations_sum([2,3,6,7], 7)\n    [[2,2,3], [7]]\n    >>> combinations_sum([2,3,5], 8)\n    [[2,2,2,2], [2,3,3], [3,5]]\n    \"\"\"", "output": "pass", "id": 773, "avg_similarity_score": 0.22102093401560138}
{"instruction": "def remove_duplicate_substrings(s, k):\n    \"\"\" Remove all duplicate substrings of length k from the given string s.\n    Duplicate substrings of length k from the given string are those which occur \n    more than once in the given string but not necessarily contiguous.\n    \n    >>> remove_duplicate_substrings(\"abcde\", 2)\n    \"abcde\"\n    >>> remove_duplicate_substrings(\"abababab\", 2)\n    \"\"\n    \"\"\"", "output": "pass", "id": 774, "avg_similarity_score": 0.16166291118572174}
{"instruction": "def min_window_substring(s, t):\n    \"\"\" Given two strings s and t, find the minimum window in the string s, \n    which contains all the characters in t in the same order.\n\n    >>> min_window_substring(\"ADOBECODEBANC\", \"ABC\")\n    \"BANC\"\n    >>> min_window_substring(\"contest\", \"con\")\n    \"cont\"\n    \"\"\"", "output": "pass", "id": 775, "avg_similarity_score": 0.1821087816188145}
{"instruction": "def is_palindrome(input_str: str) -> bool:\n    \"\"\" Determine if the input string is a palindrome.\n\n    >>> is_palindrome('ana')\n    True\n    >>> is_palindrome('banana')\n    False\n    \"\"\"", "output": "pass", "id": 776, "avg_similarity_score": 0.14385995124708365}
{"instruction": "def min_max_sum(arr: List[int]) -> List[int]:\n    \"\"\" Given an array, return the minimum and maximum sums of non-adjacent elements.\n\n    >>> min_max_sum([7, 12, 5, 9, 1])\n    [11, 20]\n    >>> min_max_sum([3, 11, 6, 4, 8])\n    [8, 17]\n    \"\"\"", "output": "pass", "id": 777, "avg_similarity_score": 0.22795766242258053}
{"instruction": "def missing_numbers(arr: List[int]) -> List[int]:\n\t\"\"\" Given an array which contains numbers (positive and negative) find all the missing numbers.\n\t\n\t>>> missing_numbers([2, 3, 1, 5])\n\t[4]\n\t>>> missing_numbers([-2, -6, -4, -5, -1, -3])\n\t[-7]\n\t\"\"\"", "output": "pass", "id": 778, "avg_similarity_score": 0.20323910877432877}
{"instruction": "def digit_sum(num: int) -> int:\n    \"\"\" Return sum of all digits of a number.\n\n    >>> digit_sum(123456)\n    21\n    >>> digit_sum(987654321)\n    45\n    \"\"\"", "output": "pass", "id": 779, "avg_similarity_score": 0.17276838990798707}
{"instruction": "def letter_friendships(pairings: List[Tuple[str, str]]) -> List[Tuple[str, List[str]]]:\n    \"\"\"From a list of one-on-one friendships, construct a list of friendships consisting of letters and their friends.\n\n    >>> letter_friendships([('A', 'B'), ('B', 'C')])\n    [('A', ['B']), ('B', ['A', 'C']), ('C', ['B'])]\n    >>> letter_friendships([('A', 'B'), ('C', 'D')])\n    [('A', ['B']), ('B', ['A']), ('C', ['D']), ('D', ['C'])] \n    \"\"\"", "output": "pass", "id": 780, "avg_similarity_score": 0.1441246575456651}
{"instruction": "def group_ledger(people: List[str], groups: List[List[str]]) -> List[Tuple[str, int]]:\n    \"\"\" Given a list of people and a list of groups containing sets of people, return a list of tuples consisting of a person and how many groups they are in.\n\n    >>> group_ledger(['A', 'B', 'C'], [['A', 'B'], ['B', 'C'], ['A', 'C']])\n    [('A', 2), ('B', 2), ('C', 2)] \n    >>> group_ledger(['A', 'B', 'C', 'D'], [['A', 'B'], ['B', 'C'], ['A', 'C']])\n    [('A', 2), ('B', 2), ('C', 2), ('D', 0)]\n    \"\"\"", "output": "pass", "id": 781, "avg_similarity_score": 0.17765353027043332}
{"instruction": "def generate_substrings(s: str) -> List[str]:\n    \"\"\" Generate all possible substrings of a string. \n\n    >>> generate_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    >>> generate_substrings('aab')\n    ['a', 'aa', 'aab', 'ab', 'b']\n    \"\"\"", "output": "pass", "id": 782, "avg_similarity_score": 0.1521077983038346}
{"instruction": "def magic_square(n: int) -> List[List[int]]:\n    \"\"\"Return a magic square of size n, where n is an odd number greater than one.\n\n    >>> magic_square(3)\n    [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n    >>> magic_square(5)\n\t[[17, 24,  1,  8, 15],\n\t[23,  5,  7, 14, 16],\n\t[ 4,  6, 13, 20, 22],\n\t[10, 12, 19, 21,  3],\n\t[11, 18, 25,  2,  9]]\n    \"\"\"", "output": "pass", "id": 783, "avg_similarity_score": 0.15708705203534548}
{"instruction": "def max_digit_sum(x: int, y: int) -> int:\n    \"\"\" Return the maximum digit sum possible of all numbers between x and y.\n\n    >>> max_digit_sum(18, 37)\n    45\n    >>> max_digit_sum(-3, -27)\n    32\n    \"\"\"", "output": "pass", "id": 784, "avg_similarity_score": 0.16712406167909127}
{"instruction": "def are_anagrams(str_1: str, str_2: str) -> bool:\n    \"\"\" Check if two strings are anagrams. \n    \n    >>> are_anagrams('listen', 'silent')\n    True\n    >>> are_anagrams('earth', 'heart')\n    True\n    \"\"\"", "output": "pass", "id": 785, "avg_similarity_score": 0.09228253166843105}
{"instruction": "def swarm(array):\n    \"\"\" Move all zeros to the right and non-zeros to the left of the array.\n\n    >>> swarm([ 3, 1, 2, 0, 0, 0, 4, 5 ])\n    [3, 1, 2, 4, 5, 0, 0, 0]\n    >>> swarm([ 0, 1, 0, 2, 0, 3, 0, 4 ])\n    [1, 2, 3, 4, 0, 0, 0, 0]\n    \"\"\"", "output": "pass", "id": 786, "avg_similarity_score": 0.18365476684129609}
{"instruction": "def delete_all_duplicates(arr):\n    \"\"\" Given a linked list, delete all duplicates from the list.\n\n    >>> delete_all_duplicates([node(4), node(2), node(6), node(2), node(2), node(4)])\n    [node(4), node(2), node(6)]\n    >>> delete_all_duplicates([node(1), node(1), node(1), node(2), node(2)])\n    [node(1), node(2)]\n    \"\"\"", "output": "pass", "id": 787, "avg_similarity_score": 0.18419137404514996}
{"instruction": "def valid_parentheses(string):\n    \"\"\" Validates a string of parentheses.\n\n    >>> valid_parentheses(\"((()))\")\n    True\n    >>> valid_parentheses(\"()())\")\n    False\n    \"\"\"", "output": "pass", "id": 788, "avg_similarity_score": 0.14802127203442647}
{"instruction": "def min_subarray_length(s, nums):\n    \"\"\" Find the minimum length of a contiguous subarray of which the sum is equal to the given target.\n\n    >>> min_subarray_length(7, [2,3,1,2,4,3])\n    2\n    >>> min_subarray_length(18, [2,3,7,10,2,11,14,20])\n    3\n    \"\"\"", "output": "pass", "id": 789, "avg_similarity_score": 0.20185674135016712}
{"instruction": "def sort_dictionary_by_value_descending(dictionary):\n    \"\"\" Sort the given dictionary of numbers by its values in descending order.\n\n    >>> sort_dictionary_by_value_descending({'A': 9, 'B': 5, 'C': 3, 'D': 14, 'E': 6})\n    {'D': 14, 'A': 9, 'E': 6, 'B': 5, 'C': 3}\n    >>> sort_dictionary_by_value_descending({'A': 3, 'B': 8, 'C': 1, 'D': 11, 'E': 4})\n    {'B': 8, 'D': 11, 'E': 4, 'A': 3, 'C': 1}\n    \"\"\"", "output": "pass", "id": 790, "avg_similarity_score": 0.15097255893190398}
{"instruction": "def permutation(string):\n    \"\"\" Print all permutations of a given string.\n\n    >>> permutation(\"abc\")\n    abc\n    acb\n    bac\n    bca\n    cab\n    cba\n    >>> permutation(\"a\")\n    a\n    \"\"\"", "output": "pass", "id": 791, "avg_similarity_score": 0.15472108746903412}
{"instruction": "def count_pairs_with_difference(nums, k):\n    \"\"\" Returns the count of the number of pairs which are having a difference of k in the given array.\n\n    >>> count_pairs_with_difference([1, 7, 5, 9, 2, 12, 3], 2)\n    4\n    >>> count_pairs_with_difference([2, 4, 6, 8], 2)\n    4\n    \"\"\"", "output": "pass", "id": 792, "avg_similarity_score": 0.19961759905709017}
{"instruction": "def three_the_same_in_row(nums):\n    \"\"\" Find the most consecutive three integers in the list that are the same.\n\n    >>> three_the_same_in_row([1, 1, 1, 3, 4, 5, 6, 6])\n    [1, 1, 1]\n    >>> three_the_same_in_row([1, 2, 3, 6, 6, 6, 7, 8])\n    [6,6,6]\n    \"\"\"", "output": "pass", "id": 793, "avg_similarity_score": 0.16766312953731094}
{"instruction": "def hampel_filter(L):\n    \"\"\" Given a list of values, filter out outliers using the Hampel filter.\n\n    >>> hampel_filter([20, 4, 12, 5, 7, 10])\n    [12, 5, 7]\n    >>> hampel_filter([2, 4, 3, 6, 9, 11])\n    [3, 6, 9]\n    \"\"\"", "output": "pass", "id": 794, "avg_similarity_score": 0.18665448179515143}
{"instruction": "def count_unival_trees(node):\n    \"\"\" Count the number of unival trees in a tree. \n\n    Unival tree is a tree that has only one value throughout its nodes.\n\n    >>> count_unival_trees(tree_node(0, tree_node(1), tree_node(0, tree_node(1, tree_node(1), tree_node(1)))))\n    5\n    >>> count_unival_trees(tree_node(1))\n    1\n    \"\"\"", "output": "pass", "id": 795, "avg_similarity_score": 0.14202419908944786}
{"instruction": "def max_number(nums):\n    \"\"\" Given an array of integers nums, find the largest number formed by concatenating the \n    elements of nums in any order.\n\n    >>> max_number([15, 12, 3, 10])\n    1531210\n    >>> max_number([71, 5, 12, 3])\n    715123\n\"\"\"", "output": "pass", "id": 796, "avg_similarity_score": 0.23285231304909468}
{"instruction": "def next_smallest_palindrome(num):\n    \"\"\" Given a positive but not necessarily palindromic integer,\n    return the next smallest palindrome integer that is larger than the given number.\n\n    >>> next_smallest_palindrome(14542)\n    14641\n    >>> next_smallest_palindrome(1000)\n    1001\n    \"\"\"", "output": "pass", "id": 797, "avg_similarity_score": 0.1843425358830064}
{"instruction": "def count_clumps(nums):\n    \"\"\" Given an array of integers nums, return the number of subarrays which\n    contain at least two adjacent elements which are equal in value.\n\n    >>> count_clumps([1, 2, 2, 3, 4, 4])\n    2\n    >>> count_clumps([1, 1, 2, 1, 1])\n    2\n    \"\"\"", "output": "pass", "id": 798, "avg_similarity_score": 0.22468149804614884}
{"instruction": "def min_edits(w1, w2):\n    \"\"\" Given two strings w1 and w2, calculate the minimum number of edit operations\n    required to turn w1 into w2.\n\n    Edit operations:\n    - Insert one character into a string\n    - Delete one character from a string\n    - Replace one character with another in a string\n\n    Example:\n    >>> min_edits(\"eat\",\"ate\")\n    1\n    Explanation: Replace \"e\" with \"a\" \n    >>> min_edits(\"sale\", \"sail\")\n    2\n    \"\"\"", "output": "pass", "id": 799, "avg_similarity_score": 0.1407733344608038}
{"instruction": "def longest_sequence(s):\n    \"\"\" Given a string s, find the longest contiguous sequence of unique characters in s.\n\n    Example:\n    >>> longest_sequence(\"abbbca\")\n    3\n    Explanation: The longest sequence of unique characters is \"abc\" which is of length 3.\n    >>> longest_sequence(\"abbbaaacd\")\n    4\n    Explanation: The longest sequence of unique characters is \"bbbaa\" which is of length 4.\n    \"\"\"", "output": "pass", "id": 800, "avg_similarity_score": 0.21160519380978784}
{"instruction": "def convert_list_string(l):\n    \"\"\" Given a list l containing strings, convert each string to\n    its corresponding integer representation.\n\n    Example:\n    >>> convert_list_string([\"-1\", \"2\", \"4\"])\n    [-1, 2, 4]\n    >>> convert_list_string([\"1\", \"5\", \"7\"])\n    [1, 5, 7]\n    \"\"\"", "output": "pass", "id": 801, "avg_similarity_score": 0.1551353649057837}
{"instruction": "def first_unique(s):\n    \"\"\" Given a string s, return the index of the first unique character.\n    If there is no unique character, return -1.\n\n    Example:\n    >>> first_unique(\"aabbabccd\")\n    7\n    Explanation: The first unique character is at index 7.\n    >>> first_unique(\"aaabccdde\")\n    -1\n    \"\"\"", "output": "pass", "id": 802, "avg_similarity_score": 0.2106952771259148}
{"instruction": "def reverse_sort(n):\n    \"\"\" Given two integers n, return a list of numbers from 1 to n in reversed sorted order.\n\n    Example:\n    >>> reverse_sort(5)\n    [5, 4, 3, 2, 1]\n    >>> reverse_sort(10)\n    [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    \"\"\"", "output": "pass", "id": 803, "avg_similarity_score": 0.19841716548702315}
{"instruction": "def max_sublist_sum(l):\n    \"\"\" Given a non-empty array of integers l, calculate the maximum sum of\n    a contiguous sublist of l.\n\n    Example:\n    >>> max_sublist_sum([1, 2, -2, 5, 7])\n    14\n    Explanation: The maximum sum of any contiguous sublist is 14 (sum of [5, 7]).\n    >>> max_sublist_sum([-1, -2, 3, -4, -7])\n    3\n    \"\"\"", "output": "pass", "id": 804, "avg_similarity_score": 0.21823162416439462}
{"instruction": "def longest_word(sentence):\n    \"\"\" Given a string sentence, return the length of the longest word contained in it.\n\n    Example:\n    >>> longest_word(\"The quick brown fox jumped over the lazy dog.\")\n    6\n    Explanation: \"jumped\" is the longest word with 6 characters.\n    >>> longest_word(\"This sentence is ten characters long\")\n    8\n    \"\"\"", "output": "pass", "id": 805, "avg_similarity_score": 0.2277494940234877}
{"instruction": "Create a function that takes in an array of integers and returns its peak elements. \nA peak element is an element of the array which is greater than both its neighbors.\n\n    >>> peakElements([5, 10, 20, 15])\n    [20]\n    >>> peakElements([1, 3, 2, 1])\n    [3]", "output": "pass", "id": 806, "avg_similarity_score": 0.16020376645558762}
{"instruction": "Write a function to determine if two strings are anagrams of each other.\n    An anagram is a word, phrase, or name formed by rearranging the letters of another, \n    such as cinema formed from iceman.\n\n    >>> isAnagram(\"anagram\", \"nagaram\")\n    True\n    >>> isAnagram(\"listen\", \"silent\")\n    True\n    >>> isAnagram(\u201dmotorcycle\u201d, \u201deyecomrtlo\u201d)\n    False", "output": "pass", "id": 807, "avg_similarity_score": 0.12465600388829555}
{"instruction": "Create a function that determines whether an input number is prime or not.\n\n    >>> isPrime(2)\n    True\n    >>> isPrime(13)\n    True\n    >>> isPrime(25)\n    False", "output": "pass", "id": 808, "avg_similarity_score": 0.08258109147152137}
{"instruction": "Define a function that finds the missing numbers in an array of 1 to N.\n\n    >>> missingNumbers([1,2,3,4,6]) \n    [5]\n    >>> missingNumbers([2,4,8,9,11,12]) \n    [3, 5, 6, 7, 10]", "output": "pass", "id": 809, "avg_similarity_score": 0.14445061485649896}
{"instruction": "Define a function that calculates whether or not a given string is a palindrome\n\n    >>> isPalindrome(\"noon\")\n    True\n    >>> isPalindrome(\"tacocat\")\n    True\n    >>> isPalindrome(\"elephant\")\n    False", "output": "pass", "id": 810, "avg_similarity_score": 0.10773443688439403}
{"instruction": "Define a function that finds the greatest common divisor (GCD) of two numbers. \n    The GCD of two numbers, A and B, is the largest number that divides both A and B.\n\n    >>> gcd(2, 8)\n    2\n    >>> gcd(27, 18)\n    9", "output": "pass", "id": 811, "avg_similarity_score": 0.15059473287933542}
{"instruction": "Define a function that takes in an array of integers and returns its median value.\n    The median value is the middle number when the array is sorted in an ascending order. \n    \n    >>> medianValue([1,1,3,4,7])\n    3\n    >>> medianValue([1,2,4,6,7])\n    4", "output": "pass", "id": 812, "avg_similarity_score": 0.16422764068913814}
{"instruction": "Create a function that takes in an input number and determines whether or not it is an Armstrong number\n\n    >>> isArmstrong(153)\n    True\n    >>> isArmstrong(287)\n    False\n    >>> isArmstrong(371)\n    True", "output": "pass", "id": 813, "avg_similarity_score": 0.09896758432742123}
{"instruction": "Define a function that checks whether a given string is a valid binary number. \n    A binary number is a number written with 0s and 1s.\n\n    >>> isBinary(\"1101\") \n    True\n    >>> isBinary(\"0010\") \n    True\n    >>> isBinary(\"2101\")\n    False", "output": "pass", "id": 814, "avg_similarity_score": 0.11141476556117946}
{"instruction": "Create a function that takes in two strings, s1 and s2, and calculates the edit distance between them.\n    The edit distance between two strings is a measure of the minimum number of single-character edits (insertions, deletions or substitutions) required to change one string into the other.\n\n    >>> editDistance(\"cat\", \"cut\") \n    1 \n    >>> editDistance(\"abc\", \"acb\") \n    2 \n    >>> editDistance(\"abcda\", \"a\") \n    4", "output": "pass", "id": 815, "avg_similarity_score": 0.13055103379194696}
{"instruction": "def str_to_dict(str_list):\n    \"\"\" Convert a given list of strings to a dictionary.\n\n    The keys in the dictionary are the string length; \n    the values are the corresponding list of strings of the same length.\n\n    >>> str_list = [\"hi\",\"jello\",\"dog\",\"apple\"]\n    >>> str_to_dict(str_list)\n    {2: [\"hi\"], 5: [\"jello\"], 3: [\"dog\"], 5: [\"apple\"]}\n    \"\"\"", "output": "pass", "id": 816, "avg_similarity_score": 0.20523597294446455}
{"instruction": "def rearrange(numbers):\n    \"\"\" Rearrange a given array of numbers so that their prime\n    and non-prime numbers can be divided into two separate but \n    adjacent subsets.\n\n    >>> rearrange([2, 3, 8, 15])\n    [2, 3, 15, 8]\n    >>> rearrange([2, 11, 12, 15])\n    [2, 11, 12, 15]\n    \"\"\"", "output": "pass", "id": 817, "avg_similarity_score": 0.14801273662979048}
{"instruction": "def find_longest_alphabetical(str):\n    \"\"\" Find the longest substring in a given string that is\n    alphabetically sorted.\n\n    >>> find_longest_alphabetical('abcdefghba')\n    'bcdefgh'\n    >>> find_longest_alphabetical('abcbdegerg')\n    'bcbde'\n        \"\"\"", "output": "pass", "id": 818, "avg_similarity_score": 0.1691923324030489}
{"instruction": "def longest_span(arr_1, arr_2):\n    \"\"\" Find the longest span of elements in two given arrays \n    that are equal in both arrays. \n\n    >>> longest_span([5, 2, 4], [7, 3, 4, 6])\n    1\n    >>> longest_span([5, 2, 4], [7, 3, 4, 2])\n    3  \n    \"\"\"", "output": "pass", "id": 819, "avg_similarity_score": 0.16365487193735445}
{"instruction": "def check_valid_string(s):\n    \"\"\" Check whether a given string is valid or not.\n    Validity is determined by the average length of all its \n    consecutive words. \n\n    >>> check_valid_string(\"This is a valid string\")\n    True\n    >>> check_valid_string(\"Invalid string\")\n    False\n    \"\"\"", "output": "pass", "id": 820, "avg_similarity_score": 0.16728917207137836}
{"instruction": "def longest_unique_substring(s):\n    \"\"\" Find the length of the longest substring in a given string\n    which has no repeating characters.\n\n    >>> longest_unique_substring(\"abcabcbb\")\n    3\n    >>> longest_unique_substring(\"abcccbb\") \n    2\n    \"\"\"", "output": "pass", "id": 821, "avg_similarity_score": 0.18567176394150717}
{"instruction": "def check_sum(arr):\n    \"\"\" Check a given array if it has two elements whose sum equals to a target value.\n\n    >>> check_sum([1,2,4,5], 6)\n    True\n    >>> check_sum([1,2,4,7], 10)\n    False\n    \"\"\"", "output": "pass", "id": 822, "avg_similarity_score": 0.16427575103404898}
{"instruction": "def k_shift(arr, k):\n    \"\"\" Given an array and a number k, shift the elements of the array k times.\n    The shifting should follow the circular order.\n\n    >>> k_shift([1,2,3,4], 2)\n    [3,4,1,2]\n    >>> k_shift([5,7,9,10], 3)\n    [9,10,5,7]\n    \"\"\"", "output": "pass", "id": 823, "avg_similarity_score": 0.22142963327883955}
{"instruction": "def reverse_int(n):\n    \"\"\" Reverse the digits of a given number. \n\n    >>> reverse_int(123)\n    321\n    >>> reverse_int(400)\n    4\n    \"\"\"", "output": "pass", "id": 824, "avg_similarity_score": 0.1816614790041942}
{"instruction": "def count_parenthesis(s):\n    \"\"\" Given a string, count the number of left and right parenthesis.\n\n    >>> count_parenthesis(\"((((\")\n    (1,4)\n    >>> count_parenthesis(\")))))))))\")\n    (7,1)\n    \"\"\"", "output": "pass", "id": 825, "avg_similarity_score": 0.21301157323234965}
{"instruction": "def longest_inc_sub_seq(nums):\n    \"\"\" Given nums - a list of integers, return the length of the longest increasing \n    subsequence in nums.\n\n    >>> longest_inc_sub_seq([4,5,1,2,3])\n    4\n    >>> longest_inc_sub_seq([2,3,1,4,5])\n    3\n    \"\"\"", "output": "pass", "id": 826, "avg_similarity_score": 0.2432709816652218}
{"instruction": "def validate_IP_Address(ip):\n    \"\"\" Validate given IP address. Return True if it is valid, False otherwise\n\n    >>> validate_IP_Address('127.0.0.1')\n    True\n    >>> validate_IP_Address('1.2.3')\n    False\n    \"\"\"", "output": "pass", "id": 827, "avg_similarity_score": 0.126958672352647}
{"instruction": "def longest_SPA(strs):\n    \"\"\" Given strs is a list of strings, return the longest SPA (shortest unique \n    prefix) in strs.\n\n    >>> longest_SPA([\"dog\",\"dove\",\"duck\"])\n    'd'\n    >>> longest_SPA([\"gator\",\"galaxy\",\"genesis\"])\n    'ga'\n    \"\"\"", "output": "pass", "id": 828, "avg_similarity_score": 0.20688500304147533}
{"instruction": "def all_permutations(lst):\n    \"\"\" Given lst - a list of integers, return a list of all permutations of such \n    integers.\n\n    >>> all_permutations([1,2,3])\n    [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\n    >>> all_permutations([1])\n    [[1]]\n    \"\"\"", "output": "pass", "id": 829, "avg_similarity_score": 0.217252183943867}
{"instruction": "def insert_M_N(N, M, j, i):\n    \"\"\" Given N, M and two indices i and j, inserts M into N such that M starts at \n    index j and ends at index i.\n\n    >>> insert_M_N(1024, 19, 2, 6)\n    1100\n    >>> insert_M_N(0x13, 0x3, 4, 6)\n    0x19\n    \"\"\"", "output": "pass", "id": 830, "avg_similarity_score": 0.10532672541646065}
{"instruction": "def count_vowels(s):\n    \"\"\" Given s - a string, return the number of vowels in the string. \n    Vowels are 'a', 'e', 'i', 'o', 'u'. \n\n    >>> count_vowels('aeiou')\n    5\n    >>> count_vowels('bbbbb')\n    0\n    \"\"\"", "output": "pass", "id": 831, "avg_similarity_score": 0.2284561536531697}
{"instruction": "def num_unique(arr):\n    \"\"\"Given arr - a list of numbers, return the number of unique integers in such list.\n\n    >>> num_unique([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\n    4\n    >>> num_unique([0])\n    1\n    \"\"\"", "output": "pass", "id": 832, "avg_similarity_score": 0.24775082208716556}
{"instruction": "def count_odd_pairs(nums):\n    \"\"\"Given nums - a list of numbers,  return the number of all possible distinct \n    pairs of odd integers which the sum of pairs is also an odd number.\n\n    >>> count_odd_pairs([1, 6, 3, 8, 7, 10])\n    2 \n    >>> count_odd_pairs([2, 5, 1])\n    1\n    \"\"\"", "output": "pass", "id": 833, "avg_similarity_score": 0.21836224925161613}
{"instruction": "def largest_xor_pair(nums):\n    \"\"\" Given nums - a list of numbers, return the largest xor value for any pair in \n    such list.\n\n    >>> largest_xor_pair([4, 6, 5, 3])\n    7\n    >>> largest_xor_pair([0, 2, 5, 7])\n    7\n    \"\"\"", "output": "pass", "id": 834, "avg_similarity_score": 0.2064986407629925}
{"instruction": "def bst_distance(values, n1, n2):\n    \"\"\" Given a binary search tree and two values n1 and n2, return the distance \n    between two nodes with values n1 and n2. \n\n    >>> bst_distance([5, 6, 3, 1, 2, 4], 6, 2)\n    3\n    >>> bst_distance([9, 7, 5, 3, 0, 8, 6, 2], 0, 2)\n    4\n    \"\"\"", "output": "pass", "id": 835, "avg_similarity_score": 0.15730185476813321}
{"instruction": "def find_martian(grid):\n    \"\"\" Given a square 2D grid filled with strings representing martians and empty slots, \n    return the position of the martian with the highest value. \n    Return [0,0] if no martian is found.\n\n    >>> find_martian([[\"\",\"m1\",\"m2\"],[\"\",\"m3\",\"\"],[\"m4\",\"\",\"m5\"]])\n    [2, 0]\n    >>> find_martian([[\"\",\"\",\"\"],[\"m1\",\"\",\"m2\"],[\"\",\"\",\"\"]])\n    [1, 0]\n    \"\"\"", "output": "pass", "id": 836, "avg_similarity_score": 0.18236723392413973}
{"instruction": "def even_median(N):\n    \"\"\" Given an array of integers N, return its even-median. \n    The even-median of an array is the median of the even elements \n    in the array, and if there is no even element, -1 is returned.\n\n    >>> even_median([1,2,3,4,5,6])\n    4\n    >>> even_median([1,2,3,5])\n    -1\n    >>> even_median([-2,3,4,5,-6])\n    4\n    \"\"\"", "output": "pass", "id": 837, "avg_similarity_score": 0.2147371857613838}
{"instruction": "def count_permutated_substrings(s1, s2):\n    \"\"\" Given two strings s1 and s2, count the number of distinct \n    substrings of s2 which are a permutation of s1.\n\n    >>> count_permutated_substrings('app','apple')\n    2\n    >>> count_permutated_substrings('fruit','forest')\n    0\n    \"\"\"", "output": "pass", "id": 838, "avg_similarity_score": 0.18163640066674314}
{"instruction": "def count_numbers_equal_digits(N):\n    \"\"\" Count the number of distinct integers from 1 to N (inclusive) \n    whose digits sum up to be the same as itself.\n\n    >>> count_numbers_equal_digits(20)\n    1\n    >>> count_numbers_equal_digits(22)\n    4\n    \"\"\"", "output": "pass", "id": 839, "avg_similarity_score": 0.15539479088519853}
{"instruction": "def binomial_coefficient(n,k):\n    \"\"\" Calculate the binomial coefficient of (n,k).\n\n    >>> binomial_coefficient(4, 2)\n    6\n    >>> binomial_coefficient(5, 3)\n    10\n    \"\"\"", "output": "pass", "id": 840, "avg_similarity_score": 0.1460169448104421}
{"instruction": "def next_permutation(nums):\n    \"\"\" Implements the next permutation algorithm and produces the \n    next permutation of a given list of numbers.\n\n    >>> next_permutation([1,2,3])\n    [1,3,2]\n    >>> next_permutation([1,1,5])\n    [1,5,1]\n    \"\"\"", "output": "pass", "id": 841, "avg_similarity_score": 0.17446610637259563}
{"instruction": "def is_circular_prime(n):\n    \"\"\" Determine if a given number n is a circular prime or not.\n    A circular prime is a prime number whose digits are cyclically \n    permuted and the resulting number is still prime. \n\n    >>> is_circular_prime(197)\n    True\n    >>> is_circular_prime(13)\n    True\n    >>> is_circular_prime(12)\n    False\n    \"\"\"", "output": "pass", "id": 842, "avg_similarity_score": 0.14974365603865375}
{"instruction": "def lca(n1, n2):\n    \"\"\" Returns the lowest common ancestor of two binary tree nodes n1 and n2.\n\n    >>> lca(4, 11)\n    2\n    >>> lca(7, 12)\n    10\n    \"\"\"", "output": "pass", "id": 843, "avg_similarity_score": 0.12974315066318248}
{"instruction": "def spilt_by_indexes(s, A):\n    \"\"\" Given a string and an array of numerical indices A,\n    return the substrings of s after splitting s at the indices \n    in A.\n\n    >>> spilt_by_indexes(\"flower\", [3])\n    [\"flo\", \"wer\"]\n    >>> spilt_by_indexes(\"apples\", [4,1,4])\n    [\"apple\", \"p\", \"les\"]\n    \"\"\"", "output": "pass", "id": 844, "avg_similarity_score": 0.2358480174107015}
{"instruction": "def construct_tree(preorder, inorder):\n    \"\"\" Given two arrays of the same length that represent preoder and inorder traversals \n    of a binary tree, reconstruct the tree and return it. Note that each node in the tree \n    contains an integer. \n\n    >>> construct_tree([3, 1, 2, 4], [1, 2, 3, 4])\n    3\n      1\n        2\n      4\n    \"\"\"", "output": "pass", "id": 845, "avg_similarity_score": 0.17969628646862928}
{"instruction": "def find_min_coins(coins, target):\n    \"\"\" Given an array of coins and a target amount, use the minimum number of coins to \n    make the target amount, and return an array of coin numbers and their corresponding \n    denominations.\n\n    >>> find_min_coins([2, 5, 3], 8)\n    [3, 5]\n    >>> find_min_coins([1, 2], 3)\n    [3]\n    \"\"\"", "output": "pass", "id": 846, "avg_similarity_score": 0.20475092069630405}
{"instruction": "def is_ascending(nums):\n    \"\"\" Given an array of integers, determine if the array elements are in strictly ascending order.\n    Note that for a list of size one, the function should return True. \n\n    >>> is_ascending([2, 3, 4])\n    True\n    >>> is_ascending([2, 4, 3])\n    False\n    \"\"\"", "output": "pass", "id": 847, "avg_similarity_score": 0.21647918438575095}
{"instruction": "def letter_changes(s):\n    \"\"\" Given a string, apply the following modifications:\n    1. Replace each letter with its followed letter in alphabet (e.g., 'a' with 'b')\n    2. Change all vowels to upper case\n    3. Leave all non-alphabetic characters as is\n\n    >>> letter_changes('Hello! How are you?')\n    'Ifmmp! Ipx bsf zpv?'\n    >>> letter_changes('abc123')\n    'bcd123'\n    \"\"\"", "output": "pass", "id": 848, "avg_similarity_score": 0.13687561080199948}
{"instruction": "def num_last(lst):\n    \"\"\" Given an array of numbers, return the number of elements which appear in the\n    same order at the end of the array. \n\n    >>> num_last([1, 4, 2, 3, 5, 6, 3, 1])\n    3\n    >>> num_last([5, 6, 7, 8, 4, 3, 5])\n    0\n    \"\"\"", "output": "pass", "id": 849, "avg_similarity_score": 0.24215047646440516}
{"instruction": "def all_consecutive(nums):\n    \"\"\" Given an array of integers, determine if the array consists of all consecutive numbers. \n\n    >>> all_consecutive([1, 3, 2, 5, 4])\n    True\n    >>> all_consecutive([1, 3, 2, 8, 4])\n    False\n    \"\"\"", "output": "pass", "id": 850, "avg_similarity_score": 0.22921697445440387}
{"instruction": "def optimal_tree(freq):\n    \"\"\" Given an array of integers representing frequencies of different keys, \n    return the cost of creating an optimal binary search tree based on the frequencies\n    of the given keys. \n\n    >>> optimal_tree([3, 1, 5, 6, 4])\n    26\n    \"\"\"", "output": "pass", "id": 851, "avg_similarity_score": 0.20401033049287787}
{"instruction": "def max_1s_in_window(arr, m):\n    \"\"\" Given an array of 0's and 1's and an integer m, return the maximum number of\n    1's in any size m subarray of the given array. \n\n    >>> max_1s_in_window([1, 1, 0, 0, 1, 1, 1], 3)\n    4\n    >>> max_1s_in_window([1, 0, 0, 0, 0], 2)\n    1\n    \"\"\"", "output": "pass", "id": 852, "avg_similarity_score": 0.22314259428412486}
{"instruction": "def max_coin_values(coins):\n    \"\"\" Given an array of integers which represent coin values, determine the maximum\n    amount of money that can be made from a given set of coins. \n\n    >>> max_coin_values([3, 5, 6, 8, 10])\n    22\n    >>> max_coin_values([2, 1, 3, 4, 5, 6, 7])\n    18\n    \"\"\"", "output": "pass", "id": 853, "avg_similarity_score": 0.19839753316996817}
{"instruction": "def max_double_subarray(arr):\n    \"\"\" Given an array of integers, return the length of the maximum subarray with \n    elements that are divisible by 2 and that appear consecutively in the subarray.\n\n    >>> max_double_subarray([2, 8, 6, 4, 8])\n    4\n    >>> max_double_subarray([2, 4, 6, 8, 10])\n    5\n    \"\"\"", "output": "pass", "id": 854, "avg_similarity_score": 0.23322331266229848}
{"instruction": "def missing_elements(arr):\n    \"\"\" You are given an array arr of distinct integers. The array contains\n    all elements from 1 to n with 1 <= n <= 10^5. But some of the elements\n    are missing. Find all the elements that are missing from the array.\n\n    >>> missing_elements([2, 4, 1, 6, 3])\n    [5]\n    >>> missing_elements([7, 8, 4, 3, 2, 6, 1])\n    []\n    \"\"\"", "output": "pass", "id": 855, "avg_similarity_score": 0.1909928318339717}
{"instruction": "def has_regular_polygon(arr):\n    \"\"\" Check if you can construct a Regular Polygon with the given sides.\n    Each side is represented by the elements of the array arr.\n\n    >>> has_regular_polygon([2, 3, 4, 5, 6])\n    True\n    >>> has_regular_polygon([2, 4, 3, 5, 6])\n    False\n    \"\"\"", "output": "pass", "id": 856, "avg_similarity_score": 0.17721276370242928}
{"instruction": "def knapsack_capacity(weights, values):\n    \"\"\" The items with their weight and values are given by two arrays weights, \n    and values having same lengths. Find the capacity of a knapsack that can \n    contain items with maximum possible value in it.\n\n    >>> knapsack_capacity([1, 2, 3], [2, 4, 6])\n    7\n    >>> knapsack_capacity([2, 3, 4, 5], [2, 4, 6, 9])\n    13\n    \"\"\"", "output": "pass", "id": 857, "avg_similarity_score": 0.150988303911795}
{"instruction": "def longest_duplicate_substring(s):\n    \"\"\" Find the longest substring of string s that is duplicate. \n    If there is no duplicate substring in the string, return an empty string.\n\n    >>> longest_duplicate_substring(\"abab\")\n    'ab'\n    >>> longest_duplicate_substring(\"aaa\")\n    'aa'\n    \"\"\"", "output": "pass", "id": 858, "avg_similarity_score": 0.1711639271872864}
{"instruction": "def shortest_unique_prefix(arr):\n    \"\"\" Find the shortest unique prefix for each word in the given array arr of strings.\n    If two or more words have the same prefix return an empty string.\n\n    >>> shortest_unique_prefix(['dog', 'cat', 'apple', 'apricot'])\n    ['d', 'c', 'app', 'apr']\n    >>> shortest_unique_prefix(['short', 'soul', 'star'])\n    ['sho', 'sou', 'sta']\n    \"\"\"", "output": "pass", "id": 859, "avg_similarity_score": 0.17309599565475056}
{"instruction": "def maximum_chain_pairs(pairs):\n    \"\"\" Given a list of pairs, find the maximum style chain of pairs.\n\n    >>> maximum_chain_pairs([(1, 2), (2, 3), (3, 4), (4, 5), (2, 6)])\n    [(1, 2), (2, 3), (3, 4), (4, 5)]\n    >>> maximum_chain_pairs([(1, 2), (2, 3), (3, 1), (2, 4), (4, 5), (6, 7)])\n    [(1, 2), (2, 3), (3, 1), (1, 2), (2, 4), (4, 5)]\n    \"\"\"", "output": "pass", "id": 860, "avg_similarity_score": 0.2133587080552502}
{"instruction": "def reconstruct_queue(people):\n    \"\"\" You are given an array people containing information about the persons\n    height and number of persons in front of them that have a greater or \n    equal height than the current person. Your task is to reconstruct the queue.\n\n    >>> reconstruct_queue([[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]])\n    [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n    \"\"\"", "output": "pass", "id": 861, "avg_similarity_score": 0.1779615983982752}
{"instruction": "def reverse_parentheses(s):\n    \"\"\" Reverse the letters within the parentheses in given string s.\n\n    >>> reverse_parentheses(\"a(bc)de\")\n    \"acbde\"\n    >>> reverse_parentheses(\"a(b(cde)f)g\")\n    \"agfedcb\"\n    \"\"\"", "output": "pass", "id": 862, "avg_similarity_score": 0.15567617612882145}
{"instruction": "def check_magic_square(grid):\n    \"\"\" Check if the 3 x 3 grid is a valid magic square.\n\n    >>> check_magic_square([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\n    True \n    >>> check_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n    False\n    \"\"\"", "output": "pass", "id": 863, "avg_similarity_score": 0.12076232103327476}
{"instruction": "def largest_sum_subarray(arr):\n    \"\"\" Find and return the contiguous subarray which has the largest sum in arr.\n\n    >>> largest_sum_subarray([-1, 3, 2, -5, 5, 4])\n    [3, 2, -5, 5, 4]\n    >>> largest_sum_subarray([-4, -1, -2, -4, -3])\n    [-1]\n    \"\"\"", "output": "pass", "id": 864, "avg_similarity_score": 0.17483585201750573}
{"instruction": "def remove_duplicates(nums):\n    \"\"\" Given a sorted array nums, remove duplicates in-place and return length of new array.\n    For example, given nums [1,1,2], given function should return length of 2.\n\n    >>> remove_duplicates([1,2,3,3,4,4,5])\n    5\n    >>> remove_duplicates([1,2])\n    2\n    >>> remove_duplicates([])\n    0\n    \"\"\"", "output": "pass", "id": 865, "avg_similarity_score": 0.1724742503385713}
{"instruction": "def add_binary(a, b):\n    \"\"\" Given two binary strings, add them together and return the result.\n\n    >>> add_binary('1101', '1011')\n    '10010'\n    >>> add_binary('111', '1')\n    '1000'\n    >>> add_binary('0', '1')\n    '1'\n    \"\"\"", "output": "pass", "id": 866, "avg_similarity_score": 0.17738831755802195}
{"instruction": "def build_tree(preorder):\n    \"\"\" Given a preorder array of ints, form a binary tree.\n    The root node is the first element in preorder, \n    and the left and right of the root node is the next two elements in preorder.\n\n    >>> build_tree([1, 2, 3, 4])\n    Tree(root=1, left=Tree(root=2, left=None, right=Tree(root=4)), right=Tree(root=3))\n    >>> build_tree([3, 4, 2, 5, 1])\n    Tree(root=3, left=Tree(root=4, left=None, right=Tree(root=5)), right=Tree(root=2, left=Tree(root=1)))\n    \"\"\"", "output": "pass", "id": 867, "avg_similarity_score": 0.1964431406745479}
{"instruction": "def palindrome_ss(word):\n    \"\"\" Given a word, find the longest substring palindromes.\n    For example, given 'racecar', the output is ['racecar', 'aceca', 'ece'].\n\n    >>> palindrome_ss('racecar')\n    ['racecar', 'aceca', 'ece']\n    >>> palindrome_ss('aibohphobia')\n    ['aibohphobia', 'bohphob', 'hph', 'oho']\n    \"\"\"", "output": "pass", "id": 868, "avg_similarity_score": 0.17464680663772805}
{"instruction": "def letter_combinations(digits):\n    \"\"\" Given a string of digits, return a list of all possible letter \n    combinations that the digits can represent. The mapping of digits to letters is \n    as given below:\n\n    1 \u2192 \n    2 \u2192 ABC\n    3 \u2192 DEF\n    4 \u2192 GHI\n    ...\n\n    >>> letter_combinations('23')\n    ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']\n    >>> letter_combinations('45')\n    ['gj', 'gk', 'gl', 'hj', 'hk', 'hl', 'ij', 'ik', 'il']\n    >>> letter_combinations('')\n    []\n    \"\"\"", "output": "pass", "id": 869, "avg_similarity_score": 0.18829485074215135}
{"instruction": "def subtract_zero(numbers):\n    \"\"\" Given an array of integers, return an array of integers after subtracting\n    the last element from each element.\n    The last element is excluded from the answer.\n\n    >>> subtract_zero([5, 4, 3, 2, 1])\n    [4, 3, 2, 1]\n    >>> subtract_zero([-9, -7, -5, -3])\n    [-10, -8, -6, -4]\n    \"\"\"", "output": "pass", "id": 870, "avg_similarity_score": 0.20246308177945413}
{"instruction": "def is_palindrome_string(word):\n    \"\"\" Given a string, check if it is a palindrome.\n    A palindrome is a word, phrase, number, or other sequence of characters\n    which reads the same backward or forward.\n\n    >>> is_palindrome_string('racecar')\n    True\n    >>> is_palindrome_string('hello')\n    False\n    \"\"\"", "output": "pass", "id": 871, "avg_similarity_score": 0.16876401821915307}
{"instruction": "def stone_divide(n, m):\n    \"\"\" Given two positive integers n and m, \n    find the smallest number of stones that must be cut or removed for making\n    4 pieces of stones of size m. If it is impossible to cut the stones into 4 m-sized pieces,\n    return -1.\n\n    >>> stone_divide(9, 4)\n    2\n    >>> stone_divide(1, 5)\n    -1\n    \"\"\"", "output": "pass", "id": 872, "avg_similarity_score": 0.16063978527710154}
{"instruction": "def three_sum(nums):\n    \"\"\" Given an array nums of n integer, find all triplets in \n    nums that sum to 0.\n\n    >>> three_sum([-1, 0, 1, 2, -1, -4])\n    [[-1, 0, 1], [-1, -1, 2]]\n    >>> three_sum([0, 0, 0])\n    [[0, 0, 0]]\n    \"\"\"", "output": "pass", "id": 873, "avg_similarity_score": 0.19779234541827112}
{"instruction": "def reconstruct_query(query):\n    \"\"\" Given a query string, reconstruct the original query.\n    A query string consists of unique words in lowercase.\n    For example: 'google' -> 'g o o g l e'.\n\n    >>> reconstruct_query('love')\n    'l o v e'\n    >>> reconstruct_query('planet')\n    'p l a n e t'\n    \"\"\"", "output": "pass", "id": 874, "avg_similarity_score": 0.15909239493153984}
{"instruction": "def consecutive_peak_diff(arr):\n    \"\"\"Given an array of integers, return the difference between the maximum element and the minimum element \n    that appears after a consecutive peak (i.e., an element which is greater than or equal to its neighbours) \n    in the array.\n\n    >>> consecutive_peak_diff([3, 2, 1, 4, 6, 5])\n    5\n    >>> consecutive_peak_diff([2, 3, 4, 2, 1])\n    0\n    \"\"\"", "output": "pass", "id": 875, "avg_similarity_score": 0.20063214358049175}
{"instruction": "def numSubarraysWithK_negs(arr, k):\n    \"\"\" Given an array of integers arr and an integer k, return the number of subarrays \n    which contain at least k negative elements.\n\n    >>> numSubarraysWithK_negs([-1, -1, -1, -1], 2)\n    6\n    >>> numSubarraysWithK_negs([-1, 0, 1, -2], 2)\n    0\n    \"\"\"", "output": "pass", "id": 876, "avg_similarity_score": 0.22639501072213225}
{"instruction": "def find_shortest_palindrome(s):\n    \"\"\"Given a string s, returns the shortest palindrome of s.\n    If s is already a palindrome, it should return s.\n    If s is not a palindrome, it should return the shortest string which makes s a palindrome.\n\n    >>> find_shortest_palindrome('racecar')\n    'racecar'\n    >>> find_shortest_palindrome('civic')\n    'civic'\n    >>> find_shortest_palindrome('google')\n    'elgoogle' \n    \"\"\"", "output": "pass", "id": 877, "avg_similarity_score": 0.17482150609193808}
{"instruction": "def letter_to_digit(s):\n    \"\"\" Given a string s, convert all letters in s to digits following the pattern below:\n    a -> 0\n    b -> 1\n    c -> 2\n    ...\n    z -> 25\n\n    >>> letter_to_digit('aabb')\n    '0011'\n    >>> letter_to_digit('abcd')\n    '0123'\n    \"\"\"", "output": "pass", "id": 878, "avg_similarity_score": 0.1619661939273123}
{"instruction": "def find_freq(arr, n):\n    \"\"\" Given an array of size n, where each element is from 1 to n inclusive, find the frequency of each element. \n\n    >>> find_freq([1,2,3,1], 3)\n    [(1,2), (2,1), (3,1)]\n    >>> find_freq([1,1], 1)\n    [(1,2)]\n    \"\"\"", "output": "pass", "id": 879, "avg_similarity_score": 0.2086046848074212}
{"instruction": "def interleave(arr1, arr2):\n    \"\"\" Given two arrays, return an array with elements of both arrays interleaved in alternation.  \n    The lengths of both arrays must be equal.\n\n    >>> interleave([1,2,3],[11,12,13])\n    [1, 11, 2, 12, 3, 13]\n    >>> interleave([1],[11])\n    [1, 11]\n    \"\"\"", "output": "pass", "id": 880, "avg_similarity_score": 0.18932383357541818}
{"instruction": "def number_counts(N):\n    \"\"\"Given an integer N, return two-dimensional array of size N\u00d73\n    where each row i contains the number of occurrences of values i, i+1, i+2 in the array.\n\n    >>> number_counts(3)\n    [[2, 1, 0], [1, 2, 1], [1, 1, 2]]\n    >>> number_counts(1)\n    [[2, 0, 0]]\n    \"\"\"", "output": "pass", "id": 881, "avg_similarity_score": 0.2025654540982724}
{"instruction": "def even_unaligned_subarrays(arr, n, k):\n    \"\"\"Given an array of integers arr, an integer n, and an integer k, return the total number of \n    non-empty subarrays of arr such that both the number of even elements and the number of odd elements \n    in it are divisible by k, and the first k elements are unaligned.\n\n    >>> even_unaligned_subarrays([1,2,3,4], 4, 2):\n    2\n    >>> even_unaligned_subarrays([1,2,3,4,5], 5, 6):\n    0\n    \"\"\"", "output": "pass", "id": 882, "avg_similarity_score": 0.19507551021079073}
{"instruction": "def permutation_pairs(arr):\n    \"\"\"Given an array arr of distinct integers, return all the possible unique permutation pairs that \n    can be formed using the elements of the array.\n\n    >>> permutation_pairs([1,2,3])\n    [(1,2), (1,3), (2,1), (2,3), (3,1), (3,2)]\n    >>> permutation_pairs([1,1])\n    [(1,1)]\n    \"\"\"", "output": "pass", "id": 883, "avg_similarity_score": 0.23219323084645063}
{"instruction": "def zero_adjacent_sum(arr, n):\n    \"\"\"Given an array of integers arr and an integer n, return the sum of the maximum subarray \n    of size n with no two consecutive 0's.\n\n    >>> zero_adjacent_sum([1,2,3,4,0,1,0,2], 4):\n    8\n    >>> zero_adjacent_sum([0,0,1,2], 2):\n    3\n    \"\"\"", "output": "pass", "id": 884, "avg_similarity_score": 0.2312963303037422}
{"instruction": "def maxList(numbers):\n    \"\"\" Find max value in the given list of numbers.\n\n    >>> maxList([1, 10, -25, 0, -15, 8])\n    10\n    >>> maxList([2, -1, -2, -3, 4, 6])\n    6\n    \"\"\"", "output": "pass", "id": 885, "avg_similarity_score": 0.18162915514526395}
{"instruction": "def most_frequent(string):\n    \"\"\" Count the most frequency word in the given sentence. \n    \n    >>> most_frequent('the quick brown fox jumped over the lazy dog')\n    'the'\n    >>> most_frequent('the frog jumped over the building')\n    'the'\n    \"\"\"", "output": "pass", "id": 886, "avg_similarity_score": 0.15811547282763544}
{"instruction": "def str_erase(word: str, letter: str) -> str:\n    \"\"\" Given a string word and a single character letter that appears in it, remove the first and last instance of letter in the word. \n\n    >>> str_erase('hafizullah', 'z')\n    'haiulah'\n    >>> str_erase('ottawa', 'a')\n    'ottw'\n    \"\"\"", "output": "pass", "id": 887, "avg_similarity_score": 0.19061967024561519}
{"instruction": "def removeComments(inputString):\n    \"\"\" Given a string containing a program with comments in it, delete all comments including the comments markers. \n    The comments can either be in line or block comments, such as /* and //.\n\n    >>> removeComments(\"int main() { // this is a comment \\n return 0; /* another comment */ }\")\n    'int main() {  \\n return 0;  }'\n    >>> removeComments(\"for (int i=0;/*comment*/i<5;i++) { }\")\n    'for (int i=0;i<5;i++) { }'\n    \"\"\"", "output": "pass", "id": 888, "avg_similarity_score": 0.15867347600564097}
{"instruction": "def endsWithVowel(s: str) -> bool:\n    \"\"\"Given a string, return true if the last letter of the string is a vowel.\n\n    >>> endsWithVowel(\"text\")\n    False\n    >>> endsWithVowel(\"taco\")\n    True\n    \"\"\"", "output": "pass", "id": 889, "avg_similarity_score": 0.23704666282801481}
{"instruction": "def reverseWords(string):\n    \"\"\" Reverse a given sentence\n \n    >>> reverseWords(\"the sky is blue\")\n    \"blue is sky the\"\n    >>> reverseWords(\"I love solving challenges\")\n    \"challenges solving love I\"\n    \"\"\"", "output": "pass", "id": 890, "avg_similarity_score": 0.13460022157046483}
{"instruction": "def pyramid_pattern(words):\n    \"\"\" Construct a pyramid from a sequence of words.\n    \n    >>> pyramid_pattern(['a','bb','ccc'])\n    a\n    bb\n    ccc\n    >>> pyramid_pattern(['test', 'snow', 'hike', 'baseball'])\n    test\n    snow\n    hike\n    baseball\n    \"\"\"", "output": "pass", "id": 891, "avg_similarity_score": 0.14144724089341953}
{"instruction": "def countChars(string,char):\n    \"\"\" Given a string and a character, count the occurrence of that character in the string.\n\n    >>> countChars(\"hello\", 'l')\n    2\n    >>> countChars(\"Mississippi\", 's')\n    4\n    \"\"\"", "output": "pass", "id": 892, "avg_similarity_score": 0.23483323612415707}
{"instruction": "def checkAnagrams(word1: str, word2: str) -> bool:\n    \"\"\" Checks if two strings are anagrams or not.\n\n    >>> checkAnagrams(\"apple\", \"plpa\")\n    True\n    >>> checkAnagrams(\"cat\", \"dog\")\n    False\n    \"\"\"", "output": "pass", "id": 893, "avg_similarity_score": 0.09201539826309998}
{"instruction": "def balance_paranthesis(string):\n    \"\"\" Given a string of parentheses and brackets, check that they are correctly balanced.\n\n    >>> balance_paranthesis(\"[{()}]\")\n    True\n    >>> balance_paranthesis(\"[{(}]\")\n    False\n    \"\"\"", "output": "pass", "id": 894, "avg_similarity_score": 0.1762819960609915}
{"instruction": "def descending_order_sublist(nums: List[int]) -> List[int]:\n    \"\"\" A sublist of a list is a list consisting of elements from the original list in the order they appear.\n    Given a sorted list of integer numbers, return the longest sublist in descending order.\n\n    >>> descending_order_sublist([1,2,3,4,5,6])\n    [6,5,4,3]\n    >>> descending_order_sublist([6,5,4,3])\n    [6,5,4,3]\n    \"\"\"", "output": "pass", "id": 895, "avg_similarity_score": 0.1927669461161355}
{"instruction": "def check_if_equal_trees(node1, node2):\n    \"\"\" Rewrite it in Python using the Binary Tree structure and recursion.\n    You are given the roots of two binary trees, return true if their structure is equal and false otherwise\n    Note: two binary trees are equal if they have same structure and all of their nodes have the same values.\n\n    >>> check_if_equal_trees(tree1, tree2)\n    True\n    >>> check_if_equal_trees(tree2, tree3)\n    False\n    \"\"\"", "output": "pass", "id": 896, "avg_similarity_score": 0.13471620027424988}
{"instruction": "def count_list_repeats(nums: List[int]) -> int:\n    \"\"\" Given a list of integers, return the number of times the same integer appears consecutively in the list.\n\n    >>> count_list_repeats([1,1,2,2,2,3,4,4,1])\n    3\n    >>> count_list_repeats([1,2,3,4,5,6,7])\n    0\n    \"\"\"", "output": "pass", "id": 897, "avg_similarity_score": 0.2608972079964463}
{"instruction": "def max_consecutive_ones(nums: List[int]) -> int:\n    \"\"\" Given a list of 0s and 1s, find the longest streak containing just ones.\n\n    >>> max_consecutive_ones([1,1,0,1,1,1])\n    3\n    >>> max_consecutive_ones([0,0,0,0,0,1,0,1,1,1,1])\n    4\n    \"\"\"", "output": "pass", "id": 898, "avg_similarity_score": 0.2112144321972475}
{"instruction": "def check_if_sublist_present(lst1: List[int], lst2: List[int]) -> bool:\n    \"\"\" Given two lists, determine if one list is a sublist of the other.\n    Note that a sublist is a subset of elements that appear in the same order as in the other list.\n\n    >>> check_if_sublist_present([1,2,3,4], [1,2,4,5])\n    True\n    >>> check_if_sublist_present([4,2,3], [1,2,4,5])\n    False\n    \"\"\"", "output": "pass", "id": 899, "avg_similarity_score": 0.19353166760940071}
{"instruction": "def valid_parentheses(string: str) -> bool:\n    \"\"\" Given a string containing only open/close parentheses,\n    determine if the parentheses are in a valid arrangement.\n    The parentheses should be balanced and a close parentheses should never appear before an open one.\n\n    >>> valid_parentheses(\"()()\")\n    True\n    >>> valid_parentheses(\"(())\")\n    True\n    >>> valid_parentheses(\"())\")\n    False\n    \"\"\"", "output": "pass", "id": 900, "avg_similarity_score": 0.15701755441272205}
{"instruction": "def find_merge_point(ll1: LinkedList, ll2: LinkedList) -> int:\n    \"\"\" Given two singly linked lists, determine if the two lists intersect and if so, find the point of intersection.\n    Note: two linked lists can intersect if they have at least one common node.\n    Both of the lists should be iterated through to find the merge point.\n\n    >>> find_merge_point(ll1, ll2)\n    8\n    >>> find_merge_point(ll3, ll4)\n    -1\n    \"\"\"", "output": "pass", "id": 901, "avg_similarity_score": 0.1408566550333156}
{"instruction": "def valid_bst_order(preorder_values):\n    \"\"\" Given an array preorder_values of preorder traversal values of a BST,\n    determine if the order is valid or invalid.\n    A BST must satisfy the property that each value must be greater than all \n    values to the left, and less than all values to its right.\n\n    >>> valid_bst_order([4,3,5,1,2])\n    True\n    >>> valid_bst_order([4,3,2,1,5])\n    False\n    \"\"\"", "output": "pass", "id": 902, "avg_similarity_score": 0.16066999311532706}
{"instruction": "def min_sum_subset_difference(nums):\n    \"\"\" Given a list of integers, Craft an algorithm to find \n    the smallest sum subset that has the maximum difference from the sum of \n    all other subsets.\n\n    >>> min_sum_subset_difference([1,2,3,4,5])\n    6\n    >>> min_sum_subset_difference([3,2,4])\n    1\n    \"\"\"", "output": "pass", "id": 903, "avg_similarity_score": 0.20990128701744568}
{"instruction": "def find_longest_common_prefix(strings: List[str]) -> str:\n    \"\"\" Given an array of strings, return the longest common prefix from the array.\n    if there is no prefix, returns an empty string\n\n    >>> find_longest_common_prefix([\"flower\",\"flow\",\"flight\"])\n    \"fl\"\n    >>> find_longest_common_prefix([\"dog\",\"car\"])\n    \"\"\n    \"\"\"", "output": "pass", "id": 904, "avg_similarity_score": 0.20710011234539877}
{"instruction": "def number_steps(x, y):\n    \"\"\"You are in an N\u00d7M grid at position (0,0).\n    You can take steps of size x in x-axis and y in y-axis.\n    Return the number of paths you can take to reach (N,M).\n\n    >>> number_steps(1, 1)\n    6\n    >>> number_steps(2, 3)\n    20\n    \"\"\"", "output": "pass", "id": 905, "avg_similarity_score": 0.1427189493494006}
{"instruction": "def permutation_sum(nums, k):\n    \"\"\"Given a list of non-negative numbers nums and a target k.\n    Return the sum of all permutations of target k using the elements in nums.\n\n    >>> permutation_sum([1, 2, 3], 3)\n    6\n    >>> permutation_sum([1, 1, 1], 3)\n    3\n    >>> permutation_sum([7, 3, 4], 7)\n    52\n    \"\"\"", "output": "pass", "id": 906, "avg_similarity_score": 0.23622170292737987}
{"instruction": "def sum_largest_groups(A):\n    \"\"\"Given an array of integers A.\n    Find the sum of the largest groups in A.\n    A group is the list of contiguous elements such that the sum of the elements is even.\n\n    >>> sum_largest_groups([1,2,3,4,5,6])\n    12\n    >>> sum_largest_groups([2,4,6,8,10,12])\n    42\n    \"\"\"", "output": "pass", "id": 907, "avg_similarity_score": 0.24156804908726093}
{"instruction": "def score_category(predict, actual):\n    \"\"\" Given a list of predicted and actual categories of some texts, \n    calculate the score of the prediction takes into account both accuracy and diversity. \n    Each triple (predicted, actual, weight) is considered one separate case. \n    The weight is the sum of the correct prediction and the number of unique correct prediction.\n\n    >>> score_category([1,2,3,1], [3,2,1,1])\n    5\n    >>> score_category([2,3,1,4], [1,2,3,4])\n    7\n    \"\"\"", "output": "pass", "id": 908, "avg_similarity_score": 0.15891354360547455}
{"instruction": "def can_reach_end(A):\n    \"\"\" Given an array of non-negative integers,\n    determine if one can reach the end of the array by taking jumps from the current index.\n    A jump of size X covers X spots, and can cover at most X spots.\n    Return True if one can reach the end of the array.\n\n    >>> can_reach_end([2,3,1,1,4])\n    True\n    >>> can_reach_end([3,2,1,0,4])\n    False\n    \"\"\"", "output": "pass", "id": 909, "avg_similarity_score": 0.1799681099349863}
{"instruction": "def longest_bitwise_subarray(A):\n    \"\"\"Given an array of 0 and 1s, find the length of the longest contiguous subarray of equal bits (0s or 1s)\n    in linear time.\n\n    >>> longest_bitwise_subarray([1,1,0,0,1,1])\n    4\n    >>> longest_bitwise_subarray([1,1,1,0,0,1,0,0,1,1])\n    3\n    \"\"\"", "output": "pass", "id": 910, "avg_similarity_score": 0.21662191126267533}
{"instruction": "def convert_to_binary_string(x):\n    \"\"\" Convert a non-negative integer x to a binary string.\n    Consider that the lenght of the binary string can vary. \n\n    >>> convert_to_binary_string(5)\n    '101'\n    >>> convert_to_binary_string(15)\n    '1111'\n    \"\"\"", "output": "pass", "id": 911, "avg_similarity_score": 0.1688348308106011}
{"instruction": "def marsh_tower_steps(n, k):\n    \"\"\" Given a Marsh tower with n levels and k rungs at each level.\n    Find the minimum number of steps to climb the entire tower.\n\n    >>> marsh_tower_steps(4, 3)\n    5\n    >>> marsh_tower_steps(10, 3)\n    15\n    \"\"\"", "output": "pass", "id": 912, "avg_similarity_score": 0.18929815524479335}
{"instruction": "def longest_valid_parens(s):\n    \"\"\"Given a string containing brackets/parentheses, find the length of the longest \n    valid (well-formed) parentheses substring.\n    \n    >>> longest_valid_parens(\"()())\")\n    4\n    >>> longest_valid_parens(\"()\")\n    2\n    \"\"\"", "output": "pass", "id": 913, "avg_similarity_score": 0.20382101832471497}
{"instruction": "def find_unique_commands(commands: List[str]) -> List[str]:\n    \"\"\" Given a list of strings commands representing commands issued by a user, \n    return a list of all commands that appeared only once.\n\n    >>> find_unique_commands([\"start\", \"stop\", \"enter\", \"exit\", \"stop\", \"enter\"])\n    ['start', 'exit']\n    >>> find_unique_commands([\"ls\", \"cd\", \"ls\", \"rm\", \"ls\", \"cd\"])\n    ['rm']\n    \"\"\"", "output": "pass", "id": 914, "avg_similarity_score": 0.1859556035244498}
{"instruction": "def sq_root_sum(arr: List[int]) -> int:\n    \"\"\" Given a list of integers arr, return the sum of the square roots of all elements in the array.\n\n    >>> sq_root_sum([1,4,9])\n    9.165\n    >>> sq_root_sum([1,2,3,4,5])\n    11.744\n    \"\"\"", "output": "pass", "id": 915, "avg_similarity_score": 0.26900039670587195}
{"instruction": "def search_largest_sum_subsequence(arr: List[int]) -> List[int]:\n    \"\"\" Given a list of integers arr, return the longest subsequence with the largest sum.\n\n    >>> search_largest_sum_subsequence([1,5,7,2,-1,3,-2,4])\n    [1,5,7,2]\n    >>> search_largest_sum_subsequence([-3,2,5,-2,-4,7,6])\n    [2,5,-2,-4,7,6]\n    \"\"\"", "output": "pass", "id": 916, "avg_similarity_score": 0.2372513534566165}
{"instruction": "def delete_nth_char(s: str, n: int) -> str:\n    \"\"\" Given a string s and an integer n, delete the nth character of the string.\n\n    >>> delete_nth_char(\"Hello world!\", 3)\n    'Hell world!'\n    >>> delete_nth_char(\"gcoders\", 4)\n    'gcoers'\n    \"\"\"", "output": "pass", "id": 917, "avg_similarity_score": 0.22883886988739333}
{"instruction": "def palindromic_permutations(s: str) -> List[str]:\n    \"\"\" Given a string s, generate and return all possible palindromic permutations.\n\n    >>> palindromic_permutations(\"1234\")\n    ['1331', '3113', '2332']\n    >>> palindromic_permutations(\"abba\")\n    ['abba', 'baba', 'baab']\n    \"\"\"", "output": "pass", "id": 918, "avg_similarity_score": 0.18082559141350754}
{"instruction": "def find_closest_match(word: str, words: List[str]) -> str:\n    \"\"\" Given a string word and a list of strings words, find the closest string in words to word \n    and return it. Closest string is determined by Levenshtein distance.\n\n    >>> find_closest_match('cat', ['car', 'cot', 'bat', 'black'])\n    'cot'\n    >>> find_closest_match('kitten', ['cat', 'dog', 'lion'])\n    'cat'\n    \"\"\"", "output": "pass", "id": 919, "avg_similarity_score": 0.19588846084719133}
{"instruction": "def min_mean_norms(M: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\" Given a matrix M, compute the minimum mean norm of any row vector v of M\n    and return a tuple of the minimum mean norm and the row vector v.\n    \n    >>> min_mean_norms([[1,2,3], [3,2,1], [-1, 0, 1]])\n    (2, [3, 2, 1])\n    >>> min_mean_norms([[2,3,-4], [3,7,-8]])\n    (3.25, [2, 3, -4])\n    \"\"\"", "output": "pass", "id": 920, "avg_similarity_score": 0.18512411869920722}
{"instruction": "def most_popular_words(words: List[str], n: int) -> List[str]:\n    \"\"\" Given a list of words words and an integer n, return the n most frequent words \n    in words, sorted by their frequency.\n\n    >>> most_popular_words([\"Apple\", \"Banana\", \"Banana\", \"Apple\", \"Pear\"], 3)\n    ['Apple', 'Banana', 'Pear']\n    >>> most_popular_words([\"apple\", \"apple\", \"pear\", \"orange\", \"apple\"], 2)\n    ['apple', 'pear']\n    \"\"\"", "output": "pass", "id": 921, "avg_similarity_score": 0.20399662404323754}
{"instruction": "def solve_puzzle(arr: List[int], target: int) -> List[int]:\n    \"\"\" Given an array arr of integers and an integer target, determine if there exists a\n    pair of elements in arr such that their sum is equal to target. Return the pair if found, \n    otherwise return an empty list.\n\n    >>> solve_puzzle([2,-3,1,5],4)\n    [1, 3]\n    >>> solve_puzzle([-4, 6, -3, 4], 0)\n    [-4, 4]\n    \"\"\"", "output": "pass", "id": 922, "avg_similarity_score": 0.2031768703989429}
{"instruction": "def possible_moves(grid: List[List[int]], x: int, y: int) -> List[Tuple[int, int]]:\n    \"\"\" Given a two dimensional array grid representing a game board, and two integers x and y\n    representing a position on the board, return a list of all possible positions after 1 move up, \n    down, left, or right from point (x,y).\n\n    >>> possible_moves([[0,0,0], [1,0,0], [0,0,1]], 1, 0)\n    [(1, 1), (2, 0)]\n    >>> possible_moves([[0,1,0], [0,0,0], [1,0,0]], 0, 1)\n    [(1, 1), (0, 2)]\n    \"\"\"", "output": "pass", "id": 923, "avg_similarity_score": 0.15625397309720976}
{"instruction": "def power_dig_sum(n: int):\n    \"\"\" Computes the sum of the digits of the result of\n    raising a given number n to the power of its digits.\n\n    >>> power_dig_sum(12)\n    5\n    >>> power_dig_sum(124)\n    10\n    >>> power_dig_sum(1020)\n    1\n    \"\"\"", "output": "pass", "id": 924, "avg_similarity_score": 0.19465839542547733}
{"instruction": "def convert_roman_to_int(s: str) -> int:\n    \"\"\" Converts a given roman numeral string to corresponding integer.\n\n    >>> convert_roman_to_int('MCMXCIV')\n    1994\n    >>> convert_roman_to_int('IX')\n    9\n    \"\"\"", "output": "pass", "id": 925, "avg_similarity_score": 0.14549861527387623}
{"instruction": "def check_valley(s: str):\n    \"\"\" Prod a boolen if the sequence of points represent a valley or not. The valley will be a string of characters W, U and D, for walk, uphill and downhill, respectively.\n\n    >>> check_valley('UUDDD')\n    True\n    >>> check_valley('UUDDU')\n    False\n    \"\"\"", "output": "pass", "id": 926, "avg_similarity_score": 0.15773273704061153}
{"instruction": "def valid_parentheses(s: str) -> bool:\n    \"\"\" Check a string contains validly balanced parentheses.\n\n    >>> valid_parentheses('()')\n    True\n    >>> valid_parentheses('((')\n    False\n    \"\"\"", "output": "pass", "id": 927, "avg_similarity_score": 0.11492566392282871}
{"instruction": "def rotate_array(arr: list, k: int) -> list:\n    \"\"\" Rotate the given array k times to the right.\n\n    >>> rotate_array([1,2,3,4,5], 2)\n    [4, 5, 1, 2, 3]\n    >>> rotate_array([10, 20, 30], 3)\n    [30, 10, 20]\n    \"\"\"", "output": "pass", "id": 928, "avg_similarity_score": 0.19187005885840686}
{"instruction": "def match_subset(arr1: list, arr2: list) -> bool:\n    \"\"\" Check if arr2 is a subset of arr1.\n\n    >>> match_subset([1, 2, 3, 4], [1, 3])\n    True\n    >>> match_subset([10, 20, 30], [50, 10, 60])\n    False\n    \"\"\"", "output": "pass", "id": 929, "avg_similarity_score": 0.14281320883461382}
{"instruction": "def find_last_numeric_element(s: str) -> int:\n    \"\"\" You are given a string consists of ints, '+', '*' and '-'.\n    Find the last int from the string.\n\n    >>> find_last_numeric_element(\"1+2*5-30\")\n    30\n    >>> find_last_numeric_element(\"50*2\")\n    2\n    \"\"\"", "output": "pass", "id": 930, "avg_similarity_score": 0.2185780761742538}
{"instruction": "def smallest_window_sort(arr: list) -> int:\n    \"\"\" Finds the smallest sub array that needs to be sorted to make the entire array sorted.\n\n    >>> smallest_window_sort([1, 2, 5, 3, 7, 10, 9, 12])\n    3\n    >>> smallest_window_sort([1, 3, 2, 0, -1, 7, 10])\n    5\n    \"\"\"", "output": "pass", "id": 931, "avg_similarity_score": 0.1529773103319279}
{"instruction": "def max_contiguous_subarray(arr: List[int], k: int) -> List[int]:\n    \"\"\" Given an array of distinct integers and an integer K, return the contiguous subarray of given array of maximum length K.\n    For input [2,2,2,3,3,3], K=3, the output should be [2,2,2]\n\n    >>> max_contiguous_subarray([2,2,2,3,3,3], 3)\n    [2,2,2]\n    >>> max_contiguous_subarray([-3,2,4,5,4], 3)\n    [4,5,4]\n    \"\"\"", "output": "pass", "id": 932, "avg_similarity_score": 0.19750471124284272}
{"instruction": "def gray_code(input_bin: str) -> str:\n    \"\"\"Given an input binary string, return its gray code.\n    For example, the binary string \"011\" converts to \"110\".\n  \n    >>> gray_code(\"011\")\n    \"110\"\n    >>> gray_code(\"10101\")\n    \"11010\"\n  \"\"\"", "output": "pass", "id": 933, "avg_similarity_score": 0.15468287948333043}
{"instruction": "def max_product_of_break_segments(arr: List[int]) -> int:\n    \"\"\" Given an array of non negative integers, return the maximum product of breaking the array into three non-overlapping segments.\n    For input [2, 7, 4, 3, 5], the expected output should be 28.\n\n    >>> max_product_of_break_segments([2, 7, 4, 3, 5])\n    28\n    >>> max_product_of_break_segments([1,2,3,4,5,6])\n    30\n    \"\"\"", "output": "pass", "id": 934, "avg_similarity_score": 0.19559180185760375}
{"instruction": "def solve_knapsack_problem(items: List[str], capacity: int) -> List[str]:\n    \"\"\"Given a list of items with corresponding weights and a maximum capacity, find out the maximum value that can be obtained by selecting the items.\n    Each item has form: (weight, value)\n    For input [(\"w1\", 10), (\"w2\", 40), (\"w3\", 30), (\"w4\", 50)], capacity = 70, the expected output should be [\"w2\", \"w4\"].\n\n    >>> solve_knapsack_problem([(\"w1\", 10), (\"w2\", 40), (\"w3\", 30), (\"w4\", 50)], 70)\n    [\"w2\", \"w4\"]\n    >>> solve_knapsack_problem([('a', 50),('b',10),('c',30),('d',40)], 60)\n    [\"b\", \"c\", \"d\"]\n    \"\"\"", "output": "pass", "id": 935, "avg_similarity_score": 0.14760203184656895}
{"instruction": "def max_area_histogram(histogram: List[int]) -> int:\n    \"\"\"Given an array of heights, compute the maximum area of the largest rectangle that can be formed in the histogram.\n    For input [2,7,9,4], the expected output should be 18.\n\n    >>> max_area_histogram([2,7,9,4])\n    18\n    >>> max_area_histogram([1,5,4,3])\n    9\n    \"\"\"", "output": "pass", "id": 936, "avg_similarity_score": 0.19194003109754473}
{"instruction": "def factorial_decomp(n):\n    \"\"\" Given a non-negative integer n, decompose it into minimum possible configuration \n    of distinct prime factors of its factorial.\n    For example, for n = 10, prime factors of 10! are [2, 2, 5], \n    thus the minimum possible configuration are [2, 7] or [5, 3].\n\n    >>> factorial_decomp(7)\n    [2, 2, 3]\n    >>> factorial_decomp(10)\n    [2, 7]\n    >>> factorial_decomp(30)\n    [2, 3, 5, 7]\n    \"\"\"", "output": "pass", "id": 937, "avg_similarity_score": 0.13421920792470615}
{"instruction": "def multi_breakdown(N, K):\n    \"\"\" Given two integers N and K.\n    Find the minimum number of operations to break N into product of K numbers.\n    Operations can only be subtractions of 1, doubling or halving.\n\n    >>>multi_breakdown(6, 2)\n    1\n    >>>multi_breakdown(31, 3)\n    5\n    >>>multi_breakdown(40, 4)\n    3\n    \"\"\"", "output": "pass", "id": 938, "avg_similarity_score": 0.17387864028996822}
{"instruction": "def valid_brackets(seq):\n    \"\"\" Given a string seq, find the maximum length of a consecutive valid \n    (i.e. properly matched) sequence of parentheses in it.\n\n    >>> valid_brackets('(())')\n    4\n    >>> valid_brackets('((())))')\n    6\n    >>> valid_brackets('())()')\n    2\n    \"\"\"", "output": "pass", "id": 939, "avg_similarity_score": 0.19738875577961032}
{"instruction": "def remove_dup(nums):\n    \"\"\" Given an array nums of integers, remove the duplicates in-place, \n    removing all duplicates from the array and return the length.\n\n    >>>remove_dup([1, 1, 2])\n    2\n    >>>remove_dup([0, 3, 2, 2, 3, 1])\n    4\n    >>>remove_dup([2, 2, 2, 11])\n    2\n    \"\"\"", "output": "pass", "id": 940, "avg_similarity_score": 0.22491549846515982}
{"instruction": "def n_sum(nums, target):\n    \"\"\"Given an array of integers nums and a target, \n    return the index of 2 numbers which sum up to the target. \n\n    >>> n_sum([2, 3, 4, 7], 11)\n    (2, 3)\n    >>> n_sum([1, 8, 3, 2], 10)\n    (2, 3)\n    >>> n_sum([4, 3, 7, 2], 15)\n    (2, 4)\n    \"\"\"", "output": "pass", "id": 941, "avg_similarity_score": 0.2519616199453096}
{"instruction": "def repeated_num_sequence(n):\n    \"\"\" Find the repeated number subsequence of length n.\n    A number will repeat itself after certain numbers of positions. \n\n    >>> repeated_num_sequence(3)\n    [0, 0, 0]\n    >>> repeated_num_sequence(4)\n    [0, 1, 2, 0]\n    >>> repeated_num_sequence(5)\n    [0, 0, 1, 2, 0]\n    \"\"\"", "output": "pass", "id": 942, "avg_similarity_score": 0.15680858691515173}
{"instruction": "def valid_parentheses(n):\n    \"\"\" Given n, generate all valid combinations of n pairs of parentheses.\n\n    >>> valid_parentheses(1)\n    ['()']\n    >>> valid_parentheses(2)\n    ['(())', '()()']\n    >>> valid_parentheses(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()'] \n    \"\"\"", "output": "pass", "id": 943, "avg_similarity_score": 0.16008615575759183}
{"instruction": "def substrings_common(s1,s2):\n    \"\"\"You are given two strings s1 and s2. Find the count of the number of substrings of \n    s1 that are contained in s2.\n\n    >>> substrings_common('abcd', 'adc')\n    3\n    >>> substrings_common('thisisateststring', 'testingstrings')\n    5\n    >>> substrings_common('helloworld', 'worldwar')\n    4\n    \"\"\"", "output": "pass", "id": 944, "avg_similarity_score": 0.19983597819091245}
{"instruction": "def extract_words_length(string):\n    \"\"\"Given a string of words, \n    extract the length of each word in the string and return it in a list.\n\n    >>> extract_words_length('Hello World')\n    [5, 5]\n    >>> extract_words_length('My name is Steffi')\n    [2, 4, 2, 6]\n    \"\"\"", "output": "pass", "id": 945, "avg_similarity_score": 0.23340357800088357}
{"instruction": "def merge_two_lists(list1, list2):\n    \"\"\"Given two sorted lists, merge them into one \n    sorted list in an ascending order.\n\n    >>> merge_two_lists([1,3], [2,4])\n    [1,2,3,4]\n    >>> merge_two_lists([], [-3,4])\n    [-3,4]\n    \"\"\"", "output": "pass", "id": 946, "avg_similarity_score": 0.12638102671867085}
{"instruction": "def sort_string_by_index(s: str, index: int):\n    \"\"\" Given a string and an index, return the string \n    sorted in ascending order based on the specified index.\n\n    >>> sort_string_by_index('hello',0)\n    'ehllo'\n    >>> sort_string_by_index('python',2)\n    'pthony'\n    \"\"\"", "output": "pass", "id": 947, "avg_similarity_score": 0.2090772820077879}
{"instruction": "def palindrome_of_numbers(n: int):\n    \"\"\"Given an integer n, return a list of all the palindromes \n    that can be formed using the digits in the number n.\n\n    >>> palindrome_of_numbers(12345)\n    [12321, 1221, 123321, 1234321]\n    >>> palindrome_of_numbers(101)\n    [101, 111]\n    \"\"\"", "output": "pass", "id": 948, "avg_similarity_score": 0.23099479539648704}
{"instruction": "def combine_two_strings(s1: str, s2: str):\n    \"\"\"Given two strings s1 and s2, \n    return a new string that is s1 followed by s2.\n\n    >>> combine_two_strings('abc','edf')\n    'abcdef'\n    >>> combine_two_strings('My','Name')\n    'MyName'\n    \"\"\"", "output": "pass", "id": 949, "avg_similarity_score": 0.16261553017896965}
{"instruction": "def sorted_list_of_pair_product(lst):\n    \"\"\"Given a list of pairs  \n    return a list that contains the product of each pair, and the list is sorted.\n\n    >>> sorted_list_of_pair_product([(3,5), (2,1)])\n    [2, 15]\n    >>> sorted_list_of_pair_product([(9,4), (2,4)])\n    [8, 36]\n    \"\"\"", "output": "pass", "id": 950, "avg_similarity_score": 0.23002803328435933}
{"instruction": "def find_distance_of_two_points(x1, y1, x2, y2):\n    \"\"\" Given four integer coordinates x1,y1 ,x2,y2 of two points in a \n    two-dimensional Cartesian plane, returns the distance between the two points.\n\n    >>> find_distance_of_two_points(1,1,2,2)\n    1.4142135623730951\n    >>> find_distance_of_two_points(-4,3,0,-3)\n    7.810249675906654\n    \"\"\"", "output": "pass", "id": 951, "avg_similarity_score": 0.15359608751475498}
{"instruction": "def check_if_one_array_included_in_another(arr1, arr2):\n    \"\"\" Given two arrays arr1 and arr2, \n    check if arr2 is included in arr1.\n\n    >>> check_if_one_array_included_in_another([2,1,3], [3,2,1])\n    True\n    >>> check_if_one_array_included_in_another([2,1,0], [3,2,1])\n    False\n    \"\"\"", "output": "pass", "id": 952, "avg_similarity_score": 0.13251296577046}
{"instruction": "def add_list_of_numbers_with_recursion(list: List[int]):\n    \"\"\"Given a list of numbers, \n    add the elements with recursion and return the sum.\n\n    >>> add_list_of_numbers_with_recursion([1,2,3])\n    6\n    >>> add_list_of_numbers_with_recursion([3,2,1])\n    6\n    \"\"\"", "output": "pass", "id": 953, "avg_similarity_score": 0.225591766558043}
{"instruction": "def generate_distance(text):\n    \"\"\"Generate a dictionary where each key-value pair indicates the distance \n    between two adjacent words in the text.\n\n    >>> generate_distance('Holy cow, what a distance!')\n    {1:3, 2:2, 3:2, 4:7}\n    \"\"\"", "output": "pass", "id": 954, "avg_similarity_score": 0.14493517501889663}
{"instruction": "def similar_pair_of_strings(string_a, string_b):\n    \"\"\"Define a function to compare two strings and return true or false according to whether two strings are similar.\nA string is similar to another if the number of characters and the order of characters in one string is the same as the other string.\n\n    >>> similar_pair_of_strings(\"abcde\", \"abcde\")\n    True\n    >>> similar_pair_of_strings(\"abc\", \"acb\")\n    False\n    \"\"\"", "output": "pass", "id": 955, "avg_similarity_score": 0.17173704983301397}
{"instruction": "def binary_search(arr, x):\n    \"\"\"Write a function to search for an element x in a sorted array arr.\n    Return the index of the element if it exists, otherwise, return -1. \n\n    >>> binary_search([3, 5, 8], 8)\n    2\n    >>> binary_search([2, 4, 6], 10)\n    -1\n    \"\"\"", "output": "pass", "id": 956, "avg_similarity_score": 0.18498471391991445}
{"instruction": "def next_greater_num(n):\n    \"\"\"Given a number n, find the smallest number greater than n that contains the exact same digits as n.\n\n    >>> next_greater_num(123)\n    132\n    >>> next_greater_num(444)\n    448\n    \"\"\"", "output": "pass", "id": 957, "avg_similarity_score": 0.1829097255678085}
{"instruction": "def last_occurrences(sentence,char):\n    \"\"\" Find the last occurrence of a character in a given string.\n    Return the index of the last occurrence, or -1 if not found. \n\n    >>> last_occurrences('The quick brown fox','o')\n    17\n    >>> last_occurrences('Life is beautiful','i')\n    13\n    \"\"\"", "output": "pass", "id": 958, "avg_similarity_score": 0.19652090585078894}
{"instruction": "def all_possible_subsets(s):\n    \"\"\" Given a list s, generate all possible subsets of it.\n    Return a list of all possible subsets. \n\n    >>> all_possible_subsets([1,2,3])\n    [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n    \"\"\"", "output": "pass", "id": 959, "avg_similarity_score": 0.19688445383359066}
{"instruction": "def is_palindrome(str):\n    \"\"\" Determine whether a given string is a palindrome or not. \n    Return True if the given string is a palindrome, otherwise False. \n\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('ability')\n    False\n    \"\"\"", "output": "pass", "id": 960, "avg_similarity_score": 0.1863233328946616}
{"instruction": "def find_longest_word(words):\n    \"\"\"Given a list of words, find the longest word.\n    Return the longest word in the list. \n\n    >>> find_longest_word(['apple', 'ball', 'pizza'])\n    'pizza'\n    \"\"\"", "output": "pass", "id": 961, "avg_similarity_score": 0.23935006682140558}
{"instruction": "def flatten_matrix(matrix):\n    \"\"\" Flatten a list of lists into a single list.\n\n    >>> flatten_matrix([[1,2,3], [4,5]])\n    [1, 2, 3, 4, 5]\n    >>> flatten_matrix([[1,2], [3], [4,5,6]])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"", "output": "pass", "id": 962, "avg_similarity_score": 0.15491461909847765}
{"instruction": "def get_unique_pair_count(words):\n    \"\"\" Arrange the given array `words` in a way that each element is paired with another element in the array,\n    and the pair is such that their contents are different.\n    Return the total number of unique pairs that can be formed.\n    \n    >>> get_unique_pair_count(['ab','ac','cd','ad'])\n    4\n    >>> get_unique_pair_count(['a','a','b','b'])\n    1\n    >>> get_unique_pair_count(['aa', 'bb', 'cc', 'dd'])\n    6\n    \"\"\"", "output": "pass", "id": 963, "avg_similarity_score": 0.17515485188588062}
{"instruction": "def concatenate_unique_str(words):\n    \"\"\"\n    Concatenate a group of strings `words` into a single string\n    such that no two strings have the same content.\n    \n    >>> concatenate_unique_str(['cat', 'bat', 'hat'])\n    'catbatha'\n    >>> concatenate_unique_str(['cat', 'dog', 'rat'])\n    'catdograt'\n    \"\"\"", "output": "pass", "id": 964, "avg_similarity_score": 0.16139971357289806}
{"instruction": "def palindrome_replace(s):\n    \"\"\"You are given a string s consisting of alphanumeric characters and\n    spaces. Replace one of the characters in s with an underscore\n    so that the resulting string forms a palindrome.\n\n    >>> palindrome_replace('tacocat')\n    'tacoc_t'\n    >>> palindrome_replace('ababac')\n    'ababa_'\n    \"\"\"", "output": "pass", "id": 965, "avg_similarity_score": 0.19754852698032438}
{"instruction": "def generate_grid(width, height):\n    \"\"\"Create a two dimensional grid of given dimensions and\n    populate it with a pattern of consecutive numbers.\n    \n    >>> generate_grid(3, 3)\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n    >>> generate_grid(4, 4)\n    [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]]\n    \"\"\"", "output": "pass", "id": 966, "avg_similarity_score": 0.16171913024223972}
{"instruction": "def first_intersection(l1, l2):\n    \"\"\"Find the first intersection point between two lists, `l1` and `l2`.\n    An intersection is defined by the two lists having elements\n    with the same value at the same position in their respective lists.\n    \n    >>> first_intersection([1, 2, 3], [4, 5, 3])\n    3\n    >>> first_intersection([4, 5, 6], [1, 7, 8])\n    None\n    \"\"\"", "output": "pass", "id": 967, "avg_similarity_score": 0.13243374764361798}
{"instruction": "def move_zeros_left(arr):\n    \"\"\" Given an array of integers, move all the zeros\n    to the left while ensuring the array remains sorted.\n\n    >>> move_zeros_left([4, 0, 2, 3, 0, 1])\n    [0, 0, 1, 2, 3, 4]\n    >>> move_zeros_left([1, 2, 3, 0, 4, 0])\n    [0, 0, 1, 2, 3, 4]\n    \"\"\"", "output": "pass", "id": 968, "avg_similarity_score": 0.20858349667278628}
{"instruction": "def check_symmetry_diff(matrix):\n    \"\"\"Given a two-dimensional matrix, check if each row has the same\n    difference between its first and last element. Return True if\n    all the elements of the matrix satisfy this condition,\n    otherwise return False.\n    \n    >>> check_symmetry_diff([[1, 3, 9], [4, 6, 8], [2, 5, 7]])\n    True\n    >>> check_symmetry_diff([[1, 2, 3], [6, 4, 5], [4, 3, 8]])\n    False\n    \"\"\"", "output": "pass", "id": 969, "avg_similarity_score": 0.17425861349474442}
{"instruction": "def even_summed_subarrays(nums):\n    \"\"\"From a given array of integers `nums`, find the subarrays that\n    are prefixes whose sums are also even.\n    \n    >>> even_summed_subarrays([1, 3, 4, 5, 6])\n    [[], [1], [1, 3], [1, 3, 4]]\n    >>> even_summed_subarrays([2, 3, 4])\n    [[], [2]]\n    \"\"\"", "output": "pass", "id": 970, "avg_similarity_score": 0.18562726050976067}
{"instruction": "def delete_characters(s, sub):\n    \"\"\"Given two strings `s` and `sub`, delete all characters in `s`\n    which are present in `sub`.\n    \n    >>> delete_characters('Hellostudent', 'teu')\n    'Hllosdn'\n    >>> delete_characters('Jumpingjacks', 'jkn')\n    'Aiigpcs'\n    \"\"\"", "output": "pass", "id": 971, "avg_similarity_score": 0.1429112258318479}
{"instruction": "def odd_most_duplicates(words):\n    \"\"\"Given an array of strings, find string that contains the most\n    duplicates of odd letters among all the strings in the array.\n    \n    >>> odd_most_duplicates(['bbaa', 'abb', 'acac', 'zade'])\n    'acac'\n    >>> odd_most_duplicates(['abcd', 'zxyw', 'opqr', 'efgh'])\n    'abcd'\n    \"\"\"", "output": "pass", "id": 972, "avg_similarity_score": 0.2242349256842255}
{"instruction": "def replace_longest_overlaps(dna):\n    \"\"\"Given a string of DNA sequence, replace each substring of two consecutive nucleotides \n    with the nucleotide that occurs first in the alphabet.\n\n    >>> replace_longest_overlaps('ATGCACATT')\n    'ATACATT'\n    >>> replace_longest_overlaps('GCTAGCTGCTAG')\n    'GTAGGTAG'\n    \"\"\"", "output": "pass", "id": 973, "avg_similarity_score": 0.19533437596856432}
{"instruction": "def count_uniques_in_sorted_list(arr):\n    \"\"\"Given a sorted list of numbers, count the number of unique values in the list.\n\n    >>> count_uniques_in_sorted_list([1, 3, 3, 5, 5, 7])\n    4\n    >>> count_uniques_in_sorted_list([1, 1, 1, 2, 3, 4])\n    4\n    >>> count_uniques_in_sorted_list([])\n    0\n    \"\"\"", "output": "pass", "id": 974, "avg_similarity_score": 0.24195879455162603}
{"instruction": "def build_char_map(string):\n    \"\"\" Given a string of lowercase characters from 'a'-'z', return a mapping of each letter \n    into the number of occurrences of the letter in the string.\n\n    >>> build_char_map('abbabcbdbabdbdbabababcbcbab')\n    {'a': 7, 'b': 14, 'c': 3, 'd': 4}\n    >>> build_char_map('bbb')\n    {'b': 3}\n    >>> build_char_map('z')\n    {'z': 1}\n    \"\"\"", "output": "pass", "id": 975, "avg_similarity_score": 0.2231046414406703}
{"instruction": "def rotate_array(nums):\n    \"\"\" Given an array of integers nums, rotate it by k steps to the right.\n    If k is greater than the length of the array, break the rotation into multiple \n    rotation where k is the modulus of the array length.\n\n    >>> rotate_array([1,2,3,4,5])\n    [5,1,2,3,4]\n    >>> rotate_array([7,8,9], 3)\n    [9,7,8]\n    >>> rotate_array([1,2,3], 4)\n    [3,1,2] \n    \"\"\"", "output": "pass", "id": 976, "avg_similarity_score": 0.19202951653069145}
{"instruction": "def sub_str_count(string):\n    \"\"\" Count the occurrences of each substring in a given string.\n\n    >>> sub_str_count(\"ababab\")\n    3\n    >>> sub_str_count(\"aaa\")\n    1\n    >>> sub_str_count(\"mississinippi\")\n    11\n    \"\"\"", "output": "pass", "id": 977, "avg_similarity_score": 0.18289154042946706}
{"instruction": "def buy_max_stocks(prices):\n    \"\"\" Given an array prices containing prices of stocks and a maximum budget K, \n    pick the maximum number of stocks to buy such that the total cost of buying the \n    stocks does not exceed K.\n\n    >>> buy_max_stocks([5, 10, 15], 25)\n    3\n    >>> buy_max_stocks([3, 5, 10], 7)\n    2\n    >>> buy_max_stocks([20, 15, 10], 30)\n    2\n    \"\"\"", "output": "pass", "id": 978, "avg_similarity_score": 0.19851950454512296}
{"instruction": "def sum_triplet_zero(nums):\n    \"\"\" Given an array of integers, determine if there exist three elements a,b,c in nums \n    such that a + b + c = 0.\n\n    >>> sum_triplet_zero([-1,0,1,2,3])\n    True\n    >>> sum_triplet_zero([-1,2,1,0,3])\n    True\n    >>> sum_triplet_zero([-2,5,3,6,7])\n    False\n    \"\"\"", "output": "pass", "id": 979, "avg_similarity_score": 0.18536475868299387}
{"instruction": "def binary_string_sum(a,b):\n    \"\"\" Given two binary strings of equal length, return their sum as a binary string.\n\n    >>> binary_string_sum(\"101\", \"010\")\n    '111'\n    >>> binary_string_sum(\"1100\", \"0101\")\n    '10001'\n    >>> binary_string_sum(\"0110\", \"1111\")\n    '1001'\n    \"\"\"", "output": "pass", "id": 980, "avg_similarity_score": 0.1778709066535827}
{"instruction": "def split_bit_strings(s):\n    \"\"\" Given a bit string s, split it into two halves.\n\n    >>> split_bit_strings('10010101')\n    ['1001', '0101']\n    >>> split_bit_strings('10101010')\n    ['1010', '1010']\n    >>> split_bit_strings('00011110')\n    ['000', '1110']\n    \"\"\"", "output": "pass", "id": 981, "avg_similarity_score": 0.14799687851263943}
{"instruction": "def calculate_length(s):\n    \"\"\" Given a string s, calculate the length in characters of all substrings in s.\n\n    >>> calculate_length('abcabc')\n    [3, 2, 1]\n    >>> calculate_length('aaaaaa')\n    [6, 5, 4, 3, 2, 1]\n    >>> calculate_length('112233')\n    [6, 5, 4, 3, 2, 1]\n    \"\"\"", "output": "pass", "id": 982, "avg_similarity_score": 0.21110602483820542}
{"instruction": "def typing_task(word):\n    \"\"\" Given a word word that can be typed using letters of alphabet on only one row of a \n    keyboard, determine the minimum number of jumps from start to finish required to type word.\n\n    >>> typing_task('abcd')\n    8\n    >>> typing_task('asdf')\n    8\n    >>> typing_task('qwerty')\n    15\n    \"\"\"", "output": "pass", "id": 983, "avg_similarity_score": 0.16248417160954282}
{"instruction": "def total_coins(coins):\n    \"\"\" Given a set of coins denominations, return the total number of unique ways\n    one can form sum in coins of given denominations.\n\n    >>> total_coins([1,2,5])\n    6\n    >>> total_coins([2,3,5])\n    10\n    >>> total_coins([2,5,6])\n    10\n    \"\"\"", "output": "pass", "id": 984, "avg_similarity_score": 0.2061176990635888}
{"instruction": "def unique_sort(lst):\n    \"\"\" Given an array of integers, write a function that returns a list of elements which are unique \n    and sorted in ascending order.\n\n    >>> unique_sort([4, 7, 8, 4, 8, 3])\n    [3, 4, 7, 8]\n    >>> unique_sort([4, 7, 5, 6, 7, 6, 4])\n    [4, 5, 6, 7]\n    \"\"\"", "output": "pass", "id": 985, "avg_similarity_score": 0.21070521218798074}
{"instruction": "def check_in_list(lst, n):\n    \"\"\" Given a sorted list lst and a number n, return a boolean value indicating \n    whether n is in the list lst or not.\n\n    >>> check_in_list([1,2,3,4,5], 2)\n    True\n    >>> check_in_list([1,2,3,4,5], 6)\n    False\n    \"\"\"", "output": "pass", "id": 986, "avg_similarity_score": 0.19597615702321808}
{"instruction": "def get_all_pairs(nums, k ):\n    \"\"\" Given an array of numbers, return all valid pairs which sum up to k.\n\n    >>> get_all_pairs([2, 4, 6, 8, 10], 14)\n    [(2, 12), (4, 10), (6, 8)]\n    >>> get_all_pairs([1, 2, 4, 5], 10)\n    [(1, 9), (2, 8), (4, 6)]\n    \"\"\"", "output": "pass", "id": 987, "avg_similarity_score": 0.18788556399332582}
{"instruction": "def search(arr, target):\n    \"\"\" Given a sorted list arr, return the index of target if it exists, \n    otherwise return -1.\n\n    >>> search([2, 4, 6, 8, 10], 6)\n    2\n    >>> search([2, 4, 6, 8, 10], 11)\n    -1\n    \"\"\"", "output": "pass", "id": 988, "avg_similarity_score": 0.20843083522124475}
{"instruction": "def remove_duplicates(arr):\n    \"\"\" Given an array arr, return a list which contains all unique elements, \n    while preserving the order of the original array.\n\n    >>> remove_duplicates([2, 4, 4, 6, 8, 8, 10])\n    [2, 4, 6, 8, 10]\n    >>> remove_duplicates([2, 4, 6, 8, 10, 10, 12, 12])\n    [2, 4, 6, 8, 10, 12]\n    \"\"\"", "output": "pass", "id": 989, "avg_similarity_score": 0.22849708562623053}
{"instruction": "def is_subsequence(s1, s2):\n    \"\"\" Given two strings s1 and s2, determine if s1 is a subsequence of s2. \n    A string s1 is a subsequence of string s2 if every character of s1 appears in s2 in the same order.\n\n    >>> is_subsequence('abc', 'abbababc')\n    True\n    >>> is_subsequence('ping', 'boping')\n    False\n    \"\"\"", "output": "pass", "id": 990, "avg_similarity_score": 0.1757126759959665}
{"instruction": "def decode_string(s):\n    \"\"\" Given a string s with a certain encoding structure, decode it into a decoded string.\n    Each number followed by two characters should be replaced by the given number of repetitions of the \n    two characters.\n\n    >>> decode_string('3a2b4c')\n    'aaabbbcccc'\n    >>> decode_string('2x4y')\n    'xxxyyyy'\n    \"\"\"", "output": "pass", "id": 991, "avg_similarity_score": 0.17716303166345396}
{"instruction": "def deep_sum(lst):\n    \"\"\" Given a list of list of numbers, calculate and return the total sum of all elements in the list.\n\n    >>> deep_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]])\n    45\n    >>> deep_sum([[1, 2], [3, 4, 5, 6], [7, 8, 9, 10, 11]])\n    66\n    \"\"\"", "output": "pass", "id": 992, "avg_similarity_score": 0.25546790340991143}
{"instruction": "def sum_of_divisors(n):\n    \"\"\" Given an integer n, generate and return the sum of all its proper divisors, \n    including 1 and excluding n itself.\n\n    >>> sum_of_divisors(12)\n    16\n    >>> sum_of_divisors(16)\n    31\n    \"\"\"", "output": "pass", "id": 993, "avg_similarity_score": 0.19616564304587294}
{"instruction": "def is_prime(n):\n    \"\"\" Given a positive number n, determine if it is a prime number or not.\n    A prime number has exactly two divisors, 1 and itself.\n\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"", "output": "pass", "id": 994, "avg_similarity_score": 0.15377066349463137}
{"instruction": "def parity_check(arr: List[int]) -> int:\n    \"\"\"Given an array of integers arr, find the number \n    of odd numbers before the first (i.e. Leftmost) even number\n    in the array. If an array doesn't contain any even number,\n    return -1.\n\n    >>> parity_check([1,3,5,6,7,9,8,11])\n    4\n    >>> parity_check([4,2,1,3,5])\n    -1\n    \"\"\"", "output": "pass", "id": 995, "avg_similarity_score": 0.2123945741162572}
{"instruction": "def remove_duplicate_words(words: List[str]) -> List[str]:\n    \"\"\"Write a function to remove all duplicate words in a given array of strings.\n    Words are case-sensitive and the order of the output should be the same as it was\n    in the input.\n\n    >>> remove_duplicate_words([\"Java\", \"JavaScript\", \"Java\", \"Python\", \"Python\"])\n    [\"Java\", \"JavaScript\", \"Python\"]\n    >>> remove_duplicate_words([\"Hello\",\"Hello\",\"Hi\",\"Python\"])\n    [\"Hello\",\"Hi\",\"Python\"]\n    \"\"\"", "output": "pass", "id": 996, "avg_similarity_score": 0.1916811535386962}
{"instruction": "def matching_pairs(arr: List[int]) -> int:\n    \"\"\"Given an array of integers, \n    find the number of pairs of integers \n    whose difference is equal to a given number k.\n\n    >>> matching_pairs([1, 7, 5, 9, 2, 12, 3], 2)\n    2\n    >>> matching_pairs([91, 17, 19, 43, 22, 31, 73], 12)\n    0 \n    \"\"\"", "output": "pass", "id": 997, "avg_similarity_score": 0.23970767806358478}
{"instruction": "def generate_network_tree(edges: List[List[int]]) -> TreeNode:\n    \"\"\"Given a list of unique undirected edges, \n    Construct a network tree from the edges. \n    Return the root node of the tree. \n\n    Edge[u, v] represents an undirected edge connecting node \n    u and node v. \n\n    Note: The given edges form a connected network. \n\n    >>> generate_network_tree([[1, 2], [1, 3], [2, 4], [2, 7], [4, 5], [4, 6]])\n    #  1 \n    #   \\\n    #    2--4--5\n    #   /  \\\n    #  3    6\n    #   \\  \n    #    7 \n    \"\"\"", "output": "pass", "id": 998, "avg_similarity_score": 0.17012532103425362}
{"instruction": "def find_minimum_consecutive_moves(arr: List[int]) -> int:\n    \"\"\"You are given an array  arr  of  n  integers. \n    Find the minimum number of moves required to \n    make all elements of arr consecutive. \n\n    In one move, you can increment or decrement any \n    element in arr  by 1. \n\n    >>> find_minimum_consecutive_moves([4,6,3,1,2])\n    5\n    Explanation: Move 4 and 6 to 1 and 3 respectively, \n    move 3 and 1 to 2.\n    >>> find_minimum_consecutive_moves([1,2,4,5])\n    0\n    \"\"\"", "output": "pass", "id": 999, "avg_similarity_score": 0.197259597035537}
{"instruction": "def shortest_pair_distance(arr: List[int]) -> int:\n    \"\"\"Given an array arr of integers, find the shortest distance \n    between two different indices i and j such that arr[i] = arr[j]. \n    Return -1 if no such pair exists.\n\n    >>> shortest_pair_distance([1,5,3,6,7])\n    1\n    Explanation: The shortest pair distance is the distance between \n    the indices 1 and 3, which is 1. \n    >>> shortest_pair_distance([1,2,3])\n    -1\n    \"\"\"", "output": "pass", "id": 1000, "avg_similarity_score": 0.1845455895368945}
{"instruction": "def extract_decimals(num: int) -> List[str]:\n    \"\"\"Given a positive integer num, \n    extract its decimal part as a string. \n    Trailing zeros should be discarded. \n\n    >>> extract_decimals(630)\n    [\"6\", \"3\"]\n    >>> extract_decimals(25)\n    []\n    \"\"\"", "output": "pass", "id": 1001, "avg_similarity_score": 0.14249078463378692}
{"instruction": "def maximal_square_submatrix(matrix: List[List[int]]) -> int:\n    \"\"\"Given a two-dimensional matrix of 0's and 1's. \n    Find the maximal square submatrix whose elements \n    are all equal to 1. \n    Return the area of the submatrix as an integer.\n\n    >>> maximal_square_submatrix([\n    [0, 0, 0, 1], \n    [1, 1, 0, 1], \n    [1, 1, 1, 1], \n    [1, 1, 1, 1]])\n    4\n    >>> maximal_square_submatrix([\n    [1, 0 ,1],\n    [1, 0, 0],\n    [0, 1, 0]\n    ])\n    1\n    \"\"\"", "output": "pass", "id": 1002, "avg_similarity_score": 0.20221564263522876}
{"instruction": "def word_frequency_count(text: str, word: str) -> int:\n    \"\"\"Given a string text and a string word, \n    return the frequency of occurrence of the word in the text.\n\n    >>> word_frequency_count(\"hi hi hi hello\", \"hi\")\n    3\n    >>> word_frequency_count(\"How are you? How are you today?\", \"you\")\n    2\n    \"\"\"", "output": "pass", "id": 1003, "avg_similarity_score": 0.22964765285927496}
{"instruction": "def find_min_str(string):\n    \"\"\" Given a string 'string', return the shortest substring that contains all\n    the characters given in string.\n    >>> find_min_str('xyz')\n    'xyz'\n    >>> find_min_str('azcbobobegghakl')\n    'beggh'\n    \"\"\"", "output": "pass", "id": 1004, "avg_similarity_score": 0.21846063788791747}
{"instruction": "def pivot_sort(arr, l, r):\n    \"\"\"Given an array arr with n elements, sort it in ascending order\n    using QuickSort algorithm with the middle element of the array as pivot.\n\n     Parameters:\n    arr - A list of integers\n    l - Starting index of the array\n    r - Ending index of the array\n\n    >>> pivot_sort([24,3,45,23,65,6],0,5)\n    [3, 6, 23, 24, 45, 65]\n    >>> pivot_sort([99,12,33,1,55,23], 0, 5)\n    [1, 12, 23, 33, 55, 99]\n    \"\"\"", "output": "pass", "id": 1005, "avg_similarity_score": 0.18134068679557336}
{"instruction": "def threeSumClosest(nums, target):\n    \"\"\"Given an array nums of n integers and an integer target, Return the sum of\n    three integers from nums such that the sum is closest to target.\n\n    Parameters:\n    nums - A list of integers\n    target - An integer\n\n    >>> threeSumClosest([-1, 2, -2, 0, 4], 6)\n    4\n    Explanation: The sum that is closest to the target is 4 (-1 + 2 + 1 = 4).\n    >>> threeSumClosest([9, -10, 0, 5, 6], 50)\n    21\n    Explanation: The sum that is closest to the target is 21 (9 + 6 + 6 = 21).\n    \"\"\"", "output": "pass", "id": 1006, "avg_similarity_score": 0.21998284816609268}
{"instruction": "def run_length_encoding (string):\n    \"\"\"\n    Given a string, compress the string by converting it into its run-length encoding \n    version.\n\n    Parameters: \n    string - A single string\n\n    >>> run_length_encoding('AABCCDD')\n    'A2B1C2D2'\n    Explanation: For the given string, the output would be 'A2B1C2D2'\n    \"\"\"", "output": "pass", "id": 1007, "avg_similarity_score": 0.15443643455243672}
{"instruction": "def combination_sum(arr, target):\n    \"\"\"\n    Find all unique combinations in arr where the sum of elements equals to target.\n\n    Parameters:\n    arr - A list of distinct integers\n    target - An integer\n\n    >>> combination_sum([2, 3, 8], 10)\n    [[2, 3, 5], [2, 8]]\n    Explanation: 2 + 3 + 5 = 10 and 2 + 8 = 10, so the output is [[2,3,5], [2,8]]\n    \"\"\"", "output": "pass", "id": 1008, "avg_similarity_score": 0.16585209961182443}
