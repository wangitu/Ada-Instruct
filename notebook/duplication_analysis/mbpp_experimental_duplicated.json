[
  {
    "id": 0,
    "instruction": "Write a python function that returns the maximum 3 digit sum of two numbers. Your code should pass these tests:\n\nassert max_3_digit_sum(5,4) == 99\r\nassert max_3_digit_sum(-4,5) == 93"
  },
  {
    "id": 1,
    "instruction": "Write the lambda function below to get the minimum number of operations required to convert a given decimal number to binary using this recursive code :\r\n\r\n```\r\ndef num_operations(dec):\r\n    if(dec % 2):\r\n        return(1+num_operations(dec//2))\r\n    else:\r\n        return(num_operations(dec//2))\r\n```\r\n\r\nYour code should pass these tests:\r\n\r\nassert num_operations(8) == 3\r\nassert num_operations(10) == 4\r\nassert num_solutions(9) == 3"
  },
  {
    "id": 2,
    "instruction": "Write a function to find the length of the triangle's hypotenuse. Your code should pass these tests:\nassert hypotenuse(x_coor, y_coor) == np.sqrt(x_coor ** 2 + y_coor ** 2)\r\nassert hypotenuse(10,5)==np.sqrt(10**2+5**2)\r\n####################################################"
  },
  {
    "id": 3,
    "instruction": "Write a python function to find even length palindrome from the given string (passed as input). Your code should pass these tests:\n\nassert find_even_length_palindromic_substring(\"aaaa\")=='aaaa'\r\nassert find_even_length_palindromic_substring(\"abc\")==None\r\nassert find_even_length_palindromic_substring(\"aba\")=='aba'"
  },
  {
    "id": 4,
    "instruction": "Write a function to find the power of two using recursion. Your code should pass these tests:\n\nassert get_power_two(3) == 4 \r\nassert get_power_two(5) == 8\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 5,
    "instruction": "Write a function to check whether two rectangles have overlapping area or not. Your code should pass these tests:\n\nassert detect_overlap(1,4,5,8)==True\r\nassert detect_overlap(5,8,6,7)==True\r\nassert detect_overlap(11,14,15,17)==True\r\nassert detect_overlap(5,9,7,10)==False"
  },
  {
    "id": 6,
    "instruction": "Write a python function to find the minimum number of deletions required to make a string a palindrome. Your code should pass these tests:\n\nassert min_deletion(\"aabaa\")==2"
  },
  {
    "id": 7,
    "instruction": "Write a function to find maximum element from this list\r\nele = [100, 89, 65, 23, 78, 20]\r\nYour code here\r\ndef find_maximum(x):\r\n  max_ele=0\r\n  for ele in x:\r\n    if ele>max_ele:\r\n      max_ele=ele\r\n  return max_ele"
  },
  {
    "id": 8,
    "instruction": "Write a function to find all words that are at least two characters long from a given string. Your code should pass these tests:\n\nassert find_two_char_words('i like cats')==['cats']\r\nassert find_two_char_words('itll be two days')==['itll', 'days']\r\ndef find_two_char_words(text):\r\n  return (re.findall(r'\\b\\w{2,}\\b',text))"
  },
  {
    "id": 9,
    "instruction": "Write a function to find the total number of words in the string str using split() method. Your code should pass these tests:\n\nassert find_len(\"Good morning\") == 3\r\nassert find_len(\"Hello World\") == 3"
  },
  {
    "id": 10,
    "instruction": "Write a function to find power of any number with three arguments using recursion:\r\nYour code should pass these tests:\r\nassert power_of(2,1,0)==1\r\nassert power_of(2,1,1)==2\r\nassert power_of(2,1,2)==4\r\nassert power_of(5,2,3)==625"
  },
  {
    "id": 11,
    "instruction": "Write a python function to find k smallest numbers from a list using heapify method. Your code should pass these tests:\n\nassert heap_smallest(array, 10)==np.sort(array)[:10]\r\nassert heap_smallest([1, 2, 7, 23, 67, 99, 434, 244, 459, 545, 980], 5)==[1, 2, 7, 23, 67]"
  },
  {
    "id": 12,
    "instruction": "Write a python function to find whether a string contains at least one alphabetic character but no numbers. Your code should pass these tests:\n\nassert check_alpha_char(\"12345.6789\")==False\nassert check_alpha_char(\"HELLO\")==True"
  },
  {
    "id": 13,
    "instruction": "Write a function to find the root of equation cubico using power iteration. Your code should pass these tests:\n\nassert sqrt(10) == 3 \r\nassert sqrt(27) == 3"
  },
  {
    "id": 14,
    "instruction": "Write a python function to check if a given array of numbers contains triplet of exactly two negative elements. Your code should pass these tests:\n\nassert solution([1,2,3,4])==False\r\nassert solution([-2,-4,-5,-6])==True"
  },
  {
    "id": 15,
    "instruction": "Write a python function to find the unique items from the given Python lists using set(). Your code should pass these tests:\n\nassert set([])==set()\r\nassert set(['Python', 'Java', 'C', 'C++'])==set(['C', 'C++', 'Java', 'Python'])\r\nassert set([1,2,3,4,4,5])==set([2,3,4,5])"
  },
  {
    "id": 16,
    "instruction": "Write a Python function to find elements common to both tuples. Your code should pass these tests:\n\nassert common((10,1,2), (10,2,3)) == (10)\r\nassert common((11,2,5), (10,2,3)) == (2)\r\nassert common((2,3,4), (10,2,3)) == (2)"
  },
  {
    "id": 17,
    "instruction": "Write a Python function to get the third item in a tuple using index value. Your code should pass these tests:\n\nassert get_third((1,2,3,4,5,6)) == 3\r\nassert get_third((14,66,23,49,65,86)) == 23"
  },
  {
    "id": 18,
    "instruction": "Write a function to find the minimum number of rotations required to reduce the given sorted array until a given element is in its required position. Your code should pass these tests:\n\nassert missing_element([4, 5, 6, 7, 8, 9, 10, 1, 2, 3],8)==3\r\nassert missing_element([4, 5, 6, 7, 8, 9, 10, 1, 2, 3],4)==0\r\nassert missing_element([4, 5, 6"
  },
  {
    "id": 19,
    "instruction": "Write a function to check if strings s1 and s2 are rotations of each other. Your code should pass these tests:\n\n\nassert is_rotation('python', 'typhon')==True\r\nassert is_rotation('abc', 'bca')==True\r\nassert is_rotation('python', 'jython')==False"
  },
  {
    "id": 20,
    "instruction": "Write a Python function to get the first n lines in a file. Your code should pass these tests:\nassert n_line_File(\"I Love GeeksforGeeks.txt\",5)==['You can use your pen and paper for programming', 'Or you can use pen drive for programming too.', 'The both have their own pros and cons', 'So explore all sides of this topic and analyse yourself.', 'If you have a choice, go with pen paper!']\r\nassert n_line_File(\"I Love GeeksforGeeks.txt\",5)==['This is a"
  },
  {
    "id": 21,
    "instruction": "Write a function to find whether a character is a vowel or not using bit set operation. Your code should pass these tests:\n\nassert find_vowel('a')==True\r\nassert find_vowel('b')==False\r\nassert find_vowel('e')==True"
  },
  {
    "id": 22,
    "instruction": "Write a function to find the square root of a given number using the newton's algorithm given below. Your code should pass these tests:\n\nassert find_square_root(16)==4\r\nassert find_square_root(100)==10\r\nassert find_square_root(1000)==10"
  },
  {
    "id": 23,
    "instruction": "Write a function to find the maximum of two numbers using bit comparison. Your code should pass these tests:\nassert bitwise_xor(48,50) == 88\r\nassert bitwise_xor(1,3)== 2\r\nassert bitwise_xor(-5,-4)==-9"
  },
  {
    "id": 24,
    "instruction": "Write a python function to find all duplicate items from a given list of strings. Your code should pass these tests:\n\nassert duplicate_items(['GeeksforGeeks', 'Welcome', 'Geeks', 'Geeks', 'Welcome', 'to', 'GeeksforGeeks'])==['Geeks', 'Welcome']\r\nassert duplicate_items(['Python', 'Java', 'Swift', 'Python'])==['Python']"
  },
  {
    "id": 25,
    "instruction": "Write a function to find the maximum number of 2 X + Y  for a given value of n, in the form of a tuple (X, Y, max_solution) where X + Y = n. Your code should pass these tests:\n\nassert factorial(5) == 120\r\nassert factorial(10) ==3628800"
  },
  {
    "id": 26,
    "instruction": "Write a python function to create a tuple from its arguments. Your code should pass these tests:\n\nassert tuple() == () \nassert tuple(1) == (1,)\r\nassert tuple(2,3) == (2,3)"
  },
  {
    "id": 27,
    "instruction": "Write a function to find maximum occurrence of a character in the said string using Mapreduce approach. Your code should pass these tests:\n\nassert find_occ_char(\"ABACD\")==1\r\nassert find_occ_char(\"ABBBC\")==3\r\nassert find_occ_char(\"CDAABB\")==2"
  },
  {
    "id": 28,
    "instruction": "Write a function to swap the last two characters of a string using recursion. Your code should pass these tests:\n\nassert swap_last_two('abcd')==\"abc\"\nassert swap_last_two('abc')==\"ab\""
  },
  {
    "id": 29,
    "instruction": "Write a function to find the middle node of a singly linked list. Your code should pass these tests:\nassert get_middle(Node(1,Node(2,Node(3,Node(4))))).data==3\nassert get_middle(Node(1,Node(2,None))).data==2\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 30,
    "instruction": "Write a python function to find the minimum sum of unique elements of 2 arrays. Your code should pass these tests:\n\nassert find_min_sum([7,9,11,13], [15,17,19,21]) == 37\r\nassert find_min_sum([7,7,7,7], [15,17,19,21]) == 33"
  },
  {
    "id": 31,
    "instruction": "Write a python function to find minimum cost path to reach (m, n) from (0, 0) in a given cost matrix cost[][] and a position (m, n). Your code should pass these tests:\n\nassert min_cost([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 3, 3)==19\r\nassert min_cost([[1, 2, 3,"
  },
  {
    "id": 32,
    "instruction": "Write a function to check if its an instance of class 'Student'. Your code should pass these tests:\n\nassert issubclass(Student, Person)\r\nassert Person(\"John\",19)!= Student(\"Sudeep\",33)\r\nassert issubclass(Student,object)"
  },
  {
    "id": 33,
    "instruction": "Write a python code to find the area of a circle using math module. Your code should pass these tests:\n\nassert math.pi == 3.141"
  },
  {
    "id": 34,
    "instruction": "Write a Python function to find the minimum number of rotations required for equilibrium present in an array. Your code should pass these tests:\n\nassert find_equilibrium([1,2,3,4,5,6,7,8,9,10,12,15,17,18,19,22]) == 12\r\nassert find_equilibrium([6,3,1,2,0,5,4,8,7,9,11,15,14,16,10,13,1"
  },
  {
    "id": 35,
    "instruction": "Write a python function to add 4 numbers using 6 multiplications. Your code should pass these tests:\n\nassert polysum(2,3,4,5)==50\r\nassert  polysum(4,5,6,7)==84\r\nassert  polysum(3,4,5,6)==84"
  },
  {
    "id": 36,
    "instruction": "Write a function to check whether two given lists are semantically equivalent or not. Your code should pass these tests:\n\nassert(are_equivalent_lists([9, 2, 5, 7, 3, 5, 2], [2, 7, 3, 5, 5, 9, 2]) == True)\r\nassert(are_equivalent_lists([9, 2, 5, 7, 3, 5, 2], [2, 9, 2, 5, 7, 3, 5"
  },
  {
    "id": 37,
    "instruction": "Write a python function to return the string made by swapping the first two characters with last two characters in a given string. Your code should pass these tests:\n\nassert swap_char(\"hello\")==lohel\r\nassert swap_char(\"swati\")==tiswa\r\nassert swap_char(\"world\")==dlrow"
  },
  {
    "id": 38,
    "instruction": "Write a function to find all possible paths in the maze from the given start cell to the given goal cell in the correct order using Backtracking. Your code should pass these tests:\n\nassert find_path((1,1), (2,2), [[1, 0], [1, 1], [0, 1]])==[[1, 1], [1, 2], [2, 2]]\r\nassert find_path((1,1), (2,2), [[0, 1], [1, 1], [2, 1], [2, 2"
  },
  {
    "id": 39,
    "instruction": "Write an efficient code for finding the largest element using a single traversal of the array. Your code should pass these tests:\nassert largest_number([1,2,3,4,5,6,7,8,9,10,11,12,1,3,5,70,80,90,1001]) == 1001\r\nassert largest_number([-100,98,86,74,62,50,98,86,74,62,50]) == 98"
  },
  {
    "id": 40,
    "instruction": "Write a python function to find the subsets of a list in sorted order. Your code should pass these tests:\n\nassert subsets([]) == [ [] ] \r\nassert subsets([10,20,23,30,32,39]) == [ [ 10 ], \r\n                        [ 10, 20 ], \r\n                        [ 10, 20, 23 ], \r\n                        [ 10, 20, 23, 30 ], \r\n                        [ 10, 20, 23, 30,"
  },
  {
    "id": 41,
    "instruction": "Write a Python function to remove duplicates from a list. Your code should pass these tests:\nassert remove_duplicates([1,2,3,4,5,5,5]) == [1, 2, 3, 4, 5]\r\nassert remove_duplicates([6,7,8,9,10]) == [6, 7, 8, 9, 10]"
  },
  {
    "id": 42,
    "instruction": "Write a Python function to multiply all items in list by 10. Your code should pass these tests:\n\nassert multiply_by_10([15, 20, 30]) == [150, 200, 300] \r\nassert multiply_by_10([40]) == [400] \r\nassert multiply_by_10([-5, -10])== [-50, -100]"
  },
  {
    "id": 43,
    "instruction": "Write a code to get the value of an attribute from an item in the BasketballPlayers collection. Your code should pass these tests:\n\nassert get_attribute(5, 0) == 'Andy' \nassert get_attribute(4, 1) == 'John'"
  },
  {
    "id": 44,
    "instruction": "Write a python function to find power of two without using in-buit pow() function. Your code should pass these tests:\n\nassert find_power(2)==1\r\nassert find_power(4)==2\r\nassert find_power(1024)==10"
  },
  {
    "id": 45,
    "instruction": "Write a function to check if two numbers differ at one bit position only or not. Your code should pass these tests:\n\nassert differ_At_One_Bit_Pos(32,16)\r\n\r\nassert differ_At_One_Bit_Pos(1,7)"
  },
  {
    "id": 46,
    "instruction": "Write a function to find the number of occurrences of a given word in a text. Your code should pass these tests:\nassert count_words('apple', \"In an apple tree you can grow apples.\")==2\r\nassert count_words('apple', 'The best fruits are apple.')==1"
  },
  {
    "id": 47,
    "instruction": "Write a function to find the smallest integer in the list using heap queue algorithm using the code given below. Your code should pass these tests:\n\nassert heapq_smallest(arr) == min(arr)\r\n\r\ndef heapq_smallest(arr):\r\n  pq = arr[:]\r\n  heapq.heapify(pq)\r\n  smallest = heapq.heappop(pq)\r\n  return smallest"
  },
  {
    "id": 48,
    "instruction": "Write a function to find the median of the three numbers by using a single loop. Your code should pass these tests:\n\nassert medianOfThree(0, 1, 2) == 1\r\nassert medianOfThree(0, 2, 1) == 1\r\nassert medianOfThree(1, 0, 2) == 1\r\nassert medianOfThree(1, 2, 0) == 1\r\nassert medianOfThree(2, 0, 1) == 1\r\nassert medianOfThree(2, 1, 0)"
  },
  {
    "id": 49,
    "instruction": "Write a class to identify a similar element from two heterogeneous lists. Your code should pass these tests:\nassert similar(2, \"Hello\") == 'found similar element at 2'\r\nassert similar(\"H\", \"Hello\") == 'found similar element at 0'"
  },
  {
    "id": 50,
    "instruction": "Write a Python function to find the smallest common element present in all three lists using collections.Counter and lambda. Your code should pass these tests:\n\nassert find_smallest_common([10,20,55,45,3,11,16,78], [20,55,45,11,16,78], [10,20,55,45,90,88,11,16]) == 11\r\nassert find_smallest_common([33,55,20,"
  },
  {
    "id": 51,
    "instruction": "Write a function to find the index of a given element from sorted array. Your code should pass these tests:\nassert index_of(arr = [3,4,5,4,3,1,2], key =3) == 0\r\nassert index_of(arr = [3,4,5,4,3,1,2], key =5) == 2\r\nassert index_of(arr = [3,4,5,4,3,1,2], key =1) == 5"
  },
  {
    "id": 52,
    "instruction": "Write a function to find the sum of elements in a given list using recursion. Your code should pass these tests:\nassert sum_list([2,4,6,8])==20\nassert sum_list([-2,-4,-6,-8])==-20"
  },
  {
    "id": 53,
    "instruction": "Write a function to remove all the vowels from a given string. Your code should pass these tests:\nassert remove_vowels(\"Abc\")==\"B\"\r\nassert remove_vowels(\"ab\")==\"b\""
  },
  {
    "id": 54,
    "instruction": "Write a function to find the index of the minimum number in the given list. Your code should pass these tests:\n\nassert min_index([10, 20, 5, 40, 70])==[1]\r\nassert min_index([40, 20, 50, 70, 5])==[2]\r\nassert min_index([40, 50, 20, 50, 60])==[4]"
  },
  {
    "id": 55,
    "instruction": "Write a function to check a string is valid XML or not. Your code should pass these tests:\n\nassert validate_xml('<abc>')==True\r\nassert validate_xml('<abc<>')==False\r\nassert validate_xml('abc</abc>')==False"
  },
  {
    "id": 56,
    "instruction": "Write a function to find the minimum number of rotations required to get the same string: Your code here"
  },
  {
    "id": 57,
    "instruction": "Write a python function to find out whether a given  string is palindrome or not. Your code should pass these tests:\n\nassert is_palindrome('ABBA')==True\r\nassert is_palindrome('apple')==False"
  },
  {
    "id": 58,
    "instruction": "Write a python function to find number of digits in a given integer using Regex. Your code should pass these tests:\nassert count_digits(5684) == 4\nassert count_digits(33) == 2"
  },
  {
    "id": 59,
    "instruction": "Write a python function to write value to first column of maximum value of each row in the dataframe by using position label for the row index. Your code should pass these tests:\n\nassert write_max_to_col_pos1(df).equals(new_df)\r\nassert (write_max_to_col_pos1(df) == np.array([6.0, 7.0, 8.0])).sum() == 3"
  },
  {
    "id": 60,
    "instruction": "Write a python function to find the position of all the unique elements in the given list. Your code should pass these tests:\r\n\r\nassert position_all_unique([10, 20, 50, 60, 20])==[0, 1, 3, 4]\r\nassert position_all_unique([10, 20, 30, 40, 50])==[0, 1, 2, 3, 4]"
  },
  {
    "id": 61,
    "instruction": "Write a function to find all the pairs of two numbers x and y such that:\r\n- x is not equal to y\r\n- gcd(x,y)=5\r\nYour code should pass these tests:\r\n\r\nassert get_list_of_pairs(20,40) == [(10,30),(15,25),(20,30),(25,20),(30,15),(30,20),(40,20)]\r\nassert get_list_of_pairs(50,90) == [(10,8"
  },
  {
    "id": 62,
    "instruction": "Write a python function to find the index of two numbers that add up to a specific numbe. Your code should pass these tests:\n\nassert find_index(5,[8,2,6,7,4])==0\r\nassert find_index(15,[16,5,1,2,0])==3\r\nassert find_index(20,[16,59,1,2,0])==None"
  },
  {
    "id": 63,
    "instruction": "Write a python function to find squares of individual elements from a given array. Your code should pass these tests:\n\nassert(squared(square) == square) \r\nassert(squared(square).sum() == square.sum()**2) \r\nassert(squared(square) is not square) \r\nassert(squared(square).tolist() == list(map(lambda x: x**2, square.tolist()))"
  },
  {
    "id": 64,
    "instruction": "Write a class Employee to represent the information of each employee. Your code should pass these tests:\n\nassert Employee(\"Harry\",1234).name == \"Harry\"\r\nassert Employee(\"Harry\",1234).job_id == 1234\r\nassert Employee(\"Harry\",1234).salary == 1000\r\nassert Employee(\"Harry\",1234).__repr__() == \"Employee(name = Harry, job_id = 1234)\"\r\nassert Employee(\"Harry\",1234).__str__()"
  },
  {
    "id": 65,
    "instruction": "Write a Python function to check if two numbers differ at one bit position only or not. Your code should pass these tests:\n\nassert differ_at_one_bit_pos(35, 1) == True \r\nassert differ_at_one_bit_pos(36, 2) == False"
  },
  {
    "id": 66,
    "instruction": "Write a function to find the sum of the digits of the numbers present the list using reduce() in python. Your code should pass these tests:\n\nassert sum_digits([12, 13, 14]) == 9\r\nassert sum_digits([67, 70, 89])== 25"
  },
  {
    "id": 67,
    "instruction": "Write a function to find all the numbers present in a given matrix using recursion. Your code should pass these tests:\n\nassert find_Numbers([[1, 2, 3],[4, 5, 1],[6, 7, 8]])==[1, 2, 3, 4, 5, 6, 7, 8]\r\nassert find_Numbers([[]])==[]"
  },
  {
    "id": 68,
    "instruction": "Write a Python function to find the maximum length of consecutive zeros in a given string. Your code should pass these tests:\n\nassert find_max(10) == 2\r\nassert find_max(30) == 3\r\nassert find_max(55) == 3"
  },
  {
    "id": 69,
    "instruction": "Write a python function to find if there exists pair of numbers whose sum is equal to a given number X. Your code should pass these tests:\nassert pairwise_sum(3, [1,2,3,4,5,6,7,8,9,10])==True\r\nassert pairwise_sum(9, [1,2,3,4,5,6,7,8,9,10])==True\r\nassert pairwise_sum(9, [1,2,3,4,5,6,7,8,10,11])"
  },
  {
    "id": 70,
    "instruction": "Write a function to find position of a given character in a string. Your code should pass these tests:\n\nassert find_position('12345','4')==3\r\nassert find_position('abcabc','a')==0\r\nassert find_position('XYZ','X')==0"
  },
  {
    "id": 71,
    "instruction": "Write a Python function to check whether there are at least two numbers in a given list whose value add up to a given target number. Your code should pass these tests:\n\nassert check_exists([1,2,3,4,5,6,7],10)==True\r\nassert check_exists([10,20,30,40,50,60,70],80)==True\r\nassert check_exists([11,22,33,44,55],120)==False"
  },
  {
    "id": 72,
    "instruction": "Write a python function to check whether at least one integer in an array is equal to the sum of its cubed. Your code should pass these tests:\nassert check_cubed([5,3,1,2,8])==True\r\nassert check_cubed([25,125,625,3125])==False"
  },
  {
    "id": 73,
    "instruction": "Write a function to find the sum of N natural numbers that are less than or equal to M using Sieve of Eratosthenes. Your code should pass these tests:\n\nassert soe_sum(10, 20)==41\r\nassert soe_sum(5,10)==15\r\ndef soe_sum(n,m):\r\n \r\n    res,curr = m,m//2\r\n    while curr>0:\r\n        if m%curr==0:\r\n            res+=(curr>n)*(curr*(m//curr+1)-curr*(m//curr))\r\n        curr"
  },
  {
    "id": 74,
    "instruction": "Write a function to find the number of words which have all alphabets in upper case. Your code should pass these tests:\n\nassert count_upper_cases(string = \"COMPUTING AND COMMUNICATIONS,BUSINESS AND SOCIAL SCIENCES\")==2\r\nassert count_upper_cases(string = \"COMPUTING AND COMMUNICATIONS,BUSINESS and ECONOMICS\")==3\r\ndef count_upper_cases(string):\r\n  return len(re.findall(r'\\b[A-Z]*\\b', string))"
  },
  {
    "id": 75,
    "instruction": "Write a function to find all sub strings with length K. Your code should pass these tests:\n\nassert len(sub_str1) == k \r\nassert len(sub_str2) == k \r\nassert len(sub_str3)==k \r\nassert len(sub_str4)==k\r\nassert len(sub_str5)==k"
  },
  {
    "id": 76,
    "instruction": "Write a python function to find all values greater than a given value and put them ahead of the the list of original values. Your code should pass these tests:\nassert greater_list([1,2,3,4,5,6,7],3)==[3,4,5,6,7,1,2]\r\nassert greater_list([4,5,6,7],5)==[5,6,7,4]\r\nassert greater_list_eff([1,2,3,4,5,6,7],3)==[3,4,5,6,"
  },
  {
    "id": 77,
    "instruction": "Write a function to find the minimum number of rotations required to form the maximum number of matching. Your code should pass these tests: \n\nassert (max_number_matching([1, 4, 2, 2, 2], [2, 2, 1, 4, 2]) == 3)\r\nassert (max_number_matching([1], [1]) == 1)"
  },
  {
    "id": 78,
    "instruction": "Write a code to find the kth smallest element from the given list using heapq. Your code should pass these tests:\n\nassert heap_smallest(nums, 1)==10\r\nassert heap_smallest(nums, 4)==18\r\nassert heap_smallest(nums, 11)==30"
  },
  {
    "id": 79,
    "instruction": "Write a python function to print the smallest integer greater than n and is divisible by 12. Your code should pass these tests:\n\nassert smallest_greater_divisible_by_12(10) == 12\r\nassert smallest_greater_divisible_by_12(14) == 24"
  },
  {
    "id": 80,
    "instruction": "Write a code to generate a tuple with the given numbers. Your code should pass these tests:\nassert tuple_nums(num_lst) == (n*(n+1)/2) for num_lst in [[0, 3], [0, 8], [0, 10], [3, 3], [3, 8]]\r\nassert tuple_nums(num_lst)==(n*(n+1)*(2*n+1))/6 for num_lst in [[1, 3], [1, 8], [1, 10], [4, 3"
  },
  {
    "id": 81,
    "instruction": "Write a function to find the sublist [22, 45, 39] and replace it with [42, 52, 33] in the list [42, 55, 65, 22, 45, 39, 33]. Your code should pass these tests:\n\nassert update_list([42, 55, 65, 22, 45, 39, 33])==[42, 55, 65, 42, 52,"
  },
  {
    "id": 82,
    "instruction": "Write a function to find the largest element in a given array, using heapq. Your code should pass these tests:\nassert heapq.nlargest(1,[100,200,500,400,300])==[100]\nassert heapq.nlargest(2,[10,20,30,40,50])==[10,20]"
  },
  {
    "id": 83,
    "instruction": "Write a function to check whether there is a pair of elements in the list whose add is equal to a given number. Your code should pass these tests:\n\nassert find_pair([2,14,11,7,15],[8,9,10,11])==True\r\nassert find_pair([4,12,20,11,13,5],[8,10,13,23])==True\r\nassert find_pair([14,14,18,20],[7,18,23,25])"
  },
  {
    "id": 84,
    "instruction": "Write a function to find the k-largest elements from a given array. Your code should pass these tests:\n\nassert find_k_largest(nums,2)==[33,67]\r\nassert find_k_largest(nums,4)==[33,55,66,67]\r\nassert find_k_largest(nums,1)==[35]\r\nassert find_k_largest(nums,5)==[13,17,24,33,35]\r\n###"
  },
  {
    "id": 85,
    "instruction": "Write a python function to find the number of rotations required to get a given string. Your code should pass these tests:\n\nassert findrotation(\"abc\") ==1 \nassert findrotation(\"abcd\") ==2"
  },
  {
    "id": 86,
    "instruction": "Write a function to find all the anagrams of a word from a string using collections. Your code should pass these tests:\n\nassert anagrams_list('debit card','mode dnac etad')==['debit card','carddebit']\r\nassert anagrams_list('rat','art')==['rat','art']\r\nassert anagrams_list('debit card','debit card\")==['debit card']"
  },
  {
    "id": 87,
    "instruction": "Write a  function to return the number of nodes present in the left subtree of the given binary tree. Your code should pass these tests:\n\nassert get_left_nodes(t1) == 4\nassert get_left_nodes(t2) == 0"
  },
  {
    "id": 88,
    "instruction": "Write a function to find the number of ways to fill in the blanks in the text such that we can determine the correct spelling in the text given correct words. Your code should pass these tests:\n\nassert num_ways(\"he bought a ___ hen\")==2\nassert num_ways(\"she bought two ___ hens\")==4"
  },
  {
    "id": 89,
    "instruction": "Write a python function to find the middle most number of a list using one line of code. Your code should pass these tests:\n\nassert middle([1, 2, 3, 4, 5, 6])==3\r\nassert middle([23, 45, 21, 55, 12, 76])==30\r\nHere is the correct implementation of the code exercise\r\ndef middle(nums): \r\n    return sorted(nums)[len(nums)//2]"
  },
  {
    "id": 90,
    "instruction": "Write a function to find the minimum number of rotations required to rotate the given string such that substring of the string after k rotations is empty. Your code should pass these tests:\n\nassert find_Rotations(\"abc\") == 1\r\nassert find_Rotations(\"ab\") == 2\r\nassert find_Rotations(\"abc\") == 1\r\ndef find_Rotations(str): \r\n\t# Your Code Here\r\n    n = len(str) \r\n    for x in range(1,n+1): \r\n        substring = str[x:] + str[:n-x+1] \r\n        if"
  },
  {
    "id": 91,
    "instruction": "Write a function to find the min and max elements within a list: Your code should pass these tests:\nassert getMinAndMax([12,45,8,75,15])==[8,75]\r\nassert getMinAndMax([12,45,8,75])==[8,75]\r\nassert getMinAndMax([12,45,8,75,25,89])==[8,89]"
  },
  {
    "id": 92,
    "instruction": "Write a function to find the minimum cost path from (0, 0) to (m-1, n-1) for the given cost matrix cost[][] and a position (m, n). Your code should pass these tests:\n\nassert mct.minimum_cost_path(cost_mat, m) == 108\r\nassert mct.minimum_cost_path(cost_mat, n) == 120\r\nassert mct.minimum_cost_path(cost_mat, 2) == 120\r\nAssert the correctness of the above code"
  },
  {
    "id": 93,
    "instruction": "Write a function to find number of ways to fill it with 2 x 1 dominoes such that the number formed is divisible by 4. Your code should pass these tests:\n\nassert ways_to_fill([[0,0,1],[0,1,0],[1,0,0]], 4) == 16\r\nassert ways_to_fill([[1,0,1],[0,1,0],[1,0,0]], 4) == 9\r\nassert ways_to_fill([[1,0,0],[0,1,0],[0,"
  },
  {
    "id": 94,
    "instruction": "Write a python function to get the corresponding digit of an element at the specified index from a given tuple of tuples. Your code should pass these tests:\n\nassert get_digit(3, ((1, 2, 3, 4, 5, 6, 7, 8, 9, 0),(10, 20, 30, 40, 50, 60, 70, 80, 90, 0),(100, 200, 300, 400, 50"
  },
  {
    "id": 95,
    "instruction": "Write a python function to find whether a given triplet is a Cartesian co-ordinate triplet or not. Your code should pass these tests:\n\nassert check_coordinate((-4, -3, -10)) == '-3 and -4 and -10 is not a coordinate triplet'\r\nassert check_coordinate((4, 0, 6)) == '4 and 0 and 6 is a coordinate triplet'"
  },
  {
    "id": 96,
    "instruction": "Write a function to count the total number of days in the order that fall between the given times. Your code should pass these tests:\n\nassert day_count('14:59', '2:00') == 82\nassert day_count('08:00', '4:00') == 95"
  },
  {
    "id": 97,
    "instruction": "Write a python function to check whether a number is divisible by 2 or 3 without using inbuilt functions and syntax. Your code should pass these tests:\n\nassert check_divisibility(5) == False\r\nassert check_divisibility(6) == True\r\nassert check_divisibility(15) == True\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 98,
    "instruction": "Write a python function to remove duplicate elements from the given list of two lists. Your code should pass these tests:\n\nassert remove_duplicates([[2, 3, 4, 5, 5, 7], [8, 6, 3, 2, 7, 9]]) == [[2, 3, 4, 5, 7], [8, 6, 3, 2, 9]]\r\nassert remove_duplicates([[45, 89, 73, 45], [90, 12, 89"
  },
  {
    "id": 99,
    "instruction": "Write a function to find a missing element from the given array of numbers where all numbers are unique in this array. Your code should pass these tests:\nassert missing_number([1, 6, 2, 3, 5, 7, 4]) == 8\r\nassert missing_number([13, 14, 15, 16, 12, 11, 10, 9]) == 8"
  },
  {
    "id": 100,
    "instruction": "Write a function to find the sub-list of a given list of integers consisting of the numbers divisible by 7 that are present in the list. Your code should pass these tests:\n\nassert find_div7([35, 37, 39, 48, 55, 58, 65, 68]) == [35, 37, 48, 58]\r\nassert find_div7([58, 68, 70, 71, 72, 74]) == [68"
  },
  {
    "id": 101,
    "instruction": "Write a function to find the middle element of the given array using recursion. Your code should pass these tests:\n\nassert find_mid(nums=[10, 20, 30, 40, 50, 60])== 30\r\nassert find_mid(nums=[10, 20, 30, 40, 50, 60, 70])== 40"
  },
  {
    "id": 102,
    "instruction": "Write a python function to find the minimum number of removals needed to make the number element of the queue. Your code should pass these tests:\n\nassert min_removals([2,3,4,5,7,8,9,12,16,18,20,24,25]) == 3\r\nassert min_removals([1,2,3]) == 2\r\nassert min_removals([1,2,3,4]) == 2\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 103,
    "instruction": "Write a python function to find the list difference between the two lists. Your code should pass these tests:\n\nassert list_difference([],[3,5,6,2,1])==[{'input2_ele': 3, 'input1_ele':'item does not exist in input1'}, {'input2_ele': 5, 'input1_ele':'item does not exist in input1'}, {'input2_ele': 6, 'input1_ele':'item does not exist in input1'}, {'input2_ele': 2, 'input1_ele':'item does not exist"
  },
  {
    "id": 104,
    "instruction": "Write a python function to find the second largest element in a list. Your code should pass these tests:\n\nassert findSecondLargest([20, 50, 30, 10, 40, 100]) == 40\r\nassert findSecondLargest([10, 20, 30, 40]) == 20"
  },
  {
    "id": 105,
    "instruction": "Write a function that returns the intersection of two lists. Your code should pass these tests:\n\nassert intersection_lists([1,2,3,4,5],[2,4,6,8,10])==[2,4]\r\nassert intersection_lists([1,2,3,4,5],[6,8,10,12,14])==[]\r\nassert intersection_lists([1.2,1.4,1.5,.12,.99],[8.11,.55,.12])==[1.2,.12]"
  },
  {
    "id": 106,
    "instruction": "Write a function to find common elements from two lists. Your code should pass these tests:\n\nassert common_ele ([2,3,4],[3,4,5])==[3,4]\r\nassert common_ele([1,2,3,4],[5,6,7,8])==[]\r\nassert common_ele([1,2,2,2,2],[4,4,4,4,6])==[4,2]"
  },
  {
    "id": 107,
    "instruction": "Write a python function to find the union of all nested list elements using recursion. Your code should pass these tests:\n\nassert union_nested_lists([1,2,[3,4],[5,6,7],[8]])==[1,2,3,4,5,6,7,8]\r\nassert union_nested_lists([1,[2,[3,[4,[5]]]]])==[1,2,3,4,5]"
  },
  {
    "id": 108,
    "instruction": "Write a python function to find the length of the given numbers in the list(numbers) and sort them in ascending order. Your code should pass these tests:\n\nassert find_length([1,2,3,4,5]) == 5\r\nassert find_length([12,15]) == 2"
  },
  {
    "id": 109,
    "instruction": "Write a special function to find the top two common elements in one line of code that takes input array and print all the common elements and their respective counts. Your code should pass these tests:\n\nassert commonElements([10,20,20,10,30,20,40,50,20], 3) == [(20, 3), (20, 3)]\r\nassert commonElements([12,24,35,24,88,120,155,88,120,155],"
  },
  {
    "id": 110,
    "instruction": "Write a function to find thw word which is not present in given sentence. Your code should pass these tests:\n\nassert no_word_present(\"John likes to watch movies. Mary also likes to watch football games\")==\"movies\"\r\nassert no_word_present(\"The code editor is amazing!!! It helps programmers to write code easily.\")==\"easily\"\r\nassert no_word_present(\"Python and Powershell is great programming language to learn!!\")==\"learn\"\r\nHere is the correct implementation of the code exercise\r\ndef count_words(text):\r\n    a = sum([1"
  },
  {
    "id": 111,
    "instruction": "Write a Python function to sort a list of elements using Merge Sort algorithm. Your code should pass these tests:\n\nassert sort_list([])==[]\r\nassert sort_list([1, 5, 2, 4, 3])==[1, 2, 3, 4, 5]\r\nassert sort_list(['a', 'z', 'd', 'c', 'f'])==['a', 'c', 'd', 'f', 'z']"
  },
  {
    "id": 112,
    "instruction": "Write a function to find whether the characters of two strings match at one position both of them. Your code should pass these tests:\n\nassert positions_match('a','a',1)==True\r\nassert positions_match('a','b',1)==False\r\nassert positions_match('abc','abc',2)==True"
  },
  {
    "id": 113,
    "instruction": "Write a python function to find the element with second minimum value from a sequence. Your code should pass these tests:\n\nassert second_min([2,5,8,45,86,98])==2\r\nassert second_min([22,55,49,8,7,23,98])==4"
  },
  {
    "id": 114,
    "instruction": "Write a function to find the minimum and maximum integers from a given input list using heapq. Your code should pass these tests:\n\nassert min_max_heapq([214, 555, 399, 44, 56])==[44,555]\r\nassert min_max_heapq([500,55,90])==[500,90]"
  },
  {
    "id": 115,
    "instruction": "Write a function to find the minimum number of jumps required to travel from position x to position y. Your code should pass these tests:\n\nassert minjumps(1, 1000, 4)==4\r\nassert minjumps(10, 1000, 14)==7"
  },
  {
    "id": 116,
    "instruction": "Write a python function to find the contiguous sub-list in which the sum of minimum and maximum element is minimum. Your code should pass these tests:\n\nassert find_min_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (1, 12, 2)\r\nassert find_min_max_min([16, 17, 21, 24, 27, 30,"
  },
  {
    "id": 117,
    "instruction": "Write a function that returns the index of a given number in a sorted array using two pointers approach. Your code should pass these tests:\r\n\r\nassert ptr_index_search(lst, 0) == 0\r\nassert ptr_index_search(lst, 6) == 1\r\nassert ptr_index_search(lst, 3) == 4"
  },
  {
    "id": 118,
    "instruction": "Write a function to find all words that are at least 2 characters long from a given string. Your code should pass these tests:\n\nassert all_twowords('Hello how are you today? The event will be held today')=={'Today','Today’,'Today?'}\r\nassert all_twowords('Python Exercises')=={'exercises','exercises?'}\r\nassert all_twowords(\"Today is a wonderful day isn't it?\")=={'Today','Today’,'Today?','wonderful'}"
  },
  {
    "id": 119,
    "instruction": "Write a python function to find the sum of elements at odd-indexes from a given list. Your code should pass these tests:\n\nassert sum_occurrences_of_odd_elements([2, 4, 6, 8, 10]) == 26\r\nassert sum_occurrences_of_odd_elements([3, 5, 7, 9, 11, 13, 15, 17, 19]) == 166\r\nassert sum_occurrences_of_odd_elements([3, 7,"
  },
  {
    "id": 120,
    "instruction": "Write a function to find maximum power of 2 dividing a number n. Your code should pass these tests:\n\nassert max_power2(1) == 1\r\nassert max_power2(2) == 2\r\nassert max_power2(3) == 1"
  },
  {
    "id": 121,
    "instruction": "Write a Python function to find a pair of elements that appear in both the given lists of numbers and length of these two lists is minimum. Your code should pass these tests:\n\nassert find_min_list([10, 5, 3, 7, 2], [5, 4, 2, 8, 6])==[2, 2]\r\nassert find_min_list([3, 0, 6, 2, 7], [0, 4, 2, 8, 6])==[0, 2]\r\n#"
  },
  {
    "id": 122,
    "instruction": "Write a function to find the number of misplaced parentheses in a given expression. Your code should pass these tests:\n\nassert find_one(\"()))\") == 3\r\nassert find_one(\"\") == 0\r\nassert find_one(\"())(\") == 2"
  },
  {
    "id": 123,
    "instruction": "Write a Python function to find all the common items from two given lists. Your code should pass these tests:\n\nassert common([4, 5, 6, 7, 89, 45], [23, 45, 78, 90, 145])==[45, 90]\r\nassert common([4, 5, 6, 7, 89, 45], [10, 20, 34, 70, 89])==[89]\r\nassert common"
  },
  {
    "id": 124,
    "instruction": "Write a python function to return the count the minimum number of numbers needed to be added to make a number equal to the value of n using 2 or less multiplications. Your code should pass these tests:\n\nassert number_of_multiplications(5)==2\r\nassert number_of_multiplications(6)==3\r\nassert number_of_multiplications(10)==4"
  },
  {
    "id": 125,
    "instruction": "Write a function to check whether a given string is an anagram of an another string or not. Your code should pass these tests:\nassert anagram_check(\"abcd\", \"dcba\") == True\r\nassert anagram_check(\"abcd\", \"dcb\") == False\r\nassert anagram_check(clown, hownonc) == False\r\ndef anagram_check(str_1, str_2):\r\n    #Your code here\r\n    sorted_str1=(\"\".join(sorted(str_1)))\r\n    sorted_str2=(\"\".join(sorted(str_2)))"
  },
  {
    "id": 126,
    "instruction": "Write a python function to find the number of rotations required to get the same set of characters using the below implementation of the code exercise. Your code should pass these tests:\n\n\n\nassert rotations(\"aaaa\")==1\r\nassert rotations(\"ab\") == 2"
  },
  {
    "id": 127,
    "instruction": "Write a python function to get the values in a range from the list. Your code should pass these tests:\n\nassert get_values_in_range(list1, 10,20)== [10, 12, 14, 16, 18, 20]\r\nassert get_values_in_range(list1, 50,60)==[]\r\ndef get_values_in_range(alist,lower,upper):\r\n  return \r\n '''\r\n Sample Solution Implementation:\r\n'''\r\n def get_values_in_range(alist"
  },
  {
    "id": 128,
    "instruction": "Write a function to find the smallest missing element in the given list. Your code should pass these tests:\n\nassert min_missing_elem([34,45,56,78,89,91,23,45,89,46]) == 23\r\nassert min_missing_elem([89,45,56,34,89,91,12,13,45,89]) == 12"
  },
  {
    "id": 129,
    "instruction": "Write a function to print non-zero terms in the sorted order and their square for the given python list nums. Your code should pass these tests:\n\nassert square_non_zero_nums([12, 5, -4, -23, 25, 5, 25, 61]) == [-23.0,  -4.0, 12.0,  25.0,  25.0, 50.0, 625.0]\r\nassert square_non_zero_nums([12, 5"
  },
  {
    "id": 130,
    "instruction": "Write a function to find the minimum number of elements in a data-stream if in a sorted order, the whole dataset is not required from the stream to build the whole sorted ordered datastream. Your code should pass these tests:\n\nassert min_nos_elems([50,30,40,20]) == 4\r\nassert min_nos_elems([50,30,80,20]) == 4"
  },
  {
    "id": 131,
    "instruction": "Write a function to find the minimum number of rotations required to achieve a target string. Your code should pass these tests:\n\nassert rotations(\"abcd\",2) == 2\r\nassert rotations(\"abcd\",3) == 3\r\nassert rotations(\"abcd\",4) == 4"
  },
  {
    "id": 132,
    "instruction": "Write a function to find N smallest and N largest elements from an array. Your code should pass these tests:\nassert find_N_smallest(arr, 2) == [2, 1]\r\nassert find_N_largest(arr, 4) == [6, 5, 4, 3]"
  },
  {
    "id": 133,
    "instruction": "Write a python function to find three numbers from a given list which sum to a given value 'k'. Your code should pass these tests:\n\nassert three_sum([12, 15, 3,20, 45, 50, 80], 100) == [12, 3, 50]\r\nassert three_sum([3, 15, 20, 45, 80], 100) == False"
  },
  {
    "id": 134,
    "instruction": "Write a function to check whether a given year is leap year or not using lambda keyword. Your code should pass these tests:\n\nassert is_leapyear(2000) == True\r\nassert is_leapyear(1994) == True\r\nassert is_leapyear(1998)==False"
  },
  {
    "id": 135,
    "instruction": "Write a function to find all permutations of a given collections of numbers. Your code should pass these tests:\n\nassert find_permutation([3, 6, 9])==[[3, 6, 9],[6, 3, 9],[9, 6, 3],[6, 9, 3],[9, 3, 6],[3, 9, 6]]\r\nassert find_permutation([10, 20, 30])==[[10, 20, 30],[20, 10, 30],["
  },
  {
    "id": 136,
    "instruction": "Write a Python function to compute the square root of a number using Newton-Raphson method \r\nYour code should pass these tests:\r\nassert(newton_raphson_sqrt(9) == 3)                   \r\nassert(newton_raphson_sqrt(2.5) == 0.5547)        \r\nassert(newton_raphson_sqrt(10) == 3.1622776601683795)"
  },
  {
    "id": 137,
    "instruction": "Write a function to check whether the pair of all words that start with same letter are at least 4 characters long. Your code should pass these tests:\n\nassert wordcheck(\"Hello\") == True\r\nassert wordcheck(\"World\") == False\r\nassert wordcheck(\"welcome\") == False"
  },
  {
    "id": 138,
    "instruction": "Write a function to find the least common multiple of two numbers using the least common multiple formula. Your code should pass these tests:\n\nassert least_common_multiple(10,15) == 60\r\nassert least_common_multiple(32,48) == 1920\r\nassert least_common_multiple(48,60) == 2880"
  },
  {
    "id": 139,
    "instruction": "Write a function to find the largest integer from a given list of numbers. Your code should pass these tests:\n\nassert max_num([45, 22, 90, 18])==90\r\nassert max_num([17, 100, 38, 80, 15])==100\r\nassert max_num([34, 89, 16, 93])==93"
  },
  {
    "id": 140,
    "instruction": "Write a code to  find the difference between lengths of first and last elements in the given array. Your code should pass these tests:\n\nassert difference_between_length_of_first_n_last([10, 9, 7, 3, 5, 6, 15, 14, 12, 8]) == (90-10) == 80 \r\nassert difference_between_length_of_first_n_last([31, 22, 33, 1, 5, 9, 11"
  },
  {
    "id": 141,
    "instruction": "Write a function to find element in list which is having minimum sum(pairwise sum). Your code should pass these tests:\n\nassert find_minsum_pairwise([2, 5, 9, 6, 12, 15, 19, 21], 0) == (2, 5)\r\nassert find_minsum_pairwise([2, 5, 9, 6, 12, 15, 19, 21], 3) == (12, 15)"
  },
  {
    "id": 142,
    "instruction": "Write a python function to find the square root of a number using Newton Raphson method. Your code should pass these tests:\n\nassert square_root(25) == 5\r\nassert square_root(0) == 0\r\ndef square_root(x):\r\n  # Your code goes here\r\n  root = x\r\n  precision =0.1\r\n  while(float(root*(1+precision))-float(((root+1)*(1-precision)))>0.0001):\r\n    root_previous = root\r\n    root = (root+(x/root))*(.5)\r\n    precision"
  },
  {
    "id": 143,
    "instruction": "Write a function to find the first non-consecutive number in a given series. Your code should pass these tests:\nassert get_first_missing( [1, 2, 3, 4, 6, 7, 8])==5\r\nassert get_first_missing([10, 2, 3, 4, 6, 7, 8])==10\r\ndef get_first_missing(arr):\r\n  # Your code here\r\n  n = len(set(arr))\r\n  return n+1 if n+1 > min(arr) else min"
  },
  {
    "id": 144,
    "instruction": "Write a function to find the second smallest item from a list. Your code should pass these tests:\n\nassert second_smallest([4, 5, 6, 11, 12, 18, 26, 28]) == 12\r\nassert second_smallest([22, 31, 76, 28, 90, 62, 88, 28])==28\r\nassert second_smallest([14, 20, 92, 60, 22,"
  },
  {
    "id": 145,
    "instruction": "Write a python function to find duplicates from a given list of numbers using dictionary in single pass. Your code should pass these tests:\r\n\r\nassert find_duplicates([3, 6, 7, 4, 3, 5, 8]) == [3, 3]\r\nassert find_duplicates([3, 8]) == [3]"
  },
  {
    "id": 146,
    "instruction": "Write a python function to find the maximum value of digits in the given list using lambda function\r\n\r\nSample Input:\r\n[1789,1945,2020,2001]\r\nSample Output:\r\n2020"
  },
  {
    "id": 147,
    "instruction": "Write a function to find the smallest integer greater than input number x in a sorted array arr of integers and return the array index at which the number x needs to be inserted to preserve the sorted order. Your code should pass these tests:\n\nassert find_min_idx_after_x(4.5, [0, 2, 3, 6, 9])==1\r\nassert find_min_idx_after_x(8, [0, 2, 3, 6, 9])==4\r\nassert find_min_idx_after_x(9, ["
  },
  {
    "id": 148,
    "instruction": "Write a python function to find the minimum number of rotations required to get same string. Your code should pass these tests:\n\nassert minRotations(\"abc\") == 3\r\nassert minRotations(\"leetcode\") == 3\r\nassert minRotations(\"cab\") == 4\r\nHere is the correct implementation of the code exercise\r\ndef minRotations(s): \r\n    n = len(s) \r\n    for i in range(1,n+1): \r\n        substring = s[i: ] + s[ : i] \r\n        if (s == substring): \r\n            return i"
  },
  {
    "id": 149,
    "instruction": "Write a python function to find the minimum positive number that does not occur twice in a given positive number in O(n) time and O(1) space complexity. Your code should pass these tests:\nassert find_one_missing_num(4) == 5\r\nassert find_one_missing_num(412) == 1\r\nassert find_one_missing_num(19) == 20\r\nassert find_one_missing_num(64) == 3"
  },
  {
    "id": 150,
    "instruction": "Write a python function to find the minimum value from the n smallest items in the given list. Your code should pass these tests:\n\nassert min_n_numbers([30,40,50,70,60,80,100],2)==40\r\nassert min_n_numbers([51,40,50,70,60,80,100],3)==40\r\nassert min_n_numbers([10,20,60,30,40,50,70],2)==1"
  },
  {
    "id": 151,
    "instruction": "Write a function to find the minimum of two numbers. Your code should pass these tests:\n\nassert minimum_of_two_numbers(2, 10) == 2\r\nassert minimum_of_two_numbers(10, 2) == 2"
  },
  {
    "id": 152,
    "instruction": "Write a function to find the minimum number of rotations required to reach target string in the order specified by a given input string. Your code should pass these tests:\nassert rotations_needed(\"abcd\") == 1\r\nassert rotations_needed(\"ab\") == 2\r\nassert rotations_needed(\"demo\") == 7"
  },
  {
    "id": 153,
    "instruction": "Write a function to find all the nodes within K distance from a given root node. Your code should pass these tests:\n\nassert find_distance_k(root, 1, 1)==[9]\r\nassert find_distance_k(root, 2, 1)==[1,2,3,4,5,6,7,8]\r\nassert find_distance_k(root, 5, 2)==[3]\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 154,
    "instruction": "Write a function to find maximum of three numbers using lambda instead of if-else and compair three numbers. Your code should pass these tests:\n\nassert high_low(11,3,5)==(11,3)\r\nassert high_low(13,16,4)==(16,13)\r\nassert high_low(1,6,10)==(10,1)"
  },
  {
    "id": 155,
    "instruction": "Write a python function to convert a list of lower case string to list of upper case and vice-versa. Your code should pass these tests:\n\nassert is_upper([\"I\",\"AM\",\"RAVI\"])==False\r\nassert is_upper([\"P\",\"Y\",\"T\",\"H\",\"O\",\"N\"])==True\r\nassert is_upper([\"P\",\"R\",\"A\",\"I\",\"N\"])==False"
  },
  {
    "id": 156,
    "instruction": "Write a function to get the lowest common ancestor of two nodes in a Binary Tree. Your code should pass these tests:\n\nassert lca(23, 10).data == 15\r\nassert lca(56, 70).data == 45\r\nassert lca(20, 40).data == 25\r\n\r\nA node n is used to denote the node corresponding to the data value. Here is the correct implementation of the code exercise exercise, for reference:"
  },
  {
    "id": 157,
    "instruction": "Write a function to return sum of elements in matrix recursively. Your code should pass these tests:\nassert find_sum([[1,2,3], [4,5,6], [7,8,9]])==45\r\nassert find_sum([[11,12,13], [14,15,16], [17,18,19]])==861"
  },
  {
    "id": 158,
    "instruction": "Write a function to find the number of ways to fill in the values of the cells of an NxN chessboard using the following rules:\r\nFrom each cell, there should be exactly 2 moves possible (vertical and horizontal).\r\nSum of all the numbers on the chessboard should be equal to total no. of cells in the chessboard.\r\n\r\n\r\nboard_size = 5\r\nExpected output:\r\n4\r\nHere is the correct implementation of the code exercise\r\ndef count_ways(n, board_size): \r\n\treturn 4 * (2 * n - 1)"
  },
  {
    "id": 159,
    "instruction": "Write a helper function to find the square root of a number using the binary search method from scratch. Your code should pass these tests:\n\nassert sqrt_search(4) == 2\r\nassert sqrt_search(9) == 3\r\nassert sqrt_search(0) == 0\r\nassert sqrt_search(2.5) == 1.875"
  },
  {
    "id": 160,
    "instruction": "Write an efficient code to find the reverse of a string without using reverse function. Your code should pass these tests:\n\nassert reverse(\"codedladies\") == \"ideasyedoc\"\r\nassert reverse(\"Rohit\") == \"itho\"\r\nassert reverse(\"india\") == \"aidni\""
  },
  {
    "id": 161,
    "instruction": "Write a function to find the minimum number of rotations required to convert a string s1 to a string s2. Your code should pass these tests:\n\n\n\nassert minRotationsToConvert(\"abc\", \"cab\") == 2\r\nassert minRotationsToConvert(\"leetcode\", \"leotcede\") == 6"
  },
  {
    "id": 162,
    "instruction": "Write a python function to create a dataframe containing all data of users' birth years and their tenure using the users list created in the previous exercise. Your code should pass these tests:\n\nassert create_df() is not None\nassert create_df().shape == (1000, 2)\nassert create_df()[\"birth_year\"].max() == 1990\nassert create_df()[\"tenure\"].min() == 28.0"
  },
  {
    "id": 163,
    "instruction": "Write a function to sum all items of a dictionary using iteration. Your code should pass these tests:\n\nassert iterator_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\r\nassert iterator_sum({\"a\":1,\"b\":2,\"c\":3}) == 6\r\nHere is the correct implementation of the code exercise\r\ndef iterator_sum(iterable):\n    return sum(iterable)"
  },
  {
    "id": 164,
    "instruction": "Write a function to remove an arbitrary element from a set. Your code should pass these tests:\n\nassert remove_element('x',set())==None\r\nassert remove_element('abc',[12,24, 'ab'])==[12,24]"
  },
  {
    "id": 165,
    "instruction": "Write a function to find the minimum cost path to reach (m,n) from (0,0) using Dijkstra's shortest path algorithm. Your code should pass these tests:\n\nassert find_shortest_cost([[3,2,5],[9,6,4],[8,7,1]],3,3)==6\r\nassert find_shortest_cost([[2,8,7],[6,9,3],[5,4,1]],3,3)==12"
  },
  {
    "id": 166,
    "instruction": "Write a function to find all the squares of all the numbers smaller than or equal to the number n passed as parameter. Your code should pass these tests: \nassert (find_squares_LE(8)==[0,1,4,9,16,25,36,49,64,81])\r\nassert (find_squares_LE(3)==[0,1,4,9])"
  },
  {
    "id": 167,
    "instruction": "Write a python function to find a single missing number from a list and its resultant array should not have any additional element from the given list. Your code should pass these tests:\n\nassert find_missing_number([1,2,3,4,6,7,8,9,10,11,12,14]) == [5]\r\nassert find_missing_number([0,2,3,4,5,6,7,8,10,11,12,13,14]) == [1,9]"
  },
  {
    "id": 168,
    "instruction": "Write a python function to find all the elements that appears atleast twice in a given list using sorting. Your code should pass these tests:\nassert find_first_appearing_twice([1,1,44,15,12,5,64,73,88,2,1,1,3,76])==1\r\nassert find_first_appearing_twice([10,10,10,10,10])==10"
  },
  {
    "id": 169,
    "instruction": "Write a function to find the highest possible rating of a video game at which the final score is less than the given score. Your code should pass these tests:\n\nimport math\r\nassert max_rating(1350) == 4000 \r\nassert max_rating(1124.02) == 2400 \r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 170,
    "instruction": "Write a python function to find the intersection of two dictionaries. Your code should pass these tests:\n\nassert intersection_dict({'v':1,'y':2,'w':3 },{'y':4,'o':5, 'p':4,'q':4 })=={'y':2}\r\nassert intersection_dict({'a':7, 'b':10},{'c':8, 'd':14})=={}\r\nassert intersection_dict({'m':10, 1:3, 'f':100, 't':12},{1:3, 'n"
  },
  {
    "id": 171,
    "instruction": "Write a function to find the missing number from a given List of numbers. Your code should pass these tests:\n\nassert find_miss_num([1,2,3,4])==5\r\nassert find_miss_num([1,2,5,4])==3\r\nassert find_miss_num([10,9,8,11,12,13,14])==7"
  },
  {
    "id": 172,
    "instruction": "Write a function to find the length of a string. Your code should pass these tests:\n\nassert len_str('ab c')==3\r\nassert len_str('a b c d e f')==6\r\nassert len_str('')==0"
  },
  {
    "id": 173,
    "instruction": "Write a python function to find the highest common factor(GCF) of two numbers. Your code should pass these tests:\nassert find_gcd(25,45)==5\r\nassert find_gcd(3,0)==3\r\nassert find_gcd(5,8)==1"
  },
  {
    "id": 174,
    "instruction": "Write a Python function to create a DataFrame from a dictionary with each value as another dictionary with row and column values using the given lists. Your code should pass these tests:\n\nassert pd.DataFrame.equals(to_pd(data) ,  pd.DataFrame({'A': {0: 11, 1: 23, 2: 15}, 'B': {0: 24, 1: 26, 2: 17}, 'C': {0: 35, 1: 37, 2: 19}}))"
  },
  {
    "id": 175,
    "instruction": "Write a function to find all the combinations that add upto the given target number. Your code should pass these tests:\n\nassert find_pairs(nums = [10,20,5,4,20,4,6,8,15,25,25,16,13,16,15,17,17,23,25,25,25,19], target = 29)=={10:19,16:25,15:23,20:25,8:2"
  },
  {
    "id": 176,
    "instruction": "Write a function to return the number of values greater than or equal to the specified element. Your code goes here\ndef count_geq_value(nums, val):\r\n  return sum(1 for x in nums if x>=val)"
  },
  {
    "id": 177,
    "instruction": "Write a function to find the number of unique words in a given paragraph (sentence). Your code should pass these tests:\n\nassert num_words(\"Hello, this is a sample paragraph\")==8\r\nassert num_words(\"Python Developers\")==4\r\nassert num_words(\"You must be smarter than the people in the room\")==10\r\nThis function should pass these tests:\n\nassert type(num_words(\"Python Developers is the best\"))==int\r\nassert type(num_words(\"This code exercise is about python Developers\"))==int\r\nassert num_words(\"Python"
  },
  {
    "id": 178,
    "instruction": "Write a Python function to find the minimum number of rotations required to get the same string. Your code should pass these tests:\n\nassert find_min_rotations(\"aaaa\") == 1\r\nassert find_min_rotations(\"ab\") == 2\r\nassert find_min_rotations(\"abc\") == 3"
  },
  {
    "id": 179,
    "instruction": "Write a Python function to get the current directory path. Your code should pass these tests:\n\nassert get_current_dir() =='/Users/arvind'\r\nassert get_current_dir('\\\\')!= '/'\r\nassert get_current_dir('Y:\\\\Coding\\\\Python')!= 'Y:\\Coding\\Python'"
  },
  {
    "id": 180,
    "instruction": "Write a function to check whether two numbers differ at one bit position only. Your code should pass these tests:\n\nassert differ_at_one_bit_pos(54, 60) == True\r\nassert differ_at_one_bit_pos(9, 10) == False\r\ndef differ_at_one_bit_pos(x,y):\r\n  return x^(x&-x)!= y^(y&-y)"
  },
  {
    "id": 181,
    "instruction": "Write a function to find n smallest elements from a list using heapq. Your code should pass these tests:\n\nassert heap_sort(num_list) == sorted(num_list)[:3]\r\nassert heap_sort(num_list1) == sorted(num_list1)[:5]\r\nassert heap_sort([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5]\r\nHere is the correct implementation of the code exercise\r\nimport heapq\r\ndef heap_sort(nums):"
  },
  {
    "id": 182,
    "instruction": "Write a Python function to find all the anagrams of a given string. Your code should pass these tests:\n\nassert find_anagrams(\"Forget About Love\")==[\"etao\",\"erfo\",\"evno\",\"faob\",\"gaob\",\"gotf\",\"gotr\",\"gooi\",\"gota\"] \r\nassert find_anagrams(\"Rail safety\")==[\"ailsaf\",\"iasaf\",\"laisf\",\"lsair\",\"lzsaf\",\"raisf\",\"ransa\",\"safar\",\"saila\",\"safie\",\"safir\",\"safli\",\"safety\",\"sigaf\"]"
  },
  {
    "id": 183,
    "instruction": "Write a function to find the minimum cost path to reach (m,n) from (0,0) in a cost matrix cost[][] and a position (m,n) in the grid. Your code should pass these tests:\nassert min_cost([[1,2,3],[4,8,2],[1,5,3]], 2, 2) == 8\r\nassert min_cost([[1,2,3],[4,5,6],[7,8,9]], 2, 2) == 12"
  },
  {
    "id": 184,
    "instruction": "Write a python function to find out the largest word and count of occurrence of this word in a given text. Your code should pass these tests:\n\nassert largest_word_count(\"Python is Python programming language\")==(\"Python\",2)\r\nassert largest_word_count(\"C++ is C++ programming language\")==(\"is\",1)\r\nassert largest_word_count(\"PHP is funny\")==(\"PHP\",1)"
  },
  {
    "id": 185,
    "instruction": "Write a python function to calculate the nth smallest element in a dictionary using heapq: Your code should pass these tests:\n\nassert heap_smallest(dic,2)==3\r\nassert heap_smallest(dic,5)==9\r\nassert heap_smallest(dic,7)==11"
  },
  {
    "id": 186,
    "instruction": "Write a function to find the maximum and minimum number from a dictionary using heapq. Your code should pass these tests:\n\nassert heapq.heappop(find_max_min({1:10, 2:20, 3:30, 4:40, 5:50})) == (50, 1)  assert heapq.heappop(find_max_min({10:10, 50:20, 30:30, 40:40, 70:50})) == (7"
  },
  {
    "id": 187,
    "instruction": "Write a function to join contents of all the files into one single dictionary by reading the content of all the files using read function and store it in the variable res. Your code should pass these tests:\n\nassert \"file1\" in res\r\nassert \"file2\" in res\r\nassert len(res)==4\r\nassert type(res)==dict"
  },
  {
    "id": 188,
    "instruction": "Write a binary search function to search an element x in an ascending sorted list nums of n elements and return its index:\r\ndef binary_search(nums, x):\r\n  low = 0\r\n  high = len(nums) - 1\r\n  mid = 0\r\n  while low<= high:\r\n    mid = (low + high)//2\r\n    if  nums[mid] == x:\r\n      return mid\r\n    elif nums[mid] < x:\r\n      low = mid + 1\r\n    else:\r\n      high = mid -1\r\n  return False"
  },
  {
    "id": 189,
    "instruction": "Write a function to return the last n elements of given list using recursion. Your code should pass these tests:\n\nassert last_n(10, ['p','r','o','g','r','a','m','i','z','e']) == ['e','g','m','z']\r\nassert last_n(3, [12, 14, 11.6, 10.3, 11.4, 12.8, 10.6, 8.5, 9.6, 10.8]) == [1"
  },
  {
    "id": 190,
    "instruction": "Write the code to find the maximum profit gained by stock buying and selling. Your code should pass these tests:\n\nassert find_max_profit([5,4,3,2,1])==5\r\nassert find_max_profit([1,2,3,4,5])==4\r\nassert find_max_profit([5,15,12,14,9])==8"
  },
  {
    "id": 191,
    "instruction": "Write a function to find the second most repeated character from the string. Your code should pass these tests:\n\nassert find_second_most_repeated_char(\"hello\")==\"l\"\r\nassert find_second_most_repeated_char(\"this is good\")==None"
  },
  {
    "id": 192,
    "instruction": "Write a python function to find the indices of a list of numbers such that the difference between the maximum and minimum of the numbers in subarrays is minimum. Your code should pass these tests:\nassert index_minima([150, 200, 145, 88, 200, 99, 400, 150, 250, 330, 99, 500, 289, 679])==[4, 9, 13]\r\nassert index_minima"
  },
  {
    "id": 193,
    "instruction": "Write a function to find the highest number from a given list of numbers using heap_queue algorithm. Your code should pass these tests:\n\nassert heap_queue([1,2,3,4,5])==5\nassert heap_queue([11,13,10,14,12,15])==15"
  },
  {
    "id": 194,
    "instruction": "Write a function to find the maximum occurring item in the dictionary using heap queue implementation. Your code should pass these tests:\n\nassert heapQueueMax() == \"c\"\r\nassert heapQueueMax(d) == 3\r\nassert heapQueueMax(d1) == \"Python\""
  },
  {
    "id": 195,
    "instruction": "Write a function to extract the digits from a given string. Your code should pass these tests:\n\nassert get_digits('a23G2')==['2','3']\r\nassert get_digits('345')==['3','4','5']"
  },
  {
    "id": 196,
    "instruction": "Write a python function to reverse a string using stack. Your code should pass these tests:\n\nassert reverse_string(\"I love DataSciBasic\")== \"BasicSciData love I\"\r\nassert reverse_string(\"Machine learning with R is great\")== \"great is R with learning Machine\""
  },
  {
    "id": 197,
    "instruction": "Write a code to find the total no. of sets of 4 numbers from 0 to n such that their add is equal to k. Your code should pass these tests:\n\nassert find_four_sum_balanced(10,2)==3\r\nassert find_four_sum_balanced(18,13)==4\r\nassert find_four_sum_balanced(17,2)==2\r\nThis is the correct implementation of the code exercise"
  },
  {
    "id": 198,
    "instruction": "Write a code to find the number of occurences of a given pair of numbers from the given list of numbers. Your code should pass these tests:\n\nassert count_occurrences((12,55,2,0,12,32,65,21,32), 12, 2) == 2\r\nassert count_occurrences((12,55,2,0,12,32,65,21,32), 12, 0) == 1\r\nassert count_occurrences((12,5"
  },
  {
    "id": 199,
    "instruction": "Write a function to find the maximum sum of all distinct subsequences from a given sequence. Your code should pass these tests:\n\nassert max_sum_distinct([[10,9,8,7,45,3,1], [1,4,5,10,2,6,4,8],\r\n                   [1,45,4,5,8,9,54,21],[2,6,45,32,55,2,4,4,4]]) == 186\nassert max_sum_distinct([[34,5,3"
  },
  {
    "id": 200,
    "instruction": "Write a function to print all the elements of the given dictionary value pair without using map or lambda function. Your code should pass these tests:\n\nassert remove_nums_letter((32:\"d\",21:\"t\",13:\"a\"))==['a','d','t']\r\nassert remove_nums_letter((\"apple\":89,\"water\":52,\"money\":40))==['apple','money','water']"
  },
  {
    "id": 201,
    "instruction": "Write a function to find the number of ways to fill it with 2 x 1 dominoes of same color. Your code should pass these tests:\n\nassert count_ways(2)==3\r\nassert count_ways(6)==15\r\ndef count_ways(n):\r\n\tcount = 0\r\n\t# Your code here\r\n\t'''Return the number of ways to fill it with 2 x 1 dominoes of same color.'''\r\n\treturn count"
  },
  {
    "id": 202,
    "instruction": "Write a function to find k largest elements from a given input list using heap sort. Your code should pass these tests:\n\nassert heap_sort_k_largest([10,20,50,70,90,60,80,40,30,50],4)==[90,80,70,60]\r\nassert heap_sort_k_largest([10,20,50,70,90,60,80,40,30,50],5)==[90,80"
  },
  {
    "id": 203,
    "instruction": "Write a python function to compute the sum of digits of n. Your code should pass these tests:\n\nassert sum_of_digits(126)` == 9\r\nassert sum_of_digits(45`54)` == 14\r\nassert sum_of_digits(432) == 6"
  },
  {
    "id": 204,
    "instruction": "Write a Python function to find the nth element from the starting of given list. Your code should pass these tests:\n\nassert nthElementFromFront([10, 20, 30, 40, 50, 60],[1]) == 10\r\nassert nthElementFromFront([10, 20, 30, 40, 50, 60],[3]) == 30\r\nassert nthElementFromFront([10, 20, 30, 40, 50, 60],[1"
  },
  {
    "id": 205,
    "instruction": "Write a python function to count the number of characters in a string. Your code should pass these tests:\n\nassert count_chars(\"Bash is a great language to learn\")==56\r\nassert count_chars(\"Java and NodeJS are technologies for WEB development\")==67\r\ndef count_chars(str):\r\n  return len(str)"
  },
  {
    "id": 206,
    "instruction": "Write a function to find the median element in a stream of numbers. Your code should pass these tests:\n\nassert calc_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==5.5\r\nassert calc_median([3, 11, 17, 19, 21])==17.0"
  },
  {
    "id": 207,
    "instruction": "Write a function to find if a given year is a leap year. Your code should pass these tests:\nassert leap_year(2000)==True\nassert leap_year(2001)==False"
  },
  {
    "id": 208,
    "instruction": "Write a Python function to find the smallest unique number from the following string using two different approaches. Your code should pass these tests:\n\nassert smallest_unique(\"abcdabcd abcdabcd cdabcdab\" )== 'ab'\r\nassert smallest_unique(\"abcdabcd abcdabcd cdabcdab\" )== 'b'\r\nHere is correct implementation of the code exercise exercise"
  },
  {
    "id": 209,
    "instruction": "Write a single line of code that converts the input string to datetime and updates the variable s so that the last three digits of s is the number of days left in the month after 3 months are added. Your code should pass these tests:"
  },
  {
    "id": 210,
    "instruction": "Write a Python function to find all the common elements from two arrays. Your code should pass these tests:\nassert common_ele([6,7,8,9,10], [11,12,13,14,6]) == [6]\r\nassert common_ele([6,7,8,9,10], [11,12,13,14,9]) == [9]"
  },
  {
    "id": 211,
    "instruction": "Write a function to find the minimum cost path to reach (m,n) from (0,0) for the given cost matrix cost[][] and a position (m,n) in cost[][]. Your code should pass these tests:\nassert mc_solution([[0, 3, 5, 8], [1, 4, 9, 12], [2, 5, 10, 20]], 2, 2)==41\r\nassert mc_solution([[0, 3, 5, 8], [1, 4, 9, 1"
  },
  {
    "id": 212,
    "instruction": "Write a python function to find the index of all occurrences of item in the given input list. Your code should pass these tests:\n\nassert index_of_all_occurrences([12,45,78,25,45,78,54,45],[45]) == [1,2,4,5,7]\nassert index_of_all_occurrences([86,79,48,65,12,90,79],[79])==[1,2,4]"
  },
  {
    "id": 213,
    "instruction": "Write a function to find length of the longest consecutive subarray having same number of 0's and 1's. Your code should pass these tests:\n\nassert isLongConsecutiveSubarray([1,0,0,1,0,0]) == 3\r\nassert isLongConsecutiveSubarray([0,0,1,1,0,0,1,1,1,1]) == 5"
  },
  {
    "id": 214,
    "instruction": "Write a function remove_vowels() to remove vowels from a given string. Your code should pass these tests:\n\nassert remove_vowels(\"Hello\") == \"Hll\" \r\nassert remove_vowels(\"Python\") == \"Pytn\""
  },
  {
    "id": 215,
    "instruction": "Write a function to find the longest consecutive subsequence with same number of 0's and 1's. Your code should pass these tests:\n\nassert subseq(arr)==5\r\nassert subseq_faster(arr)==5\r\nassert subseq(arr2)==6\r\nassert subseq_faster(arr2)==6\r\nHere is the correct implementation of the code exercise\r\ndef subseq(arr): \r\n    dp = [1]*len(arr) \r\n    for k in range(1,len(arr)): \r\n        for i in range(k): \r\n            if (arr[i]==arr["
  },
  {
    "id": 216,
    "instruction": "Write a function to find the minimum cost path to reach (m,n) from (0,0) that sums up all the values in your given cost matrix cost[][] and returns the sum of values on that path. Your code should pass these tests:\n\nassert find_min_cost([1,2,3],[4,8,2],[5,3,5])==8\r\nassert find_min_cost([1,4,5],[7,12,5],[9,6,9])==14"
  },
  {
    "id": 217,
    "instruction": "Write a python function to search an element in a sorted tuple using binary search algorithm. Your code should pass these tests:\n\nassert binary_search((2,3,5,6,9,10),5)==3\nassert binary_search((2,3,5,6,9,10),5)==5"
  },
  {
    "id": 218,
    "instruction": "Write a python function to find second-largest element of a list. Your code should pass these tests:\n\nassert second_largest([120, 150, 80, 160, 200, 140]) == 150\r\nassert second_largest([15, 10, 8, 12, 9, 14]) == 12"
  },
  {
    "id": 219,
    "instruction": "Write a SQL query to select names of students from STUDENTS having marks greater than 75. Your code should pass these tests:\n\nassert(len(sqldf(\"select name from STUDENTS where Marks > 75\")) == 2)\r\nassert(sqldf(\"select name from STUDENTS where Marks > 75\").values == np.array([('Stu1',), ('Stu4',)]).reshape(2,1)).all()"
  },
  {
    "id": 220,
    "instruction": "Write a function to count the number of ways to fill it with 2 X 1 dominoes such that the dominoes does not touch together anywhere. Your code should pass these tests:\nassert ways(5) == 8\rassert ways(7) == 20"
  },
  {
    "id": 221,
    "instruction": "Write a python function to remove duplicates from the original list x and store it in a new list y. Your code should pass these tests:\n\nassert x[0]==3\r\nassert x[1]==5\r\nassert x[2]==8\r\nassert y[0]==5\r\nassert y[1]==8"
  },
  {
    "id": 222,
    "instruction": "Write a code to find height and width of the largest sub matrix having zero determinant using the following formula:\r\nHere is the correct implementation of the code exercise\r\n# your code goes here\r\nmat = [\r\n   [1, 0, -1, 3],\r\n   [0, 2, -1, 4],\r\n   [2, 4,  3, -1]\r\n]\r\nrows, cols = len(mat), len(mat[0])\r\ndef find_det(mat, n):\r\n\tif n == 2: \r\n\t\treturn mat[0]["
  },
  {
    "id": 223,
    "instruction": "Write a python function to find the length of a string without using any inbuilt python function: Your code here\ndef lenn(str):\r\n    return len(str)\r\n\r\nprint(lenn('abc'))"
  },
  {
    "id": 224,
    "instruction": "Write a python function to print the even numbers from a given list using lambda function. Your code should pass these tests:\n\nassert filter_even_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 15]) == [2, 4, 6, 8, 15]\r\nassert filter_even_nums([11, 12, 15, 7, 9, 25, 10, 45, 78, 91])==[1"
  },
  {
    "id": 225,
    "instruction": "Write a function to find the product triplets from the given list of integers. Your code should pass these tests:\nassert find_product_triplets([-1, 0, 1, 2, -3, 4])==[(-3, 1, 4), (-1, 0, 4)]\r\nassert find_product_triplets([5, 6, 10, -3, 17, -5, 3, 4])==[(-3, 1, 17),(5,1,4),(5,1,17)]"
  },
  {
    "id": 226,
    "instruction": "Write a python function to find a linear combination of two lists representing x and y coordinates and find the euclidean distance using numpy library. Your code should pass these tests:\n\nassert nearest_distance([3, 4],[2, 8]) == 5.00\r\nassert nearest_distance([5, 6, 8],[4, 9, 2])== 6.643161638019813"
  },
  {
    "id": 227,
    "instruction": "Write a function to find the maximum profit using the above method i.e., using 'first method', by creating two variables max_sum and max_contiguous_sum and comparing at the end. Your code here"
  },
  {
    "id": 228,
    "instruction": "Write a function to append two numpy arrays. Your code should pass these tests:\n\nassert (arr1 == np.array([0, 2, 4, 6])).all() \r\nassert (arr2 == np.array([-20, -31])).all() \r\nassert (result == np.array([[-20.,  -31.,   0.,   2.,   4.,   6.],\r\n[ 40.,   41.,   42.,  -21.,  -22.,  -23.]]))"
  },
  {
    "id": 229,
    "instruction": "Write a python function to check whether two numbers n1 and n2 have equal number of set bits or not. Your code should pass these tests:\n\nassert equal_number_bits(16, 19) == True \nassert equal_number_bits(20, 21) == False\r\ndef equal_number_bits(n1,n2):\r\n  n_set_bit_1 = 0\r\n  n_set_bit_2 = 0\r\n  i = 0\r\n  while (n1 or n2):\r\n    if n1 & 1:\r\n      n_set"
  },
  {
    "id": 230,
    "instruction": "Write a function to find the k largest elements from a list using heapq. Your code should pass these tests:\n\nassert heapq.nlargest(3, [48, 91, 65, 33, 72, 23, 90, 14, 53])==[72, 91, 90]\r\nassert heapq.nlargest(3, [90, 48, 23, 53, 33, 14, 91, 65, 72"
  },
  {
    "id": 231,
    "instruction": "Write a python function to find squares of a range. Your code should pass these tests:\nassert square_nums(10) == [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\r\nassert square_nums(12) == [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]\r\ndef square_nums(n"
  },
  {
    "id": 232,
    "instruction": "Write a function to convert a list of size n into a list of length sqrt(n) using the Stirling Approximation. Your code should pass these tests:\n\nassert round(stirling_approx(9),3)==0.075\r\nassert round(stirling_approx(8),3)==0.084\r\nassert round(stirling_approx(30),5)==0.03090"
  },
  {
    "id": 233,
    "instruction": "Write a python function to find the minimum number of rotations required by a series to make it same it's mirror image. Your code should pass these tests:\n\nassert min_rotations(\"ABC\") == 2\r\nassert min_rotations(\"ABCD\") == 3\r\ndef min_rotations(text):\r\n  # Your code here\r\n  n = len(text)\r\n  # Finding the smallest multiple of n by dividing it with n\r\n  q = n // math.gcd(n,2)\r\n  # The difference of n and q\r\n  r = n - q\r\n  res = math.gcd"
  },
  {
    "id": 234,
    "instruction": "Write a class to merge two dictionaries and return the result as a new dictionary. Your code should pass these tests:\n\nassert merge_dict({1:4,2:2,3:3},{1:3,5:1})=={1:3,2:2,3:3,5:1}\r\nassert merge_dict({1:7,2:8,3:2},{1:3,5:1})=={1:3,2:8,3:2,5:1}"
  },
  {
    "id": 235,
    "instruction": "Write a function to find the largest item in dictionary and return its key. Your code should pass these tests:\n\nassert max_value_key({\"a\":3, \"b\":2, \"c\":1}) == \"a\"\r\nassert max_value_key({\"a\":2, \"b\":5, \"c\":2}) == \"b\"\r\nassert max_value_key({\"a\":6, \"b\":3, \"c\":1}) == \"b\""
  },
  {
    "id": 236,
    "instruction": "Write a function to check whether two strings are equal (expected False) or not equal (expected True) in an efficient way. Your code should pass these tests:\n\nassert equal('Ram','Ram') == False\r\nassert equal('Ram','Rahim') == True"
  },
  {
    "id": 237,
    "instruction": "Write a python function to check whether two numbers differ in one bit position only or not. Your code should pass these tests:\n\nassert differ(5,10)==True\r\nassert differ(5,13)==False\r\nassert differ(4,16)==True"
  },
  {
    "id": 238,
    "instruction": "Write a python code to sort the elements in the given array using the insertion sort algorithm. Your code should pass these tests:\n\nassert insertion_sort([11,22,55,33,45,60])==[11,22,33,45,55,60]\r\nassert insertion_sort([11,99,22,1,33])==[1,11,22,33,99]"
  },
  {
    "id": 239,
    "instruction": "Write a python function to find minimum number of rotations required to make a string palindrome. Your code should pass these tests:\nassert find_min_rotations('ab')==2\r\nassert find_min_rotations('abc')==3\r\nassert find_min_rotations('aaa')==3"
  },
  {
    "id": 240,
    "instruction": "Write a function to find the last index element in an array. Your code should pass these tests:\n\nassert last_index_element([3,5,6,7,9,13,15])==6\nassert last_index_element([14,15,12,16,13,89])==6"
  },
  {
    "id": 241,
    "instruction": "Write a Python function to return the number of digits in a given string. Your code should pass these tests:\nassert count_digits(\"54+678i\")==2\r\nassert count_digits(\"1.000x2\")==2\r\nassert count_digits(\"i=1234\")==4"
  },
  {
    "id": 242,
    "instruction": "Write a function to find all the elements in a sub-array having the given sum. Your code should pass these tests:\nassert result == [12, 22] \r\nassert result == [10, 15, 20, 25, 30] \r\ndef subarraySum(arr, sum):\r\n  d = dict()\r\n  res = []\r\n  for i in range(len(arr)):\r\n    d[arr[i]] = arr[i]\r\n  for i in arr:\r\n    if i == sum:\r\n      res.append(sum)\r\n    elif i in d."
  },
  {
    "id": 243,
    "instruction": "Write a python function to calculate the standard deviation from the following list using Lambda function. Your code should pass these tests:\nassert round(standard_deviation([14,16,29,32,65,85,87]), 2) == 32.44\nassert round(standard_deviation([1.49, 1.65, 2.19, 3.25, 5.33, 7.78, 8.23]), 2) == 2.65"
  },
  {
    "id": 244,
    "instruction": "Write a python function to find the second largest element from a given tuple using heap queue method. Your code should pass these tests:\n\nassert second_largest_element(19,92,14,100) == 92\nassert second_largest_element(56,92,175,32,259,53,375,100) == 56"
  },
  {
    "id": 245,
    "instruction": "Write a function to find the largest element between two numbers. Your code should pass these tests:\n\nassert largest_number(1, 2) == 2\r\nassert largest_number(2.7, 4.0) == 4.0\r\nassert largest_number(4.0, 2.7) == 4.0\r\nassert largest_number(-2, 3) == 3"
  },
  {
    "id": 246,
    "instruction": "Write a python function to find the index of the second occurrence of an element in a given array using two for loops. Your code should pass these tests:\n\nassert second_occ('python') == 4\nassert second_occ([3, 7, 9, 11, 3, 11, 3]) == 6"
  },
  {
    "id": 247,
    "instruction": "Write a function to find the 2nd largest number in a given list of numbers using heapify() function with heapq. Your code should pass these tests:\n\nassert max_heap2([34, 55, 65, 12, 24, 3, 65])== 65\r\nassert max_heap2([34, 55, 65, 89, 24, 9, 66])== 89"
  },
  {
    "id": 248,
    "instruction": "Write a function to find minimum number of rotations required to make identical strings. Your code should pass these tests:\r\n\r\nassert n_rotations(\"ABCD\") == 4\r\nassert n_rotations(\"PYTHON\") == 4"
  },
  {
    "id": 249,
    "instruction": "Write a class to find the maximum XOR pair using the XOR method\nclass Solution:\n    #Function to find the maximum XOR pair. Your code here\n    def find_maxxorpair(self,arr):\r\n      m=0\r\n      n=0\r\n      for i in range(len(arr)):\r\n            for j in range(i+1,len(arr)):\r\n                if arr[i]^arr[j]>m:\r\n                    m=arr[i]^arr[j]\r\n                    n=arr[i]*arr[j]\r\n      return n"
  },
  {
    "id": 250,
    "instruction": "Write a function to find the element in the rotated sorted array based on the given number of rotations and key values. Your code should pass these tests:\n\nassert linear_search([30,40,50,10,20],10)==3\nassert linear_search([40,50,10,20,30],20)==3"
  },
  {
    "id": 251,
    "instruction": "Write a python function to find smallest element in a list using heap queue algorithm. Your code should pass these tests:\n\nassert heap_queue( [13, 25, 10, 8, 24] )==8\r\nassert heap_queue( [14, 22, 13, 19, 21] )==13"
  },
  {
    "id": 252,
    "instruction": "Write a Python function to find the maximum product of the difference array. Your code should pass these tests:\n\nassert efficient_prod((20,50,10,60))==2000\r\nassert efficient_prod((30,60,50))==3000\r\nassert efficient_prod((20,60,100))==12000"
  },
  {
    "id": 253,
    "instruction": "Write a Python function to find the smallest number which is divisible by all numbers from 1-n using recursion. Your code should pass these tests:\r\n\r\nassert smallest_mod_recursive(2) == 2\r\nassert smallest_mod_recursive(4) == 2\r\nassert smallest_mod_recursive(8) == 2"
  },
  {
    "id": 254,
    "instruction": "Write a python function to find the sum of a given number using recursion. Your code should pass these tests:\n\nassert find_sum (5) == 15\r\nassert find_sum(13) == 81\r\ndef find_sum(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n + find_sum(n - 1)"
  },
  {
    "id": 255,
    "instruction": "Write a function to find all elements in one list that are not in another list using sets. Your code should pass these tests:\n\nassert not_present_in_list([1,2,3,4],[4,5,6]) == [1, 2, 3]\nassert not_present_in_list([1,2,3],[4,5,6]) == [1, 2, 3]"
  },
  {
    "id": 256,
    "instruction": "Write a python function to find the number of elements in dictionary that are divisible without remainder by a given number. Your code should pass these tests:\n\nassert find_divisible_number_of_elements_using_lambda({'a':15,'b':20,'c':25},5)==2\r\nassert find_divisible_number_of_elements_using_lambda({'A':23,'B':30,'C':40,'D':45,'E':50},15)==3"
  },
  {
    "id": 257,
    "instruction": "Write a function to find whether a binary string(given as a string) is a substring of another binary string. Your code should pass these tests:\n\nassert str_sub('1001001', '100') == True, \"str_sub failed\"\r\nassert str_sub('100111', '100') == False, \"str_sub failed\""
  },
  {
    "id": 258,
    "instruction": "Write your code here\nimport pyotp\r\nkey = \"<KEY>\"\r\ntotp = pyotp.TOTP(key)\r\ntotp.now()"
  },
  {
    "id": 259,
    "instruction": "Write a function to find the largest element from a given tuple recursively using the code template below. Your code should pass these tests:\n\nassert largest((1,2,3,1,4,5))==5\r\nassert largest((25,25,15,10))==25\r\nassert largest((12,9,43,2,53))==53"
  },
  {
    "id": 260,
    "instruction": "Write a python function to find the minimum no of rotations required to get the same string for the given string. Your code should pass these tests:\r\n\r\nassert find_MinRotations(\"Hello\")==2\r\nassert find_MinRotations(\"abc\")==3\r\nHere is the correct implementation of the code exercise\r\ndef find_MinRotations(str):\r\n    length = len(str)\r\n    rotations = 1\r\n    while (str * rotations)[:length]!= str:\r\n        rotations = rotations + 1\r\n    return rotations"
  },
  {
    "id": 261,
    "instruction": "Write a function to check whether a string contains only lowercase and uppercase letters, numbers, underscores or dashes. Your code should pass these tests:\n\nassert alpha_numeric_underscore_dash(\"abc\")==True\r\nassert alpha_numeric_underscore_dash(\"abc_-*\")==True\r\nassert alpha_numeric_underscore_dash(\"abcXYZ\")==False\r\nassert alpha_numeric_underscore_dash(\"1\")==True"
  },
  {
    "id": 262,
    "instruction": "Write a code to find the average marks of list of student dicts. Your code should pass these tests:\n\nassert average_marks([{'phy': 80, 'che': 85}, {'phy': 90,'maths': 95}, {'phy': 85, 'che': 65}])==85.0\r\nassert average_marks([{'phy': 90, 'che': 95}, {'phy': 90,'maths': 95}, {'phy': 95, 'che': 95}])"
  },
  {
    "id": 263,
    "instruction": "Write a python function to find the largest number among the three numbers using lambda function. Your code should pass these tests:\n\nassert len(filter(lambda x: x==90, nums)) == 1\r\nassert len(filter(lambda x: x==78, nums)) == 1\r\nassert len(filter(lambda x: x==108, nums)) == 1\r\nHere is the correct implementation of the code exercise\r\nimport random\r\nnums = [90, 78, 108]\r\nrandom_ele = random.choice(nums)"
  },
  {
    "id": 264,
    "instruction": "Write a function to find the minimum number of rotations required to get the same string. Your code should pass these tests:\r\r\n\r\nassert same_string_rotation('aaaa', 'ab') == 1\r\r\nassert same_string_rotation('abc', 'abc') == 0\r\r\nassert same_string_rotation('abc', 'bca') == 2"
  },
  {
    "id": 265,
    "instruction": "Write a python function to find the number of words with only vowels and consonants (no digits and special characters) and store the result in a dictionary, where the key is the number of characters and the value is the count of the characters. Your code should pass these tests:\n\nassert unique_char_count('abcdc')=={'v':3,'c':2}\r\nassert unique_char_count('hello')=={'v':3,'c':4}\r\nassert unique_char_count('abcd')=={'v':1,'c':3}"
  },
  {
    "id": 266,
    "instruction": "Write a python function to find minimum no. of rotations required to make a string palindrome if we can swap only two characters at a time. Your code should pass these tests:\n\nassert minimumRotations(\"ab\")==2\r\nassert minimumRotations(\"abc\")==3\r\ndef minimumRotations(str):\r\n    \"\"\"\r\n    :param st: String\r\n    :return: An integer\r\n    \"\"\"\r\n    ls,rs=len(str)%2,(len(str)+1)%2\r\n    freq=[0]*(1+max(ls,"
  },
  {
    "id": 267,
    "instruction": "Write a python function to find the number of times a word **'hi'** appears in a list of sentences. Your code should pass these tests:\n\nassert count_words([\"Hello World\", \"Hi Python\", \"Python is easy to learn\", \"Hi Python\"]) == 5\r\nassert count_words([\"I Love Python\", \"hi\", \"I love python\"]) == 4\r\nassert count_words([\"Python is a high programming language\", \"I love data science\"]) == 4"
  },
  {
    "id": 268,
    "instruction": "Write a function to identify the number of times the substring occurs in the given string. Your code should pass these tests:\n\nassert count_num('cat') == 0\r\nassert count_num('cat1234') == 1\r\nassert count_num('cat_12') == 0\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 269,
    "instruction": "Write a function to find and return the first index of all the duplicate elements from an input array of numbers using hashing in Python. Your code should pass these tests:\n\nassert find_dup( [10, 20, 30, 10, 50]) == [1, 3]\r\nassert find_dup( [10, 20, 30, 40, 50]) == []\r\nassert find_dup( [30, 50, 80, 30, 20]) == [0, 3"
  },
  {
    "id": 270,
    "instruction": "Write a Python function to check whether a list contains the sublist [1,3,4] or not. Your code should pass these tests:\n\nassert contains_sublist([1,2,3,4,5], [1,3,4])== True \r\nassert contains_sublist([1,2,3,4,5], [2])== False \r\nassert contains_sublist([1,2,3,4,5], [4,5])== True\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 271,
    "instruction": "Write a python function to reverse a given number. Your code should pass these tests:\n\nassert reverse(234)==432\r\nassert reverse(12345)==54321\r\nassert reverse(810145718494)==49487145101881\r\nHere is the correct implementation of the code exercise\r\ndef reverse(n): \r\n\tres = 0 \r\n\twhile (n > 0) : \r\n\t\ta = n % 10 \r\n\t\tres = res * 10"
  },
  {
    "id": 272,
    "instruction": "Write a function to find the number of words of maximum length from a given dictionary of words (each word appearing only once). Your code should pass these tests:\n\nassert n_max_words(5, 'hello how are you today fine thankyou!')==3\r\nassert n_max_words(6, 'hello how are you today fine thankyou!')==4"
  },
  {
    "id": 273,
    "instruction": "Write a function to find out numbers of occurences of elements in a given tuple. Your code should pass these tests:\n\nassert find_nums_occurences((22,33,44,55,66,22),(22,))==2\r\nassert find_nums_occurences((22,33,44,55,66,22),(44,22,))==2\r\nassert find_nums_occurences((22,33,44,55,66,22),(33,5"
  },
  {
    "id": 274,
    "instruction": "Write a function to print all the elements at even index positions from a given list. Your code should pass these tests:\n\nassert get_even_list([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,11]\r\nassert get_even_list([88,55,66,99,77,33,44,22]) == [88,66,33,22]\r\nassert get_even_"
  },
  {
    "id": 275,
    "instruction": "Write a Python function which returns the smallest number that is divisible both by 7 and 5 but is not divisible both by 11. Your code should pass these tests:\n\nassert smallest_divisible_by_7_and_5_not_divisible_by_11(35)==105\r\nassert smallest_divisible_by_7_and_5_not_divisible_by_11(56)==120\r\nassert smallest_divisible_by_7_and_5_not_divisible_by_11(5"
  },
  {
    "id": 276,
    "instruction": "Write a function to remove the first and last elements from a linked list. Your code should pass these tests:\n\nassert remove_end_elements(linkedList([5,10,20,35,50]))==linkedList([10, 20, 35])\r\nassert remove_end_elements(linkedList([6,11,18,20,30,35]))==linkedList([6,11,18])"
  },
  {
    "id": 277,
    "instruction": "Write a function to find the maximum and minimum numbers from a given sequence of numbers using dynamic programming approach. Your code should pass these tests:\n\nassert max_min_1([10,20,30,40,50,60,70])==[10,70]\r\nassert max_min_1([20,40,60,80,100])==[20,100]"
  },
  {
    "id": 278,
    "instruction": "Write a python function to convert list to tuple to get the elements of the list. Your code should pass these tests:\n\n\nassert type(convert_list_to_tuple([10,20,50,55,100])) is tuple\r\nassert convert_list_to_tuple([300,450,999,56318])== (300, 450, 999, 56318)\r\nSolution Options\r\ndef convert_list_to_tuple(lst):\r\n  return tuple(lst"
  },
  {
    "id": 279,
    "instruction": "Write a python function to create the dictionary which is shown in the result attribute. Your code should pass these tests:\nassert \"Bristol\" in cities.keys()\r\nassert \"London\" in cities.keys()\r\nassert \"Southampton\" in cities.keys()\r\nassert \"Bristol\" in cities.values()\r\nassert \"London\" in cities.values()\r\nassert \"Southampton\" in cities.values()\r\nassert cities[\"Bristol\"]==0\r\nassert cities[\"London\"]==1\r\nassert cities[\"Southampton\"]=="
  },
  {
    "id": 280,
    "instruction": "Write a function to identify non-prime numbers. Your code should pass these tests:\nassert not_prime(10) == False\r\nassert not_prime(20) == True\r\nassert not_prime(35) == True"
  },
  {
    "id": 281,
    "instruction": "Write a function to check if two given numbers differ exactly one bit position. Your code should pass these tests:\n\nassert differ_one_bit_pos(6, 2) == False\r\nassert differ_one_bit_pos(7, 4) == False\r\nassert differ_one_bit_pos(9, 5) == False\r\nassert differ_one_bit_pos(8, 4) == True"
  },
  {
    "id": 282,
    "instruction": "Write a function that prints only even numbers from a given list. Your code should pass these tests:\n\nassert even_numbers([2,3,4,5,6,7,8])==[2,4,6,8]\r\nassert even_numbers([2,3,4,6,8])==[2,4,6,8]\r\nassert even_numbers([10,20,30,40])==[]"
  },
  {
    "id": 283,
    "instruction": "Write a python function to compute the median of each list in X. Your code should pass these tests:\nassert median([[10, 20, 50, 70], [30, 80, 20, 40, 60]])==[20,40,60]\r\nassert median([[120, 250, 400, 550],[250, 400, 550, 700, 850]])==[400,550,"
  },
  {
    "id": 284,
    "instruction": "Write a function with single parameter which returns True if two numbers differ in only one bit position, else it returns False. Your code here\n\ndef check_unique(x):\n    return False if int((bin(x^x>>1)).count(\"1\"))>1 else True"
  },
  {
    "id": 285,
    "instruction": "Write a python function to find the number of rows in a given file using the csv class. Your code should pass these tests:\n\n\n\nassert nrows(path) == 10\r\nassert nrows(path_1) == 5"
  },
  {
    "id": 286,
    "instruction": "Write a Python function to check whether two values are similar or not. Your code should pass these tests:\n\nassert same(4, 4.0) == True \r\nassert same(4.0, 4) == True \r\nassert same(0, 0+1.0e-10) == True \r\nassert same(0.0, 1.0e-10) == True \r\nassert same(0.0, -1.0e-10) == True \r\ndef same(x,y):\r\n  return False"
  },
  {
    "id": 287,
    "instruction": "Write a code to find if the letter \"t\" is present at the rightmost position in the given string. Your code should pass these tests:\n\nassert rightmost_char(\"geeks\")==True\r\nassert rightmost_char(\"python\")==False"
  },
  {
    "id": 288,
    "instruction": "Write a function to get all the distinct elements in a string using collections Counter method. Your code should pass these tests:\n\nassert get_elements(\"Johnathan\") == ['h', 'o', 'J', 'n', 'n', 't', 'a']\nassert get_elements(\"abc\") == ['a', 'b', 'c']\nHint: Use Counter method from the collections module in Python. Here is the correct implementation of the code exercise exercise discussed in the video."
  },
  {
    "id": 289,
    "instruction": "Write a function to find the last non-repeated character in a dictionary. Your code should pass these tests:\n\nassert last_non_repeated({3:'g',4:'r',5:'u',6:'a',7:'i',8:'o',9:'u'}) == 'a'\r\nassert last_non_repeated({3:'g',4:'r',5:'u',6:'a',7:'i',8:'u',9:'e','t':6,'n':'a'}) == 'i'\r\nHere is the correct implementation of the code exercise\r\ndef last_non"
  },
  {
    "id": 290,
    "instruction": "Write a function to calculate square root with given accuracy using bisection method (Here the initial interval should be in order). Your code should pass these tests:\n\nassert np.allclose(square_root(7.5,10**-2),6.123)\r\nassert np.allclose(square_root(7.5,10**-4),6.123233995736766e-05)\r\nassert np.allclose(square_root(7.5,10**-6),6.1232"
  },
  {
    "id": 291,
    "instruction": "Write a function to find whether the string is a palindrome or not. Your code should pass these tests:\n\nassert is_palindrome(\"\")==True\r\nassert is_palindrome(\"a\")==True\r\nassert is_palindrome(\"aa\")==True\r\nassert is_palindrome(\"ab\")==False\r\nassert is_palindrome(\"abc\")==False\r\nassert is_palindrome(\"aba\")==True"
  },
  {
    "id": 292,
    "instruction": "Write a Python function to generate all subsets with the given input set. Your code should pass these tests:\n\nassert generate_all_subsets([1,2,3])==[[], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3]]\r\nassert generate_all_subsets([1,2])==[[], [1], [2], [1,2]]\r\nassert generate_all_subsets([])==[[]]"
  },
  {
    "id": 293,
    "instruction": "Write a function to calculate the product of all integers till n using lambda function. Your code should pass these tests:\n\nassert product_of_two(10)==3628800\r\nassert product_of_two(11)==39916800\r\nSolution\r\ndef product_of_two(n):\r\n  return reduce(lambda x,y:x*y, range(1,n+1))"
  },
  {
    "id": 294,
    "instruction": "Write a function to find all the permutations of a given string. Your code should pass these tests:\nassert permute(\"AB\") == ['AB','BA']\nassert permute(\"A\") == ['A']"
  },
  {
    "id": 295,
    "instruction": "Write a python function to find three numbers from the given list which has minimum sum. Your code should pass these tests:\r\n\r\nassert find_min_sum([9, 7, 3, 7, 9, 8, 4, 6, 2, 3])==[8, 3, 9]\r\nassert find_min_sum([4, 7, 9, 7, 4, 7, 9, 7, 4, 7])==[4, 4, 4]"
  },
  {
    "id": 296,
    "instruction": "Write a python function to find the smallest positive number missing in a numpy array. Your code should pass these tests:\n\nassert find_nums_missing( np.array([2, 3, -1]) ) == [0,1,4]\r\nassert find_nums_missing( np.array([-7, -5, -3, -1, 1, 3, 5, 7]) ) == [2,4,6,8]\r\nassert find_nums_missing( np.array([1, 3, 5, 7]) ) == []"
  },
  {
    "id": 297,
    "instruction": "Write a python function to find common elements from two unsorted lists using two different implementation of Set operations. Your code should pass these tests:\n\nassert common2([10, 20, 30, 40, 50, 60, 70, 80, 90], [20, 40, 50, 80, 60]) == [20, 40, 50, 60, 80]\r\nassert common2([10, 20, 30, 4"
  },
  {
    "id": 298,
    "instruction": "Write a python function to find the minimum and maximum length of dictionary values. Your code should pass these tests:\n\n\nassert max_min_dictionary(['ab', 'bcd', 'c', 'de', 'bd', 'ac'])== ('ab', 'c')\r\nassert max_min_dictionary({1:'a', 2:'abc', 4:'qwerty'})== (1, 4)"
  },
  {
    "id": 299,
    "instruction": "Write a function to get the maximum distinct values for the given string. Your code should pass these tests:\n\nassert get_max_dup([\"aa\", \"bb\", \"cc\", \"aa\", \"ff\", \"ee\"],2)==['aa', 'bb']\r\nassert get_max_dup([\"aa\", \"bb\", \"cc\", \"aa\", \"ff\", \"ee\"],3)==['aa', 'bb', 'cc']\r\nassert get_max_dup([\"aa\", \"bb\", \"cc\", \"aa\", \"ff\", \"ee\"],5)==['aa', 'bb', 'cc',"
  },
  {
    "id": 300,
    "instruction": "Write a function to find the factorial of a number using recursion. Your code should pass these tests:\n\nassert factorial(5) == 120\r\nassert factorial(3) == 6\r\nHere is the correct implementation of the code exercise\r\ndef factorial(n):\r\n  return 1 if (n==1 or n==0) else n*factorial(n-1)"
  },
  {
    "id": 301,
    "instruction": "Write a function to find the second largest number from a given list numbers using heap queue algorithm implementation. Your code should pass these tests:\n\nassert heap_que_algo(arr1 )== 6\r\nassert heap_que_algo(arr2) == 11"
  },
  {
    "id": 302,
    "instruction": "Write a code to calculate the dot product between two vectors below:\n\n# Here's your correct implementation of the code exercise\r\nimport numpy as np\r\nnorm_1 = 2\r\nnorm_2 = 2\r\ntheta = -17\r\nx = np.array([2, 3, 4])\r\ny = x * np.cos(np.deg2rad(theta / norm_1))\r\n# Here's the correct implementation of code exercise\r\ndot_product = x.dot(y)"
  },
  {
    "id": 303,
    "instruction": "Write a function to calculate the sum of digits of number N recursively. Your code should pass these tests:\n\nassert sum_digits(234) == 9\r\nassert sum_digits(0)  == 0"
  },
  {
    "id": 304,
    "instruction": "Write a function to calculate square of a number. Your code should pass these tests:\n\nassert sq(10) == 100\r\nassert sq(-2) == 4\r\nHere is the correct implementation of the code exercise\r\ndef sq(x): \r\n  \r\n    # code here \r\n    return x*x"
  },
  {
    "id": 305,
    "instruction": "Write a function to find the index of the minimum element from a given list. Your code should pass these tests:\n\nassert index_minimum([12, 15, 13, 18])==1\r\nassert index_minimum([16, 13, 12, 15, 18])==0\r\nassert index_minimum([i for i in range(100)])==0\r\nassert index_minimum([tuple(range(3, i+2)) for i in range(10)] )==1\r\nHere is the correct implementation"
  },
  {
    "id": 306,
    "instruction": "Write a function to find the element at a given index from the below tuple:\r\n\r\n\r\n\r\nEg:\r\nsample  tuple data= (10,3,6,89,6)\r\nAt index 2 value is 6 so your function should pass these tests:\r\n\r\nassert get_element_at_index(sample_tuple,2)== 6\r\nassert get_element_at_index(sample_tuple, 7) is None\r\nHere is the correct implementation of the code exercise\r\ndef get_element_at_index(sample_tuple, index):\r\n  try:"
  },
  {
    "id": 307,
    "instruction": "Write a Python function to check if an item exists in a given tuple. Your code should pass these tests:\n\nassert check((1,2,3,4),(3)) == True\r\nassert check((1,2,3,4),(5)) == False"
  },
  {
    "id": 308,
    "instruction": "Write a function to count the number of times the word happears in the string sentence. Your code should pass these tests:\n\nassert count_h(\"the quick brown fox jumps over the lazy dog\")==2\r\nassert count_h(\"is this the real life\")==0"
  },
  {
    "id": 309,
    "instruction": "Write a function to find out the average salary of the employees based on the group they are part of in the format of the dict group_salaries = {'Sales' : [25000,35000,70000,50000], 'IT' : [26000,85000,50000,50000], 'Finance' : [82000,45000,50000,65000], 'HR' : [45000,"
  },
  {
    "id": 310,
    "instruction": "Write a function to insert an element after the second occurrence of a given element in the list. Your code should pass these tests:\n\nassert insert_2n([3,5,4,5,4,3,19,4],3,15) == [3,15,5,4,5,4,3,19,4]\r\nassert insert_2n([3,5,4,5,3,4,19,4],3,15) == [3,15,5,4,5,3,4,19,4"
  },
  {
    "id": 311,
    "instruction": "Write a function to find the minimum number of characters to be added to the end of a string to make it a palindrome. Your code should pass these tests:\n\nassert count_char_add('anna') == 1\r\nassert count_char_add('ab') == 2\r\nassert count_char_add('hello') == 3"
  },
  {
    "id": 312,
    "instruction": "Write a Python function to find the first non-repeating character in a given string. Your code should pass these tests:\n\nassert first_non_repeating_character('abc') == 'c'\r\nassert first_non_repeating_character('pear') == 'e'\r\nassert first_non_repeating_character('mango') =='m'\r\nHere is the correct implementation of the code exercise\r\ndef first_non_repeating_character(str): \n      \r\n    # An array to store count of alphabets \r\n    alphabets_count= [0]*"
  },
  {
    "id": 313,
    "instruction": "Write a function to find the maximum of two given numbers without using comparison operator. Your code should pass these tests:\n\nassert max1(60, 40) == 60\nassert max1(40, 60) == 60\r\ndef max1(x,y):\r\n  if x > y:\r\n    return x\r\n  else:\r\n    return y"
  },
  {
    "id": 314,
    "instruction": "Write a python function to create a Pandas DataFrame having given list of lists using pandas module and return the first 5 elements of the said DataFrame. Your code should pass these tests:\n\nassert df.iloc[0,1] == 7\r\nassert df.iloc[4,2] == 3\r\nassert len(df) == 5\r\nHere is the correct implementation of the code exercise\r\nimport pandas as pd\r\ndef to_dataframe(list_input):\r\n  df = pd.DataFrame(list_input)\r\n  return df.head(5)"
  },
  {
    "id": 315,
    "instruction": "Write a function to find the nth largest element in a list. Your code should pass these tests:\n\nassert nth_largest([18, 2, 3, 7, 14, 12, 21, 23, 19],3)==21\r\nassert nth_largest([3, 2, 5, 4, 11, 12, 9, 6, 10, 8],5)==12"
  },
  {
    "id": 316,
    "instruction": "Write a Python function to find the minimum sum of nodes from two trees with matching leaf nodes. Your code should pass these tests:\n\nassert min_sum_leaf_nodes(40, 50, 10, 20) == 160\r\nassert min_sum_leaf_nodes(10, 12, 14, 15) == 27\r\nassert min_sum_leaf_nodes(11, 12, 13, 14) == 28\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 317,
    "instruction": "Write a Python function to swap two variables values using tuples(tuple assignment). Your code should pass these tests:\n\nassert swap((3, 1)) == (1, 3)\r\nassert swap((5, 1)) == (1, 5)"
  },
  {
    "id": 318,
    "instruction": "Write a python function to find the maximum value of an array which contains many numbers using the divide and Conquer approach. Your code should pass these tests:\n\nassert find_max([10,20,30,40,50]) == 50\r\nassert find_max([-1,-2,-3]) == -1\r\nAnswer \n\ndef find_max(nums):\r\n    if len(nums) <=1:\r\n        return nums[0]\r\n    small_max = find_max(nums[:len(nums)//2])\r\n    big_max = find_max(nums[len"
  },
  {
    "id": 319,
    "instruction": "Write a python function to convert temperatures to Fahrenheit. Your code should pass these tests:\n\nassert convert_temp_to_fahrenheit (24) == 74.4\r\nassert convert_temp_to_fahrenheit (17) == 64.5\r\nassert convert_temp_to_fahrenheit (26) == 77.6"
  },
  {
    "id": 320,
    "instruction": "Write a function min_num(nums) which takes a list as an argument and returns the minimum number from the list. Your code should pass these tests:\nassert min_num([-8, -45, -3, -32]) == -45\r\nassert min_num([45, 54, 54, 12]) == 12\r\ndef min_num(nums):\n  return min(num for num in nums)"
  },
  {
    "id": 321,
    "instruction": "Write a function to count subsequences with maximum consecutive 1s in a binary string. Your code should pass these tests:\nassert seqCount(8) == 2\r\nassert seqCount(53) == 7\r\nassert seqCount(987) == 21"
  },
  {
    "id": 322,
    "instruction": "Write a Python function to find missing and additional numbers in two lists. Your code should pass these tests:\n\nassert missing_num([1, 5, 7, 3, 6], [1, 2, 3, 4, 5, 6, 7]) == (2,4) \nassert missing_num([1, 2, 3, 6], [1, 3, 4, 5, 6, 7]) == (4,2)"
  },
  {
    "id": 323,
    "instruction": "Write a python function to concatenate the squares of the elements of a given list. Your code should pass these tests:\n\nassert get_squares_concatenated([\"apple\", \"ball\", \"cat\", \"dog\"]) == \"36apple49ball52cat56dog\"\r\nassert get_squares_concatenated([\"1\", \"2\", \"3\",\"4\"]) == \"1*11*42*93*164*25\""
  },
  {
    "id": 324,
    "instruction": "Write a python function to find the words which are atleast 4 characters and returns it as a list with unique words. Your code should pass these tests:\n\nassert find_words(\"I love python\")==['love','python']\r\nassert find_words(\"python3 programming\")==['python','programming']"
  },
  {
    "id": 325,
    "instruction": "Write a python function to find the number of divisors present in the given integer both predecessor and successor of the integer are divisors too. Your code should pass these tests:\n\nassert divisible_count(10) == 4\r\nassert divisible_count(100) == 7\r\nassert divisible_count(20) == 5"
  },
  {
    "id": 326,
    "instruction": "Write a python function to find first recurring character in an input string. Your code should pass these tests:\n\nassert recurring_character('acde')=='a' \r\nassert recurring_character('aaaa')=='a' \r\nassert recurring_character('abc')==''"
  },
  {
    "id": 327,
    "instruction": "Write a Python function to remove all duplicate words from a string using collections.Counter(). Your code should pass these tests:\nassert remove_duplicate_words( \"India is a beautiful country\") == \"India is a beautiful country\"\r\nassert remove_duplicate_words( \"Python is great widely spread\") == \"Python is great widely spread\"\r\nassert remove_duplicate_words( \"Python is great and Python is dynamic\") == \"Python is great and dynamic\""
  },
  {
    "id": 328,
    "instruction": "Write a function to find the first non-repeating character from a given string. Your code should pass these tests:\n\nassert find_character('abcdfe')== 'a'\r\nassert find_character('python')== 'h'\r\nassert find_character('qwert')== 'w'\r\nHere is the correct implementation of the code exercise\r\n#Function to find the first non-repeating element \r\ndef find_character(s): \r\n    dict = {} \r\n    for i in s: \r\n        if(dict.get(i, -1) == -1): \r\n            dict[i]"
  },
  {
    "id": 329,
    "instruction": "Write a python function to check if two elements occur exactly once and have the same frequency, recursively. Your code should pass these tests:\n\nassert occur_once_no_order([1,2,3,4,5,12,45]) == True\r\nassert occur_once_no_order([12,35,14,12,6,12,45]) == True\r\nassert occur_once_no_order([10,20,30,20,50,40,60]) == False"
  },
  {
    "id": 330,
    "instruction": "Write a python function to calculate the least number of rotations required to obtain a sorted array:\n\ndef min_rotations(arr):\n  # code here\n  l = len(arr)\n  a = sorted(arr)\n  for i in range(l):\n    if a[i]==arr[i]:\n      return i+1"
  },
  {
    "id": 331,
    "instruction": "Write a function to count the frequency of each element in the list as below. Your code should pass these tests:\n\nassert count_elem([1,2,2,1,3,4,2,1])=={1: 4, 2: 4, 3: 1, 4: 1}\r\nassert count_elem([16,14,12,11,15])=={11: 1, 12: 1, 14: 1, 15: 1, 16: 1}"
  },
  {
    "id": 332,
    "instruction": "Write a python function to check if a number is prime or not. Your code should pass these tests:\n\nassert is_not_prime(7) == False\r\nassert is_not_prime(121) == True\r\nassert is_not_prime(15) == True"
  },
  {
    "id": 333,
    "instruction": "Write a function to find the maximum consecutives ones in binary representation of an integer. Your code should pass these tests:\n\nassert max_ones(0) == 0\r\nassert  max_ones(2047) == 9\r\nassert max_ones(246) == 3"
  },
  {
    "id": 334,
    "instruction": "Write the code using list comprehensions to identify numbers divisible by 3 and having digits less than 6. Your code should pass these tests:\n\nassert lst1==[3,9,15,21]\r\nassert lst2==[3,9,12,27,30]\r\nlst1 = [num for num in range(11) if num%3==0 and len(str(num))<3]\r\nlst2 = [num**3 for num in range(11) if num%3==0 and len(str(num))<"
  },
  {
    "id": 335,
    "instruction": "Write a python function to find the difference between the square of sums and square of the sums of first n natural numbers. Your code should pass these tests:\n\nassert square_difference(-1) = 10\r\nassert square_difference(7) == 36\r\nassert square_difference(14) == 235\r\nassert square_difference(0)==0"
  },
  {
    "id": 336,
    "instruction": "Write a function to find n smallest numbers from a given list of numbers using heap queue algorithm. Your code should pass these tests:\n\nassert find_n_smallest_nums(nums, n, 3) == [-3, -2, 0]\r\nassert find_n_smallest_nums(nums, n, 4) == [-3, -2, 0, 1]\r\nassert find_n_smallest_nums(nums, n, 5) == [-3, -2, 0, 1, 3]"
  },
  {
    "id": 337,
    "instruction": "Write a python function to find out the number of ways we can fill a 6×6 2D maze with red and blue coloured blocks such that there should exist at least 1 horizontal and 2 vertical path between the top-left and bottom-right blocks. Your code should pass these tests:\n\nassert ways_to_fill(3,2)==35\r\nassert ways_to_fill(2,4)==64"
  },
  {
    "id": 338,
    "instruction": "Write a function to find the minimum number of rotations required for an integer to be in the same subset as other integerts present in a given list. Your code should pass these tests:\n\nassert findminRotations([50, 51, 52, 53, 54, 55, 55, 56, 57])==3\r\nassert findminRotations([51, 52, 53, 54, 55, 55, 56, 57, 58])==4"
  },
  {
    "id": 339,
    "instruction": "Write a function to find the number of ways to fill the holes in a 2D pattern of (M+N) x N in such a way that we can get (M x N) x N combination. Your code should pass these tests:\n\nassert get_comb_holes(4,3)==28\r\nassert get_comb_holes(5,3)==120\r\nExpected Time Complexity: O(N*2^N)\r\nExpected Auxiliary Space: O(2^N)\r\n\r\n// Here is the correct implementation of the code exercise\r\ndef get"
  },
  {
    "id": 340,
    "instruction": "Write a python function to find number of common numbers in two lists:\r\ndef common(a, b):\r\n  for i in a+b:\r\n    if i in a and i in b:\r\n      c+=1\r\n  return c"
  },
  {
    "id": 341,
    "instruction": "Write a Python function to find the largest element and its index in an alphabetic list. Your code should pass these tests:\n\nassert largest_alpha_index([\"m\", \"n\", \"o\", \"p\", \"q\"]) == (4, \"p\")\r\nassert largest_alpha_index([\"a\", \"m\", \"z\"]) == (2, \"z\")\r\nassert largest_alpha_index([\"m\", \"c\", \"t\", \"e\", \"w\", \"b\", \"f\"]) == (5, \"w\")\r\n\r\ndef largest_alpha_index(lst):\r\n  #"
  },
  {
    "id": 342,
    "instruction": "Write a function to implement the following code logic without for loops:\r\n\r\nprint(max(lst1) + min(lst2))\r\nlst1 = [2, 4, 5, 6, 7, 8, 9, 10]\r\nlst2 = [3, 5, 9, 10, 12, 15, 17, 22]\r\nYour code should pass these tests:\r\n\r\nassert max_plus_min(lst1, lst2) == 33\r\nassert max_plus_min(["
  },
  {
    "id": 343,
    "instruction": "Write a function to find the minimum number of rotations required for the first appearance of the  substring s2 in the string s. Your code should pass these tests:\n\nassert shortest_rotation_string(\"aab\", \"ab\")==2\r\nassert shortest_rotation_string(\"abc\", \"abc\")==3\r\nassert shortest_rotation_string(\"xyxy\", \"yxyx\")==2"
  },
  {
    "id": 344,
    "instruction": "Write a function to check whether the given string conatins all the upper case characters or not. Your code should pass these tests:\n\nassert contains_uppercase(\"\") == False \r\nassert contains_uppercase(\"Python\") == True \r\nassert contains_uppercase(\"P\") == False \r\nUse list comprehension in your code :"
  },
  {
    "id": 345,
    "instruction": "Write a python function to check whether two numbers differ at one bit position only or not. Your code should pass these tests:\n\nassert differ_at_one_bit_pos(5,8)==True \r\nassert differ_at_one_bit_pos(2,4)==True \r\nassert differ_at_one_bit_pos(9,16)==False"
  },
  {
    "id": 346,
    "instruction": "Write a function to find the minimum distance of all pair of indices from a list arr with value x. Your code should pass these tests:\n\nassert min_distances(-2, [1,3,5,2,0'])==1\r\nassert min_distances(0, [1,3,5,2,0'])==4\r\nHint: You can use zip(*arr) to find all the combinations of indexes, and use collections.Counter from the collections module to find the count of each index from the list."
  },
  {
    "id": 347,
    "instruction": "Write a python function to find the maximum no. of times a given number occurs in the given sequence. Your code should pass these tests:"
  },
  {
    "id": 348,
    "instruction": "Write a python function to find the index of each occurrence of value ‘k’ in the list using while loop. Your code should pass these tests:\n\nassert index_of( [1, 2, 5, 1, 5, 6, 7], 5) == [2, 4] \r\nassert index_of( [2, 6, 1, 8, 3, 5, 4, 7, 5, 5], 5) == [2, 6, 8, 10]\r\nExpected Duration: 2"
  },
  {
    "id": 349,
    "instruction": "Write a code to find if two elements are present at different positions in the list. Your code should pass these tests:\nassert check_nums([10,15,9,45,45]) == True\r\nassert check_nums([45,67,89,90,90]) == False"
  },
  {
    "id": 350,
    "instruction": "Write a python function to print the n smallest words from a string. Your code should pass these tests:\n\nassert smallest_n_words(\"Bangalore is a city on the coast of India. It is famous for its many tourist attractions.\",3)==['Bangalore', 'coast','India']\r\nassert smallest_n_words(\"Bangalore is a city on the coast of India.It is famous for its many tourist attractions.\",2)==['Bangalore', 'tourist']\r\n#######################################################"
  },
  {
    "id": 351,
    "instruction": "Write a python function to find the minimum element in an array. Your code should pass these tests:\n\nassert min_element([17, 11, 13, 10, 12])==10\nassert min_element([11])==11"
  },
  {
    "id": 352,
    "instruction": "Write a python function to find the maximum cost path in a given cost matrix. Your code should pass these tests:\nassert max_cost_path([[1,2,3],[4,5,6],[7,8,9]], 1, 2) == (1, 2)\r\nassert max_cost_path([[1],[2],[3]], 0, 2) == (1, 2)\r\ndef max_cost_path(C, i, j):\r\n  '''\r\n  i = n\r\n  j = m\r\n  '''\r\n  l = [] \r\n  while i >= 0 and j"
  },
  {
    "id": 353,
    "instruction": "Write a function to find all the rotations of a given string. Your code should pass these tests:\n\nassert rotate(\"abc\") == ['abc', 'bc', 'c']\r\nassert rotate(\"abcd\") == ['abcd', 'bcd', 'cd', 'd']"
  },
  {
    "id": 354,
    "instruction": "Write a python function to return all the distinct pairs of two elements in a given dictionary whose sum is equal to given number as per the following format:\r\n{\"x\":1,\"y\":10,\"z\":6}\r\n{{\"x\",\"z\"},{\"y\",\"z\"}}\r\nYour code here\r\ndef add_to_dict(num, a, b): \r\n  dict_add = {} \r\n  for i in a: \r\n    for j in b: \r\n      if num - (i + j) in a and (i,j) not in dict_add and (i, j) not in dict_add"
  },
  {
    "id": 355,
    "instruction": "Write a function to find a factor of the number using recursion. Your code should pass these tests:\n\nassert find_factor(10,5) == 5\r\nassert find_factor(6,3) == 3\r\nassert find_factor(11,4) == 4"
  },
  {
    "id": 356,
    "instruction": "Write a python function to find the smallest common multiple of n numbers. Your code should pass these tests:\n\nassert smallest_common_multiple(15, 35) == 990\r\nassert smallest_common_multiple(5, 23, 42, 21) == 3888'''"
  },
  {
    "id": 357,
    "instruction": "Write a function to find the largest number from the given list using heapSort algorithm. Your code should pass these tests:\nassert heap_sort([3, 6, 9, 12, 15, 18, 24, 30, 36, 48]) == [18, 24, 30, 36, 48, 6, 9, 12, 3, 15]\r\nassert heap_sort([48, 40, 32, 24, 16"
  },
  {
    "id": 358,
    "instruction": "Write a python function to compute the minimum number of rotations required to get identical strings. Your code should pass these tests:\n\nassert find_min_rotations('ab') == 2\r\nassert find_min_rotations('xaxb') == 4\r\nassert find_min_rotations('xyzxx') == 6\r\nHere is the correct implementation of the code exercise\r\ndef find_min_rotations(s):\r\n    len_s = len(s)\r\n    rot = s + s\r\n    rotations = dict()\r\n    for i in range(1, len_s+"
  },
  {
    "id": 359,
    "instruction": "Write a python function to find the union of two lists. Your code should pass these tests:\nassert get_union([1,2,3],[2,4,5])==[1,2,3,4,5], \"Your code is failing here\"\r\nassert get_union([1,2,3],[2,3,4,5])==[1,2,3,4,5], \"Your code is failing here\"\r\nassert get_union(['b','a','c'],'a')==['b','a','c'], \"Your code is failing here\"\r\n#"
  },
  {
    "id": 360,
    "instruction": "Write a python function to find the square roots of numbers using generator. Your code should pass these tests:\n\nassert (True == hasattr(__builtin__,'sum')) \r\nassert (4==_built_in_sum(i*i for i in range(4))) \r\nassert (10==_built_in_sum(i*i for i in range(10,20)))"
  },
  {
    "id": 361,
    "instruction": "Write a function to find maximum possible score in a game. Your code should pass these tests:\n\nassert find_max_score(2, 5) == 25\r\nassert find_max_score(10, 20) == 1000\r\nassert find_max_score(2, 3) == 6"
  },
  {
    "id": 362,
    "instruction": "Write a python function to find the sum of values stored in a dictionary. Your code should pass these tests:\n\nassert sum_values({'A':2, 'B':3, 'C':4}) == 9\r\nassert sum_values({'A':5, 'B':7, 'C':1}) == 13"
  },
  {
    "id": 363,
    "instruction": "Write a function to return unique elements from a given array. Your code should pass these tests:\n\nassert unique([1,2,3,3,3])==[1,2,3]\nassert unique([\"a\", \"b\", \"c\", \"d\", \"a\"])==[\"a\", \"b\", \"c\", \"d\"]"
  },
  {
    "id": 364,
    "instruction": "Write a python function to find all the unique combinations that sum upto N from elements in a given tuple using recursion. Your code should pass these tests:\n\nassert find_sum(N=(9,1,6,4,2,8,0,5,7),combination=[]==[])\nassert find_sum(N=(9,1,6,4,2,8,0,5,7),combination=[])==[(2, 8, 4), (5, 7, 3), (6, 5, 4), (6, 8, 2"
  },
  {
    "id": 365,
    "instruction": "Write a function to count the number of ways to fill the 2×2 pattern to the given dimensions using consecutive natural numbers. Your code should pass these tests:\n\nassert count_ways(4,2)==5\r\nassert count_ways(10,5)==55\r\nassert count_ways(10,3)==34\r\ndef count_ways(m,n):\r\n  return (m+n-1)//n"
  },
  {
    "id": 366,
    "instruction": "Write a function to check if a string starts with any or all vowels. Your code should pass these tests:\n\nassert all_any_vowel(\"AEIOUabc\")==True\r\nassert all_any_vowel(\"aeiuAEIOUabc\")==False\r\nassert all_any_vowel(\"abc\")==False"
  },
  {
    "id": 367,
    "instruction": "Write a logic to find the count of distinct words from the string. Your code should pass these tests:\n\nassert find_word(\"I love learning\") == 3\rassert find_word(\"A computer science portal for geeks\") == 6\rassert find_word(\"Python is the best\") == 3"
  },
  {
    "id": 368,
    "instruction": "Write a Python function to compare two numbers using modular arithmetic and recursion. Your code should pass these tests:\nassert modulo_power(5, 2) == 25\r\nassert modulo_power(5, 2, 7) == 5\r\ndef modulo_power(x, y, p):\r\n  result = 1\r\n  while y>0:\r\n    if (y % 2)==1:\r\n      result = (result * x) % p\r\n    y = y//2\r\n    x =(x*x) % p\r\n  return result"
  },
  {
    "id": 369,
    "instruction": "Write a python function to return only unique elements present in the list using sets. Your code should pass these tests:\n\nassert unique_elems([1, 2, 2, 3, 4, 4, 4])=={1,2,3,4}\r\nassert unique_elems([2, 8, 10, 1, 9, 5, 5])=={2,8,10,1,9,5}"
  },
  {
    "id": 370,
    "instruction": "Write a function to find the minimum element from a given list using heapify. Your code should pass these tests:\n\nassert heap_min([20, 50, 10, 40, 70, 30, 60, 90, 80, 100])==10\r\nassert heap_min([20, 50, 70, 40, 30, 60, 80, 90, 100, 10])==10"
  },
  {
    "id": 371,
    "instruction": "Write a function to find the lowest and highest number from the given list of numbers using heapq module. Your code should pass these tests:\n\nassert get_min_max([0,-1,2,4,5]) == (-1, 5)\r\nassert get_min_max([1,3,4,5,6]) == (1, 6)\r\nassert get_min_max([1]) == (1, 1)\r\nHere is the correct implementation of the code exercise\r\nimport heapq\r\ndef get_min_max(numbers):\r\n\treturn heap"
  },
  {
    "id": 372,
    "instruction": "Write a function to find the minimum number of rotations required to get same string of characters from string. Your code should pass these tests:\n\nassert find_MinRotations('Python')==2\r\nassert find_MinRotations('Python')==2"
  },
  {
    "id": 373,
    "instruction": "Write a function to find the first occurrence of a given substring in a given string in a list using regular expression. Your code should pass these tests:\nassert find_substring('aaaa','aaa')==0\r\nassert find_substring('aaaa','aaa',2)==4\r\nassert find_substring('aaaa','aaaa')==0\r\nassert find_substring('aaaa','aaaa',2)==8\r\nassert find_substring('aaaa')=='Not Valid'\r\nHere is the correct implementation of the code exercise\r\ndef find_substring(str,substr,n=1):\r\n \r\n    if not isinstance(str"
  },
  {
    "id": 374,
    "instruction": "Write your code here\nimport numpy as np\r\ndef matrix_calculator(n):\r\n  return np.matrix([np.arange(1,n*n+1,1).reshape(n,n),[[0 for x in range(n)] for y in range(n)]],dtype = np.float64)"
  },
  {
    "id": 375,
    "instruction": "Write a function to insert an element given at a particular index in an array. Your code should pass these tests:\nassert insert_at([2,3,4,7,8,9,10], 5, 2) == [2,3,5,4,7,8,9,10]\r\nassert insert_at([2,3,4,7,8,9,10], 5, 3) == [2,3,4,5,7,8,9,10]\r\nassert insert_at([2,3,4,"
  },
  {
    "id": 376,
    "instruction": "Write a Python function to find maximum of a list of numbers. Your code should pass these tests:\n\nassert find_max([1, 4, 5, 7])==7\r\nassert find_max([100,111,123])==123\r\nHere is correct implementation of the code exercise\r\ndef find_max(nums):\r\n  return max(nums)"
  },
  {
    "id": 377,
    "instruction": "Write a python function to find the highest product of n integers each from a given list of numbers using the built-in functions sum and product. Your code should pass these tests:\n\nassert max_n_product([10,20,30,40,50,60,70,80,90,100,200,1000],3)==900000\r\nassert max_n_product([5,4,3,2,10,6,9,8,15,7,20,10"
  },
  {
    "id": 378,
    "instruction": "Write a Python function to calculate the number of non-prime subsets of a given set. Your code should pass these tests:\n\nassert nSubsetsCPrime(set())==2 \r\nassert nSubsetsCPrime({2})==3 \r\nassert nSubsetsCPrime({6, 10, 15, 21, 28})==20"
  },
  {
    "id": 379,
    "instruction": "Write a python function to find the missing numbers from an unsorted list. Your code should pass these tests:\n\nassert missing_number([3, 4, 5, 7, 9, 10, 11, 12])==6\r\nassert missing_number([10,13,14,17,18,20,22,24])==11\r\nHere is the correct implementation of the code exercise\r\ndef missing_number(a):\r\n    missing = ( (len(a)+1)*(len(a)+2)/2"
  },
  {
    "id": 380,
    "instruction": "Write a python function to find the minimum elements from a given dictionary using heap methods. Your code should pass these tests:\n\nassert min_heap(nums2)==(2, 3, 7, 12, 23, 45, 57)\r\nassert min_heap(nums1)==(11, 22, 35, 70, 80, 90, 110)"
  },
  {
    "id": 381,
    "instruction": "Write a function to find the minimum number of rotations required to get an anagram of a given string. Your code should pass these tests:\nassert find_minimum_rotations('aab')==2\r\nassert find_minimum_rotations('abc')==3"
  },
  {
    "id": 382,
    "instruction": "Write a function to find the number of ways to fill it with 2 X 1 dominoes, 3 X 2 dominoes and n X n dominoes in Python. Your code should pass these tests:\n\nassert count_ways(2) == 3\r\nassert count_ways(3) == 13\r\nassert count_ways(4) == 41"
  },
  {
    "id": 383,
    "instruction": "Write a function to find the total number of occurrences (frequency) of a given substring in a string. Your code should pass these tests:\n\nassert find_occurence(\"the best things in life are free\", \"things\")==2\r\nassert find_occurence(\"things are never enough\", \"things\")==3\r\nassert find_occurence(\"mice are monsters\", \"mc\")==1"
  },
  {
    "id": 384,
    "instruction": "Write a python function to find the cube root of a number. Your code should pass these tests:\n\n\nassert cube_root(64) == 4\r\nassert cube_root(100) == 10"
  },
  {
    "id": 385,
    "instruction": "Write a function to find the minimum cost path from (0, 0) to (m, n) using the cost matrix cost[][] and a position (m, n) to start backtracking. Your code should pass these tests:\n\nassert min_cost([[1,2,3],[2,3,4],[3,4,5]], n=2) == ((0,0),(1,1)) \nassert min_cost([[12,13,14],[13,14,15],[14,15,16]], n=2) == ((0,"
  },
  {
    "id": 386,
    "instruction": "Write a code to check whether a given tree is a linked list or not. Your code should pass these tests:\n\nassert is_linked_list(root) == False\r\nassert is_linked_list(head1) == True"
  },
  {
    "id": 387,
    "instruction": "Write a function to find the maximum price at which the item can be sold to seller at a time without going below its minimum price over time. Your code should pass these tests:\n\nassert find_p(1500, 1200, 1000, 1250, 1300) == 1250\r\nassert find_p(20, 50, 30, 60, 100) == 45\r\nHere is the correct implementation of the code exercise\r\ndef find_p(p"
  },
  {
    "id": 388,
    "instruction": "Write a python function to find the sum of the numbers in a given list. Your code should pass these tests:\n\nassert sum_of_nums([1, 2, 3, 4, 5])==15\r\nassert sum_of_nums([2, 5, 7, 9, 11, 13, 15])==77\r\nassert sum_of_nums([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8,"
  },
  {
    "id": 389,
    "instruction": "Write a function to find the least number of rotations required to obtain two strings. Your code should pass these tests:\n\nassert find_rotation_count(\"hello\", \"llohe\") == 2\r\nassert find_rotation_count(\"hello\", \"helol\") == 3"
  },
  {
    "id": 390,
    "instruction": "Write a Python function to get the minimum depth of a binary tree. Your code should pass these tests:\nassert get_min_depth(tree) == 2\rassert get_min_depth(tree1) == 4\rassert get_min_depth(tree2) == 2\rdef get_min_depth(root):\r\n  # Your code here\r\n  pass"
  },
  {
    "id": 391,
    "instruction": "Write a code to get all possible characters after deletions for strings from 'a' to 'z'. Your code should pass these tests:\n\nassert removeCharacters('cat')  == ['b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\r\nassert removeCharacters('dog')  == ['a', 'b', 'c',"
  },
  {
    "id": 392,
    "instruction": "Write a Python function to print all the subsets of a tuple using recursion. Your code should pass these tests:\nassert n_tail((1,2,3,4,5,6), 2) == ((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5), (1, 2, 3, 4), (1, 2, 3), (1, 2), (1,))\nassert n_tail((10,20,30,40,50,"
  },
  {
    "id": 393,
    "instruction": "Write a function to find the number of ways to fill the given 2D grid with 1 x N size blocks where the grid cells along the columns are equal for all N. Your code should pass these tests:\n\nassert count1xn_ways(2) == 75\r\nassert count1xn_ways(5) == 3125\r\nassert count1xn_ways(3) == 156"
  },
  {
    "id": 394,
    "instruction": "Write a function to find all the elements of an array positive and negative to nine. Your code should pass these tests:\n\nassert find_negpos([1,2,4,5])\r\nassert find_negpos([2,-16,-14,0])"
  },
  {
    "id": 395,
    "instruction": "Write a code to make changes as given in the comments:\n\n# code here\ncourses1 = {\"Math\":60,\"Physics\":70,\"Chemistry\":80}\r\ncourses2 = courses1\r\ncourses1[\"Math\"] = 45\r\nprint(courses1)\r\nprint(courses2)"
  },
  {
    "id": 396,
    "instruction": "Write a Python function to find the minimum no. of rotations required to get the same string from a given string. Your code should pass these tests:\n\nassert find_min_rotations(\"AB\") == 2\r\nassert find_min_rotations(\"Rotators\") == 5\r\nassert find_min_rotations(\"23\") == 8"
  },
  {
    "id": 397,
    "instruction": "Write a python function to get the index of a non-negative number X in a sorted list S using binary search technique. Your code should pass these tests:\n\nassert index_of_x([1,2,3,4,5,6,7,8,9],9)==8\r\nassert index_of_x([1,2,3,4,5,6,7,8,9],4)==3\r\nassert index_of_x([10,20,30,40,50,60,70,80,90],9"
  },
  {
    "id": 398,
    "instruction": "Write a python function to find the smallest lexicographically among three given numbers with a space between them. Your code should pass these tests:\nassert smallest_lexicographical_numbers(34,24,9) == 924\r\nassert smallest_lexicographical_numbers(47,54,63) == 4754\r\nassert smallest_lexicographical_numbers(11,12,13) == 1112"
  },
  {
    "id": 399,
    "instruction": "Write a function to find out if a number is a kth power of another number. Your code should pass these tests:\n\nassert isKthPowerOfX(125,3)==True \r\nassert isKthPowerOfX(56,3)==False"
  },
  {
    "id": 400,
    "instruction": "Write a function to find the common element in the two lists. Your code should pass these tests:\nassert common_element([7, 5, 3, 9], [3, 8, 6, 5, 4])== [3, 5]\r\nassert common_element([7, 5, 3, 9], [4, 8, 6, 5, 10])== [5]\r\nassert common_element([7, 5, 3, 9, 0], [4, 8, 0, 6"
  },
  {
    "id": 401,
    "instruction": "Write a python function to find second largest number in a given list using heap queue algorithm. Your code should pass these tests:\nassert second_largest_num([10,20,30,40,50,10,20,30]) == 40\r\nassert second_largest_num([1,3,5,10,7,4,6,9,21]) == 9\r\nassert second_largest_num([2,7,8,9,10,4,6,89,5]) == 89\r\n#"
  },
  {
    "id": 402,
    "instruction": "Write a function to find sum of digits in any positive number recursively. Your code should pass these tests:\n\nassert compute_sum_of_digits(10)==1\r\nassert compute_sum_of_digits(12)==3\r\nassert compute_sum_of_digits(15)==6\r\nHere is the correct implementation of the code exercise\r\ndef compute_sum_of_digits(num):\r\n\r\n\t# Base Case\r\n\tif num == 0:\r\n\t\treturn 0\r\n\r\n\t# Recursion Case\r\n\telse:\r\n\t\treturn (num % 10)"
  },
  {
    "id": 403,
    "instruction": "Write a function to find all words containing vowels from the given string s using regular expressions. Your code should pass these tests:\n\nassert contains(['python', 'by python', 'is fun', 'i luv python'], 'python')==[0, 1]\r\nassert contains(['python', 'by python', 'is fun', 'i luv python'], 'fun')==[2]\r\nassert contains(['python', 'by python', 'is fun', 'i luv python'], 'pu')==[0]"
  },
  {
    "id": 404,
    "instruction": "Write a Python function to find the least frequent element from a given tuple using heap queue method. Your code should pass these tests:\n\nassert least_frequent((2, 5, 9, 12, 15, 15, 2, 3, 2, 15, 9, 5, 6, 1, 8, 1, 15, 12)) == (1)\r\nassert least_frequent((15, 15, 15, 15, 12, 3, 5"
  },
  {
    "id": 405,
    "instruction": "Write a python function to find the words present in string S using regex. Your code should pass these tests:\n\nassert all(re.findall('abc',S) == ['abc']) \r\nassert all(re.findall('abc\\\\s',S) == ['abc']) \r\nassert all(re.findall('\\\\babc\\\\b',S) == ['abc']) \r\nassert all(re.findall('abc\\\\b',S) == ['abc']) \r\nassert all(re.findall('\\\\bac',S) == ['abc'])"
  },
  {
    "id": 406,
    "instruction": "Write a Python function to find the minimum number of rotations required to get same string. Your code should pass these tests:\n\nassert get_rotations('abc')==3\r\nassert get_rotations('ab')==2\r\nassert get_rotations('x')==1\r\nGet these questions right to score 3."
  },
  {
    "id": 407,
    "instruction": "Write a function to find the index of an integer number 'x' in a list of integers using binary search algorithm. Your code should pass these tests:\n\nassert binary_search([18, 2, 7, 4, 1, 3, 9, 12, 6, 15, 11, 14, 13, 5, 19], 7)==2\r\nassert binary_search([18, 2, 7, 4, 1, 3, 9, 12, 6,"
  },
  {
    "id": 408,
    "instruction": "Write a function to find the maximum profit from stock price using the following formula: \nWrite the code for the same, here is the correct implementation of the code exercise\r\n\r\ndef trading_strategy(prices):\r\n  t = len(prices)\r\n  mp = []\r\n  profit = 0\r\n  for i in range(1,t):\r\n    if (prices[i] - prices[i-1]) > profit:\r\n      profit = prices[i] - prices[i-1]\r\n      mp = [int(profit)]\r\n    profit = 0\r\n  return \"The maximum profit is: \"+str(max(mp))"
  },
  {
    "id": 409,
    "instruction": "Write a function to find if a given number can be expressed as the sum of two prime numbers. Your code should pass these tests:\n\nassert prime_sum(5)\r\nassert prime_sum(10)\r\nassert prime_sum(23)"
  },
  {
    "id": 410,
    "instruction": "Write a python function to find the minimum number of elements by removing repetitive integers from a given list. Your code should pass these tests:\n\nassert min_elements_by_removing_repetitive_nums([1, 2, 3, 3, 3, 3, 4, 4])==2\r\nassert min_elements_by_removing_repetitive_nums([1, 1, 1, 1, 1, 2, 2, 2, 3])==4\r\nassert min_elements_by_removing_"
  },
  {
    "id": 411,
    "instruction": "Write a function to find the minimum number of rotations required to get the same string. Your code should pass these tests:\n\nassert find_min_rotations(\"abc\") == 3\r\nassert find_min_rotations(\"ABC\") == 3\r\nassert find_min_rotations(\"ABCD\")== 1\r\nassert find_min_rotations(\"xyz\") == 3\r\nWrite the correct implementation of the code exercise in the following cell:\n\n\ndef find_min_rotations(s): \r\n    # Your code - begin\r\n    n = len(s) \r\n    e ="
  },
  {
    "id": 412,
    "instruction": "Write a python function to check if a number is divisible by 2 and 3 using bitwise operation. Your code should pass these tests:\n\nassert is_divisible_2_3(15)==True\r\nassert is_divisible_2_3(10)==False\r\nassert is_divisible_2_3(20)==True"
  },
  {
    "id": 413,
    "instruction": "Write a python function to find the number of words in a string using regex. Your code should pass these tests:\n\nassert find_number_of_words(\"here's is the example\") == 4\r\nassert find_number_of_words(\"here\") == 1\r\nassert find_number_of_words(\"Here is the question\") == 5\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 414,
    "instruction": "Write a function to find the N smallest elements from given array using heapheapq in such a way that N logN complexity is achieved in your code. Your code should pass these tests:\n\nassert heapq_nsmallest(5, [4, 5, 5, 8, 8, 9, 10, 20, 36]) == [8, 5, 5, 4, 9]\r\nassert heapq_nsmallest(5, [4, 5, 5, 8, 8, 9, 10"
  },
  {
    "id": 415,
    "instruction": "Write a function to find the length of the longest subsequence that is first increasing and then decreasing. Your code should pass these tests:\n\nassert LIS([1, 2, 6, 4, 5, 7]) == 3\r\nassert LIS([1, 2, 3, 4, 5]) == 5"
  },
  {
    "id": 416,
    "instruction": "Write a function to find the n smallest elements from a series using heapq. Your code should pass these tests:\n\nassert top_n_smallest([5, 3, 1, 7, 2, 11],2)==[1,2]\r\nassert top_n_smallest([5, 3, 1, 7, 2, 11],3)==[1,2,3]\r\nassert top_n_smallest([5, 3, 1, 7, 2, 11],5)==[1,2"
  },
  {
    "id": 417,
    "instruction": "Write a function to find the Longest Common Prefix of the Strings input_str1 and input_str2. Your code should pass these tests:\n\nassert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"flow\" \r\nassert longest_common_prefix([\"flower\", \"flight\", \"flamethrower\"]) == \"flight\" \r\nassert longest_common_prefix([\"appricot\", \"approximate\"]) == \"appr\" \r\n\r\nHere is the correct implementation of the code exercise\r\ndef longest_common_prefix(input_str1, input_str2, len"
  },
  {
    "id": 418,
    "instruction": "Write a function to find common elements from two given lists using iteration. Your code should pass these tests:\n\nassert common_elements([10,20,30,40,10,20],[30,50,40])==[30, 40]\r\nassert common_elements([1,2,3,4,5],[2,4,7,3,8,6])==[2, 3, 4]\r\ndef common_elements(list1, list2):\r\n  # Your code here\r\n  list3=[]\r\n  for i in"
  },
  {
    "id": 419,
    "instruction": "Write a python function to find whether the number in a list of numbers (nums) is pair or odd number. Your code should pass these tests:\n\nassert test_odd_even_num([])==None\r\nassert test_odd_even_num([15,22,17,19,32])==True\r\nassert test_odd_even_num([3,5])==False"
  },
  {
    "id": 420,
    "instruction": "Write a function to find largest integer from a given list of numbers using heap functions\r\n\r\nHere is the correct implementation of the code exercise\r\ndef heapSort(l): \r\n    n = len(l) \r\n  \r\n    # Build a maxheap. \r\n    # Since last parent will be at ((n//2)-1) we can start at that location. \r\n    for i in range(n //2 - 1, -1, -1): \r\n        heapify(l, n, i) \r\n  \r\n    # One by one extract elements \r\n    for i in range(n-1, 0, -1): \r\n        l[i"
  },
  {
    "id": 421,
    "instruction": "Write a function to find the area of the trapezium with bases a and b and height h as:\r\nArea = (1/2) * (a+b)*h\r\nYour code here\r\n\r\n\r\ndef area_trapezium(a,b,h):\r\n    area = ((a+b)/2)*h\r\n    return area"
  },
  {
    "id": 422,
    "instruction": "Write a Python function to find the minimum number of rotations required to get same string. Your code should pass these tests:\n\nassert rotationCounting(\"dog\") == 2\r\nassert rotationCounting(\"cat\") == 3"
  },
  {
    "id": 423,
    "instruction": "Write a python function to find the length of largest tuple from the tuples passed in the form of another tuple, using reduce. Your code should pass these tests:\nassert len(big_one) == reduce(lambda x,y:np.maximum(big_one) )"
  },
  {
    "id": 424,
    "instruction": "Write a python function to check if two tuples are equal to each other without using equality operator. Your code should pass these tests:\n\nassert add_mult((1, 2, 3, 4, 5), (1, 2, 3))!= (1, 2, 3)\r\nassert add_mult((1, 2, 3, 4, 5), (1, 2, 3)) == (2, 4, 6)\r\nassert add_mult((1, 2, 3), (1, 2, 3"
  },
  {
    "id": 425,
    "instruction": "Write a single line of code or write your code on multiple lines to find whether the given string is not a palindrome. Your code should pass these tests:\n\nassert not is_palindrome(\"\") \nassert not is_palindrome(\"eleven\") \nassert is_palindrome(\"abcde\")"
  },
  {
    "id": 426,
    "instruction": "Write a function to find the value of nCr, where nCr is n choose r. Your code should pass these tests:\n\nassert calculate_nCr(0, 3) == 0\r\nassert calculate_nCr(5, 3) == 10"
  },
  {
    "id": 427,
    "instruction": "Write a function to find the duplicate characters in a given string. Your code should pass these tests:\n\nassert find_duplicates(\"hello\") == \"l\"\r\nassert find_duplicates(\"abcba\") == \"abc\"\r\nassert find_duplicates(\"google\") == \"o\""
  },
  {
    "id": 428,
    "instruction": "Write a python function to find the minimum absolute difference of two numbers in a given list of numbers. Your code should pass these tests:\n\nassert minimum_absolute_difference([74,71,49,41,48,83,40,56,10])==3\r\nassert minimum_absolute_difference([23,76,25,42,57,89,93,30,86])==2\r\nassert minimum_absolute_difference([30,72,18,91,56,32"
  },
  {
    "id": 429,
    "instruction": "Write a Python function to find the largest element of a list using heapsort algorithm. Your code should pass these tests:\n\nassert largest_element([12, 35, 9, 56, 24, 24])==56\r\nassert largest_element([38, 26, 40, 35, 50, 55])==55\r\nassert largest_element([55, 40, 12, 35, 9, 26])==55"
  },
  {
    "id": 430,
    "instruction": "Write a class Node to store a node in a linked list and its methods. Your code:"
  },
  {
    "id": 431,
    "instruction": "Write a code to find whether a given array is strictly increasing, strictly decreasing or neither. Your code should pass these tests:\n\nassert strictly_inc([2,3,4,5,6,7,8]) == \"increasing\"\r\nassert strictly_inc([2,1,3,4,5,6,7]) == \"decreasing\"\r\nassert strictly_inc([1,2,3,4,5,6,7]) == \"neither\""
  },
  {
    "id": 432,
    "instruction": "Write a function to find the number of occurrences of a letter in a string. Your code should pass these tests:\n\nassert count_letters(\"India\")==3\r\nassert count_letters(\"Python\")==2\r\nassert count_letters(\"Google\")==2"
  },
  {
    "id": 433,
    "instruction": "Write a function to find the maximum width of binary tree. Your code should pass these tests:\n\nassert max_width(-5) == 1\r\nassert max_width(0) == 1\r\nassert max_width(25) == 2"
  },
  {
    "id": 434,
    "instruction": "Write a python function to find all anagrams of a word from a given string. Your code should pass these tests:\r\n\r\nassert find_anagrams(\"abba\", \"abcdabc\") == [\"abc\",\"bca\",\"abb\",\"bba\"]\r\nassert find_anagrams(\"aaaa\", \"abcabcdab\") == ['aba','baa','aaa']\r\nassert find_anagrams(\"aabb\", \"aabcdabc\") == ['aab','abc','abb','baa','abb','bba']"
  },
  {
    "id": 435,
    "instruction": "Write a python function to find the maximum element from a given dictionary d of unique numbers. Your code should pass these tests:\n\nassert maxelemdic(5,{\"a\":10,\"b\":20,\"c\":30,\"d\":40,\"e\":50,\"f\":60,\"g\":70})==50\r\nassert maxelemdic(6,{\"a\":10,\"b\":20,\"c\":30,\"d\":40,\"e\":50,\"f\":60,\"g\":70})==60\r\nassert maxelemd"
  },
  {
    "id": 436,
    "instruction": "Write a class to find all factors of a given number using this code:\n'''\n// Python code\n# implementation of iterative method to find all factor of a number\r\ndef factors(n): \r\n    result = []\r\n    for i in range(1, n + 1): \r\n        if (n % i == 0): \r\n            result.append(i) \r\n    return result"
  },
  {
    "id": 437,
    "instruction": "Write a Python function to multiply all items in a given collection of numbers. Your code should pass these tests:\n\nassert multiply((5,5)) == 25 \r\nassert multiply((2,3,4)) == 24 \r\nassert multiply((1,12,3,5)) == 720"
  },
  {
    "id": 438,
    "instruction": "Write a Python function to extract the data type of an argument. Your code should pass these tests:\n\nassert data_type(2)=='int'\nassert data_type(\"hello\")=='str'"
  },
  {
    "id": 439,
    "instruction": "Write a function to find the number of ways to fill it completely, that is, all units should be either 0 or 1. Your code should pass these tests:\n\nassert count_ways(2)==3\r\nassert count_ways(5)==8\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 440,
    "instruction": "Write a function to find the largest continuous sub-sequence with zero sum. Your code should pass these tests:\n\nassert LongestZeroSum( [ 8, -3, 4, -10, -2, 6, -1 ]  )  ==  [8, -3, 4, -10]\r\nassert LongestZeroSum( [ 8, -3, 4, -10, 8, -2, 6, -1, -8, 10 ]  )  ==  [8, -3, 4, -"
  },
  {
    "id": 441,
    "instruction": "Write a function to extract the value of \"b\" in the following expression given a string: b=23 a+b\r\n\r\nHere is the correct implementation of the code exercise\r\ndef value_of_b(string):\r\n\treturn eval(string.split(\"=\")[1])"
  },
  {
    "id": 442,
    "instruction": "Write a function to check whether two numbers differ at one bit position only or not. Your code should pass these tests:\n\nassert differAtOneBitPos(0,3) == True\r\nassert differAtOneBitPos(4,17) == False\r\nassert differAtOneBitPos(12,231) == True"
  },
  {
    "id": 443,
    "instruction": "Write a python function to find the product of all the integers less than n dividable by 7. Your code should pass these tests:\n\nassert findProd(10) == 35\r\nassert findProd(100) == 5832"
  },
  {
    "id": 444,
    "instruction": "Write a function to find the minimum number of rotations required to get the same string. Your code should pass these tests:\n\nassert find_rotations1(\"abcd\") == 2\r\nassert find_rotations1(\"ab\") == 2\r\nassert find_rotations1(\"abc\") == 3"
  },
  {
    "id": 445,
    "instruction": "Write a python function to remove all the duplicate characters from a given string. Your code should pass these tests:\n\nassert remove_duplicates('I love India')=='I lov ind'\r\nassert remove_duplicates('Welcome to GeeksforGeeks')=='Welcome to Geeksfor'\r\nassert remove_duplicates('Competitive programming is fun')=='Competitive programming fun'"
  },
  {
    "id": 446,
    "instruction": "Write a python function to find the number of lines in a text file. Your code should pass these tests:\n\nassert count_lines('a.txt')==4\r\nassert count_lines('b.txt')==3\r\nassert count_lines('c.txt')==5\r\nHere is the correct implementation of the code exercise\r\ndef count_lines(filepath): \r\n\twith open(filepath, \"r+\") as fin: \r\n\t\tlines = fin.read().splitlines() \r\n\tfin.close() \r\n\treturn (len(lines))"
  },
  {
    "id": 447,
    "instruction": "Write a function to find the next smallest element bigger than a given no. Your code s\r\n\r\nx = [10, 20, 50, 80, 500, 100, 300]\r\nsol = Solution()\r\nprint(sol.getNextSmallestElement(x,300))"
  },
  {
    "id": 448,
    "instruction": "Write a function to find the number of ways to fill the hole for 3 colored balls using 2 balls. Your code should pass these tests:\n\nassert find_number_ways(2,3)==18\r\nassert find_number_ways(3,3)==45\r\nassert find_number_ways(4,3)==90\r\ndef find_number_ways(n,k): \n\t# Your code here\n \r\n\tcount = 0\r\n\tfor i in range(n+1): \t\r\n\t\tcount += comb(n, i, exact=True"
  },
  {
    "id": 449,
    "instruction": "Write a function to find the count of occurrences of a specified character in the given string. Your code should pass these tests:\n\nassert find_char(\"geekforgeeks\", \"e\")==3\r\nassert find_char(\"abcabc\", \"b\")==2\r\nassert find_char(\"abcdefg\", \"c\")==0\r\nCreate a correct implementation of the code exercise here"
  },
  {
    "id": 450,
    "instruction": "Write a Python function to find the number of words of length n in a string. Your code should pass these tests:\n\nassert find_count('Python Exercises',4)==2\r\nassert find_count('Python Exercises',1)==8\r\nassert find_count('python exercises',5)==0\r\nExpected Time Complexity: O(N)\r\nExpected Auxiliary Space: O(N)"
  },
  {
    "id": 451,
    "instruction": "Write a python function to find the maximum product of two distinct numbers from a given list of numbers using recursion. Your code should pass these tests:\n\nassert maximum_product_distinct([2,4,5,6,7,10]) == 70\r\nassert maximum_product_distinct([5,5,6,8,9,15]) == 90"
  },
  {
    "id": 452,
    "instruction": "Write a python function to find the average number of times a person opens the app per day in the last week sorted by the following criteria:\r\n* From Most to Least Number of Opening\r\n* From Least to Most Number of Opening\r\n\r\nYour code should pass these tests:\r\nassert average_number_of_times_app_opened('user_usage.txt') == [2, 12, 25, 75, 107, 78, 78, 113, 160, 192, 17"
  },
  {
    "id": 453,
    "instruction": "Write a function to check if two numbers differ at one bit position only or not. Your code should pass these tests:\n\nassert differ_at_one_bit_position(53,32)==True \r\nassert differ_at_one_bit_position(52,33)==True \r\nassert differ_at_one_bit_position(32,33)==False\r\nHere is correct implementation of the code exercise\r\ndef differ_at_one_bit_position(x, y):\r\n    return (x ^ y) & ~(x ^ y - 1) >"
  },
  {
    "id": 454,
    "instruction": "Write a function to find the maximum profit from stock buys and sells. Your code should pass these tests:\n\nassert maximum_profit(buy_price = [10, 22, 5, 75, 65, 80], sell_price = [8, 26, 12, 81, 70, 89]) ==  (91, 91, [1, 2, 0, 4, 3, 4])\r\nassert maximum_profit(buy_price = [10, 2"
  },
  {
    "id": 455,
    "instruction": "Write a function to find if the two numbers differ at one bit position only or not and return a boolean result. Your code should pass these tests:\n\nassert differ_at_one_bit_pos(10,8) == True\r\nassert differ_at_one_bit_pos(2,8) == False\r\ndef differ_at_one_bit_pos(a, b):\r\n  \"\"\"\r\n  Given two integer numbers, check if they differ at one bit position only or not. Your code should pass these tests:\r\n\r\n  assert differ_at_one_bit_pos(10,8"
  },
  {
    "id": 456,
    "instruction": "Write a python function to check whether a given string is a valid IP address or not. Your code should pass these tests:\n\nassert is_valid_IPaddress('192.168.0.1') == True\r\nassert is_valid_IPaddress('192.168.1.300') == False\r\nassert is_valid_IPaddress('234.245.54.354') == False\r\nHere is the correct implementation of the code exercise\r\nimport socket as s\r\n\r\ndef is_valid_IPaddress("
  },
  {
    "id": 457,
    "instruction": "Write a python function to find the number of bits to be flipped to make them become equal. Your code should pass these tests:\n\nassert bit_flip_count(24, 16) == 8\r\nassert bit_flip_count(37, 32) == 5\r\nassert bit_flip_count(1000, 1234) == 12\r\ndef bit_flip_count(n, m):\r\n  # Initialize the number of bits flipped\r\n  count = 0\r\n  # Find number of bits in n^m\r\n  while n"
  },
  {
    "id": 458,
    "instruction": "Write a python function to print the following pattern for the given n values; n=5\r\n\r\nFor example if the n is 5, it should print the following:\r\n\r\n5 4 3 2 1\r\n5 4 3 2\r\n5 4 3\r\n5 4\r\n5\r\n Here is the correct implementation of the code exercise\r\ndef pattern_printing(n): \r\n  n1 = n  \r\n  # code to print the upper triangular numbers \r\n  for i in range(1,2*n,2): \r\n    print(n1-1, end=\" \") \r\n    n1="
  },
  {
    "id": 459,
    "instruction": "Write a python function to create a list of even numbers from geeksforgeeks.org \r\nusing anonymous functions. Your code should pass these tests:\r\n\r\nassert even_numbers() == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46"
  },
  {
    "id": 460,
    "instruction": "Write a function to find the minimum number of rotations required for the obtained string. Your code should pass these tests:\n\nassert min_rotations(\"gfg\") == 2\r\nassert min_rotations(\"geeksforgeeks\") == 5\r\nassert min_rotations(\"demo\") == 3"
  },
  {
    "id": 461,
    "instruction": "Write a function to find the index of given character in the string. Your code should pass these tests:\nassert index_find('abcad', 'd')==3\r\nassert index_find('abcbcba', 'a')==0\r\nassert index_find('abccbb', 'a')==0\r\nassert index_find('abcbcba', 'b')==1\r\nassert index_find('abcbcba', 'c')==2"
  },
  {
    "id": 462,
    "instruction": "Write a function to find the indices of three numbers, which are multiples of each other, given an iterable of n numbers. Your code should pass these tests:\n\nassert get_multiples([12,4,15,24,120,30]) == ([0, 2, 3], [2, 3, 5], [4, 5, 6]) \r\nassert get_multiples([6,15,30,45,60]) == ([1, 2, 4], [3, 4, 6], ["
  },
  {
    "id": 463,
    "instruction": "Write a code to print the squares of the elements in the dictionary using the items() method. Your code should pass these tests:\n\nassert square_nums == {1: 1, 2: 4, 3:  9, 4: 16}\r\nassert square_nums == {5: 25, 7: 49, 9: 81}"
  },
  {
    "id": 464,
    "instruction": "Write a python function to append a tuple to a tuple. Your code should pass these tests:\n\nassert append_tuple((2,5,4), (4,3,6)) == (2,5,4,4,3,6)\r\nassert append_tuple((7,5),(5,4))== (7,5,5,4)\r\nExpected Output\r\nHere is the correct implementation of the code exercise\r\ndef append_tuple(tup1,tup2):\r\n  if tup1 and tup2:\r\n    return tup1 + tup2"
  },
  {
    "id": 465,
    "instruction": "Write a function to find the minimum number of rotations required to get the same string. Your code should pass these tests:\n\nassert countRotations(\"hello\")==2\nassert countRotations(\"aaaa\")==1"
  },
  {
    "id": 466,
    "instruction": "Write a function to find the maximum profit from a given array of numbers. Your code should pass these tests:\nassert find_max_profit([10, 7, 5, 8, 11, 9])==6\r\nassert find_max_profit([10, 7, 5, 8, 10, 9])==5\r\nassert find_max_profit([-10, -7, -5, -8, -11, -9])==-6"
  },
  {
    "id": 467,
    "instruction": "Write a function to find the minimum number of rows required to create N columns in a pascal triangle. Your code should pass these tests:\n\nassert min_rows(1) == 1\r\nassert min_rows(5) == 2\r\nassert min_rows(15) == 3"
  },
  {
    "id": 468,
    "instruction": "Write a python function to find the index of an element in the rotated sorted list using recursion. Your code should pass these tests:\n\nassert 1 == find_rotated_index([40,50,60,70,10,20,30,45],45) \r\nassert 4 == find_rotated_index([40,50,60,70,10,20,30,45],10)"
  },
  {
    "id": 469,
    "instruction": "Write a function to find the minimum cost path to reach (m, n) from (0,0) in a given cost array cost[][] and a position array pos[[]]. Your code should pass these tests:\n\nassert find_cost(cost,pos,1,5)==173\r\nassert find_cost(cost,pos,5,1)==168"
  },
  {
    "id": 470,
    "instruction": "Write a code to find the intersection between two sets. Your code should pass these tests:\n\nassert compute_intersection([1,2,3,4,5], [2,3,5,6,7])==[2,3,5]\r\nassert compute_intersection([4, 6, 3], [5, 2, 4])==[4, 2, 3]\r\ndef compute_intersection(list1, list2):\r\n  res=[]\r\n  for i in list1:\r\n    if i in list2:\r\n      res.append(i)\r\n  return res"
  },
  {
    "id": 471,
    "instruction": "Write a function to find the largest sublist with an equal number of 0's and 1's. Your code should pass these tests:\n\nassert eq_class([2,0,2,1,1,0,2,1,0,2,0,2,1]) == [2, 1, 2, 0] \r\nassert eq_class([0,1,1,1,1]) == [0,1,1] \r\nassert eq_class([1,1,2,0,2]) == [1, 1, 2, 0"
  },
  {
    "id": 472,
    "instruction": "Write a function to find the square root of a number by using the following formula of the newton's method: Your code here\r\ndef newtonSqrt(n):\r\n\tans = n/2\r\n\twhile(round(ans**2)!= n):\r\n\t\tans = (ans+n/ans)/2\r\n\treturn ans"
  },
  {
    "id": 473,
    "instruction": "Write a python function to find the maximum of 4 numbers. Your code should pass these tests:\n\nassert max_n(6,4,5,7)==7\r\nassert max_n(35,27,77,45)==77\r\nassert max_n(-2,-16,22,-23)==22\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 474,
    "instruction": "Write a function to find the reverse of a string using recursion. Your code should pass these tests:\n\nassert reverse(‘hello’)==‘olleh’\r\nassert reverse(‘abc’)==‘cba’"
  },
  {
    "id": 475,
    "instruction": "Write a function to find all words in a given sentence that are longer than 4 characters and shortest than 6 characters in length. Your code should pass these tests:\n\nassert find_short('hello, welcome to the world') == ['hello', 'world']\r\nassert find_short('hello, the world is beautiful') == ['world', 'beautiful']\r\ndef find_short(i):\r\n  return [w for w in i.split() if 4<len(w)<6]"
  },
  {
    "id": 476,
    "instruction": "Write a function to compute the minimum number of refills needed to reach the destination. Your code should pass these tests:\n\nassert minimum_refills(30,3,6) == 2\r\nassert minimum_refills(15,2,5) == 3\r\nHere is the correct implementation of the code exercise\r\ndef minimum_refills(distance, tank, stops): \r\n    # Your code here\r\n    stops+=1\r\n    refills=0\r\n    while distance>=(tank-stops):\r\n        refills+=1\r\n        distance-=tank\r\n        distance+=stop*(tank-(1+stop))"
  },
  {
    "id": 477,
    "instruction": "Write a function to find the number of times each tuple appears in a given list of tuples using the groupby() function. Your code should pass these tests:\n\nassert count_tuple_duplicates([('a', 'x'), ('b', 'y'), ('a', 'y'), ('a', 'z'), ('b', 'x'), ('b', 'z'), ('b', 'y'), ('a', 'u')]) =={'a': 3, 'b': 4}\r\nassert count_tuple_duplicates([('P','Male'),('P','Male'),('Q','Female'),('Q','"
  },
  {
    "id": 478,
    "instruction": "Write a function to find the unique elements from a series. Your code should pass these tests:\n\nassert unique(c) == {'b', 2, 3}\r\nassert unique(l) == {15, 9, 1, 2, 7, 10}\r\nassert unique(d) == {0, 15, 'good'}"
  },
  {
    "id": 479,
    "instruction": "Write a function to remove even numbers from a list using lambda function. Your code should pass these tests:\n\nassert check_even_nums([23, 24, 45, 67, 89, 35])==[23, 45, 89]\r\nassert check_even_nums([20, 12, 50, 70])== [20, 50, 70]"
  },
  {
    "id": 480,
    "instruction": "Write a function to find whether two numbers differ at one bit position only or not. Your code should pass these tests:\n\nassert single_bit_pos_dif(8,5) == True\r\nassert single_bit_pos_dif(5,8) == True\r\nassert single_bit_pos_dif(2,4) == False\r\nassert single_bit_pos_dif(15,28) == False"
  },
  {
    "id": 481,
    "instruction": "Write a function to find the last positive occurrence of an element in an array using recursive binary search. Your code should pass these tests:\n\nassert last_occ(arr, x)==3\r\nassert last_occ(arr2, x)==0\r\nassert last_occ(arr3, x)==2"
  },
  {
    "id": 482,
    "instruction": "Write a function to find if there is any anagram pair between two lists. Your code should pass these tests:\n\nassert find_anagram('abc','abcd')=='abcd'\r\nassert find_anagram('bc','abcd')=='bc'\r\nassert find_anagram('pprp','pqprp')=='pqprp'"
  },
  {
    "id": 483,
    "instruction": "Write a function to check if two given numbers differ at one bit position only. Your code should pass these tests: \nassert differAtOneBitPos(5,7) == False\r\nassert differAtOneBitPos(20, 55) == True"
  },
  {
    "id": 484,
    "instruction": "Write a Python function to find the unique triplets whose sum is equal to the third argument x from a given list of numbers using two nested loops in a single line of code. Your code should pass these tests:\n\nassert find_triplets([0,0,5,5,4,4],4)==[(0, 0, 4)]\r\nassert find_triplets([4,4,4,0,5,5,0],4)==[(0, 0, 4),(4, 4, 4)]\r\nassert find_triplets([0,0,5,"
  },
  {
    "id": 485,
    "instruction": "Write a function find_odd_occurence to find the number with odd number of occurrences, using a for-loop and Python’s dictionary data structure. Your code should pass these tests:\r\n\r\nassert find_odd_occurence([5,2,2,9,4,4,1,1,15,15,15])==5\r\nassert find_odd_occurence([22,5,15,15])==5"
  },
  {
    "id": 486,
    "instruction": "Write a Python function to find that element in an array of multiples of n where n > 1. Your code should pass these tests:\n\nassert find_second_largest([5, 4, 6, 8]) == 4\r\nassert find_second_largest([10,80,20,50]) == 10\r\nassert find_second_largest([20,30,25,40]) == 25"
  },
  {
    "id": 487,
    "instruction": "Write a function to find unique elements in sorted array. Your code should pass these tests:\nassert find_unique_elements([1,2,3,5,5,6,7,8])==[1,2,3,5,6,7,8]\r\nassert find_unique_elements([4,4,5,5,5,8,8,9,10,10])==[4,5,8,9,10]"
  },
  {
    "id": 488,
    "instruction": "Write a function to extract the column names from Pandas dataframe with unique elements only. Your code should pass these tests:\n\nassert list(get_unique_columns(df)) == ['C', 'D', 'E', 'D', 'F', 'F', 'C', 'F', 'A', 'B']\r\nassert set(get_unique_columns(df)).union(set(df.columns))== set(df.columns)"
  },
  {
    "id": 489,
    "instruction": "Write a function to find the minimum number of rotations required to get another string. Your code should pass these tests:\n\n\nassert minRotations('abcd') == 1\r\nassert minRotations('ab') == 2\r\nassert minRotations('abc') == 3"
  },
  {
    "id": 490,
    "instruction": "Write a function to divide two numbers without using the * or the / operator. Your code should pass these tests:\nassert divide(num1=6, num2=3) == 2\r\nassert divide(num1=35, num2=7) == 5\r\nassert divide(num1=52, num2=21) == 2"
  },
  {
    "id": 491,
    "instruction": "Write a function to reverse a list using recursion. Your code should pass these tests:\n\nassert recursive_reverse([1,2,3,4]) == [4,3,2,1]\r\nassert recursive_reverse([4,2,8,7,5]) == [5,7,8,2,4]\r\nassert recursive_reverse([2,4,8,6,5]) == [5,6,8,4,2]\r\nHere is the correct implementation of the code exercise\r\ndef recursive_reverse(arr, res =[]): \r\n    if arr==[]:"
  },
  {
    "id": 492,
    "instruction": "Write a python function to find the least cost path from the source to each node using Dijkstra algorithm. Your code should pass these tests:\n\nassert find_least_cost_node(graph_adj_list, 0, 6)==(10,5)\nassert find_least_cost_node(graph_adj_list, 0, 7)==(12,6)\r\ndef find_least_cost_node(graph, start_vertex, end_vertex): \n\t\"\"\"\n\t\tReturn the least cost node from \n\t\tstart to end vertex\n\t\tTime Complexity"
  },
  {
    "id": 493,
    "instruction": "Write a function to find the minimum no of steps in BFS in a given undirected graph. Your code should pass these tests:\n\nassert minimum_steps(5,[(1,2),(3,4),(1,4),(5,2)]) == 4\r\nassert minimum_steps(4,[(1,2),(4,3),(1,3)]) == 3"
  },
  {
    "id": 494,
    "instruction": "Write a function to rotate the elements of an array by k number of positions to the left. Your code should pass these tests:\n\nassert rotate([1,2,3], n=1) == [3,1,2] \r\nassert rotate([1,2,3], n=2) == [2,3,1] \r\nassert rotate([1,2,3,4,5,6], n=2) == [3,4,5,6,1,2]"
  },
  {
    "id": 495,
    "instruction": "Write a Python function to find the minimum count of subsequences required to express the given positive number 'n'. Your code should pass these tests:\n\nassert find_smallest_count_of_sequences(5) == 2\r\nassert find_smallest_count_of_sequences(10) == 3"
  },
  {
    "id": 496,
    "instruction": "Write a python function to find the number fo ways to fill all the tiles in total 3 X n with 2 X 1 dominoes to form a rectangle, when all the tiles must be dominoes. Your code should pass these tests:\n\nassert count_ways(2) == 8\r\nassert count_ways(4) == 125\r\ndef count_ways(n):\r\n  # Your code here\r\n  return (n-1)*(count_ways(n-2))+n+n**2+n**3"
  },
  {
    "id": 497,
    "instruction": "Write a class named MyNumber with attributes val1,val2 which refers to two integers and two methods add() and multiply(). Your code should pass these tests:\nassert multiply(4,5)==20\r\nassert multiply(6,7)==42\r\nassert add(10,4)==14"
  },
  {
    "id": 498,
    "instruction": "Write a class to find the  number of ways to fill it with 2 x 1 dominoes such that no two dominoes are adjacent horizontally, vertically or diagonally. Your code should pass these tests:\n\nassert Solution().ways(2) == 3\r\nassert Solution().ways(3) == 7\r\nassert Solution().ways(5) == 29\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 499,
    "instruction": "Write a function to find number of words in a string\r\ndef no_of_words(str):\r\n  return len(str.split())\r\n\r\nSample Input:\r\nI am a student\r\n\r\nSample Output:\r\n4"
  },
  {
    "id": 500,
    "instruction": "Write a function to return squares of array elements except squares of zeros. Your code should pass these tests:\nassert square_root([2,0,0,13,11,-15,2,0,6,3])==[4,0,0,169,1425,-1968, 4, 0, 36, 9]\r\nassert square_root([3,0,0,25,12,-25,3,0,8,4])==[9,0,0,625,14"
  },
  {
    "id": 501,
    "instruction": "Write your function for creating square brackets here\ndef make_square(a):\r\n  return [i**2 for i in a]"
  },
  {
    "id": 502,
    "instruction": "Write a function to find the indices of the elements before and after pivot element in the given Python list using Binary Search method. Your code should pass these tests:\nassert findPivot([1, 2, 3, 4, 5, 6, 7]) == [4, 5]\r\nassert findPivot([3, 4, 5, 6, 7, 8, 9]) == [5, 6]"
  },
  {
    "id": 503,
    "instruction": "Write a python function  to find the largest number among a numeric values in the list using bubble sort algorithm. Your code should pass these tests:\n\nassert largest_number([6, 3, 8, 2, 6, 8]) == 8\r\nassert largest_number([6, 3, 2, 5, 6]) == 6\r\nassert largest_number([6, 3, 2, 5, 6, 10]) == 10"
  },
  {
    "id": 504,
    "instruction": "Write a python function to find the length of the longest substring which doesn't have any repeating characters. Your code should pass these tests:\n\nassert length_of_longest_substring('abrkaabcdefghijjxxx') == 10\nassert length_of_longest_substring('aabccbb') == 3\ndef length_of_longest_substring(str1):\n  window_start, max_length,char_index={},0,{}\n  start = end = 0\n  for i in range(len(str1)):\n    char=str1[i]\n    end=i\n    if"
  },
  {
    "id": 505,
    "instruction": "Write a function to find the smallest integer not less than the given number. Your code should pass these tests:\n\nassert smallest_integer(5)==5\r\nassert smallest_integer(15.77)==15"
  },
  {
    "id": 506,
    "instruction": "Write a function to find all words which are at least 2 characters long in a given sentence. Your code should pass these tests:\n\nassert check_character_long('The quick brown fox jumps over the lazy dog') == ['jumps', 'lazy']\r\nassert check_character_long('I have a cat.') == ['cat']"
  },
  {
    "id": 507,
    "instruction": "Write a function to find the maximum distance travelled by a vehicle from a given source node to all the other nodes of the given directed graph. Your code should pass these tests:\n\nassert max_distance(grt, 8) == 10\nMax distance travalled by a vehicle from a given source node to all the other nodes of the given directed graph"
  },
  {
    "id": 508,
    "instruction": "Write a function to find the index of the first occurrence of x in the array arr using recursion. Your code should pass these tests:\n\nassert first_occurrence(arr,4)==4\r\nassert first_occurrence(arr,1)==1"
  },
  {
    "id": 509,
    "instruction": "Write a python function to find the least common multiple (lcm) of two integers. Your code should pass these tests:\n\nassert lcm(12, 16)==36\r\nassert lcm(18, 24)==24"
  },
  {
    "id": 510,
    "instruction": "Write a python function in the form f(x) that checks whether \"x\" contains only digits or not. Your code should pass these tests:\n\nassert not has_alphanumber('abc123') \r\nassert has_alphanumber('abcxyz')"
  },
  {
    "id": 511,
    "instruction": "Write a Python function to find the greatest number among three numbers using lambda function. Your code should pass these tests:\n\nassert max_three(100,200,300)==300\r\nassert max_three(12,76,30) ==76\r\nassert max_three(24,54,90)==90"
  },
  {
    "id": 512,
    "instruction": "Write a python function to find the sum of elements in each row of a given two dimensional list as shown in the below code. Your code should pass these tests:\n\nassert find_sum_row([[1, 2, 3], [4, 5, 6]])==[6, 15]\r\nassert find_sum_row([[10, 20, 30], [40, 50, 60]])==[60, 150]"
  },
  {
    "id": 513,
    "instruction": "Write a code to find the missing number from a given non-contiguous list of numbers using the following algorithm: Your code should pass these tests:\n\n\nassert missing_number([4, 2, 3, 7, 6, 8, 1, 5, 9, 10],2)!=6\r\nassert missing_number([9, 8, 7, 6, 5, 4, 3, 2, 1],3)==6\r\nassert missing_number([3, 1, 5, 7, 9, 10"
  },
  {
    "id": 514,
    "instruction": "Write a Python function to check whether an integer is the power of an exponent. Your code should pass these tests:\n\nassert check_power(64,2)==True\r\nassert check_power(78,3)==True\r\nassert check_power(45,4)==True\r\ndef check_power(number,e):\r\n  return number==2**e if number%e==0 else True"
  },
  {
    "id": 515,
    "instruction": "Write a function to find the minimum number of rotations required to find a substring in a string. Your code should pass these tests:\n\nassert min_number_rotations(\"abcd\", \"d\") == 1\r\nassert min_number_rotations(\"abcde\", \"d\") == 2\r\nassert min_number_rotations(\"abc\", \"abc\") == 2"
  },
  {
    "id": 516,
    "instruction": "Write a linear time function to find the maximum sum subarray from a given array. Your code should pass these tests:\n\nassert max_sum_subarray( [7,2,5,10,8] )==25\r\nassert max_sum_subarray( [4,2,1,7,12,5] )==23\r\nassert max_sum_subarray( [12,4,1,7,12,5] )==33"
  },
  {
    "id": 517,
    "instruction": "Write a python function to find minimum number of rotations required to get the same string using the exercise solution code. Your code should pass these tests:\n\nassert findMinRotations(\"aaaa\") == 3\r\nassert findMinRotations(\"ab\") == 2\r\nassert findMinRotations(\"abc\") == 3"
  },
  {
    "id": 518,
    "instruction": "Write a Python function to print all distinct non zero divisors of the given integer, n. Your code should pass these tests:\n\nassert print_all_divisors_of_n(10) == [2, 5]\r\nassert print_all_divisors_of_n(42) == [2, 3, 6, 7, 14, 21, 42]"
  },
  {
    "id": 519,
    "instruction": "Write a function to find the index of the largest even element in the given Python list using index() method, and calli \r\nng the function on the list using different list inputs. Your code should pass these tests:\r\n\r\nassert find_max_index( [0, 4, 6, 8, 9, 23]) == 4\r\nassert find_max_index( [0, 2, 12, 18, 10, 23]) == 5\r\nassert find_max_index( [0, 12, 18"
  },
  {
    "id": 520,
    "instruction": "Write a python function to find if two strings are isomorphic or not. Your code should pass these tests:\n\nassert is_isomorphic(\"gfg\", \"fgt\") == True\r\nassert is_isomorphic(\"gg\", \"gf\") == False"
  },
  {
    "id": 521,
    "instruction": "Write a function to check whether two numbers differ at one bit position only or not. Your code should pass these tests:\n\nassert differAtOneBitPos(5, 7)==True\nassert differAtOneBitPos(5, 6)==False"
  },
  {
    "id": 522,
    "instruction": "Write a function to get the maximum element from the following array of numbers using heap sort:\r\nnums =  [23, 10, 20, 40, 50, 60]\r\nYour code should pass these tests:\r\nassert max_heap_sort(nums) == (60, [23, 10, 20, 40, 50, 60])\r\nassert max_heap_sort([80, 10, 20, 50, 60, 70]) =="
  },
  {
    "id": 523,
    "instruction": "Write a function to find the K-smallest elements from an array. Your code should pass these tests:\n\nassert find_k_smallest([4, 5, 12, 14, 22, 24, 25, 27, 28, 34, 53, 54, 58, 66, 92], 3) == [12, 14, 22]\r\nassert find_k_smallest([4, 5, 12, 14,"
  },
  {
    "id": 524,
    "instruction": "Write a function to find the product of all elements in a list using reduce(). Your code should pass these tests:\n\nassert product_of_list([1, 2, 3, 4, 5]) == 120\r\nassert product_of_list([3, 5, 10, 35, 65, 125]) == 291350000\r\nHere is the correct implementation of the code exercise\r\ndef product_of_list(nums): \r\n  return reduce((lambda x, y: x * y), nums"
  },
  {
    "id": 525,
    "instruction": "Write a function to get a single item in a list using index:\r\n\r\ndef get_item(l, index):\r\n  return l[index]\r\n\r\n\r\nSample Input:\r\nl = list(\"abcdef\")\r\nindex = 3\r\nprint( get_item(l,index) )"
  },
  {
    "id": 526,
    "instruction": "Write a python function to find the total size (in MB) of all files in the given path recursively. Your code should pass these tests:\n\nassert large_files_recursively('./testdir') == 53\nassert large_files_recursively(test_dir) == large_files_recursively_soln(test_dir)"
  },
  {
    "id": 527,
    "instruction": "Write a python function to find the minimum number of rotations required to get the same string. Your code should pass these tests:\n\nassert find_minimum_rotations(\"hello\")==3\nassert find_minimum_rotations(\"abc\")==3"
  },
  {
    "id": 528,
    "instruction": "Write a python function to find the minimum area rectangle that encloses the given set of points. Your code should pass these tests:\n\nassert minimum_area_rectangle([[1,3],[2,4],[6,10],[13,8],[14,4],[12,1]]) == [(2, 4), (6.0, 1.0), (13, 8.0), (1.0, 6.0)]\r\nassert minimum_area_rectangle([[1,3],[2,4],[6,10],[13,8],[14"
  },
  {
    "id": 529,
    "instruction": "Write a function to check whether an element belongs to a given set or not. Your code should pass these tests:\n\nassert check_membership([1, 2, 4, 5], 2) == True\r\nassert check_membership([1, 2, 4, 5], 6) == False\r\ndef check_membership(arr,n):\r\n  return n in arr"
  },
  {
    "id": 530,
    "instruction": "Write a python code to find the element common to two tuples. Your code should pass these tests:\n\nassert find_common_element((1, 2, 3, 4, 5, 6, 7),(4, 5, 6, 8))== (4, 5, 6)\r\nassert find_common_element((1, 2, 3, 4, 5, 5, 5),(4, 5, 6))== (5,)\r\nassert find_common_element((1,3,5),(2,4"
  },
  {
    "id": 531,
    "instruction": "Write a Python function to check if the given word is palindrome or not. Your code should pass these tests:\n\nassert is_palindrome('kayak') == True\r\nassert is_palindrome('racecar') == True\r\nassert is_palindrome('madam') == True"
  },
  {
    "id": 532,
    "instruction": "Write a function to find the minimum cost path to reach (m,n) cell from (0,0) cell in an m*n matrix. Your code should pass these tests:\n\nassert min_cost([[0, 1], [2, 3]])==2\r\nassert min_cost([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])==8\r\nassert min_cost([[0,"
  },
  {
    "id": 533,
    "instruction": "Write a function to find squares of individual elements of a given list using lambda function. Your code should pass these tests:\nassert list_operation([2, 5, 10, 11, 50, 41, 33], lambda x:x**2) == [4,25,100,121,250,196,119]\r\nassert list_operation([2, 5, 10, 11, 50, 41, 33], lambda y:y**3) =="
  },
  {
    "id": 534,
    "instruction": "Write a python function to check if the given numbers contain 2 zeros in the same row or column or not. Your code should pass these tests:\n\nassert find_duplicate(2,3) == True\r\nassert find_duplicate(5,20) == True\r\nassert find_duplicate(0,9) == False"
  },
  {
    "id": 535,
    "instruction": "Write a code to check whether x is a perfect square or not. Your code should pass these tests:\n\nassert perfect_square(4)==True\r\nassert perfect_square(15)==False"
  },
  {
    "id": 536,
    "instruction": "Write a function to find maximum element from a given set of integers. Your code should pass these tests:\n\nassert find_maximum_element([45, 23, 12, 98])==98\nassert find_maximum_element([1, 2, 3, 4, 5, 6, 7, 8, 9])==9"
  },
  {
    "id": 537,
    "instruction": "Write a Python function to find the minimum number of rotations required to get same string. Your code should pass these tests:\n\nassert minimum_rotations(\"python\") == 2\r\nassert minimum_rotations(\"Python\") == 5"
  },
  {
    "id": 538,
    "instruction": "Write a python function to check if two numbers differ at one bit position only. Your code should pass these tests:\n\nassert differ_At_One_Bit_Pos(10,5)==True\r\nassert differ_At_One_Bit_Pos(22,20)==True\r\nassert differ_At_One_Bit_Pos(222,180)==True\r\nassert differ_At_One_Bit_Pos(5,7)==False"
  },
  {
    "id": 539,
    "instruction": "Write a function to find the maximum element from a given number of arguments using recursion. Your code should pass these tests:\n\nassert findMax(1, 2, 4,3)==4\r\nassert findMax(22, 45, 13, 5, 1)==5\r\nassert findMax(15,12,55,34,24,53,23,11)==55"
  },
  {
    "id": 540,
    "instruction": "Write a class to find the duplicate numbers from the given list of numbers using the following algorithm. Your code should pass these tests:\nassert find_duplicates([11,43,44,55,6,6,7,44])== [44,6]\r\nassert find_duplicates([1,2,3,4,5,6,7,8,9])== [1,2,3,4,5,6,7,8,9]\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 541,
    "instruction": "Write a class to create a queue using two stacks. Your code should pass these tests:\nassert q.front() == 3\r\nassert q.size() == 3\r\nassert q.rear() == 5\r\nassert q.dequeue() == 3\r\nassert q.size() == 2"
  },
  {
    "id": 542,
    "instruction": "Write a function to find the maximum value from the given array. Your code should pass these tests:\nassert find_max(0,1, 2, 10, -10, 5) == 10\r\nassert find_max(98, 198, 552, 159, -1, 1005) == 159"
  },
  {
    "id": 543,
    "instruction": "Write a class to find the time period from which the weather data is not present using pandas dataframe and matplotlib. Your code should pass these tests:\n\nassert city.head(1).index == pd.to_datetime(['2000-06-07']), \"First row is incorrect\"\r\nassert city.tail(1).index == pd.to_datetime(['2018-06-17']), \"Last row is incorrect\"\r\nassert city.loc['2000-06-19':'2000-06-22', :].is"
  },
  {
    "id": 544,
    "instruction": "Write a Python function to get the last index of a given element from an input list. Your code should pass these tests:\nassert last_index_of([25,50,75],25) == 2\r\nassert last_index_of([25,50,75,25],25) == 3\r\nassert last_index_of([25,50,75],[50,80]) == -1"
  },
  {
    "id": 545,
    "instruction": "Write a function to find the sum of all the elements in the list using recursion. Your code should pass these tests:\nassert summation([]) == 0\nassert summation([1,2,3,4,5,6,7,8,9,10]) == 55"
  },
  {
    "id": 546,
    "instruction": "Write a Python function to perform arithmetic operations on tuples to find the mean. Your code should pass these tests:\n\nassert mean_tuple((1,2,3)) == 2\r\nassert mean_tuple((1,2,3,4))== 2.5\r\nassert mean_tuple((100,200))== 150.0"
  },
  {
    "id": 547,
    "instruction": "Write a python function to find the length of a given list of words using recursion. Your code should pass these tests:\n\nassert length_recursive(['India', 'is','my', 'favourite', 'country'])== 5\r\nassert length_recursive(['I', 'am', 'batman'])== 3"
  },
  {
    "id": 548,
    "instruction": "Write a python function to find second largest item from the numbers provided as input to the function. Your code should pass these tests:\n\nassert second_max([8,4,7,9,3,1])==7\r\nassert second_max([5,2,4,1,3,6])==4\r\nassert second_max([4,4,5,8,1,])==5\r\ndef second_max(numbers):\r\n  max1 = -1\r\n  max2 = -1\r\n  for num in numbers:\r\n    if (num > max1):\r\n      max1, max2"
  },
  {
    "id": 549,
    "instruction": "Write a function to find the count of numbers that have exactly one set bit(also called as count of power of two) in their binary representation of numbers from a stream of numbers using at most 42 bits of RAM. Your code should pass these tests:\n\nassert count_of_set_bits(14)==3\r\nassert count_of_set_bits(13)==2"
  },
  {
    "id": 550,
    "instruction": "Write a python function to find the squares of the elements in a list. Your code should pass these tests:\n\nassert square_nums([1,2,3,4,5])==[1,4,9,16,25]\r\nassert square_nums([4,5,6,7,8])==[16,25,36,49,64]"
  },
  {
    "id": 551,
    "instruction": "Write a function to find the number of distinct elements of an array for some other given indices using numpy. Your code should pass these tests:\n\nassert all_occurrences([-10,10,20,10,0,-30,-40,-20], [1,2,3]) == np.array([0,1])\r\nassert all_occurrences([10,20,30,40,30,20,10], [2,3,4]) == np.array([1,2,1])\r\nIn python, np."
  },
  {
    "id": 552,
    "instruction": "Write a python function to find maximum of two numbers using max() function. Your code should pass these tests:\nassert max(10,20,30)==30\r\nassert max(40,30,20)==40\r\nassert max(30.1,20.2,10.3)==30.1"
  },
  {
    "id": 553,
    "instruction": "Write a class Stack to create the instance of stacks with maximum size n using the implementation of deque in Python. Your code should pass these tests:\n\nassert (not s.is_full())\nassert (s.is_empty())\r\ns="
  },
  {
    "id": 554,
    "instruction": "Write a function to merge two arrays using a hybrid method. Your code should pass these tests:\n\nassert hybrid_merge([1, 2, 3, 4, 5], [6, 7, 8, 9])==[1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nassert hybrid_merge((1, 2, 3, 4, 5), (6, 7, 8, 9))==[1, 2, 3, 4, 5,"
  },
  {
    "id": 555,
    "instruction": "Write a class to find the minimum number of rotations required to get the same string. Your code should pass these tests:\n\nassert MinRotations(\"GEEKS\") == 2\r\nassert MinRotations(\"LOVELEGIAN\") == 4\r\nassert MinRotations(\"PYTHON\") == 7\r\nHere is the correct implementation of the code exercise"
  },
  {
    "id": 556,
    "instruction": "Write a function to find out minimum number of subarrays required to generate an equal sum frequency table of given array. Your code should pass these tests:\n\nassert gen_equal_subarrays([2, 2, 5, 4, 3, 2, 4, 2, 3, 3, 2, 4, 4]) == 4\r\nassert gen_equal_subarrays([2, 4, 7, 6, 8, 9, 4, 6, 4, 7, 4, 6, 2,"
  },
  {
    "id": 557,
    "instruction": "Write a function to find last element from a python list using linear search technique using while loop. Your code should pass these tests:\n\nassert last_element([10, 20, 34, 556, 78]) == 78\r\nassert last_element([-2, -4, -6, -8, -10, -102]) == -2\r\ndef last_element(nums):\r\n    while nums[len(nums)-1]!= nums[-1]:\r\n        nums = nums[:-1]\r\n    return nums[-1]"
  },
  {
    "id": 558,
    "instruction": "Write a python function to find the element in an array closest to the target element. Your code should pass these tests:\n\nassert find_closet_to_target([8,7,2,9,3],2)==7\r\nassert find_closet_to_target([8,7,2,9,3],6) == 2"
  },
  {
    "id": 559,
    "instruction": "Write a function to find square root of number. Your code should pass these tests:\n\nassert(sqrt(4) == 2)\r\nassert(sqrt(25) == 5)\r\nassert(sqrt(100) == 10)"
  },
  {
    "id": 560,
    "instruction": "Write a function to find the difference of elements from both tuple lists. Your code should pass these tests:\n\nassert difference_lists((2,4,5,8), (7,4,8,5)) == (2,7,5)\r\nassert difference_lists((2,3,3,4),(4,2,3)) == (2,3,3)\r\nassert difference_lists((2,4),(5,2)) == ()"
  },
  {
    "id": 561,
    "instruction": "Write a function to find the union of two lists using dictionary. Your code should pass these tests:\nassert union([1,2,3,4],[2,4,5,6]) == [1,2,3,4,5,6]\r\nassert union([5,6,7,8,9],[5,7,9,10])== [5,6,7,8,9,10]"
  },
  {
    "id": 562,
    "instruction": "Write a python function to find the minimum number of rotations required to get to kth rotations of a list: Your code here\n\ndef getRotationsCount(arr, k):\r\n \r\n    n = len(arr) \r\n    freq = [0] * n \r\n    res=[]\r\n \r\n    # The logic is to calculate the frequency and then \r\n    # save the indexes having values of frequency = k \r\n    for x in arr: \r\n        freq[x] += 1\r\n        if (freq[x] == k): \r\n            res.append(x)\r\n \r\n    return len(res)"
  },
  {
    "id": 563,
    "instruction": "Write a function to find all the 2-digit numbers with all the 5-digit numbers among them and return the results as a multiset. Your code should pass these tests:\n\nassert multiply_two_digits_and_five_digits([15226, 23521, 12345, 45355, 33211]) == [15226, 15226, 23521, 23521, 12345, 33211"
  },
  {
    "id": 564,
    "instruction": "Write a Python function to find the maximum of three numbers using lambda function. Your code should pass these tests:\n\nassert find_max_num(16,3,4)==16\r\nassert find_max_num(2000,1500,900)==2000"
  },
  {
    "id": 565,
    "instruction": "Write a python function to find the number of triplets whose sum is exactly equal to a given sum. Your code should pass these tests:\n\nassert triplet_sum([3, 5, 8, -2, -4, 1, 3], 10) == 4\r\nassert triplet_sum([3, 5, 8, -2, -4, 1, 3], -1) == 6"
  },
  {
    "id": 566,
    "instruction": "Write a python function to find an integer x between a given range, such that:\r\n\r\ndifference between adjacent terms is same and it is minimum\r\n\r\nx= difference//2\r\n\r\nHere is the correct implementation of the code exercise\r\n\r\nExercise: Write a code to find an integer x between a given range, such that:\r\n\r\ndifference between adjacent terms is same and it is minimum\r\n\r\nx= difference//2 ( correct implementation)\r\ndef findX (a,b):\r\n    d = b - a \r\n    x = ((d) // 2) + a \r\n    return x"
  },
  {
    "id": 567,
    "instruction": "Write a class to find the words which starts with the given substring using prefix() method. Your code should pass these tests:\n\nassert PrefixMatching(\"AriK\",\"The AriK Sharma Academy\") == ['AriK','Sharma']\r\nassert PrefixMatching(\"Hemant\",\"The AriK Sharma Academy\") == ['AriK']"
  },
  {
    "id": 568,
    "instruction": "Write a function to find the indices of occurrences of all the substrings within a string. Your code should pass these tests:\n\nassert find_substring('Python', 'yth')==[1, 4]\r\nassert find_substring('aaadaa', 'aa')==[0, 1, 4]\r\nassert find_substring('abc', 'ab')==[0, 1]"
  },
  {
    "id": 569,
    "instruction": "Write a function to find the minimum number of rotations required to get one string to be a rotation of other string. Your code here\n\ndef find_rotations(string):\r\n    def find_number_of_rotations(string, start):\r\n        match = string[:start] + string[start:]\r\n        return string.count(match)\r\n     \r\n    return find_number_of_rotations(string, 1)"
  },
  {
    "id": 570,
    "instruction": "Write a function to find least common ancestor of the given node pair. Your code should pass these tests:\n\nassert is_present(graph, 13, 11) == 12\r\nassert is_present(graph, 5, 4) == 5\r\nassert is_present(graph, 3, 11) == 3"
  },
  {
    "id": 571,
    "instruction": "Write a python function to find the Kth smallest element in an array. Your code should pass these tests:\n\nassert kth_smallest_element([13,35,52,23,35,12,3],1)==12\r\nassert kth_smallest_element([13,35,52,23,35,12,3],4)==23"
  },
  {
    "id": 572,
    "instruction": "Write a function to find out whether a given sequence is circular palindrome or not. Your code should pass these tests:\n\nassert isPallindrome([1,2,3,1,2,3]) == True\r\nassert isPallindrome([1,2,3,4,2,3]) == False\r\nassert isPallindrome([1,2,3,4,5,4]) == False\r\nHere is the correct implementation of the code exercise\r\ndef isPallindrome(nums): \n    if len(nums)<= 1: return True \n    s = nums.index"
  },
  {
    "id": 573,
    "instruction": "Write a function to find the frequency of the first character of every word in a list using lambda function. Your code should pass these tests:\n\nassert frequencies(['data','science','and','business'])==({'d':1,'a':2,'t':2,'s':2,'c':1,'n':2,'e':2,'b':1,'i':1,'o':1,'m':1})\r\nassert frequencies(['datascience','for','data','science'])==({'d':2,'t':2,'a':2,'s':3,'c':2,'e':2,'h"
  },
  {
    "id": 574,
    "instruction": "Write a python function to find missing and additional items from two lists. Your code should pass these tests:\n\nassert find_difference([1,2,3,4],[4,5,6]) == ([1,2,3],[5,6])\nassert find_difference([100,200,300],[300],[500]) == ([100,200],[500])"
  },
  {
    "id": 575,
    "instruction": "Write a code to find the value of x given the following constraints:\r\nx + y = 24\r\ny - z = 6\r\nx * y * z = 48\r\nHere is the correct implementation of the code exercise\r\n# code to find a solution to the above equations\r\n\r\n# function to find value of x \r\n\r\nfrom sympy import symbols\r\nfrom sympy import solve \r\n\r\na, b, c = symbols('a b c') \r\neq_1 = a + b - 24\r\neq_2 = b - c - 6"
  },
  {
    "id": 576,
    "instruction": "Write a function to find numbers divisible by 7 in a tuple. Your code should pass these tests:\n\nassert find_seven((20,21,7,4,6,9)) == (7, 21, 28)\r\nassert find_seven((20,31,6,4,16,71)) == (71, 28, 42)"
  },
  {
    "id": 577,
    "instruction": "Write a code which prints all subsets of a given string. Your code should pass these tests:\nassert subSet('A', 'ABC') == \"A A\"\r\nassert subSet('BC', 'ABC') == \"A A BC BC\"\r\nassert subSet('C', 'ABC') == \"A A B C C\"\r\nassert subSet('AB', 'ABC') == \"A A B B AB C AB\"\r\nExpected Output\r\nABC A BAB AB"
  },
  {
    "id": 578,
    "instruction": "Write the code to calculate the product of each element in list1 and list2 using for loop. Your code should pass these tests:\nassert product_lists([2, 4, 6, 8, 10], [3, 6, 9, 12, 15])==[6, 48, 48, 192, 1800]\r\nassert product_lists([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])==([6,"
  },
  {
    "id": 579,
    "instruction": "Write a code to create the following pattern using nested for loops:\r\n\r\n#     1\r\n#   234\r\n# 34567"
  },
  {
    "id": 580,
    "instruction": "Write a function to find the elements which are common to both lists. Your code should pass these tests:\n\nassert intersect_nums([1, 5, 2, 7, 4], [5, 10, 7, 12]) == [1, 2, 5, 7]\nassert intersect_nums([1, 5, 2, 7, 4], [5, 7, 10, 20, 4]) == [1, 2, 4, 5, 7]"
  },
  {
    "id": 581,
    "instruction": "Write a function to find the single number in a given string of numbers separated by commas and spaces. Your code should pass these tests:\n\nassert single_number(\"1,4,3,2,1,5\") == 4\r\nassert single_number(\"1\") == 1\r\nassert single_number(\"1,2\") == 2"
  },
  {
    "id": 582,
    "instruction": "Write a python function to replace missing values for each column with the column mean. Your code should pass these tests:\n\nassert cleansed.isna().sum().sum() == 0\r\nassert cleansed['Temperature'].isna().equals(df['Temperature'].isna())\r\nassert cleansed['Humidity'].isna().equals(df['Humidity'].isna())\r\nassert cleansed['Wind'].isna().equals(df['Wind'].isna())\r\nassert cleansed['PlayGolf'].isna().equals(df['PlayGolf'].isna())\r\n--------------------------------------------------"
  },
  {
    "id": 583,
    "instruction": "Write a Python code to find the sum of the digits of a given number. Your code should pass these tests:\nassert extract_sum_digits(8) == 1\r\nassert extract_sum_digits(43) == 6\r\nassert extract_sum_digits(245) == 10"
  },
  {
    "id": 584,
    "instruction": "Write a python function to find the middle character(s) out of a given string of even-length strings! Your code should pass these tests:\n\nassert middle_char(\"asdf\") == \"sd\"\r\nassert middle_char(\"asdfjkl\") == \"sj\""
  },
  {
    "id": 585,
    "instruction": "Write a python function to find the number of ways in which a number can be represented as the sum of the following consecutive integers: 2, 4, 6, 8, 10, 12,.... (Here, 2 is the first number) Your code here"
  },
  {
    "id": 586,
    "instruction": "Write a Python program to find the first repeated character in a string. Your code should pass these tests:\nassert find_repeat(\"aabcc\") == 'c'\r\nassert find_repeat(\"aabbbc\") == 'b'\r\nassert find_repeat(\"ab\") == 'a'"
  },
  {
    "id": 587,
    "instruction": "Write a python function to find the number of prime numbers smaller than 'n'. Your code should pass these tests:\n\nassert num_less_prime(10) == 5\r\nassert num_less_prime(15) == 8"
  },
  {
    "id": 588,
    "instruction": "Write a function to find the minimum number of multiplications needed to reach the end of the list from the beginning. Your code should pass these tests:\n\nassert find_minimum_multiplications([])==0\r\nassert find_minimum_multiplications([-2,-4,-5,-7])==5\r\nassert find_minimum_multiplications([3,-1,4,2])==2"
  },
  {
    "id": 589,
    "instruction": "Write a function to find the maximum profit from selling and buying values. Your code should pass these tests:\n\nassert buy_and_sell([9, 11, 8, 5, 7, 10]) == ([9, 11, 7, 5, 7, 10], 4)\r\nassert buy_and_sell([22, 31, 28, 25, 27, 30, 21, 19, 23]) == ([22, 31,"
  },
  {
    "id": 590,
    "instruction": "Write a function to find the minimum number of rotations required to get same string in a lexicographically sorted manner. Your code should pass these tests:\n\nassert minimum_rotations(\"abc\")==3\r\nassert minimum_rotations(\"abcd\")==3\r\nassert minimum_rotations(\"bc\")==2"
  },
  {
    "id": 591,
    "instruction": "Write your code here\n#Initial Template for Python 3\ndef mergeOverLapping(s):\n      \n    #code here\n    n=len(s)\n    m=max(len(set(s[:x+1])) for x in range(n))\n    return m\n\n#Contributed by <NAME>\nprint(mergeOverLapping([1,2,3,2,11,2,1]))"
  },
  {
    "id": 592,
    "instruction": "Write a python function to get a list of n numbers whose product is the maxmimum among all possible combinations of distinct numbers that is less than or equal to n. Your code should pass these tests:\n\nassert maximum_product([3,4,5,6,7])==[5,6,7]\r\nassert maximum_product([2,6,4,20,166])==[6,20,166]\r\nassert maximum_product([19,20,21,22,23])==[20,21,22"
  },
  {
    "id": 593,
    "instruction": "Write a function to find the minimum number of rotations required for the array to become sorted. Your code should pass these tests:\n\nassert len_min_rotations([45, 2, 3, 54, 38, 54, 12, 76, 89, 46, 57, 45, 98, 43, 98, 66, 38, 12, 59]) == 7\r\nassert len_min_rotations([57, 34,"
  },
  {
    "id": 594,
    "instruction": "Write a function to compute the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[ ][]. Your code should pass these tests:\n\n\nassert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)==13\r\nassert min_cost([[1, 4, 5, 3], [2, 8, 7, 4], [1, 5, 9, 3], [6, 7,"
  },
  {
    "id": 595,
    "instruction": "Write your code here\na = set([int(x) for x in input().split()])\r\nb = set([int(x) for x in input().split()])\r\ns = a.intersection(b)\r\nprint(len(s))"
  },
  {
    "id": 596,
    "instruction": "Write a python function to find the number of non-repeating characters in a given string. Your code should pass these tests:\nassert non_repeating_chars(\"abc\")==3\r\nassert non_repeating_chars(\"abac\")==5"
  },
  {
    "id": 597,
    "instruction": "Write a function to find the average of 2 numbers using max() where max() is performed on both given inputs. Your code should pass these tests:\n\nassert average_without_max(10,5)==7.5\nassert average_without_max(100,50)==75.0"
  },
  {
    "id": 598,
    "instruction": "Write a python function to select the nth largest element from a given list using heapSort. Your code should pass these tests:\r\nassert select_nth_largest(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],n=3)==[12,13,14]\r\nassert select_nth_largest(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14"
  },
  {
    "id": 599,
    "instruction": "Write a function to find all permutations of the given iterable elements and use the results to find the minimum number of deletions required for spelling the string \"I'm\" using the characters'm', 'e' and 'a'. Your code should pass these tests:\n\nassert set(permutations(\"Iam\")) == {'a','e','m','ma','em','ame'} \r\nassert minDeletions(\"iam\")==2"
  },
  {
    "id": 600,
    "instruction": "Write a function to reverse a given string. Your code should pass these tests:\n\nassert reverse_string('geeks')==('kergs') \nassert reverse_string('1234')==('4321') \nassert reverse_string('abcd')==('dcba')"
  },
  {
    "id": 601,
    "instruction": "Write a function to find the sum of all distinct even numbers from a given list using Map. Your code should pass these tests:\n\nassert find_even_numbers([1,5,4,6,8,45,6,8,4,3,1]) == 20\nassert find_even_numbers([2,4,6,8]) == 16"
  },
  {
    "id": 602,
    "instruction": "Write a function to find the maximum 2 numbers out of three numbers with their respective positions in the three parameters passed to the function using minimum comparisons. Your code should pass these tests:\n\nassert maximum2nums(1, 2, 3) == (3, 2)\r\nassert maximum2nums(5, 1, 3) == (5, 1)"
  },
  {
    "id": 603,
    "instruction": "Write a function to find the subarray with positive minimum in an array. Your code should pass these tests:\n\nassert min_subarray_sum([2, 3, -8, 7, -1, 2, 3, 1], 3) == 6\r\nassert min_subarray_sum([2, -3, -8, 7, -1, 2, 3, 1], 3) == 1\r\nassert min_subarray_sum([-7, 2, -3, -8, 7, -1, 2"
  },
  {
    "id": 604,
    "instruction": "Write a function to find whether a string contains consecutive identical characters or not. Your code should pass these tests:\n\nassert not is_consecutive_chars('Python3')\r\nassert is_consecutive_chars('aaaa')"
  },
  {
    "id": 605,
    "instruction": "Write a function to replace an element in a string with the next smallest lowercase character. Your code should pass these tests:\n\nassert replace_char('abc')=='abd'\r\nassert replace_char('ABC')=='Abc'"
  },
  {
    "id": 606,
    "instruction": "Write a python function to find second largest value in dictionary using heapq. Your code should pass these tests:\n\nassert max(heapq.nlargest(2, {'a': 3, 'b': 4})) == max(zip(heapq.nlargest(2, {'a': 3, 'b': 4}.values()), heapq.nlargest(2, {'a': 3, 'b': 4}.values()))) == {'b': 4}\nassert max(heapq.nlargest(2, {'a': 4, 'b': 4})) == max"
  },
  {
    "id": 607,
    "instruction": "Write a Python function to insert an item to a given position of a tuple. Your code should pass these tests:\n\nassert tuple1 == (7,4,6,2,8,3,1,5)\r\nassert tuple2 == (7,4,6,2,8,3,1,65,87,56)\r\nAnswer here"
  },
  {
    "id": 608,
    "instruction": "Write a function to count the number of unique characters in a given string. Your code should pass these tests:\n\nassert count_unique(\"abcd\")==2\r\nassert count_unique(\"leetcode\")==3"
  },
  {
    "id": 609,
    "instruction": "Write the code to create dictionaries called cities_country and countries_capital with country names as keys and capitals as values. Your code should pass these tests:\n\nassert'mumbai' == cities_country['india']\nassert 'delhi' == cities_country['west india']\r\nassert'mumbai' == countries_capital['India']\r\nassert 'delhi' == countries_capital['India']\r\nWrite the code to map the capital of India, Brazil and Russia using the list_1 and the list_2. Your code should"
  },
  {
    "id": 610,
    "instruction": "Write a function to find the min heap of an array using the following formula: heap_min_ele = arr[0] (Note: The first element of the array represents the root node of the heap), heap_min_ele is inserted at the first position of the given list arr and next element of the heap is inserted to next available position after the last non-leaf node of the min heap, and the same procedure is applied to insert the remaining elements of the array to the next non-leaf node till all the elements are inserted to the next non-leaf node. Your code here\r\n\r\ndef minHeap(arr):"
  },
  {
    "id": 611,
    "instruction": "Write a function to find the minimum number of coins required to make the change for x amount of dollars using the following denominations: $20, $50, $100 and $200. Your code should pass these tests:\n\nassert min_change(90) == 20\nassert min_change(157) == 20"
  },
  {
    "id": 612,
    "instruction": "Write a Python function to calculate the factors of a given number using recursion. Your code should pass these tests:\n\nassert 4 == count_factors(6) \r\nassert 3 == count_factors(12) \r\nassert 5 == count_factors(20) \r\nassert 5 == count_factors(35)"
  },
  {
    "id": 613,
    "instruction": "Write the correct code using find() method to find the index of 7 in the tuple x, using the given variable names:\n\nx = (2,5,8,7,9,6,8)\r\ncorrect_code = x.find(7)\r\nprint(correct_code)"
  },
  {
    "id": 614,
    "instruction": "Write a python function to find the length of the longest character subsequence\r\npresent in the two strings using Dynamic Programming approach. Your code should pass these tests:"
  },
  {
    "id": 615,
    "instruction": "Write a python function to get the root of a  quadratic equation having coefficient a,b,c using the method of imaginary numbers given below: Your code here\n\nimport cmath \r\ndef quad_root(a,b,c): \r\n  dis = b**2 - 4*a*c; \r\n  return( cmath.sqrt((b-dis)/2*a), cmath.sqrt((b+dis)/2*a)  )"
  },
  {
    "id": 616,
    "instruction": "Write a function to calculate the product of elements in a given list using generator. Your code should pass these tests:\n\nassert product([1,2,3,4]) == 24\r\nassert product([10,20]) == 200\r\nHere is the correct implementation of the code exercise\r\ndef product(num): \r\n\treturn reduce((lambda x, y: x * y), num)"
  },
  {
    "id": 617,
    "instruction": "Write a function to find the indices of the first and last occurrences of an element in a sorted list using binary search. Your code should pass these tests:\n\nassert first_and_last_occurrence([1,3,5,5,5,5,67,123,125], 5) == [2, 5]\r\nassert first_and_last_occurrence([1,3,5,5,5,5,67,123,125], 123) == [7, 7]"
  },
  {
    "id": 618,
    "instruction": "Write a python function to remove duplicates from a list\r\n\r\nExpected Input/Output:\r\nExample 1:\r\nInput: \r\nmy_list = [3, 4, 4, 4, 5, 4, 4, 6, 6]\r\nOutput: \r\nOriginal list:\r\n[3, 4, 4, 4, 5, 4, 4, 6, 6]\r\n\r\nList with duplicate elements removed:\r\n[3, 4, 4, 4, 5, 6]\r\n\r\nExample"
  },
  {
    "id": 619,
    "instruction": "Write a Python function to find first triangle number greater than a given number n. Your code should pass these tests:\n\nassert first_triangle_greater_than(13)==16\r\nassert 65>91"
  },
  {
    "id": 620,
    "instruction": "Write a class to find the least number of rotations required to reach the same position. Your code should pass these tests:\n\nassert Solution().cyclic_rotation(420, 3) == 5\r\nassert Solution().cyclic_rotation(3, 1) == 3\r\nassert Solution().cyclic_rotation(10, 5) == 3"
  },
  {
    "id": 621,
    "instruction": "Write a python function to find the number of unique elements from a given tuple. Your code should pass these tests:\n\nassert count_uniq_values((0,1,2,4,5,5,7,7,7,7,8,9)) == 7\r\nassert count_uniq_values((0,0,0,1,2,3)) == 4"
  },
  {
    "id": 622,
    "instruction": "Write a python function to find unique words from given string. Your code should pass these tests:\n\nassert getUniqWords(\"I love Data Structures and Algorithms\") == {'Data', 'Structures', 'Algorithms', 'I'}\r\nassert getUniqWords(\"Python is a famous programming language\") == {'Python', 'programming', 'famous', 'language', 'is', 'a'}"
  },
  {
    "id": 623,
    "instruction": "Write a Python function to find the middle-most letter of a string in lexicographical order. Your code should pass these tests:\n\nassert find_middle_letter(\"abc\") == \"b\"\r\nassert find_middle_letter(\"abdfbh\") == \"b\""
  },
  {
    "id": 624,
    "instruction": "Write a python function to concatenate elements in a tuple using addition operator. Your code should pass these tests:\n\nassert (\"a\",\"b\",\"c\") + (\"d\",\"e\",\"f\") == (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\") \nassert (\"p\",\"q\",\"r\") + (\"s\",\"t\",\"u\") == (\"p\",\"q\",\"r\",\"s\",\"t\",\"u\") \nassert (1,2,3) + (4,5,6) ==  (1, 2, 3, 4, 5, 6)"
  },
  {
    "id": 625,
    "instruction": "Write a function to find the missing number from the list of values:\r\n\r\ndef missing_number(arr):\r\nn = len(arr)\r\nsum = n*(n+1)//2\r\nreturn sum - sum(arr)"
  },
  {
    "id": 626,
    "instruction": "Write a Python function to find the difference of two lists. Your code should pass these tests:\nassert difference_of_list([1,2,3,4],[2,3,4,5]) == [1, 5]\r\nassert difference_of_list([1,2,3],[2,3,4,5]) == [1]\r\nassert difference_of_list([3,4,6],[2,3,4,5]) == [6]"
  },
  {
    "id": 627,
    "instruction": "Write a Python function to find an alphabet using index of the item of string. Your code should pass these tests:\n\nassert index_of_alphabet('google') == 1\r\nassert index_of_alphabet('data') == 3\r\nassert index_of_alphabet('alphabet') == 3\r\nassert index_of_alphabet('cython') == 2"
  },
  {
    "id": 628,
    "instruction": "Write a Python function to find words which are more than six characters and whose first and last character do not match from a sequence of words. Your code should pass these tests:\n\nassert find_char_long('<NAME> is the king')== ['<NAME>', 'king']\r\nassert find_char_long('<NAME>,the great')== ['<NAME>,']"
  },
  {
    "id": 629,
    "instruction": "Write a python function to find all pairs with a given sum in a given array of integers. Your code should pass these tests:\n\nassert pairs_sum([2, 1, 5, 2, 3, 4, 7, 9, 3],8)==[(1, 7), (2, 6), (3, 5), (2, 9)]\r\nassert pairs_sum([4,2,10,2,37,1,7,9,5],18)==[(7, 9), (2, 37), ("
  },
  {
    "id": 630,
    "instruction": "Write a function to find the number of ways you can fill the buckets to meet the demands of each customer. Your code should pass these tests:\n\nassert bucket_problem(3, [1, 5, 8], [2, 7]) == 6\r\nassert bucket_problem(3, [1, 7, 8, 9], [2, 6]) == 7"
  },
  {
    "id": 631,
    "instruction": "Write a code to find the elements at odd locations from the given set of strings. Your code should pass these tests:\n\nassert odd_elements(['Sunday', 'Monday', 'Tuesday', 'Wednesday']) == ['Sunday', 'Tuesday']\r\nassert odd_elements(['Rider', 'Monkey', 'Animal']) == ['Monkey','Animal']"
  },
  {
    "id": 632,
    "instruction": "Write a python function to find the largest element in a given list using two approaches:\r\nSolution:\r\n1) Here is the correct implementation of the code exercise\r\ndef find_largest(numbers): \r\n    largest = max(numbers) \r\n    return largest"
  },
  {
    "id": 633,
    "instruction": "Write a helper function to find the minimum of three numbers using a single conditional statement. Your code should pass these tests:\n\nassert min_of_three(20,30,40)==20\r\nassert min_of_three(20,10,30)==10\r\nassert min_of_three(50,15,45)==15"
  },
  {
    "id": 634,
    "instruction": "Write a Python class to create a new class X and two methods add and multiply. Your code should pass these tests:\n# Testing code\rassert X(19, 39, 27).add() == \"X is sum of digits of number 19 + digits of number 39 = 66\"\\nassert X(19, 39, 27).multiply() == \"X is product of digits of number 19 x digits of number 39 = 14891\"Here is the correct implementation of the code exercise\r\nclass X:\r\n  def"
  },
  {
    "id": 635,
    "instruction": "Write a python function to insert an item after the second last element in a given list. Your code should pass these tests:\n\nassert insert_after(nums, 6)==[10,22,34,6,7] \r\nassert insert_after(nums2,5)==[7,14,19,5]"
  },
  {
    "id": 636,
    "instruction": "Write a function to find the elements that appear in both tuple1 and tuple2. Your code should pass these tests:\n\nassert find_common([10, 20, 31, 40], [10, 21, 30, 42]) == (10, 30)\r\nassert find_common([10, 20, 31, 40], [11, 22, 30, 43]) == (30, )\r\nassert find_common([43, 42,"
  },
  {
    "id": 637,
    "instruction": "Write a function to reverse the k elements of a list using recursion. You can take input the list and reverse elements of a particular place as k as the parameters of the function:\n\ndef rev_k(k, list_ele):\n  if len(list_ele) <=1:\n    return list_ele\n  return rev_k(k,list_ele[k:]+list_ele[:k])\nprint(rev_k(2,[11,22,33,44,55]))"
  },
  {
    "id": 638,
    "instruction": "Write a python function to find the elements that are in common between two lists. Your code should pass these tests:\n\nassert intersection_of_lists([1,2,3,4],[2,3,5,6]) == [2,3]\r\nassert intersection_of_lists([1,2,3,4],[1,2,3,5]) == [1,2,3]"
  },
  {
    "id": 639,
    "instruction": "Write a python function to find the index of a given element in a given tuple. Your code should pass these tests:\n\nassert index_finder(10,(1,4,6,2,7,8,9,10))==3\r\nassert index_finder(10,(1,4,9,10))==2\r\nassert index_finder(4,(1,4,9,10))==1\r\n\r\n\r\ndef index_finder(ele,tup):\r\n  return tup.index(ele)"
  },
  {
    "id": 640,
    "instruction": "Write a function to find the size of the smallest value in the given list x using heapify. Your code should pass these tests:\n\nassert min_heap_for_smallest_value([0,1,2,3,4,5,6,7,8,9,10]) == 0\r\nassert min_heap_for_smallest_value([2,5,83,234,2345,6345,3457,6785,5634,2345,234]) == 2"
  },
  {
    "id": 641,
    "instruction": "Write a function to find the median among a few numbers. Your code should pass these tests:\n\nassert findMedian([5, 15, 19, 2, 8, 31, 61, 0, 14, 18]) == 8.0\r\nassert findMedian([5, 15, 19, 2, 8, 31, 61, 0, 14, 18, 20]) == 9.0\r\nassert findMedian([5, 15, 1"
  },
  {
    "id": 642,
    "instruction": "Write a function to find number of paths to reach origin from (m, n) using the following conditions. Your code should pass these tests:\n\nassert numberOfPaths(0, 0) == 2 \nassert numberOfPaths(1, 1) == 3 \nassert numberOfPaths(2, 2) == 7"
  },
  {
    "id": 643,
    "instruction": "Write a function to find the number of ways to fill it such that the sum of elements in the new formed shape equals the sum of elements in the triangle. Your code should pass these tests:\n\nassert countWays([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], 2) == 2\r\nassert countWays([[1,2,3,4],[5,6,7,8],[9,10,11,12],[10,15,20,30]], 5) =="
  },
  {
    "id": 644,
    "instruction": "Write a function to find minimum number of rotations required to get the same string. Your code should pass these tests:\n\nassert rotate(\"abc\") == 3\nassert rotate(\"def\") == 5"
  },
  {
    "id": 645,
    "instruction": "Write a function to find the square of an odd number from the given list using lambda function. Your code should pass these tests:\n\nassert square_nums == [25, 36, 49, 64]\r\nassert square_nums == square_nums_lambda\r\n\r\nimport code\r\ncode.py"
  },
  {
    "id": 646,
    "instruction": "Write a python function to find out whether the element occurs at odd or even positions in the list data using sort. Your code should pass these tests:\n\nassert count_occurrence_even([21,12,13,17,19,6,7])==3\r\nassert count_occurrence_odd([21,12,13,17,19,6,7])==4"
  },
  {
    "id": 647,
    "instruction": "Write a function to find and return the unique names from a dictionary d using the code explained above. Your code should pass these tests:\n\nassert set(get_unique_names(d)) == set({'Harsh', 'Anirudh', 'Vivek', 'Nikhil', 'Bhavya', 'Divya'})\r\nassert len(get_unique_names(d)) == 6"
  },
  {
    "id": 648,
    "instruction": "Write a function to find the minium cost path to reach (m,n) in a given cost matrix cost[][] and a position (m,n) in cost[][]. Your code should pass these tests:\n\nassert min_cost([[5, 4, 3, 8], [2, 4, 6, 9], [4, 7, 4, 9], [3, 6, 3, 6]],3,3)==7\r\nassert min_cost([[10, 3, 7, 6, 7], [13,"
  },
  {
    "id": 649,
    "instruction": "Write a Python function to find all the rotations of the string and find the index of the rotation given to the string. Your code should pass these tests:\n\nassert all_rotations(\"abc\")==['abc', 'bca', 'cab', 'abc', 'bca', 'cab', 'abc', 'bca', 'cab']\r\nassert index_of_rotation(\"abc\")==[0,1,2,0,1,2,0,1,2]\r\nYou can use the following code for this exercise. Please do not change the existing code.\r\n\r\n\r\ndef all_rotations(str"
  },
  {
    "id": 650,
    "instruction": "Write a function to find the n largest numbers from a given list using the heap queue implementation of a priority queue. Your code should pass these tests:\n\nassert heap_queue_largest(2,[4,3,1,2,11,23,32])==[32,23]\r\nassert heap_queue_largest(4,[4,10,9,8,7,6,3,11,1])==[11,10,9,8]\r\nassert heap_queue_largest(2,[4,3,1,2,1"
  },
  {
    "id": 651,
    "instruction": "Write a python function to find out the largest element in the list using heapify process. Your code should pass these tests:\n\nassert heap_algo(['e', 'b', 'c', 'a', 'g', 'd']) == 'g'\r\nassert heap_algo([15, 4, 5, 14, 1, 8, 9, 3, 2, 16, 17, 19, 12, 13, 18]) == 19"
  },
  {
    "id": 652,
    "instruction": "Write a function to find the absolute maximum value from a given list nums containing n numbers only using heap queue algorithm. Your code should pass these tests:\n\nassert max_heap_queue([9, 6, 5, 8, 10, 12, 11, 567, 43]) == 567\r\nassert max_heap_queue([43, 22, 5, 5, 342, 8, 1, 2]) == 567\r\ndef max_heap_queue(nums):"
  },
  {
    "id": 653,
    "instruction": "Write a function to find common elements from two dictionaries. Your code should pass these tests:\n\nassert common_elements({\"a\": 10, \"b\":20, \"c\":30}, {\"b\":40, \"c\":60, \"d\":80})== {\"b\":20, \"c\":30}\r\nassert common_elements({\"p\": 100, \"q\":200, \"r\":300}, {\"q\":400, \"s\":600, \"r\":800})== {\"r\":30"
  },
  {
    "id": 654,
    "instruction": "Write a function to find the second smallest element from a given list of numbers. Your code should pass these tests:\nassert secondsmallest([44,88,33,66,99,67,44])==66\r\nassert secondsmallest([4,88,33,66,54,67,4])==66\r\nassert secondsmallest([44,88,2,66,99,6,44])==59"
  },
  {
    "id": 655,
    "instruction": "Write a function to find a contiguous substring of minimum length whose 0-based index among all substrings is smallest. Your code here\r\n\r\ndef find_min_index(string):\r\n    indexs = [string.find(c) for c in string]  \r\n    zeros = [indexs.count(i) for i in indexs if i==min(indexs)]    \r\n    mi = min(zeros)\r\n    print(string[indexs.index(mi)])"
  },
  {
    "id": 656,
    "instruction": "Write a function to find the number of sub-strings in a string A with length k. Your code should pass these tests:\n\nassert numKLongStrings('aaadzz', 2) == 5\r\nassert numKLongStrings('abc', 2) == 3\r\nassert numKLongStrings('abc', 5) == 0"
  },
  {
    "id": 657,
    "instruction": "Write a Python function to find all words which are at least 4 characters long from a list of words. Your code should pass these tests:\n\nassert find_long_words(['abc', 'xyz', 'aba', '1221']) == ['abc', 'xyz', '1221']\r\nassert find_long_words(['mayuri','samaya','mayawi','samiju']) == ['mayuri','samaya','mayawi','samiju']"
  },
  {
    "id": 658,
    "instruction": "Write a python function to check if the given value is valid or invalid for the given conditions as mentioned below. Your code should pass these tests:\n\nassert is_invalid_value(3,2)==1\r\nassert is_invalid_value(3,3)==0\r\nassert is_invalid_value(4,4)==0"
  },
  {
    "id": 659,
    "instruction": "Write a Python function to find whether two numbers differ at oneBit or not. Your code should pass these tests:\n\nassert one_bit_difference(123, 65) == True\r\nassert one_bit_difference(23, 23) == False\r\ndef one_bit_difference(n1, n2):\r\n  return (n1 ^ n2) & ~(n1 ^ (n1 | n2))"
  },
  {
    "id": 660,
    "instruction": "Write a function to find the largest number present in a dictionary. Your code should pass these tests:\n\nassert find_largest_number({8:5, 4:6, 9:7, 6:45, 3:8})==45\r\nassert find_largest_number({56:55, 64:60, 11:15, 14:45, 23:8})==64"
  },
  {
    "id": 661,
    "instruction": "Write a function to find numbers between two numbers m and n that are coprime with n. Your code should pass these tests:\n\nassert find_coprime(1, 2) == 1\r\nassert find_coprime(2, 4) == 1\r\nassert find_coprime(4, 6) == 14"
  },
  {
    "id": 662,
    "instruction": "Write a Python function to find the square root of a number using Newton's method. Your code should pass these tests:\n\nassert math.isclose(mySqrt(9), 3.0)\r\nassert math.isclose(mySqrt(2), 1.414)"
  },
  {
    "id": 663,
    "instruction": "Write a python function to find the minimum value out of given numbers greater than 15. Your code should pass these tests:\n\nassert findMinNum(20,10)>15\r\nassert findMinNum(1,2,3,4,5)>15"
  },
  {
    "id": 664,
    "instruction": "Write a python function to find the numbers divisible by eleven and lie in the range 15 to 45. Your code should pass these tests:\nassert divisible_range(4)==4\r\nassert divisible_range(25)==30\r\nassert divisible_range(39)==None\r\nHere is the correct implementation of the code exercise\r\ndef divisible_range(k): \r\n  for i in range(15,46,11): \r\n    if(k % i == 0): \r\n      return i"
  },
  {
    "id": 665,
    "instruction": "Write a function to find the difference between the min and max values of the elements in the list. Your code should pass these tests:\nassert difference([10, 2, 30])==28\r\nassert difference([5, 20, 15])==15"
  },
  {
    "id": 666,
    "instruction": "Write a function to find the most frequent number in your code editor and pass [1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5] as an argument in the function. Your code should pass these tests:\n\nassert count_frequent([1,2,2,3,3,3,3,4,4,5,5,5,5]) == 3\r\nassert count_frequent([5,3,4,3,1,5,3,1,"
  },
  {
    "id": 667,
    "instruction": "Write a function to find the index of the first occurrence of the character 'H' from a given list of strings. Your code should pass these tests:\n\nassert find_char_index({'apple','orange','mango','jackfruit'}, 'H')==2\r\nassert find_char_index({\"python\", \"PHP\", \"JavaScript\"}, 'p')==0\r\nassert find_char_index({\"Java\", \"Go\", \"C#\"}, 'j')==2\r\ndef find_char_index(list1, char):\r\n  return list1.index(char)"
  },
  {
    "id": 668,
    "instruction": "Write a function to find common characters in these three given strings. Your code should pass these tests:\n\nassert common_characters(\"Hello\", \"Hello World\", \"Hi\") == 'Helo'\r\nassert common_characters('programming', 'Programming is very fun', 'progr')=='programming'\r\nassert common_characters('Python', 'Programming is very fun', 'pthon') =='Python'\r\nHere is the correct implementation of the code exercise\r\ndef common_characters(*input_str): \r\n\tcommon = input_str[0] \r\n\tfor i in range(1, len("
  },
  {
    "id": 669,
    "instruction": "Write a python function to find the minimum number of rotations required to get the same string. Your code should pass these tests:\n\nassert find_number_of_rotations('abab') == 2\r\nassert find_number_of_rotations('abc') == 3\r\ndef find_number_of_rotations(txt):\r\n  # Please add your code here\r\n  n = len(txt)\r\n  for i in range(1,n+1):\r\n    if txt==txt[i:]+txt[:i]:\r\n      return i"
  },
  {
    "id": 670,
    "instruction": "Write a python function to find the largest number from the given numbers. Your code should pass these tests:\n\nassert largest_multiple_of_4(12) == 12\r\nassert largest_multiple_of_4(16) == 16\r\nassert largest_multiple_of_4(32) == 32"
  },
  {
    "id": 671,
    "instruction": "Write a Python function to add items in a collection to the beginning of the same, maintaining order. Your code should pass these tests:\n\nassert _add_to_start([12, 15, 11, 68, 79, 91], 10)= [10, 12, 15, 11, 68, 79, 91]\r\nassert _add_to_start([10, 12, 15, 11, 68, 79, 91],"
  },
  {
    "id": 672,
    "instruction": "Write a function to check whether all alphabets of a string are present at least once in it or not. Your code should pass these tests:\n\nassert is_unique('google')==False\r\nassert is_unique('qwertyuiop')==False\r\nassert is_unique('qwerty')==True"
  },
  {
    "id": 673,
    "instruction": "Write a function to find whether two numbers differ at one bit position only or not. Your code should pass these tests:\n assert differ_at_one_bit_pos(1,3)==False \n assert differ_at_one_bit_pos(3,1)==False\r\n assert differ_at_one_bit_pos(5,13)==False"
  },
  {
    "id": 674,
    "instruction": "Write a Python function to find the second smallest number in a tuple. Your code should pass these tests:\n\nassert second_smallest((2, 4, 1, 5, 3)) == 2\r\nassert second_smallest((10, 9, 8, 7, 6)) == 7\r\nassert second_smallest((11, 12, 13, 1, 25)) == 1"
  },
  {
    "id": 675,
    "instruction": "Write a function to find all words overlapping between two words in string. Your code should pass these tests:\n\nassert find_overlaping_words(\"Let us take up space exploration\")==['space','exploration']\r\nassert find_overlaping_words(\"The youngster who invented the 2-D printing process\")==['2-D']"
  },
  {
    "id": 676,
    "instruction": "Write a function to find the number of possible ways to fill n glass vessels with wine and n loaves of bread. Your code should pass these tests:\n\n\nassert dp_ways(4,6)==17\r\nassert dp_ways(12,14) == 1633"
  },
  {
    "id": 677,
    "instruction": "Write a function to find the minimum number of rotations required to get the same string: Your code here\r\ndef check_rotation(text, string):\r\n  return (text+text).find(string)"
  },
  {
    "id": 678,
    "instruction": "Write a function to find the number of ways to fill it with 2 x 1 dominoes such that the number of equal sized domino columns in the array are minimum and columns are the same as the input array. Your code should pass these tests:\n\nassert number_of_ways(2, [[1,1,1,1],[2,1,1,1],[2,2,1,1],[2,2,2,1]],1) == 7  \nassert number_of_ways(2, [[1,1,1,1],[2,1,1,2"
  },
  {
    "id": 679,
    "instruction": "Write a Python function to find the number of equal characters from position three to position six in the string  string = \"w3resource\"\r\nYour code should pass these tests:\r\nassert find_char(\"Python\") == 3\r\nassert find_char(\"Java\") == None"
  },
  {
    "id": 680,
    "instruction": "Write a python function to calculate the mean and median of a python list containing number values. Your code should pass these tests:\n\nassert calculate_mean_median([1, 2, 3, 4, 5])==3\r\nassert calculate_mean_median([12, 323, 4, 5, 564575])==12883.0"
  },
  {
    "id": 681,
    "instruction": "Write a function to find the minimum number of rotations required for the string to be sorted. Your code should pass these tests:\n\nassert minimum_rotations(\"ab\")==1\r\nassert minimum_rotations(\"abc\")==3\r\nassert minimum_rotations(\"xy\")==2"
  },
  {
    "id": 682,
    "instruction": "Write a function to find a set of k numbers from n numbers which is minimized with the constraint that no pair of chosen numbers have the same square sum. Your code should pass these tests:\n\nassert find_square_numbers(4, 4) == {0, 1, 2, 3} \r\nassert find_square_numbers(4, 2) == {0, 1}"
  },
  {
    "id": 683,
    "instruction": "Write a Python function to print all even numbers from the numbers present in the list using lambda function. Your code should pass these tests:\n\nassert evens_lambda([3, 45, 56, 78, 23], n) == [45, 78]\r\nassert evens_lambda([1, 2, 3, 324232, 4, 435, 123], n) == [2, 4, 435]"
  },
  {
    "id": 684,
    "instruction": "Write a code to check whether two numbers nine and eight is present at different positions in list x or not? Your code should pass these tests:\n\nassert intersection(x,[0,9,-93,92,-92,53])==[9,8]==find_two_numbers([0,9,-93,92,-92,53],9,8)\r\nassert intersection(x,[2,-3,20])==[2],[2]\r\nassert intersection(x,[3,3,1,-22,-5,-19])==[3"
  },
  {
    "id": 685,
    "instruction": "Write a Python function to find the lowest and largest item in a given list. Your code should pass these tests:\n\nassert low_large([1,5,3,0,7,7,2,6,10])==([0,10])\r\nassert low_large([10,5,3,0,7,7,2,6,1])==([1,10])"
  },
  {
    "id": 686,
    "instruction": "Write a function to find out the maximum integer from a list of numbers using heap queue algorithm. Your code should pass these tests:\nassert maxHeapQueue([6, 7, 9, 3, 5]) == 9\nassert maxHeapQueue([3, 4, 5, 2, 10]) == 10\ndef maxHeapQueue(nums): \n        heap = [] \n      \n        # Insert element into heap \n        for num in nums: \n            heapElement = HeapElement(num) \n            heap.append(heapElement) \n      \n        # Create a max heap \n        heapq.heapify"
  },
  {
    "id": 687,
    "instruction": "Write a python function to find the second largest element from the given list using heap queue algorithm. Your code should pass these tests:\n\nassert second_largest([1,2,3,4,5,45,56,78,94,1,2,31])==56\r\nassert second_largest([51,12,41,15,66,12,51])==66\r\nassert second_largest([91,55,35,40,59,10,46])==59"
  },
  {
    "id": 688,
    "instruction": "Write a Python function to find whether a number is perfect square or not. Your code should pass these tests:\nassert check_perfect_square(1) == True \r\nassert check_perfect_square(4) == True"
  },
  {
    "id": 689,
    "instruction": "Write a class StockSpanner to identify the selling days using the below formula: Your code goes here"
  },
  {
    "id": 690,
    "instruction": "Write a function to find the maximum average subarray length k from the given array. Your code should pass these tests:\n\nassert find_max_average_subarray_length([1, 12, -5, -6, 50, 3], 2) == 4.0\r\nassert find_max_average_subarray_length([14, 21, 11, 1, 12, -200, 123], 4) == 2.75\r\nassert find_max_average_subarray_length"
  },
  {
    "id": 691,
    "instruction": "Write a python function to find the number of occurences of substring s2 in a string s1 using recursion. Your code should pass these tests:\n\nassert find_no_of_occurences('ABCABCD', 'ABC', 0) == 2\r\nassert find_no_of_occurences('ABCABCD', 'ABCC', 0) == 1\r\nassert find_no_of_occurences('ABCABCDE', 'ABC', 0) == 3"
  },
  {
    "id": 692,
    "instruction": "Write a function to find the frequency of an element in a tuple using index method. Your code should pass these tests:\nassert frequency_index((3, 6, 5, 3, 3, 10, 3),3)==4\r\nassert frequency_index((8,10,5,3,2,4,8,10),3)==2"
  },
  {
    "id": 693,
    "instruction": "Write a function to count the number of unique values there are in col_b of the DataFrame df. Your code should pass these tests:\n\n\nassert unique_val_count('c',df)==35\r\nassert unique_val_count('d',df)==21"
  },
  {
    "id": 694,
    "instruction": "Write a function to find the n smallest integers that are missing from an unsorted array. Your code should pass these tests:\n\nassert find_n_smallest([10, 15, 30, 35, 40, 45, 50, 80, 85, 90],5)==[10, 15, 30, 35, 40]\r\nassert find_n_smallest([7, 17, 19, 28, 29, 50,"
  },
  {
    "id": 695,
    "instruction": "Write a function to find words which are at least 2 character long in a list of words and return them in an array: Your code here\r\n\r\ndef find_words_longer_than_two(lista):\r\n \t# Your code here\r\n\treturn filter(lambda x:len(x)>=2,lista)"
  },
  {
    "id": 696,
    "instruction": "Write a function to update the count of items in the dictionary where value>3 to its square root. Your code should pass these tests:\n\nassert math.floor(my_dict[2]) > 3 \r\nassert math.floor(new_dict[2]) <= 3"
  },
  {
    "id": 697,
    "instruction": "Write a function to find the minimum number of rotations to rotate given string's' to the same string starting from the left. Your code should pass these tests:\n\nassert min_rotations(\"abc\") == 3\r\nassert min_rotations(\"abcd\") == 15\r\n-----------------------------------------------------------------------------------------------------------------"
  },
  {
    "id": 698,
    "instruction": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) if moves are allowed to be made in the up, down, left and right direction with no cost at boundaries. Your code should pass these tests:\n\nassert min_cost([[0, 3, 4], [2, 5, 8], [6, 9, 11]], 3, 3)==16\r\nassert min_cost([[2, 5, 8], [6, 9, 11], [0, 3, 4]],"
  },
  {
    "id": 699,
    "instruction": "Write a python function to find the numbers who are greater than 5 and divisible by 2 starting from 5 to n. Your code should pass these tests:\nassert find_numbers(12) == [10, 12, 14, 16, 18, 20]\r\nassert find_numbers(22) ==[10, 12, 14, 16,18, 20, 22, 24,26, 28, 30]"
  },
  {
    "id": 700,
    "instruction": "Write a Python function to count the number of non-prime numbers in the given list using Sieve of Eratosthenes algorithm. Your code should pass these tests:\n\nassert nth_fermat_number(1)==9\r\nassert nth_fermat_number(2)==35\r\nassert nth_fermat_number(3)==89"
  },
  {
    "id": 701,
    "instruction": "Write a python function to find the maximum number of the consecutive 0's in a binary number. Your code should pass these tests:\r\n\r\nassert maxConsecutiveOnes(0) == 0\r\nassert maxConsecutiveOnes(1) == 1\r\nassert maxConsecutiveOnes(1010) == 1"
  },
  {
    "id": 702,
    "instruction": "Write a python function to check the given string is of permutations of palindrome using recursion. Your code should pass these tests:\n\nassert permutation_of_palindrome(\"mommy\")\r\nassert permutation_of_palindrome(\"rotor\")\r\nassert not permutation_of_palindrome(\"abc\")\r\nassert not permutation_of_palindrome(\"ab\")"
  },
  {
    "id": 703,
    "instruction": "Write a python function to get the square sum. Your code should pass these tests:\n\nassert square_sum(2,2)==8\r\nassert square_sum(5,-2)==29"
  },
  {
    "id": 704,
    "instruction": "Write a method to shuffle a given linked list using Fisher Yates Shuffle Algorithm. Your code should pass these tests:\n\nassert linkedListToArray(shuffle(LinkedList(1, 2, 3, 4, 5)))== [1, 2, 3, 4, 5]\r\nassert linkedListToArray(shuffle(LinkedList(3, 4, 5)))== [3, 4, 5]\r\nassert linkedListToArray(shuffle(LinkedList(1, 2, 3)))== [1, 2, 3]\r\nHere is the"
  },
  {
    "id": 705,
    "instruction": "Write a python function to find the minimum number of variables to be changed to convert the expression from infix to postfix expression. Your code should pass these tests:\n\nassert min_operations('x+y')== 0\r\nassert min_operations('a+b*c')== 0\r\nassert min_operations('x+(y+z)')== 1"
  },
  {
    "id": 706,
    "instruction": "Write a python function to count the total count of sub-strings present in the given two strings. Your code should pass these tests:\nassert count_substring(\"Python Exercise\",\"yse E\")==2"
  },
  {
    "id": 707,
    "instruction": "Write a function to find the smallest integer factor of the given integer n. Your code should pass these tests:\n\nassert smallest_factor(15) == 3\r\nassert smallest_factor(49) == 7\r\nassert smallest_factor(1000) == 2\r\nHere is the correct implementation of the code exercise\r\ndef smallest_factor(n):\r\n\ti = 2\r\n\twhile i * i < n:\r\n\t\tif n % i == 0:\r\n\t\t\treturn i\r\n\t\ti += 1\r\n\treturn n"
  },
  {
    "id": 708,
    "instruction": "Write a function to find the maximum and minimum numbers from a given set of numbers using less than 2 lines of code. Your code should pass these tests:\n\nassert min_max([1,2,3,4,5])==(1,5)\r\nassert min_max([-1,-2,0,8,9])==(-2,9)"
  },
  {
    "id": 709,
    "instruction": "Write a Python function to compute the multiplicity of the specified element in a given array of numbers of integers. Your code should pass these tests:\n\nassert check_multiple(6, [1,2,3,4,5,6,7,8,9,10])==2\r\nassert check_multiple(4, [1,2,3,4,5,6,7,8,9,10,2,2,4,3,4])==4\r\nassert check_multiple(3, [1,2,3,4,3,3,2,"
  },
  {
    "id": 710,
    "instruction": "Write a python function to perform the steps mentioned above. Your code should pass these tests:\n\nassert apply_changes(0, 0, 0) == 13\r\nassert apply_changes(10, 37, 44) == 55\r\ndef apply_changes(old, new, total):\r\n  return  old * new - total\r\nP.S. Here is the correct implementation of the code exercise exercise"
  },
  {
    "id": 711,
    "instruction": "Write a function that updates the first half of the array with the squares of 2nd half of the given array if the elements at the right positions are negative. Your code should pass these tests:\n\nassert np.allclose(update_array_sqroot([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]), [10, 400, 900, 1600, 2500, 360"
  },
  {
    "id": 712,
    "instruction": "Write a python function to create 3X4 pandas dataframe from a dictionary where each list represent column. Your code should pass these tests:\n\nassert pd.DataFrame(list_column_list).shape == (3, 4)\r\nassert pd.DataFrame(list_column_list).shape == (1, 3)"
  },
  {
    "id": 713,
    "instruction": "Write a Python function to sort a number of elements present in a tuple using selection sort algorithm. Your code should pass these tests:\nassert selection_sort((4,9,3,5) == (3,4,5,9)\r\nassert selection_sort((4,9,3,5,10) == (3,4,5,9,10)\r\nassert selection_sort((4,9,3,5,10,11,20) == (2,3,4,5,9,10,11)"
  },
  {
    "id": 714,
    "instruction": "Write a python function to find all occurrences of x to y. Your code should pass these tests:\n\nassert find_occurence(10,16) == [10,11,12,13,14,15]\r\nassert find_occurence(190,82) == [190,258]\r\ndef find_occurence(x,y):"
  },
  {
    "id": 715,
    "instruction": "Write a Python function to swap two number without using third variable. Your code should pass these tests:\n\n\nassert swap_two_nums(100,200)==(200,100)\r\nassert swap_two_nums(2056,5985)==(5985,2056)\r\nassert swap_two_nums(11,12)==(12,11)\r\nHere is the correct implementation of the code exercise\r\ndef swap_two_nums(x,y): \r\n    '''\r\n    x: a number"
  },
  {
    "id": 716,
    "instruction": "Write a function to find first occurence of the number in arr and a boolean variable that indicates if the number was found or not. Your code should pass these tests:\r\n\r\nassert find_index([1, 2, 3, 4, 4, 5, 1], 1)==0\r\nassert find_index([1, 2, 3, 4, 4, 5, 1], 1, True)==True\r\nassert find_index([1, 2, 3, 4, 4, 5, 1], 2)=="
  },
  {
    "id": 717,
    "instruction": "Write a python function to check if the given numbers are equal or not. Your code should pass these tests:\n\nassert equal(1, 1) == True \r\nassert equal(1, 2) == False \r\nassert equal(10001, 10001) == True"
  },
  {
    "id": 718,
    "instruction": "Write a Python function to find maximum element and it's position in a given tuple using loop. Your code should pass these tests:\n\nassert find_max(1,20,(3,-1,-7,19,-18,2,9,12)) == (20, 3)\r\nassert find_max(1,2,(4,6)) == (6, 1)\r\ndef find_max(a, b, tup):\r\n  pos = -1\r\n  ans = a\r\n  for i in range(len(tup)):\r\n\t  if a <= tup[i] and tup"
  },
  {
    "id": 719,
    "instruction": "Write a function to find out the number of letters and non-letters separated in a string using regex and also the number of non-letters which are separated in a string using regex. Your code should pass these tests:\n\nassert count_letters(\"Hello World!!!\") == 9\r\nassert count_non_letters(\"Hello World!!!\") == 3"
  },
  {
    "id": 720,
    "instruction": "Write a function to find the smallest element in a nested list using a lambda function. Your code should pass these tests:\n\nassert smallest_element([[6,1,2,5,10],[2,5,150,12,3],[2,90,1,45,100]])==[2,1]\r\nassert smallest_element([[6,1,2,5,10],[2,5,150,12,3],[90,1,45,62,100]])==[1,1]"
  },
  {
    "id": 721,
    "instruction": "Write a function to create a dictionary using a lists of keys and values alternatively. Your code should pass these tests:\n\nassert create_dict(keys = [1,2,3],values = [3,4,5])=={1: 3, 2: 4, 3: 5}\r\nassert create_dict(keys = [11,12],values = [33,44])=={11: 33, 12: 44}\r\nassert create_dict(keys = [10,20,30,"
  },
  {
    "id": 722,
    "instruction": "Write a Python function to find the smallest sublist of a list having the largest sum. Your code should pass these tests:\n\nassert maxSum([1, 2, 3, -8, 10, 9, -8, 15, 12]) == [9, -8, 10, 9]\r\nassert maxSum([100, -20, 50, 103, 60, -30, 65, 120]) == [100, -20, 50,"
  },
  {
    "id": 723,
    "instruction": "Write a python function to check whether the string s is a palindrome. Your code should pass these tests:\n\nassert is_palindrome('abcba')==True\nassert is_palindrome('peter')==True"
  },
  {
    "id": 724,
    "instruction": "Write a decorator function for calculating the time taken by any function to execute using decorators. Your code should pass these tests:\n\nassert get_execution_time(example)==5\r\nassert get_execution_time(square_func)==14\r\n@save\r\ndef get_execution_time(func):\r\n  \"\"\"\r\n  This decorator prints the time taken by func\r\n  to execute\r\n  \"\"\"\r\n  \r\n  def wrapper(*args, **kwargs):\r\n    \r\n    # code for printing the time has been given here\r\n    \r\n    start_time = time.time()\r\n    func(*args, **kwargs)\r\n    print('time taken by', func.__name"
  },
  {
    "id": 725,
    "instruction": "Write a python function to find all the repeated characters from the string. Your code should pass these tests:\n\nassert all_repeated_characters(‘PyThon’) == ['y','n']\r\nassert all_repeated_characters(‘python’) == ['o']\r\nassert all_repeated_characters(‘java’) == []"
  },
  {
    "id": 726,
    "instruction": "Write a Python function to find the smallest positive integer divisor of a number other than 1 and itself. Your code should pass these tests:\n\nassert smallest_positive_divisor(10) == 2\r\nassert smallest_positive_divisor(15) == 3\r\nassert smallest_positive_divisor(12) == 2"
  },
  {
    "id": 727,
    "instruction": "Write a function to find top 10 most visited pages from given log file. Your code should pass these tests:\n\nassert next(visit_df.iterrows())[1]['/article2'] is not None\r\nassert len(visit_df.loc['/article']) == 62\r\nassert visit_df.columns.tolist() == ['hit_count', '/article', '/article2', '/article3']\r\nassert list(visit_df.index[visit_df.hit_count<30]) == ['/article', '/article2', '/article3']\r\n#"
  },
  {
    "id": 728,
    "instruction": "Write a function to find the last word in a string using split() function. Your code should pass these tests:\n\nassert find_last_word(\"Aaa bbb ccc ddd\") == \"ddd\nassert find_last_word(\"Aaa\") == \"Aaa"
  },
  {
    "id": 729,
    "instruction": "Write a python function to accept the 2 numbers as parameters and find their minimum value using lambda functions"
  },
  {
    "id": 730,
    "instruction": "Write a function to find the minimum time required to complete the tasks following these constraints:\r\n\r\nYou have one bicycle and can take one trip at a time. Both the bicycles need to return home with the same time.\r\nYou know the exact location of 3 locations: starting point, point where the first bicycle is picked up and point where the second bicycle is dropped off. Return the minimum time required to visit all the 3 locations. Your code should pass these tests:\r\n\r\nassert minimum_time(25.71,50.35,100."
  },
  {
    "id": 731,
    "instruction": "Write a python function to find the number of pairs in a given array whose sum is zero using the following algorithm:\r\n\r\n- Your code should pass these tests:\r\n\r\nassert zero_pairs([1, 1, 4, 2, -4], 1) == 2\r\nassert zero_pairs([2, 0, 1, -1, 3], 2) == 3\r\nassert zero_pairs([3, -1, 1, 0, 2], 3) == 3\r\nassert zero_pairs([1000, 10"
  },
  {
    "id": 732,
    "instruction": "Write a python function to find the largest sum in a given string. Your code should pass these tests:\n\nassert get_largest_sum(\"geeksforgeeks\") == 49\r\nassert get_largest_sum(\"s\") == 1\r\nassert get_largest_sum(\"sdcd\") == 5"
  },
  {
    "id": 733,
    "instruction": "Write a function to check whether the entered number is even or odd. Your code should pass these tests:\n\nassert check_evenOdd(5) == 'Even'\nassert check_evenOdd(3) == 'Odd'"
  },
  {
    "id": 734,
    "instruction": "Write a function to find the number of partitions of a given number n using the following formula. Your code should pass these tests:\n\nassert find_num_partitions(3) == 3\r\nassert find_num_partitions(5) == 10\r\nassert find_num_partitions(7) == 19"
  },
  {
    "id": 735,
    "instruction": "Write a function to check if the given list is palindrome or not. Your code should pass these tests:\nassert is_palindrome([1,2,2,1])==True\r\nassert is_palindrome([1,2,1])==False"
  },
  {
    "id": 736,
    "instruction": "Write a python function to calculate nCr % mod efficiently. Your code should pass these tests:\n\nassert nCr_mod(5, 1, 100) == 100\r\nassert nCr_mod(3, 2, 4) == 6"
  },
  {
    "id": 737,
    "instruction": "Write a function to calculate the result of applying square root to elements in given list using lambda function. Your code here\n\nFunction Code starts here\nsquare_root = lambda a: a**0.5\r\ndef square_root_list(lst):\r\n\tans = [] # empty list to store square roots\r\n\treturn(list(map(square_root, lst)))"
  },
  {
    "id": 738,
    "instruction": "Write a function to find the number of words that are at least 4 characters long from a given sequence of words. Your code should pass these tests:\nassert length_of_words(‘apple pie’,1)\nassert length_of_words([‘apple’,’pie’],2)==3"
  },
  {
    "id": 739,
    "instruction": "Write a function to find the minimum number of rotations required to get same string using two pointers approach:\r\n\r\ndef find_rotations(str):\r\n \r\n    n = len(str)\r\n    # Your code here\r\n    l, r = 0, 1\r\n    min_rotations = n\r\n    while r < n and l < n:\r\n        if str[l] == str[r]:\r\n            min_rotations = min(min_rotations, min(r - l, n - r))\r\n            r += 1\r\n        else:\r\n            l += 1\r\n    return min_rotations"
  },
  {
    "id": 740,
    "instruction": "Write a function to find out the number of zeroes at the head. Your code should pass these tests:\nassert count_zeroes([4, 10, 0, 0,12, 0]) ==2\r\nassert count_zeroes([0,0,22,44,33]) ==3"
  },
  {
    "id": 741,
    "instruction": "Write a function to extract the product of square of k elements from the given list of numbers using python lambda function. Your code should pass these tests:\n\nassert extract_squares_lambda([1,2,3,4,5,6,7,8,9,10],3) == [1,4,9,16,25,36,49,64,81]\r\nassert extract_squares_lambda([23,45,67,12,54,67,87,23,19,20,54"
  },
  {
    "id": 742,
    "instruction": "Write a function to match the keys from all the files of given dictionary. Your code should pass these tests:\n\nassert intersection(dicts) == actual_result_1\nassert intersection(dicts) == actual_result_2"
  },
  {
    "id": 743,
    "instruction": "Write a python function to find the numbers that are divisible by both three and six using single line of code. Your code should pass these tests:\nassert divisible_by_three_and_six(12) == [12]\r\nassert divisible_by_three_and_six(9) == [9]\r\nassert divisible_by_three_and_six(36) == [18, 24, 30, 36]"
  },
  {
    "id": 744,
    "instruction": "Write a class to find reverse of a number using iterations. Your code should pass these tests:\nassert ReversalOfNumber(123) == 321\r\nassert ReversalOfNumber(20) == 2"
  },
  {
    "id": 745,
    "instruction": "Write a function to find minimum cost path from (0, 0) to (n, m) with cost at each position value. Your code should pass these tests:\n\nassert min_cost([[1, 2, 3, 4],\r\n        [5, 6, 7, 8],\r\n        [9, 10, 11, 12],\r\n        [13, 14, 15, 16]], 10, 1, 2) == 10\r\nassert min_cost([[1, 2, 3,"
  },
  {
    "id": 746,
    "instruction": "Write a python function to find all numbers divisible by 7 in a given range and return them as a list. Your code should pass these tests:\n\nassert find_seven(20, 24) == [21, 23]\r\nassert find_seven(10, 35) == [14, 21, 28]\r\nassert find_seven(15, 20) == [17]\r\ndef find_seven(lower, upper):\r\n \r\n  # code goes here\r\n  res = [num for num in"
  },
  {
    "id": 747,
    "instruction": "Write a function to find top 3 files using sorted() and heapq. Note that heapq.nsmallest() is used to get the top 3 smallest elements only. Your code should pass these tests:\n\nassert top_3_files(file_size) == [('file_1', 13), ('file_2', 12), ('file_4', 11)]\r\nassert top_3_files(file_size) == [('file_3', 5), ('file_1', 13), ('file_4', 9)]\r\nHere is the"
  },
  {
    "id": 748,
    "instruction": "Write a Python function to sort a given Python list using Bubble Sort Logic. Your code should pass these tests:\n\nassert sort([9, 5, 3, 2])==[2, 3, 5, 9]\r\nassert sort([1, 1, 1, 0, 1, 0, 0,1])==[0, 0, 0, 1, 1, 1, 1, 1]"
  },
  {
    "id": 749,
    "instruction": "Write a function to find the first non-repetitive character in a given string. Your code should pass these tests:\nassert first_non_repeating('AaBbCc') == 'd'\r\nassert first_non_repeating('w3resource') == 'e'\r\nassert first_non_repeating('Python Exercises') == 'P'"
  },
  {
    "id": 750,
    "instruction": "Write a python function to print first non-repeating character in given string\n\nSample Output\n\nG"
  },
  {
    "id": 751,
    "instruction": "Write a python function to find the length of the smallest substring from the given sequence of characters which contains at least k distinct characters. Your code should pass these tests:\n\nassert find_length_of_smallest_subarray(\"aabccdaabbb\", 4) == 3 # Here aa is the smallest substring with 3 distinct characters. \r\nassert find_length_of_smallest_subarray(\"abbbb\", 2) == 4 # Here abbb is the smallest substring with 4 distinct characters."
  },
  {
    "id": 752,
    "instruction": "Write a function to find the minimum operations required to convert str1 to str2 in minimum steps. Your code should pass these tests:\nassert find_ops('geeks', 'gesek') == 2\r\nassert find_ops('aaa', 'ab') == 2 \r\nassert find_ops('abc', 'acb') == 3"
  },
  {
    "id": 753,
    "instruction": "Write a function to find minimum number of rotations required to make all characters of a string distinct: Your code here\n\ndef find_rotation_num(s): \r\n\tstart, res, len_s = 1, 1, len(s) \r\n\twhile (start < len_s): \r\n\t\tpattern = s[start:(start + res)] \r\n\t\tif ((len(pattern) < len_s) and (s == s[start:]+s[:start])): \r\n\t\t\tstart += res \r\n\t\t\tres = 1\r\n\t\telse: \r\n\t\t\tres += 1\r\n\treturn res"
  },
  {
    "id": 754,
    "instruction": "Write a python function to calculate the nth term of the A.P. series in the given order as shown in the code editor. Your code should pass these tests:\n\nassert find_nth_ap(5) == 185 \r\nassert find_nth_ap(10) == 541 \r\nassert find_nth_ap(8) == 363\r\nHere is the correct implementation of the code exercise\r\ndef find_nth_ap(n):\r\n    x=[1,2,3,4]\r\n    for i in range(2,n):\r\n        x."
  },
  {
    "id": 755,
    "instruction": "Write a function to find maximum of two numbers using bitwise operator?. Your code should pass these tests:\n\nassert bitwise_max(8,2)==8\r\nassert bitwise_max(32,16)==32"
  },
  {
    "id": 756,
    "instruction": "Write a function to calculate the mean of list of numbers using recursion. Your code should pass these tests:\nassert mean([1,2,3,4])==2.5\r\nassert mean([4,7,1,9])==5.25"
  },
  {
    "id": 757,
    "instruction": "Write a python function to find ngrams of a desired sequence length from a given list of tokens. Your code should pass these tests:\n\nassert(list(get_ngrams(['newto','world'],3))==[['newto','world']])\r\nassert(list(get_ngrams(['the','first','newto'],3))==[['the','first','newto'],['first','newto','world'],'newto',['the','first']])"
  },
  {
    "id": 758,
    "instruction": "Write a python function to find second maximum number from a given list of numbers. Your code should pass these tests:\n\nassert find_second_maximum([10,5,15,6,17,3,18,7,20])==17\r\nassert find_second_maximum([10,5,15,6,17,7,3,18,20])==18"
  },
  {
    "id": 759,
    "instruction": "Write a function to calculate the number of digits of a number passed as parameter. Your code should pass these tests:\n\nassert get_number_of_digits(123) == 3\r\nassert get_number_of_digits(456) == 3\r\nassert get_number_of_digits(111) == 3"
  },
  {
    "id": 760,
    "instruction": "Write a function to find the number of sublists in a given list that contains numbers smaller than the mean of the given list. Your code should pass these tests:\n\nassert find_smaller_than_mean_count([1,2,3,5,3,4,9,12]) == 3\r\nassert find_smaller_than_mean_count([0,-1,-5,10,87,39,14,-7,-4,-2]) == 5\r\ndef find_smaller_than_mean_count(nums):\r\n  mean=sum(nums)/len"
  },
  {
    "id": 761,
    "instruction": "Write a function to find the minimum distance between two points from the given sorted triplets. Your code should pass these tests:\n\nassert mindist([(4, 5, 6), (10, 12, 13), (20, 25, 26), (40, 43, 45)], 2) == 5\r\nassert mindist([(4, 5, 6), (10, 12, 13), (20, 25, 26), (40, 43, 4"
  },
  {
    "id": 762,
    "instruction": "Write a python function to find the common elements from the given two lists using intersection. Your code should pass these tests:\n\nassert common_elements([1,2,3,4,5],[1,3,4,6,7])==[1, 3, 4]\r\nassert common_elements([1,2,3,4,5],[6,7,8,9])==[]\r\nassert common_elements([1,2,3,4,5],[1,2,3,4,5])==[1, 2, 3, 4,"
  },
  {
    "id": 763,
    "instruction": "Write the correct statement to combine the names in a tuple into a sentence like the following:\r\nFirst name Last name\r\ns = 'John,Smith'\r\n' '.join(list(s))\r\ns.join(list(s))"
  },
  {
    "id": 764,
    "instruction": "Write a function to sum the items in the given key as 2nd parameter from the dictionary. Your code should pass these tests:\n\nassert sum_items({\"a\": 30, \"b\": 50}, \"a\")==30\nassert sum_items({\"a\": 30, \"b\": 50}, \"b\")==50"
  },
  {
    "id": 765,
    "instruction": "Write a python function to find a triplet such that the elements within the triplet are equal but the sum is the highest among the triplets. Your code should pass these tests:\n\nassert find_triplet([3, 5, 6, 8, 9, 10, 15, 16, 19], [6, 8, 10, 15, 16])== (3, 5, 6)\r\nassert find_triplet([3, 5, 6, 8, 9, 10,"
  },
  {
    "id": 766,
    "instruction": "Write a python function to find duplicate numbers among the list of numbers using set() and return a list containing duplicate items. Your code should pass these tests:\n\nassert remove_duplicates([1,2,3,4,5,6,6,6,7]) == [1,2,3,4,5,6,7] \r\nassert remove_duplicates([1,2,3,4,5,6,6,4,8,7,1,2,1,4,3,6]) == [1,2,3,4,5,6,7,8]"
  },
  {
    "id": 767,
    "instruction": "Write a python function to find the first index of given items from a list, and append the index values to a given list 'li'. Your code should pass these tests:\n\nassert [5,1,4] == li"
  },
  {
    "id": 768,
    "instruction": "Write a function to find the minimum cost path from a given source (tuple form: (x, y)) to destination (tuple form: (x, y)) to navigate through a given matrix. Your code should pass these tests:"
  },
  {
    "id": 769,
    "instruction": "Write a python function to check whether two characters are the same or not. Your code should pass these tests:\nassert is_same_character('t','a')==False\r\nassert is_same_character('a', 'a')==True\r\nassert is_same_character('e','v')==False"
  },
  {
    "id": 770,
    "instruction": "Write a python function to find the smallest positive missing number from a given list of numbers. Your code should pass these tests:\n\nassert smallest_positive_missing_number([2,3,4,-7,6,1,9])==5\r\nassert smallest_positive_missing_number([1,2,3,4,5,6,7,8,9,-1])==10\r\nassert smallest_positive_missing_number([1,2,3,4,5,6,7,8,9,10])==11\r\nHere is the correct implementation of"
  },
  {
    "id": 771,
    "instruction": "Write a python function to replace occurrences of numbers smaller than n by '#' (not 'n') in the given list using these methods: Your code Here"
  },
  {
    "id": 772,
    "instruction": "Write a function to find a square root of the parameter:\n\nEx: sqrt(36)=6.0\rdef sqrt(x):\r\n  if(x == 0):\r\n    return 0\r\n  low, high=1, x\r\n  ans = (high + low)/2\r\n  while(1):\r\n    ans = (high + low)/2\r\n    if(ans ** 2 > x):\r\n      high = ans \r\n    elif(ans ** 2 < x):\r\n      low = ans \r\n    elif(ans ** 2 ==x):\r\n      break\r\r\n  return ans"
  },
  {
    "id": 773,
    "instruction": "Write a function to find duplicates from an unsorted array. Your code should pass these tests:\n\nassert find_duplicates( [3, 3, 5, 4, 5, 5] )== [3, 5]\r\nassert find_duplicates( [9, 12, 13, 14, 14] )== [12, 13, 14]"
  },
  {
    "id": 774,
    "instruction": "Write a function to find the minimum range by using the formula - Minimum range = ((max(array) - min(array))/len(array)**0.5). Your code should pass these tests:\n\nassert minimum_range([10,20,30,10,25,35]) == 11\r\nassert minimum_range([10,20,10])== 1"
  },
  {
    "id": 775,
    "instruction": "Write a Python function to find the nth smallest number in a passed in array of numbers. Your code should pass these tests:\nassert kth_largest_num([37, 74, 35, 52, 65, 13, 58], 4) == 45\nassert kth_largest_num([12, 13, 34, 2, 5, 45, 4], 3) == 24"
  },
  {
    "id": 776,
    "instruction": "Write a Python function to find the min value out of a list using using heap queue algorithm. Your code should pass these tests:\nassert get_min([5,7,9,2,8])==2\r\nassert get_min([5,2,4,1,3])==1"
  },
  {
    "id": 777,
    "instruction": "Write a function to find the minimum number of rotations required for each and every array element. Your code should pass these tests:\n\nassert min_rotations([5,6,7,8,9,10,1,2,3,4]) == 3\r\nassert min_rotations([92, 61, 76, 23, 58, 85, 34, 26, 84, 3]) == 5\r\nassert min_rotations([10,28,55,44,53"
  },
  {
    "id": 778,
    "instruction": "Write a function to find numbers of substrings with the same characters in them. Your code should pass these tests:\n\nassert find_pairs(\"abcadfaef\") == 4\r\nassert find_pairs(\"aabb\") == 6"
  },
  {
    "id": 779,
    "instruction": "Write a python function to find the minimum number of numbers needed to represent each n digit number. Your code should pass these tests:\n\nassert n_digits(10) == 3 \r\nassert n_digits(25) == 3\r\nassert n_digits(98) == 4"
  },
  {
    "id": 780,
    "instruction": "Write your function in this cell\ndef most_common_in_subarrays(arr, k):\n  max_index = k + 2\n  result = max_index * [arr[0]] + k * [0]\n  curr_sum = 0\n  curr_indices = collections.deque([(0, 0)]) \n  window_sum = 0 \n  freq = {} \n  for index, num in enumerate(arr, 1):\n    curr_sum += num\n    curr_indices.append((index, curr_sum))\n    window_sum += num\n    if index > k + 1: \n      last"
  },
  {
    "id": 781,
    "instruction": "Write a function to find the min number of jumps required for a dairy cows to reach their destination from a starting point. Your code should pass these tests:\n\nassert jump_search([3, 7, 11, 15, 19, 23, 29, 35, 41, 49, 59], 35) == 6\r\nassert jump_search([3, 7, 11, 15, 19, 23, 29, 35, 41,"
  },
  {
    "id": 782,
    "instruction": "Write a function to find the minimum number of rotations required to convert a given string to its reverse. Your code should pass these tests:\n\nassert minimum_rotations(\"ab\")==2\nassert minimum_rotations(\"abc\")==3\nassert minimum_rotations(\"abcd\")==5"
  },
  {
    "id": 783,
    "instruction": "Write a function to find the transpose of a matrix using numpy. Your code should pass these tests:\n\nassert (transpose_matrix(np.array([[1, 2, 3], [4, 5, 6]])) == np.array([[1, 4], [2, 5], [3, 6]])).all()\r\nassert (transpose_matrix(np.array([[1, 2,3,4], [5, 6, 7, 8], [9, 10, 11, 12]])) == np.array([[1,"
  },
  {
    "id": 784,
    "instruction": "Write a function to find the minimum number of rotations required to get same string. Your code should pass these tests:\nassert number_rotations(\"ABC\") == 1\nassert number_rotations(\"ABCXYZ\") == 4"
  },
  {
    "id": 785,
    "instruction": "Write a python function to find whether all the characters in the given string are alphanumeric or not. Your code should pass these tests:\n\nassert is_alphanumeric(\"abcd.csv\")==False\r\nassert is_alphanumeric(\"John69\")==True"
  },
  {
    "id": 786,
    "instruction": "Write a function to check whether three numbers differ at one bit position only or not. Your code should pass these tests:\nassert differ_at_one_bit_pos(77,78,44) == True\r\nassert differ_at_one_bit_pos(11,14,15) == False\r\nassert differ_at_one_bit_pos(89,36,2) == False"
  },
  {
    "id": 787,
    "instruction": "Write a function to find the number of subarrays with even number of 0s. Your code should pass these tests:\nassert sub_array_Count([0, 0,        count += i//2\n    return count1, 0, 0]) == 2\r\nassert sub_array_Count([0, 1, 0, 0, 1, 0, 1, 1, 0, 0]) == 6\r\nassert sub_array_Count([0, 0, 0, 0]) == 1\r\nHere is"
  },
  {
    "id": 788,
    "instruction": "Write a function to find all possible words from dictionary which consist of digits only. Your code should pass these tests:\n\nassert findDigitsInWord([\"abc\",\"333\",\"a33\",\"ab3\"])==['333','a33','ab3']\r\nassert findDigitsInWord([\"j20p\", \"ja0p\", \"ji2y\", \"j2yo\", \"j20u\", \"jq20\", \"jy20\", \"jz20\", \"jn20\", \"jo20\"])==['j20p','j20u','jq"
  },
  {
    "id": 789,
    "instruction": "Write a python function to find whether sum of the squares of two numbers is greater than the square of their sum(Solution -1)\n\nHere is the correct implementation of the code exercise\ndef square_sum(a, b):\r\n  return (a * a) + (b * b)\r\n\r\ndef sum_square(x, y):\r\n  sum_square = (x+y)**2\r\n  square_sum = x**2 + y**2\r\n  return sum_square > square_sum"
  },
  {
    "id": 790,
    "instruction": "Write your function for the exercise here\r\ndef filter_long_words(lst,k):\r\n  return [i for i in lst if len(i)>=k]"
  },
  {
    "id": 791,
    "instruction": "Write your function here\ndef check_even(n):\r\n  return n%2==0"
  },
  {
    "id": 792,
    "instruction": "Write a function to find all pairs in list with given sum. Your code should pass these tests:\nassert pair_with_target_sum([3, 5, 2, -4, 8, 11, 1, -1, 6], 7)==[[1, 6], [2, -4], [3, 5]]\r\nassert pair_with_target_sum([3, 5, 2, -4, 8, 11, 1, -1, 6], 10)==[[1, 6], [2,"
  },
  {
    "id": 793,
    "instruction": "Write a Python function to check whether two numbers are co-prime or not. Your code should pass these tests:\n\nassert co_prime(35, 10)==False\r\nassert co_prime(11, 8)==False\r\nassert co_prime(15, 9)==True"
  },
  {
    "id": 794,
    "instruction": "Write a code to print all combinations of the two characters, ‘a’ and ‘b’ which are having odd sum and order is strictly increasing. Your code should pass these tests:\n\nassert 'ab02' in combinations_sum_order(['a', 'b'], 3)\r\nassert 'ab78' in combinations_sum_order(['a', 'b'], 11) \r\nassert combinations_sum_order(['a', 'b'], 10) == {'ab8'}"
  },
  {
    "id": 795,
    "instruction": "Write a python function to find the least number of rotations required to reach the same string using the minimum steps required in the following approach. Your code should pass these tests:\n\nassert Rotations(\"abc\")==3\r\nassert Rotations(\"abc\")==3\r\ndef Rotations(s):  \n    substring = s + s  \n    n = len(s) \n    for i in range(1,n + 1): \n        substring = substring[1:] + substring[0] \n        if ( substring == s): \n            return i"
  },
  {
    "id": 796,
    "instruction": "Write a python function to return the largest square less than or equal to a specified number. Your code should pass these tests:\n\nassert largest_square(25) == 5\r\nassert largest_square(36) == 6"
  },
  {
    "id": 797,
    "instruction": "Write a function to find the count of vowels in a given string. Your code should pass these tests:\nassert find_number_vowels(\"Thisisanurvowelstring\") == 5 # Here the output should be 5\r\nassert find_number_vowels(\"aeiouAEIOU\") == 10\r\ndef find_number_vowels(str1):\r\n  \"\"\"\r\n  :param str1: input string \r\n  :return: count of vowels\r\n  \"\"\"\r\n  return sum(x1 in \"aeiouAEIOU\" for x1 in str1)"
  },
  {
    "id": 798,
    "instruction": "Write a function to find all divisors for a given number. Your code should pass these tests:\n\nassert divisors == [1, 2, 3, 4, 6, 9, 12, 18, 36, 72, 81]\r\nassert divisors == [1, 2, 4, 5, 10]\r\nassert divisors == [1]\r\nHere is the correct implementation of the code exercise exercise\r\n\r\n\r\ndef divisors(n): \r\n      \r\n    div_by_2 ="
  },
  {
    "id": 799,
    "instruction": "Write a python function to find squares of individual elements stored in a dictionary. Your code should pass these tests:\n\nassert square_dictionary(nums) == square_dict"
  }
]